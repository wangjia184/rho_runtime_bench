<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1462" onload="init(evt)" viewBox="0 0 1200 1462" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1462" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1445.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1445.00"> </text><svg id="frames" x="10" width="1180"><g><title>perf (5 samples, 0.09%)</title><rect x="0.0000%" y="1397" width="0.0873%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="1407.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.09%)</title><rect x="0.0000%" y="1381" width="0.0873%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="1391.50"></text></g><g><title>do_syscall_64 (5 samples, 0.09%)</title><rect x="0.0000%" y="1365" width="0.0873%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="1375.50"></text></g><g><title>__x64_sys_execve (5 samples, 0.09%)</title><rect x="0.0000%" y="1349" width="0.0873%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="1359.50"></text></g><g><title>__do_execve_file.isra.0 (5 samples, 0.09%)</title><rect x="0.0000%" y="1333" width="0.0873%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="1343.50"></text></g><g><title>exec_binprm (5 samples, 0.09%)</title><rect x="0.0000%" y="1317" width="0.0873%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="1327.50"></text></g><g><title>load_elf_binary (5 samples, 0.09%)</title><rect x="0.0000%" y="1301" width="0.0873%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="1311.50"></text></g><g><title>begin_new_exec (5 samples, 0.09%)</title><rect x="0.0000%" y="1285" width="0.0873%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="1295.50"></text></g><g><title>perf_event_exec (5 samples, 0.09%)</title><rect x="0.0000%" y="1269" width="0.0873%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="1279.50"></text></g><g><title>ctx_resched (5 samples, 0.09%)</title><rect x="0.0000%" y="1253" width="0.0873%" height="15" fill="rgb(220,122,19)"/><text x="0.2500%" y="1263.50"></text></g><g><title>perf_pmu_enable.part.0 (5 samples, 0.09%)</title><rect x="0.0000%" y="1237" width="0.0873%" height="15" fill="rgb(250,228,42)"/><text x="0.2500%" y="1247.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.09%)</title><rect x="0.0000%" y="1221" width="0.0873%" height="15" fill="rgb(240,193,28)"/><text x="0.2500%" y="1231.50"></text></g><g><title>intel_pmu_enable_all (5 samples, 0.09%)</title><rect x="0.0000%" y="1205" width="0.0873%" height="15" fill="rgb(216,20,37)"/><text x="0.2500%" y="1215.50"></text></g><g><title>native_write_msr (5 samples, 0.09%)</title><rect x="0.0000%" y="1189" width="0.0873%" height="15" fill="rgb(206,188,39)"/><text x="0.2500%" y="1199.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="0.0873%" y="1365" width="0.0175%" height="15" fill="rgb(217,207,13)"/><text x="0.3373%" y="1375.50"></text></g><g><title>rho_runtime::storage::coordinator::Coordinator::get_or_create_cell_slot (1 samples, 0.02%)</title><rect x="0.1047%" y="1365" width="0.0175%" height="15" fill="rgb(231,73,38)"/><text x="0.3547%" y="1375.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.02%)</title><rect x="0.1047%" y="1349" width="0.0175%" height="15" fill="rgb(225,20,46)"/><text x="0.3547%" y="1359.50"></text></g><g><title>[[stack]] (3 samples, 0.05%)</title><rect x="0.0873%" y="1381" width="0.0524%" height="15" fill="rgb(210,31,41)"/><text x="0.3373%" y="1391.50"></text></g><g><title>rho_runtime::storage::coordinator::Coordinator::run::{{closure}} (1 samples, 0.02%)</title><rect x="0.1222%" y="1365" width="0.0175%" height="15" fill="rgb(221,200,47)"/><text x="0.3722%" y="1375.50"></text></g><g><title>rho_runtime::storage::coordinator::Coordinator::handle_produce (1 samples, 0.02%)</title><rect x="0.1222%" y="1349" width="0.0175%" height="15" fill="rgb(226,26,5)"/><text x="0.3722%" y="1359.50"></text></g><g><title>tokio::task::spawn::spawn (1 samples, 0.02%)</title><rect x="0.1222%" y="1333" width="0.0175%" height="15" fill="rgb(249,33,26)"/><text x="0.3722%" y="1343.50"></text></g><g><title>tokio::runtime::spawner::Spawner::spawn (1 samples, 0.02%)</title><rect x="0.1222%" y="1317" width="0.0175%" height="15" fill="rgb(235,183,28)"/><text x="0.3722%" y="1327.50"></text></g><g><title>__rg_alloc (1 samples, 0.02%)</title><rect x="0.1222%" y="1301" width="0.0175%" height="15" fill="rgb(221,5,38)"/><text x="0.3722%" y="1311.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.02%)</title><rect x="0.1222%" y="1285" width="0.0175%" height="15" fill="rgb(247,18,42)"/><text x="0.3722%" y="1295.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.02%)</title><rect x="0.1397%" y="1365" width="0.0175%" height="15" fill="rgb(241,131,45)"/><text x="0.3897%" y="1375.50"></text></g><g><title>rho_runtime::storage::coordinator::Coordinator::get_or_create_cell_slot (1 samples, 0.02%)</title><rect x="0.1571%" y="1365" width="0.0175%" height="15" fill="rgb(249,31,29)"/><text x="0.4071%" y="1375.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.02%)</title><rect x="0.1571%" y="1349" width="0.0175%" height="15" fill="rgb(225,111,53)"/><text x="0.4071%" y="1359.50"></text></g><g><title>syscall (1 samples, 0.02%)</title><rect x="0.1746%" y="1365" width="0.0175%" height="15" fill="rgb(238,160,17)"/><text x="0.4246%" y="1375.50"></text></g><g><title>[anon] (4 samples, 0.07%)</title><rect x="0.1397%" y="1381" width="0.0698%" height="15" fill="rgb(214,148,48)"/><text x="0.3897%" y="1391.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::notify_parked (1 samples, 0.02%)</title><rect x="0.1920%" y="1365" width="0.0175%" height="15" fill="rgb(232,36,49)"/><text x="0.4420%" y="1375.50"></text></g><g><title>[rho_runtime] (1 samples, 0.02%)</title><rect x="0.2095%" y="1381" width="0.0175%" height="15" fill="rgb(209,103,24)"/><text x="0.4595%" y="1391.50"></text></g><g><title>syscall (1 samples, 0.02%)</title><rect x="0.2095%" y="1365" width="0.0175%" height="15" fill="rgb(229,88,8)"/><text x="0.4595%" y="1375.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.02%)</title><rect x="0.2095%" y="1349" width="0.0175%" height="15" fill="rgb(213,181,19)"/><text x="0.4595%" y="1359.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (6 samples, 0.10%)</title><rect x="0.2968%" y="1285" width="0.1047%" height="15" fill="rgb(254,191,54)"/><text x="0.5468%" y="1295.50"></text></g><g><title>tokio::park::thread::clone (6 samples, 0.10%)</title><rect x="0.2968%" y="1269" width="0.1047%" height="15" fill="rgb(241,83,37)"/><text x="0.5468%" y="1279.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.10%)</title><rect x="0.2968%" y="1253" width="0.1047%" height="15" fill="rgb(233,36,39)"/><text x="0.5468%" y="1263.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (6 samples, 0.10%)</title><rect x="0.2968%" y="1237" width="0.1047%" height="15" fill="rgb(226,3,54)"/><text x="0.5468%" y="1247.50"></text></g><g><title>core::sync::atomic::atomic_add (6 samples, 0.10%)</title><rect x="0.2968%" y="1221" width="0.1047%" height="15" fill="rgb(245,192,40)"/><text x="0.5468%" y="1231.50"></text></g><g><title>core::mem::drop (17 samples, 0.30%)</title><rect x="0.4015%" y="1285" width="0.2968%" height="15" fill="rgb(238,167,29)"/><text x="0.6515%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::util::linked_list::LinkedList&lt;tokio::sync::notify::Waiter,tokio::sync::notify::Waiter&gt;&gt;&gt; (17 samples, 0.30%)</title><rect x="0.4015%" y="1269" width="0.2968%" height="15" fill="rgb(232,182,51)"/><text x="0.6515%" y="1279.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.30%)</title><rect x="0.4015%" y="1253" width="0.2968%" height="15" fill="rgb(231,60,39)"/><text x="0.6515%" y="1263.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (17 samples, 0.30%)</title><rect x="0.4015%" y="1237" width="0.2968%" height="15" fill="rgb(208,69,12)"/><text x="0.6515%" y="1247.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (16 samples, 0.28%)</title><rect x="0.4190%" y="1221" width="0.2793%" height="15" fill="rgb(235,93,37)"/><text x="0.6690%" y="1231.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (16 samples, 0.28%)</title><rect x="0.4190%" y="1205" width="0.2793%" height="15" fill="rgb(213,116,39)"/><text x="0.6690%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::util::linked_list::LinkedList&lt;tokio::sync::notify::Waiter,tokio::sync::notify::Waiter&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="0.6983%" y="1285" width="0.0175%" height="15" fill="rgb(222,207,29)"/><text x="0.9483%" y="1295.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="0.6983%" y="1269" width="0.0175%" height="15" fill="rgb(206,96,30)"/><text x="0.9483%" y="1279.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (1 samples, 0.02%)</title><rect x="0.6983%" y="1253" width="0.0175%" height="15" fill="rgb(218,138,4)"/><text x="0.9483%" y="1263.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (1 samples, 0.02%)</title><rect x="0.6983%" y="1237" width="0.0175%" height="15" fill="rgb(250,191,14)"/><text x="0.9483%" y="1247.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.02%)</title><rect x="0.6983%" y="1221" width="0.0175%" height="15" fill="rgb(239,60,40)"/><text x="0.9483%" y="1231.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (5 samples, 0.09%)</title><rect x="0.7158%" y="1285" width="0.0873%" height="15" fill="rgb(206,27,48)"/><text x="0.9658%" y="1295.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (5 samples, 0.09%)</title><rect x="0.7158%" y="1269" width="0.0873%" height="15" fill="rgb(225,35,8)"/><text x="0.9658%" y="1279.50"></text></g><g><title>&lt;tokio::sync::notify::Notified as core::future::future::Future&gt;::poll (40 samples, 0.70%)</title><rect x="0.2793%" y="1301" width="0.6983%" height="15" fill="rgb(250,213,24)"/><text x="0.5293%" y="1311.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (10 samples, 0.17%)</title><rect x="0.8031%" y="1285" width="0.1746%" height="15" fill="rgb(247,123,22)"/><text x="1.0531%" y="1295.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (10 samples, 0.17%)</title><rect x="0.8031%" y="1269" width="0.1746%" height="15" fill="rgb(231,138,38)"/><text x="1.0531%" y="1279.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (10 samples, 0.17%)</title><rect x="0.8031%" y="1253" width="0.1746%" height="15" fill="rgb(231,145,46)"/><text x="1.0531%" y="1263.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (10 samples, 0.17%)</title><rect x="0.8031%" y="1237" width="0.1746%" height="15" fill="rgb(251,118,11)"/><text x="1.0531%" y="1247.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (10 samples, 0.17%)</title><rect x="0.8031%" y="1221" width="0.1746%" height="15" fill="rgb(217,147,25)"/><text x="1.0531%" y="1231.50"></text></g><g><title>[libc-2.31.so] (4 samples, 0.07%)</title><rect x="0.9777%" y="1301" width="0.0698%" height="15" fill="rgb(247,81,37)"/><text x="1.2277%" y="1311.50"></text></g><g><title>[libc-2.31.so] (17 samples, 0.30%)</title><rect x="1.1348%" y="1285" width="0.2968%" height="15" fill="rgb(209,12,38)"/><text x="1.3848%" y="1295.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (12 samples, 0.21%)</title><rect x="1.4316%" y="1285" width="0.2095%" height="15" fill="rgb(227,1,9)"/><text x="1.6816%" y="1295.50"></text></g><g><title>core::ptr::read (12 samples, 0.21%)</title><rect x="1.4316%" y="1269" width="0.2095%" height="15" fill="rgb(248,47,43)"/><text x="1.6816%" y="1279.50"></text></g><g><title>[libc-2.31.so] (12 samples, 0.21%)</title><rect x="1.4316%" y="1253" width="0.2095%" height="15" fill="rgb(221,10,30)"/><text x="1.6816%" y="1263.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (2 samples, 0.03%)</title><rect x="1.6411%" y="1285" width="0.0349%" height="15" fill="rgb(210,229,1)"/><text x="1.8911%" y="1295.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (2 samples, 0.03%)</title><rect x="1.6411%" y="1269" width="0.0349%" height="15" fill="rgb(222,148,37)"/><text x="1.8911%" y="1279.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (13 samples, 0.23%)</title><rect x="1.6760%" y="1285" width="0.2270%" height="15" fill="rgb(234,67,33)"/><text x="1.9260%" y="1295.50"></text></g><g><title>core::sync::atomic::atomic_load (13 samples, 0.23%)</title><rect x="1.6760%" y="1269" width="0.2270%" height="15" fill="rgb(247,98,35)"/><text x="1.9260%" y="1279.50"></text></g><g><title>core::sync::atomic::fence (8 samples, 0.14%)</title><rect x="1.9029%" y="1285" width="0.1397%" height="15" fill="rgb(247,138,52)"/><text x="2.1529%" y="1295.50"></text></g><g><title>crossbeam_queue::array_queue::ArrayQueue&lt;T&gt;::pop (58 samples, 1.01%)</title><rect x="1.0475%" y="1301" width="1.0126%" height="15" fill="rgb(213,79,30)"/><text x="1.2975%" y="1311.50"></text></g><g><title>crossbeam_utils::backoff::Backoff::spin (1 samples, 0.02%)</title><rect x="2.0426%" y="1285" width="0.0175%" height="15" fill="rgb(246,177,23)"/><text x="2.2926%" y="1295.50"></text></g><g><title>core::sync::atomic::spin_loop_hint (1 samples, 0.02%)</title><rect x="2.0426%" y="1269" width="0.0175%" height="15" fill="rgb(230,62,27)"/><text x="2.2926%" y="1279.50"></text></g><g><title>core::hint::spin_loop (1 samples, 0.02%)</title><rect x="2.0426%" y="1253" width="0.0175%" height="15" fill="rgb(216,154,8)"/><text x="2.2926%" y="1263.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (1 samples, 0.02%)</title><rect x="2.0426%" y="1237" width="0.0175%" height="15" fill="rgb(244,35,45)"/><text x="2.2926%" y="1247.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (2 samples, 0.03%)</title><rect x="2.0601%" y="1301" width="0.0349%" height="15" fill="rgb(251,115,12)"/><text x="2.3101%" y="1311.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (2 samples, 0.03%)</title><rect x="2.0601%" y="1285" width="0.0349%" height="15" fill="rgb(240,54,50)"/><text x="2.3101%" y="1295.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (2 samples, 0.03%)</title><rect x="2.0601%" y="1269" width="0.0349%" height="15" fill="rgb(233,84,52)"/><text x="2.3101%" y="1279.50"></text></g><g><title>syscall (2 samples, 0.03%)</title><rect x="2.0601%" y="1253" width="0.0349%" height="15" fill="rgb(207,117,47)"/><text x="2.3101%" y="1263.50"></text></g><g><title>entry_SYSCALL_64 (2 samples, 0.03%)</title><rect x="2.0601%" y="1237" width="0.0349%" height="15" fill="rgb(249,43,39)"/><text x="2.3101%" y="1247.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="2.1648%" y="1221" width="0.0175%" height="15" fill="rgb(209,38,44)"/><text x="2.4148%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::bucket (1 samples, 0.02%)</title><rect x="2.1648%" y="1205" width="0.0175%" height="15" fill="rgb(236,212,23)"/><text x="2.4148%" y="1215.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.02%)</title><rect x="2.1648%" y="1189" width="0.0175%" height="15" fill="rgb(242,79,21)"/><text x="2.4148%" y="1199.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.02%)</title><rect x="2.1648%" y="1173" width="0.0175%" height="15" fill="rgb(211,96,35)"/><text x="2.4148%" y="1183.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.02%)</title><rect x="2.1648%" y="1157" width="0.0175%" height="15" fill="rgb(253,215,40)"/><text x="2.4148%" y="1167.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::iter_hash (1 samples, 0.02%)</title><rect x="2.1823%" y="1221" width="0.0175%" height="15" fill="rgb(211,81,21)"/><text x="2.4323%" y="1231.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="2.1823%" y="1205" width="0.0175%" height="15" fill="rgb(208,190,38)"/><text x="2.4323%" y="1215.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.02%)</title><rect x="2.1823%" y="1189" width="0.0175%" height="15" fill="rgb(235,213,38)"/><text x="2.4323%" y="1199.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 0.02%)</title><rect x="2.1823%" y="1173" width="0.0175%" height="15" fill="rgb(237,122,38)"/><text x="2.4323%" y="1183.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (1 samples, 0.02%)</title><rect x="2.1823%" y="1157" width="0.0175%" height="15" fill="rgb(244,218,35)"/><text x="2.4323%" y="1167.50"></text></g><g><title>core::core_arch::simd::i8x16::new (1 samples, 0.02%)</title><rect x="2.1823%" y="1141" width="0.0175%" height="15" fill="rgb(240,68,47)"/><text x="2.4323%" y="1151.50"></text></g><g><title>rho_runtime::storage::coordinator::Coordinator::get_or_create_cell_slot (8 samples, 0.14%)</title><rect x="2.1299%" y="1285" width="0.1397%" height="15" fill="rgb(210,16,53)"/><text x="2.3799%" y="1295.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (7 samples, 0.12%)</title><rect x="2.1473%" y="1269" width="0.1222%" height="15" fill="rgb(235,124,12)"/><text x="2.3973%" y="1279.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry (6 samples, 0.10%)</title><rect x="2.1648%" y="1253" width="0.1047%" height="15" fill="rgb(224,169,11)"/><text x="2.4148%" y="1263.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (6 samples, 0.10%)</title><rect x="2.1648%" y="1237" width="0.1047%" height="15" fill="rgb(250,166,2)"/><text x="2.4148%" y="1247.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry::{{closure}} (4 samples, 0.07%)</title><rect x="2.1997%" y="1221" width="0.0698%" height="15" fill="rgb(242,216,29)"/><text x="2.4497%" y="1231.50"></text></g><g><title>&lt;blake3::Hash as core::cmp::PartialEq&gt;::eq (4 samples, 0.07%)</title><rect x="2.1997%" y="1205" width="0.0698%" height="15" fill="rgb(230,116,27)"/><text x="2.4497%" y="1215.50"></text></g><g><title>constant_time_eq::constant_time_eq_32 (4 samples, 0.07%)</title><rect x="2.1997%" y="1189" width="0.0698%" height="15" fill="rgb(228,99,48)"/><text x="2.4497%" y="1199.50"></text></g><g><title>constant_time_eq::constant_time_ne_32 (4 samples, 0.07%)</title><rect x="2.1997%" y="1173" width="0.0698%" height="15" fill="rgb(253,11,6)"/><text x="2.4497%" y="1183.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter (1 samples, 0.02%)</title><rect x="2.2696%" y="1285" width="0.0175%" height="15" fill="rgb(247,143,39)"/><text x="2.5196%" y="1295.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::iter (1 samples, 0.02%)</title><rect x="2.2696%" y="1269" width="0.0175%" height="15" fill="rgb(236,97,10)"/><text x="2.5196%" y="1279.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::iter (1 samples, 0.02%)</title><rect x="2.2696%" y="1253" width="0.0175%" height="15" fill="rgb(233,208,19)"/><text x="2.5196%" y="1263.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="2.2696%" y="1237" width="0.0175%" height="15" fill="rgb(216,164,2)"/><text x="2.5196%" y="1247.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (1 samples, 0.02%)</title><rect x="2.2696%" y="1221" width="0.0175%" height="15" fill="rgb(220,129,5)"/><text x="2.5196%" y="1231.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (1 samples, 0.02%)</title><rect x="2.2696%" y="1205" width="0.0175%" height="15" fill="rgb(242,17,10)"/><text x="2.5196%" y="1215.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (10 samples, 0.17%)</title><rect x="2.2870%" y="1269" width="0.1746%" height="15" fill="rgb(242,107,0)"/><text x="2.5370%" y="1279.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (10 samples, 0.17%)</title><rect x="2.2870%" y="1253" width="0.1746%" height="15" fill="rgb(251,28,31)"/><text x="2.5370%" y="1263.50"></text></g><g><title>core::sync::atomic::atomic_add (10 samples, 0.17%)</title><rect x="2.2870%" y="1237" width="0.1746%" height="15" fill="rgb(233,223,10)"/><text x="2.5370%" y="1247.50"></text></g><g><title>tokio::sync::oneshot::channel (12 samples, 0.21%)</title><rect x="2.2870%" y="1285" width="0.2095%" height="15" fill="rgb(215,21,27)"/><text x="2.5370%" y="1295.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (2 samples, 0.03%)</title><rect x="2.4616%" y="1269" width="0.0349%" height="15" fill="rgb(232,23,21)"/><text x="2.7116%" y="1279.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.03%)</title><rect x="2.4616%" y="1253" width="0.0349%" height="15" fill="rgb(244,5,23)"/><text x="2.7116%" y="1263.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.03%)</title><rect x="2.4616%" y="1237" width="0.0349%" height="15" fill="rgb(226,81,46)"/><text x="2.7116%" y="1247.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.03%)</title><rect x="2.4616%" y="1221" width="0.0349%" height="15" fill="rgb(247,70,30)"/><text x="2.7116%" y="1231.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.03%)</title><rect x="2.4616%" y="1205" width="0.0349%" height="15" fill="rgb(212,68,19)"/><text x="2.7116%" y="1215.50"></text></g><g><title>__rg_alloc (2 samples, 0.03%)</title><rect x="2.4616%" y="1189" width="0.0349%" height="15" fill="rgb(240,187,13)"/><text x="2.7116%" y="1199.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (2 samples, 0.03%)</title><rect x="2.4616%" y="1173" width="0.0349%" height="15" fill="rgb(223,113,26)"/><text x="2.7116%" y="1183.50"></text></g><g><title>mi_malloc (2 samples, 0.03%)</title><rect x="2.4616%" y="1157" width="0.0349%" height="15" fill="rgb(206,192,2)"/><text x="2.7116%" y="1167.50"></text></g><g><title>mi_heap_malloc (2 samples, 0.03%)</title><rect x="2.4616%" y="1141" width="0.0349%" height="15" fill="rgb(241,108,4)"/><text x="2.7116%" y="1151.50"></text></g><g><title>mi_heap_malloc_small (2 samples, 0.03%)</title><rect x="2.4616%" y="1125" width="0.0349%" height="15" fill="rgb(247,173,49)"/><text x="2.7116%" y="1135.50"></text></g><g><title>_mi_page_malloc (2 samples, 0.03%)</title><rect x="2.4616%" y="1109" width="0.0349%" height="15" fill="rgb(224,114,35)"/><text x="2.7116%" y="1119.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit (2 samples, 0.03%)</title><rect x="2.5140%" y="1221" width="0.0349%" height="15" fill="rgb(245,159,27)"/><text x="2.7640%" y="1231.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (2 samples, 0.03%)</title><rect x="2.5140%" y="1205" width="0.0349%" height="15" fill="rgb(245,172,44)"/><text x="2.7640%" y="1215.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (1 samples, 0.02%)</title><rect x="2.5314%" y="1189" width="0.0175%" height="15" fill="rgb(236,23,11)"/><text x="2.7814%" y="1199.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.02%)</title><rect x="2.5314%" y="1173" width="0.0175%" height="15" fill="rgb(205,117,38)"/><text x="2.7814%" y="1183.50"></text></g><g><title>tokio::runtime::context::spawn_handle (4 samples, 0.07%)</title><rect x="2.5140%" y="1269" width="0.0698%" height="15" fill="rgb(237,72,25)"/><text x="2.7640%" y="1279.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (4 samples, 0.07%)</title><rect x="2.5140%" y="1253" width="0.0698%" height="15" fill="rgb(244,70,9)"/><text x="2.7640%" y="1263.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4 samples, 0.07%)</title><rect x="2.5140%" y="1237" width="0.0698%" height="15" fill="rgb(217,125,39)"/><text x="2.7640%" y="1247.50"></text></g><g><title>tokio::runtime::context::spawn_handle::{{closure}} (2 samples, 0.03%)</title><rect x="2.5489%" y="1221" width="0.0349%" height="15" fill="rgb(235,36,10)"/><text x="2.7989%" y="1231.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.03%)</title><rect x="2.5489%" y="1205" width="0.0349%" height="15" fill="rgb(251,123,47)"/><text x="2.7989%" y="1215.50"></text></g><g><title>tokio::runtime::context::spawn_handle::{{closure}}::{{closure}} (2 samples, 0.03%)</title><rect x="2.5489%" y="1189" width="0.0349%" height="15" fill="rgb(221,13,13)"/><text x="2.7989%" y="1199.50"></text></g><g><title>&lt;tokio::runtime::spawner::Spawner as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="2.5489%" y="1173" width="0.0349%" height="15" fill="rgb(238,131,9)"/><text x="2.7989%" y="1183.50"></text></g><g><title>_mi_malloc_generic (7 samples, 0.12%)</title><rect x="2.6187%" y="1221" width="0.1222%" height="15" fill="rgb(211,50,8)"/><text x="2.8687%" y="1231.50"></text></g><g><title>_mi_heap_delayed_free (7 samples, 0.12%)</title><rect x="2.6187%" y="1205" width="0.1222%" height="15" fill="rgb(245,182,24)"/><text x="2.8687%" y="1215.50"></text></g><g><title>_mi_free_delayed_block (6 samples, 0.10%)</title><rect x="2.6362%" y="1189" width="0.1047%" height="15" fill="rgb(242,14,37)"/><text x="2.8862%" y="1199.50"></text></g><g><title>_mi_page_free_collect (6 samples, 0.10%)</title><rect x="2.6362%" y="1173" width="0.1047%" height="15" fill="rgb(246,228,12)"/><text x="2.8862%" y="1183.50"></text></g><g><title>_mi_page_thread_free_collect (5 samples, 0.09%)</title><rect x="2.6536%" y="1157" width="0.0873%" height="15" fill="rgb(213,55,15)"/><text x="2.9036%" y="1167.50"></text></g><g><title>mi_block_next (4 samples, 0.07%)</title><rect x="2.6711%" y="1141" width="0.0698%" height="15" fill="rgb(209,9,3)"/><text x="2.9211%" y="1151.50"></text></g><g><title>mi_block_nextx (1 samples, 0.02%)</title><rect x="2.7235%" y="1125" width="0.0175%" height="15" fill="rgb(230,59,30)"/><text x="2.9735%" y="1135.50"></text></g><g><title>__rg_alloc (9 samples, 0.16%)</title><rect x="2.6187%" y="1253" width="0.1571%" height="15" fill="rgb(209,121,21)"/><text x="2.8687%" y="1263.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (9 samples, 0.16%)</title><rect x="2.6187%" y="1237" width="0.1571%" height="15" fill="rgb(220,109,13)"/><text x="2.8687%" y="1247.50"></text></g><g><title>mi_malloc (2 samples, 0.03%)</title><rect x="2.7409%" y="1221" width="0.0349%" height="15" fill="rgb(232,18,1)"/><text x="2.9909%" y="1231.50"></text></g><g><title>mi_heap_malloc (2 samples, 0.03%)</title><rect x="2.7409%" y="1205" width="0.0349%" height="15" fill="rgb(215,41,42)"/><text x="2.9909%" y="1215.50"></text></g><g><title>mi_heap_malloc_small (1 samples, 0.02%)</title><rect x="2.7584%" y="1189" width="0.0175%" height="15" fill="rgb(224,123,36)"/><text x="3.0084%" y="1199.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.02%)</title><rect x="2.7584%" y="1173" width="0.0175%" height="15" fill="rgb(240,125,3)"/><text x="3.0084%" y="1183.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="2.7758%" y="1205" width="0.0175%" height="15" fill="rgb(205,98,50)"/><text x="3.0258%" y="1215.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="2.7758%" y="1189" width="0.0175%" height="15" fill="rgb(205,185,37)"/><text x="3.0258%" y="1199.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="2.7758%" y="1173" width="0.0175%" height="15" fill="rgb(238,207,15)"/><text x="3.0258%" y="1183.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.02%)</title><rect x="2.7758%" y="1157" width="0.0175%" height="15" fill="rgb(213,199,42)"/><text x="3.0258%" y="1167.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.02%)</title><rect x="2.7758%" y="1141" width="0.0175%" height="15" fill="rgb(235,201,11)"/><text x="3.0258%" y="1151.50"></text></g><g><title>tick_sched_timer (1 samples, 0.02%)</title><rect x="2.7758%" y="1125" width="0.0175%" height="15" fill="rgb(207,46,11)"/><text x="3.0258%" y="1135.50"></text></g><g><title>tick_sched_handle.isra.0 (1 samples, 0.02%)</title><rect x="2.7758%" y="1109" width="0.0175%" height="15" fill="rgb(241,35,35)"/><text x="3.0258%" y="1119.50"></text></g><g><title>update_process_times (1 samples, 0.02%)</title><rect x="2.7758%" y="1093" width="0.0175%" height="15" fill="rgb(243,32,47)"/><text x="3.0258%" y="1103.50"></text></g><g><title>rcu_segcblist_ready_cbs (1 samples, 0.02%)</title><rect x="2.7758%" y="1077" width="0.0175%" height="15" fill="rgb(247,202,23)"/><text x="3.0258%" y="1087.50"></text></g><g><title>&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (4 samples, 0.07%)</title><rect x="2.7758%" y="1237" width="0.0698%" height="15" fill="rgb(219,102,11)"/><text x="3.0258%" y="1247.50"></text></g><g><title>tokio::runtime::park::Inner::unpark (4 samples, 0.07%)</title><rect x="2.7758%" y="1221" width="0.0698%" height="15" fill="rgb(243,110,44)"/><text x="3.0258%" y="1231.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (3 samples, 0.05%)</title><rect x="2.7933%" y="1205" width="0.0524%" height="15" fill="rgb(222,74,54)"/><text x="3.0433%" y="1215.50"></text></g><g><title>core::sync::atomic::atomic_swap (3 samples, 0.05%)</title><rect x="2.7933%" y="1189" width="0.0524%" height="15" fill="rgb(216,99,12)"/><text x="3.0433%" y="1199.50"></text></g><g><title>__x86_indirect_thunk_rax (1 samples, 0.02%)</title><rect x="2.9330%" y="1157" width="0.0175%" height="15" fill="rgb(226,22,26)"/><text x="3.1830%" y="1167.50"></text></g><g><title>_raw_spin_lock (2 samples, 0.03%)</title><rect x="2.9504%" y="1109" width="0.0349%" height="15" fill="rgb(217,163,10)"/><text x="3.2004%" y="1119.50"></text></g><g><title>get_futex_key (2 samples, 0.03%)</title><rect x="3.2123%" y="1093" width="0.0349%" height="15" fill="rgb(213,25,53)"/><text x="3.4623%" y="1103.50"></text></g><g><title>mark_wake_futex (9 samples, 0.16%)</title><rect x="3.2472%" y="1093" width="0.1571%" height="15" fill="rgb(252,105,26)"/><text x="3.4972%" y="1103.50"></text></g><g><title>__unqueue_futex (6 samples, 0.10%)</title><rect x="3.2996%" y="1077" width="0.1047%" height="15" fill="rgb(220,39,43)"/><text x="3.5496%" y="1087.50"></text></g><g><title>__lock_text_start (1 samples, 0.02%)</title><rect x="3.4392%" y="1077" width="0.0175%" height="15" fill="rgb(229,68,48)"/><text x="3.6892%" y="1087.50"></text></g><g><title>select_task_rq_fair (8 samples, 0.14%)</title><rect x="3.5964%" y="1061" width="0.1397%" height="15" fill="rgb(252,8,32)"/><text x="3.8464%" y="1071.50"></text></g><g><title>available_idle_cpu (1 samples, 0.02%)</title><rect x="3.7186%" y="1045" width="0.0175%" height="15" fill="rgb(223,20,43)"/><text x="3.9686%" y="1055.50"></text></g><g><title>check_preempt_curr (1 samples, 0.02%)</title><rect x="3.7360%" y="1045" width="0.0175%" height="15" fill="rgb(229,81,49)"/><text x="3.9860%" y="1055.50"></text></g><g><title>__enqueue_entity (1 samples, 0.02%)</title><rect x="3.8059%" y="1029" width="0.0175%" height="15" fill="rgb(236,28,36)"/><text x="4.0559%" y="1039.50"></text></g><g><title>__update_load_avg_cfs_rq (1 samples, 0.02%)</title><rect x="3.9630%" y="1013" width="0.0175%" height="15" fill="rgb(249,185,26)"/><text x="4.2130%" y="1023.50"></text></g><g><title>place_entity (1 samples, 0.02%)</title><rect x="3.9804%" y="1013" width="0.0175%" height="15" fill="rgb(249,174,33)"/><text x="4.2304%" y="1023.50"></text></g><g><title>rb_insert_color (1 samples, 0.02%)</title><rect x="3.9979%" y="1013" width="0.0175%" height="15" fill="rgb(233,201,37)"/><text x="4.2479%" y="1023.50"></text></g><g><title>update_cfs_group (2 samples, 0.03%)</title><rect x="4.0154%" y="1013" width="0.0349%" height="15" fill="rgb(221,78,26)"/><text x="4.2654%" y="1023.50"></text></g><g><title>update_curr (1 samples, 0.02%)</title><rect x="4.0503%" y="1013" width="0.0175%" height="15" fill="rgb(250,127,30)"/><text x="4.3003%" y="1023.50"></text></g><g><title>__update_load_avg_cfs_rq (6 samples, 0.10%)</title><rect x="4.1201%" y="997" width="0.1047%" height="15" fill="rgb(230,49,44)"/><text x="4.3701%" y="1007.50"></text></g><g><title>enqueue_task_fair (28 samples, 0.49%)</title><rect x="3.7535%" y="1045" width="0.4888%" height="15" fill="rgb(229,67,23)"/><text x="4.0035%" y="1055.50"></text></g><g><title>enqueue_entity (24 samples, 0.42%)</title><rect x="3.8233%" y="1029" width="0.4190%" height="15" fill="rgb(249,83,47)"/><text x="4.0733%" y="1039.50"></text></g><g><title>update_load_avg (10 samples, 0.17%)</title><rect x="4.0677%" y="1013" width="0.1746%" height="15" fill="rgb(215,43,3)"/><text x="4.3177%" y="1023.50"></text></g><g><title>__update_load_avg_se (1 samples, 0.02%)</title><rect x="4.2249%" y="997" width="0.0175%" height="15" fill="rgb(238,154,13)"/><text x="4.4749%" y="1007.50"></text></g><g><title>psi_flags_change (1 samples, 0.02%)</title><rect x="4.3296%" y="1029" width="0.0175%" height="15" fill="rgb(219,56,2)"/><text x="4.5796%" y="1039.50"></text></g><g><title>psi_group_change (21 samples, 0.37%)</title><rect x="4.3471%" y="1029" width="0.3666%" height="15" fill="rgb(233,0,4)"/><text x="4.5971%" y="1039.50"></text></g><g><title>record_times (5 samples, 0.09%)</title><rect x="4.6264%" y="1013" width="0.0873%" height="15" fill="rgb(235,30,7)"/><text x="4.8764%" y="1023.50"></text></g><g><title>sched_clock_cpu (2 samples, 0.03%)</title><rect x="4.6788%" y="997" width="0.0349%" height="15" fill="rgb(250,79,13)"/><text x="4.9288%" y="1007.50"></text></g><g><title>native_sched_clock (1 samples, 0.02%)</title><rect x="4.6962%" y="981" width="0.0175%" height="15" fill="rgb(211,146,34)"/><text x="4.9462%" y="991.50"></text></g><g><title>psi_task_change (28 samples, 0.49%)</title><rect x="4.2423%" y="1045" width="0.4888%" height="15" fill="rgb(228,22,38)"/><text x="4.4923%" y="1055.50"></text></g><g><title>record_times (1 samples, 0.02%)</title><rect x="4.7137%" y="1029" width="0.0175%" height="15" fill="rgb(235,168,5)"/><text x="4.9637%" y="1039.50"></text></g><g><title>check_preempt_curr (19 samples, 0.33%)</title><rect x="4.7486%" y="1029" width="0.3317%" height="15" fill="rgb(221,155,16)"/><text x="4.9986%" y="1039.50"></text></g><g><title>resched_curr (16 samples, 0.28%)</title><rect x="4.8010%" y="1013" width="0.2793%" height="15" fill="rgb(215,215,53)"/><text x="5.0510%" y="1023.50"></text></g><g><title>ttwu_do_activate (78 samples, 1.36%)</title><rect x="3.7360%" y="1061" width="1.3617%" height="15" fill="rgb(223,4,10)"/><text x="3.9860%" y="1071.50"></text></g><g><title>ttwu_do_wakeup (21 samples, 0.37%)</title><rect x="4.7311%" y="1045" width="0.3666%" height="15" fill="rgb(234,103,6)"/><text x="4.9811%" y="1055.50"></text></g><g><title>resched_curr (1 samples, 0.02%)</title><rect x="5.0803%" y="1029" width="0.0175%" height="15" fill="rgb(227,97,0)"/><text x="5.3303%" y="1039.50"></text></g><g><title>__smp_call_single_queue (1 samples, 0.02%)</title><rect x="5.1327%" y="1045" width="0.0175%" height="15" fill="rgb(234,150,53)"/><text x="5.3827%" y="1055.50"></text></g><g><title>send_call_function_single_ipi (1 samples, 0.02%)</title><rect x="5.1327%" y="1029" width="0.0175%" height="15" fill="rgb(228,201,54)"/><text x="5.3827%" y="1039.50"></text></g><g><title>native_send_call_func_single_ipi (1 samples, 0.02%)</title><rect x="5.1327%" y="1013" width="0.0175%" height="15" fill="rgb(222,22,37)"/><text x="5.3827%" y="1023.50"></text></g><g><title>x2apic_send_IPI (1 samples, 0.02%)</title><rect x="5.1327%" y="997" width="0.0175%" height="15" fill="rgb(237,53,32)"/><text x="5.3827%" y="1007.50"></text></g><g><title>native_write_msr (1 samples, 0.02%)</title><rect x="5.1327%" y="981" width="0.0175%" height="15" fill="rgb(233,25,53)"/><text x="5.3827%" y="991.50"></text></g><g><title>llist_add_batch (1 samples, 0.02%)</title><rect x="5.1501%" y="1045" width="0.0175%" height="15" fill="rgb(210,40,34)"/><text x="5.4001%" y="1055.50"></text></g><g><title>ttwu_queue_wakelist (5 samples, 0.09%)</title><rect x="5.0978%" y="1061" width="0.0873%" height="15" fill="rgb(241,220,44)"/><text x="5.3478%" y="1071.50"></text></g><g><title>send_call_function_single_ipi (1 samples, 0.02%)</title><rect x="5.1676%" y="1045" width="0.0175%" height="15" fill="rgb(235,28,35)"/><text x="5.4176%" y="1055.50"></text></g><g><title>update_cfs_rq_h_load (9 samples, 0.16%)</title><rect x="5.1851%" y="1061" width="0.1571%" height="15" fill="rgb(210,56,17)"/><text x="5.4351%" y="1071.50"></text></g><g><title>try_to_wake_up (110 samples, 1.92%)</title><rect x="3.4567%" y="1077" width="1.9204%" height="15" fill="rgb(224,130,29)"/><text x="3.7067%" y="1087.50">t..</text></g><g><title>update_rq_clock (2 samples, 0.03%)</title><rect x="5.3422%" y="1061" width="0.0349%" height="15" fill="rgb(235,212,8)"/><text x="5.5922%" y="1071.50"></text></g><g><title>futex_wake (138 samples, 2.41%)</title><rect x="2.9853%" y="1109" width="2.4092%" height="15" fill="rgb(223,33,50)"/><text x="3.2353%" y="1119.50">fu..</text></g><g><title>wake_up_q (114 samples, 1.99%)</title><rect x="3.4043%" y="1093" width="1.9902%" height="15" fill="rgb(219,149,13)"/><text x="3.6543%" y="1103.50">w..</text></g><g><title>ttwu_do_activate (1 samples, 0.02%)</title><rect x="5.3771%" y="1077" width="0.0175%" height="15" fill="rgb(250,156,29)"/><text x="5.6271%" y="1087.50"></text></g><g><title>do_futex (141 samples, 2.46%)</title><rect x="2.9504%" y="1125" width="2.4616%" height="15" fill="rgb(216,193,19)"/><text x="3.2004%" y="1135.50">do..</text></g><g><title>hash_futex (1 samples, 0.02%)</title><rect x="5.3946%" y="1109" width="0.0175%" height="15" fill="rgb(216,135,14)"/><text x="5.6446%" y="1119.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (144 samples, 2.51%)</title><rect x="2.9155%" y="1173" width="2.5140%" height="15" fill="rgb(241,47,5)"/><text x="3.1655%" y="1183.50">en..</text></g><g><title>do_syscall_64 (142 samples, 2.48%)</title><rect x="2.9504%" y="1157" width="2.4791%" height="15" fill="rgb(233,42,35)"/><text x="3.2004%" y="1167.50">do..</text></g><g><title>__x64_sys_futex (142 samples, 2.48%)</title><rect x="2.9504%" y="1141" width="2.4791%" height="15" fill="rgb(231,13,6)"/><text x="3.2004%" y="1151.50">__..</text></g><g><title>futex_wake (1 samples, 0.02%)</title><rect x="5.4120%" y="1125" width="0.0175%" height="15" fill="rgb(207,181,40)"/><text x="5.6620%" y="1135.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (148 samples, 2.58%)</title><rect x="2.8631%" y="1205" width="2.5838%" height="15" fill="rgb(254,173,49)"/><text x="3.1131%" y="1215.50">&lt;p..</text></g><g><title>syscall (147 samples, 2.57%)</title><rect x="2.8806%" y="1189" width="2.5663%" height="15" fill="rgb(221,1,38)"/><text x="3.1306%" y="1199.50">sy..</text></g><g><title>syscall_return_via_sysret (1 samples, 0.02%)</title><rect x="5.4295%" y="1173" width="0.0175%" height="15" fill="rgb(206,124,46)"/><text x="5.6795%" y="1183.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (5 samples, 0.09%)</title><rect x="5.4469%" y="1205" width="0.0873%" height="15" fill="rgb(249,21,11)"/><text x="5.6969%" y="1215.50"></text></g><g><title>core::sync::atomic::atomic_load (5 samples, 0.09%)</title><rect x="5.4469%" y="1189" width="0.0873%" height="15" fill="rgb(222,201,40)"/><text x="5.6969%" y="1199.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (8 samples, 0.14%)</title><rect x="5.5342%" y="1205" width="0.1397%" height="15" fill="rgb(235,61,29)"/><text x="5.7842%" y="1215.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (8 samples, 0.14%)</title><rect x="5.5342%" y="1189" width="0.1397%" height="15" fill="rgb(219,207,3)"/><text x="5.7842%" y="1199.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (8 samples, 0.14%)</title><rect x="5.5342%" y="1173" width="0.1397%" height="15" fill="rgb(222,56,46)"/><text x="5.7842%" y="1183.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (8 samples, 0.14%)</title><rect x="5.5342%" y="1157" width="0.1397%" height="15" fill="rgb(239,76,54)"/><text x="5.7842%" y="1167.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (164 samples, 2.86%)</title><rect x="2.8457%" y="1237" width="2.8631%" height="15" fill="rgb(231,124,27)"/><text x="3.0957%" y="1247.50">pa..</text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (164 samples, 2.86%)</title><rect x="2.8457%" y="1221" width="2.8631%" height="15" fill="rgb(249,195,6)"/><text x="3.0957%" y="1231.50">pa..</text></g><g><title>parking_lot_core::parking_lot::unlock_bucket_pair (2 samples, 0.03%)</title><rect x="5.6739%" y="1205" width="0.0349%" height="15" fill="rgb(237,174,47)"/><text x="5.9239%" y="1215.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::unlock (2 samples, 0.03%)</title><rect x="5.6739%" y="1189" width="0.0349%" height="15" fill="rgb(206,201,31)"/><text x="5.9239%" y="1199.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.03%)</title><rect x="5.6739%" y="1173" width="0.0349%" height="15" fill="rgb(231,57,52)"/><text x="5.9239%" y="1183.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.03%)</title><rect x="5.6739%" y="1157" width="0.0349%" height="15" fill="rgb(248,177,22)"/><text x="5.9239%" y="1167.50"></text></g><g><title>tokio::runtime::task::joinable (2 samples, 0.03%)</title><rect x="5.7088%" y="1237" width="0.0349%" height="15" fill="rgb(215,211,37)"/><text x="5.9588%" y="1247.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::new (2 samples, 0.03%)</title><rect x="5.7088%" y="1221" width="0.0349%" height="15" fill="rgb(241,128,51)"/><text x="5.9588%" y="1231.50"></text></g><g><title>tokio::runtime::task::core::Cell&lt;T,S&gt;::new (2 samples, 0.03%)</title><rect x="5.7088%" y="1205" width="0.0349%" height="15" fill="rgb(227,165,31)"/><text x="5.9588%" y="1215.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.03%)</title><rect x="5.7088%" y="1189" width="0.0349%" height="15" fill="rgb(228,167,24)"/><text x="5.9588%" y="1199.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (2 samples, 0.03%)</title><rect x="5.8310%" y="1205" width="0.0349%" height="15" fill="rgb(228,143,12)"/><text x="6.0810%" y="1215.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::notify_parked (15 samples, 0.26%)</title><rect x="5.7437%" y="1237" width="0.2619%" height="15" fill="rgb(249,149,8)"/><text x="5.9937%" y="1247.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::worker_to_notify (10 samples, 0.17%)</title><rect x="5.8310%" y="1221" width="0.1746%" height="15" fill="rgb(243,35,44)"/><text x="6.0810%" y="1231.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::notify_should_wakeup (8 samples, 0.14%)</title><rect x="5.8659%" y="1205" width="0.1397%" height="15" fill="rgb(246,89,9)"/><text x="6.1159%" y="1215.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (7 samples, 0.12%)</title><rect x="5.8834%" y="1189" width="0.1222%" height="15" fill="rgb(233,213,13)"/><text x="6.1334%" y="1199.50"></text></g><g><title>core::sync::atomic::atomic_add (7 samples, 0.12%)</title><rect x="5.8834%" y="1173" width="0.1222%" height="15" fill="rgb(233,141,41)"/><text x="6.1334%" y="1183.50"></text></g><g><title>rho_runtime::storage::coordinator::Coordinator::handle_join_double (239 samples, 4.17%)</title><rect x="2.0950%" y="1301" width="4.1725%" height="15" fill="rgb(239,167,4)"/><text x="2.3450%" y="1311.50">rho_r..</text></g><g><title>tokio::task::spawn::spawn (216 samples, 3.77%)</title><rect x="2.4965%" y="1285" width="3.7709%" height="15" fill="rgb(209,217,16)"/><text x="2.7465%" y="1295.50">toki..</text></g><g><title>tokio::runtime::spawner::Spawner::spawn (211 samples, 3.68%)</title><rect x="2.5838%" y="1269" width="3.6837%" height="15" fill="rgb(219,88,35)"/><text x="2.8338%" y="1279.50">toki..</text></g><g><title>tokio::runtime::thread_pool::Spawner::spawn (200 samples, 3.49%)</title><rect x="2.7758%" y="1253" width="3.4916%" height="15" fill="rgb(220,193,23)"/><text x="3.0258%" y="1263.50">tok..</text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (15 samples, 0.26%)</title><rect x="6.0056%" y="1237" width="0.2619%" height="15" fill="rgb(230,90,52)"/><text x="6.2556%" y="1247.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (15 samples, 0.26%)</title><rect x="6.0056%" y="1221" width="0.2619%" height="15" fill="rgb(252,106,19)"/><text x="6.2556%" y="1231.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule::{{closure}} (11 samples, 0.19%)</title><rect x="6.0754%" y="1205" width="0.1920%" height="15" fill="rgb(206,74,20)"/><text x="6.3254%" y="1215.50"></text></g><g><title>tokio::runtime::queue::Inject&lt;T&gt;::push (11 samples, 0.19%)</title><rect x="6.0754%" y="1189" width="0.1920%" height="15" fill="rgb(230,138,44)"/><text x="6.3254%" y="1199.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (11 samples, 0.19%)</title><rect x="6.0754%" y="1173" width="0.1920%" height="15" fill="rgb(235,182,43)"/><text x="6.3254%" y="1183.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (11 samples, 0.19%)</title><rect x="6.0754%" y="1157" width="0.1920%" height="15" fill="rgb(242,16,51)"/><text x="6.3254%" y="1167.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (11 samples, 0.19%)</title><rect x="6.0754%" y="1141" width="0.1920%" height="15" fill="rgb(248,9,4)"/><text x="6.3254%" y="1151.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (10 samples, 0.17%)</title><rect x="6.0929%" y="1125" width="0.1746%" height="15" fill="rgb(210,31,22)"/><text x="6.3429%" y="1135.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (10 samples, 0.17%)</title><rect x="6.0929%" y="1109" width="0.1746%" height="15" fill="rgb(239,54,39)"/><text x="6.3429%" y="1119.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="6.2675%" y="1285" width="0.0175%" height="15" fill="rgb(230,99,41)"/><text x="6.5175%" y="1295.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.02%)</title><rect x="6.2675%" y="1269" width="0.0175%" height="15" fill="rgb(253,106,12)"/><text x="6.5175%" y="1279.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.02%)</title><rect x="6.2675%" y="1253" width="0.0175%" height="15" fill="rgb(213,46,41)"/><text x="6.5175%" y="1263.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="6.2849%" y="1285" width="0.0175%" height="15" fill="rgb(215,133,35)"/><text x="6.5349%" y="1295.50"></text></g><g><title>&lt;hashbrown::raw::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="6.4944%" y="1189" width="0.0175%" height="15" fill="rgb(213,28,5)"/><text x="6.7444%" y="1199.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::iter_hash (2 samples, 0.03%)</title><rect x="6.4944%" y="1221" width="0.0349%" height="15" fill="rgb(215,77,49)"/><text x="6.7444%" y="1231.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T&gt;::new (2 samples, 0.03%)</title><rect x="6.4944%" y="1205" width="0.0349%" height="15" fill="rgb(248,100,22)"/><text x="6.7444%" y="1215.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.02%)</title><rect x="6.5119%" y="1189" width="0.0175%" height="15" fill="rgb(208,67,9)"/><text x="6.7619%" y="1199.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.02%)</title><rect x="6.5119%" y="1173" width="0.0175%" height="15" fill="rgb(219,133,21)"/><text x="6.7619%" y="1183.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="6.5119%" y="1157" width="0.0175%" height="15" fill="rgb(246,46,29)"/><text x="6.7619%" y="1167.50"></text></g><g><title>rho_runtime::storage::coordinator::Coordinator::get_or_create_cell_slot (19 samples, 0.33%)</title><rect x="6.3024%" y="1285" width="0.3317%" height="15" fill="rgb(246,185,52)"/><text x="6.5524%" y="1295.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (13 samples, 0.23%)</title><rect x="6.4071%" y="1269" width="0.2270%" height="15" fill="rgb(252,136,11)"/><text x="6.6571%" y="1279.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry (9 samples, 0.16%)</title><rect x="6.4770%" y="1253" width="0.1571%" height="15" fill="rgb(219,138,53)"/><text x="6.7270%" y="1263.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (9 samples, 0.16%)</title><rect x="6.4770%" y="1237" width="0.1571%" height="15" fill="rgb(211,51,23)"/><text x="6.7270%" y="1247.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry::{{closure}} (6 samples, 0.10%)</title><rect x="6.5293%" y="1221" width="0.1047%" height="15" fill="rgb(247,221,28)"/><text x="6.7793%" y="1231.50"></text></g><g><title>&lt;blake3::Hash as core::cmp::PartialEq&gt;::eq (6 samples, 0.10%)</title><rect x="6.5293%" y="1205" width="0.1047%" height="15" fill="rgb(251,222,45)"/><text x="6.7793%" y="1215.50"></text></g><g><title>constant_time_eq::constant_time_eq_32 (6 samples, 0.10%)</title><rect x="6.5293%" y="1189" width="0.1047%" height="15" fill="rgb(217,162,53)"/><text x="6.7793%" y="1199.50"></text></g><g><title>constant_time_eq::constant_time_ne_32 (5 samples, 0.09%)</title><rect x="6.5468%" y="1173" width="0.0873%" height="15" fill="rgb(229,93,14)"/><text x="6.7968%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::spawner::Spawner&gt; (3 samples, 0.05%)</title><rect x="6.6341%" y="1269" width="0.0524%" height="15" fill="rgb(209,67,49)"/><text x="6.8841%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::thread_pool::Spawner&gt; (1 samples, 0.02%)</title><rect x="6.6690%" y="1253" width="0.0175%" height="15" fill="rgb(213,87,29)"/><text x="6.9190%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Shared&gt;&gt; (1 samples, 0.02%)</title><rect x="6.6690%" y="1237" width="0.0175%" height="15" fill="rgb(205,151,52)"/><text x="6.9190%" y="1247.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="6.6690%" y="1221" width="0.0175%" height="15" fill="rgb(253,215,39)"/><text x="6.9190%" y="1231.50"></text></g><g><title>tokio::runtime::context::spawn_handle (2 samples, 0.03%)</title><rect x="6.6865%" y="1269" width="0.0349%" height="15" fill="rgb(221,220,41)"/><text x="6.9365%" y="1279.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.03%)</title><rect x="6.6865%" y="1253" width="0.0349%" height="15" fill="rgb(218,133,21)"/><text x="6.9365%" y="1263.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.03%)</title><rect x="6.6865%" y="1237" width="0.0349%" height="15" fill="rgb(221,193,43)"/><text x="6.9365%" y="1247.50"></text></g><g><title>tokio::runtime::context::spawn_handle::{{closure}} (2 samples, 0.03%)</title><rect x="6.6865%" y="1221" width="0.0349%" height="15" fill="rgb(240,128,52)"/><text x="6.9365%" y="1231.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.03%)</title><rect x="6.6865%" y="1205" width="0.0349%" height="15" fill="rgb(253,114,12)"/><text x="6.9365%" y="1215.50"></text></g><g><title>tokio::runtime::context::spawn_handle::{{closure}}::{{closure}} (2 samples, 0.03%)</title><rect x="6.6865%" y="1189" width="0.0349%" height="15" fill="rgb(215,223,47)"/><text x="6.9365%" y="1199.50"></text></g><g><title>&lt;tokio::runtime::spawner::Spawner as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="6.6865%" y="1173" width="0.0349%" height="15" fill="rgb(248,225,23)"/><text x="6.9365%" y="1183.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="6.7388%" y="1253" width="0.0175%" height="15" fill="rgb(250,108,0)"/><text x="6.9888%" y="1263.50"></text></g><g><title>_mi_free_block (2 samples, 0.03%)</title><rect x="6.8261%" y="1173" width="0.0349%" height="15" fill="rgb(228,208,7)"/><text x="7.0761%" y="1183.50"></text></g><g><title>_mi_page_thread_free_collect (13 samples, 0.23%)</title><rect x="6.8610%" y="1157" width="0.2270%" height="15" fill="rgb(244,45,10)"/><text x="7.1110%" y="1167.50"></text></g><g><title>mi_block_next (12 samples, 0.21%)</title><rect x="6.8785%" y="1141" width="0.2095%" height="15" fill="rgb(207,125,25)"/><text x="7.1285%" y="1151.50"></text></g><g><title>mi_block_nextx (11 samples, 0.19%)</title><rect x="6.8959%" y="1125" width="0.1920%" height="15" fill="rgb(210,195,18)"/><text x="7.1459%" y="1135.50"></text></g><g><title>_mi_page_free_collect (14 samples, 0.24%)</title><rect x="6.8610%" y="1173" width="0.2444%" height="15" fill="rgb(249,80,12)"/><text x="7.1110%" y="1183.50"></text></g><g><title>mi_page_thread_free (1 samples, 0.02%)</title><rect x="7.0880%" y="1157" width="0.0175%" height="15" fill="rgb(221,65,9)"/><text x="7.3380%" y="1167.50"></text></g><g><title>_mi_page_use_delayed_free (2 samples, 0.03%)</title><rect x="7.1054%" y="1173" width="0.0349%" height="15" fill="rgb(235,49,36)"/><text x="7.3554%" y="1183.50"></text></g><g><title>_mi_malloc_generic (23 samples, 0.40%)</title><rect x="6.7563%" y="1221" width="0.4015%" height="15" fill="rgb(225,32,20)"/><text x="7.0063%" y="1231.50"></text></g><g><title>_mi_heap_delayed_free (23 samples, 0.40%)</title><rect x="6.7563%" y="1205" width="0.4015%" height="15" fill="rgb(215,141,46)"/><text x="7.0063%" y="1215.50"></text></g><g><title>_mi_free_delayed_block (19 samples, 0.33%)</title><rect x="6.8261%" y="1189" width="0.3317%" height="15" fill="rgb(250,160,47)"/><text x="7.0761%" y="1199.50"></text></g><g><title>_mi_segment_page_of (1 samples, 0.02%)</title><rect x="7.1404%" y="1173" width="0.0175%" height="15" fill="rgb(216,222,40)"/><text x="7.3904%" y="1183.50"></text></g><g><title>_mi_segment_page_idx_of (1 samples, 0.02%)</title><rect x="7.1404%" y="1157" width="0.0175%" height="15" fill="rgb(234,217,39)"/><text x="7.3904%" y="1167.50"></text></g><g><title>__rg_alloc (25 samples, 0.44%)</title><rect x="6.7563%" y="1253" width="0.4365%" height="15" fill="rgb(207,178,40)"/><text x="7.0063%" y="1263.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (25 samples, 0.44%)</title><rect x="6.7563%" y="1237" width="0.4365%" height="15" fill="rgb(221,136,13)"/><text x="7.0063%" y="1247.50"></text></g><g><title>mi_malloc (2 samples, 0.03%)</title><rect x="7.1578%" y="1221" width="0.0349%" height="15" fill="rgb(249,199,10)"/><text x="7.4078%" y="1231.50"></text></g><g><title>mi_heap_malloc (2 samples, 0.03%)</title><rect x="7.1578%" y="1205" width="0.0349%" height="15" fill="rgb(249,222,13)"/><text x="7.4078%" y="1215.50"></text></g><g><title>mi_heap_malloc_small (2 samples, 0.03%)</title><rect x="7.1578%" y="1189" width="0.0349%" height="15" fill="rgb(244,185,38)"/><text x="7.4078%" y="1199.50"></text></g><g><title>_mi_page_malloc (2 samples, 0.03%)</title><rect x="7.1578%" y="1173" width="0.0349%" height="15" fill="rgb(236,202,9)"/><text x="7.4078%" y="1183.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (4 samples, 0.07%)</title><rect x="7.1927%" y="1205" width="0.0698%" height="15" fill="rgb(250,229,37)"/><text x="7.4427%" y="1215.50"></text></g><g><title>core::sync::atomic::atomic_swap (4 samples, 0.07%)</title><rect x="7.1927%" y="1189" width="0.0698%" height="15" fill="rgb(206,174,23)"/><text x="7.4427%" y="1199.50"></text></g><g><title>core::mem::drop (1 samples, 0.02%)</title><rect x="7.2626%" y="1189" width="0.0175%" height="15" fill="rgb(211,33,43)"/><text x="7.5126%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,()&gt;&gt; (1 samples, 0.02%)</title><rect x="7.2626%" y="1173" width="0.0175%" height="15" fill="rgb(245,58,50)"/><text x="7.5126%" y="1183.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="7.2626%" y="1157" width="0.0175%" height="15" fill="rgb(244,68,36)"/><text x="7.5126%" y="1167.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (1 samples, 0.02%)</title><rect x="7.2626%" y="1141" width="0.0175%" height="15" fill="rgb(232,229,15)"/><text x="7.5126%" y="1151.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (1 samples, 0.02%)</title><rect x="7.2626%" y="1125" width="0.0175%" height="15" fill="rgb(254,30,23)"/><text x="7.5126%" y="1135.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.02%)</title><rect x="7.2626%" y="1109" width="0.0175%" height="15" fill="rgb(235,160,14)"/><text x="7.5126%" y="1119.50"></text></g><g><title>&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (8 samples, 0.14%)</title><rect x="7.1927%" y="1237" width="0.1397%" height="15" fill="rgb(212,155,44)"/><text x="7.4427%" y="1247.50"></text></g><g><title>tokio::runtime::park::Inner::unpark (8 samples, 0.14%)</title><rect x="7.1927%" y="1221" width="0.1397%" height="15" fill="rgb(226,2,50)"/><text x="7.4427%" y="1231.50"></text></g><g><title>tokio::runtime::park::Inner::unpark_condvar (4 samples, 0.07%)</title><rect x="7.2626%" y="1205" width="0.0698%" height="15" fill="rgb(234,177,6)"/><text x="7.5126%" y="1215.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (3 samples, 0.05%)</title><rect x="7.2800%" y="1189" width="0.0524%" height="15" fill="rgb(217,24,9)"/><text x="7.5300%" y="1199.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (3 samples, 0.05%)</title><rect x="7.2800%" y="1173" width="0.0524%" height="15" fill="rgb(220,13,46)"/><text x="7.5300%" y="1183.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (3 samples, 0.05%)</title><rect x="7.2800%" y="1157" width="0.0524%" height="15" fill="rgb(239,221,27)"/><text x="7.5300%" y="1167.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (3 samples, 0.05%)</title><rect x="7.2800%" y="1141" width="0.0524%" height="15" fill="rgb(222,198,25)"/><text x="7.5300%" y="1151.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (3 samples, 0.05%)</title><rect x="7.2800%" y="1125" width="0.0524%" height="15" fill="rgb(211,99,13)"/><text x="7.5300%" y="1135.50"></text></g><g><title>__syscall_return_slowpath (1 samples, 0.02%)</title><rect x="7.3848%" y="1141" width="0.0175%" height="15" fill="rgb(232,111,31)"/><text x="7.6348%" y="1151.50"></text></g><g><title>__prepare_exit_to_usermode (1 samples, 0.02%)</title><rect x="7.3848%" y="1125" width="0.0175%" height="15" fill="rgb(245,82,37)"/><text x="7.6348%" y="1135.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.02%)</title><rect x="7.4197%" y="1109" width="0.0175%" height="15" fill="rgb(227,149,46)"/><text x="7.6697%" y="1119.50"></text></g><g><title>__unqueue_futex (1 samples, 0.02%)</title><rect x="7.5943%" y="1093" width="0.0175%" height="15" fill="rgb(218,36,50)"/><text x="7.8443%" y="1103.50"></text></g><g><title>mark_wake_futex (8 samples, 0.14%)</title><rect x="7.6117%" y="1093" width="0.1397%" height="15" fill="rgb(226,80,48)"/><text x="7.8617%" y="1103.50"></text></g><g><title>__unqueue_futex (4 samples, 0.07%)</title><rect x="7.6816%" y="1077" width="0.0698%" height="15" fill="rgb(238,224,15)"/><text x="7.9316%" y="1087.50"></text></g><g><title>wake_q_add_safe (1 samples, 0.02%)</title><rect x="7.7514%" y="1093" width="0.0175%" height="15" fill="rgb(241,136,10)"/><text x="8.0014%" y="1103.50"></text></g><g><title>select_task_rq_fair (3 samples, 0.05%)</title><rect x="7.8387%" y="1061" width="0.0524%" height="15" fill="rgb(208,32,45)"/><text x="8.0887%" y="1071.50"></text></g><g><title>account_entity_enqueue (1 samples, 0.02%)</title><rect x="7.9085%" y="1029" width="0.0175%" height="15" fill="rgb(207,135,9)"/><text x="8.1585%" y="1039.50"></text></g><g><title>account_entity_enqueue (1 samples, 0.02%)</title><rect x="7.9609%" y="1013" width="0.0175%" height="15" fill="rgb(206,86,44)"/><text x="8.2109%" y="1023.50"></text></g><g><title>update_cfs_group (2 samples, 0.03%)</title><rect x="7.9784%" y="1013" width="0.0349%" height="15" fill="rgb(245,177,15)"/><text x="8.2284%" y="1023.50"></text></g><g><title>reweight_entity (2 samples, 0.03%)</title><rect x="7.9784%" y="997" width="0.0349%" height="15" fill="rgb(206,64,50)"/><text x="8.2284%" y="1007.50"></text></g><g><title>__update_load_avg_cfs_rq (1 samples, 0.02%)</title><rect x="8.0656%" y="997" width="0.0175%" height="15" fill="rgb(234,36,40)"/><text x="8.3156%" y="1007.50"></text></g><g><title>enqueue_task_fair (12 samples, 0.21%)</title><rect x="7.8911%" y="1045" width="0.2095%" height="15" fill="rgb(213,64,8)"/><text x="8.1411%" y="1055.50"></text></g><g><title>enqueue_entity (10 samples, 0.17%)</title><rect x="7.9260%" y="1029" width="0.1746%" height="15" fill="rgb(210,75,36)"/><text x="8.1760%" y="1039.50"></text></g><g><title>update_load_avg (5 samples, 0.09%)</title><rect x="8.0133%" y="1013" width="0.0873%" height="15" fill="rgb(229,88,21)"/><text x="8.2633%" y="1023.50"></text></g><g><title>__update_load_avg_se (1 samples, 0.02%)</title><rect x="8.0831%" y="997" width="0.0175%" height="15" fill="rgb(252,204,47)"/><text x="8.3331%" y="1007.50"></text></g><g><title>psi_flags_change (2 samples, 0.03%)</title><rect x="8.1006%" y="1045" width="0.0349%" height="15" fill="rgb(208,77,27)"/><text x="8.3506%" y="1055.50"></text></g><g><title>psi_task_change (11 samples, 0.19%)</title><rect x="8.1355%" y="1045" width="0.1920%" height="15" fill="rgb(221,76,26)"/><text x="8.3855%" y="1055.50"></text></g><g><title>psi_group_change (8 samples, 0.14%)</title><rect x="8.1878%" y="1029" width="0.1397%" height="15" fill="rgb(225,139,18)"/><text x="8.4378%" y="1039.50"></text></g><g><title>record_times (2 samples, 0.03%)</title><rect x="8.2926%" y="1013" width="0.0349%" height="15" fill="rgb(230,137,11)"/><text x="8.5426%" y="1023.50"></text></g><g><title>sched_clock (1 samples, 0.02%)</title><rect x="8.3101%" y="997" width="0.0175%" height="15" fill="rgb(212,28,1)"/><text x="8.5601%" y="1007.50"></text></g><g><title>check_preempt_curr (7 samples, 0.12%)</title><rect x="8.3275%" y="1029" width="0.1222%" height="15" fill="rgb(248,164,17)"/><text x="8.5775%" y="1039.50"></text></g><g><title>resched_curr (7 samples, 0.12%)</title><rect x="8.3275%" y="1013" width="0.1222%" height="15" fill="rgb(222,171,42)"/><text x="8.5775%" y="1023.50"></text></g><g><title>ttwu_do_activate (33 samples, 0.58%)</title><rect x="7.8911%" y="1061" width="0.5761%" height="15" fill="rgb(243,84,45)"/><text x="8.1411%" y="1071.50"></text></g><g><title>ttwu_do_wakeup (8 samples, 0.14%)</title><rect x="8.3275%" y="1045" width="0.1397%" height="15" fill="rgb(252,49,23)"/><text x="8.5775%" y="1055.50"></text></g><g><title>resched_curr (1 samples, 0.02%)</title><rect x="8.4497%" y="1029" width="0.0175%" height="15" fill="rgb(215,19,7)"/><text x="8.6997%" y="1039.50"></text></g><g><title>ttwu_queue_wakelist (4 samples, 0.07%)</title><rect x="8.4672%" y="1061" width="0.0698%" height="15" fill="rgb(238,81,41)"/><text x="8.7172%" y="1071.50"></text></g><g><title>__smp_call_single_queue (3 samples, 0.05%)</title><rect x="8.4846%" y="1045" width="0.0524%" height="15" fill="rgb(210,199,37)"/><text x="8.7346%" y="1055.50"></text></g><g><title>send_call_function_single_ipi (3 samples, 0.05%)</title><rect x="8.4846%" y="1029" width="0.0524%" height="15" fill="rgb(244,192,49)"/><text x="8.7346%" y="1039.50"></text></g><g><title>native_send_call_func_single_ipi (3 samples, 0.05%)</title><rect x="8.4846%" y="1013" width="0.0524%" height="15" fill="rgb(226,211,11)"/><text x="8.7346%" y="1023.50"></text></g><g><title>x2apic_send_IPI (3 samples, 0.05%)</title><rect x="8.4846%" y="997" width="0.0524%" height="15" fill="rgb(236,162,54)"/><text x="8.7346%" y="1007.50"></text></g><g><title>native_write_msr (2 samples, 0.03%)</title><rect x="8.5021%" y="981" width="0.0349%" height="15" fill="rgb(220,229,9)"/><text x="8.7521%" y="991.50"></text></g><g><title>update_cfs_rq_h_load (1 samples, 0.02%)</title><rect x="8.5370%" y="1061" width="0.0175%" height="15" fill="rgb(250,87,22)"/><text x="8.7870%" y="1071.50"></text></g><g><title>futex_wake (66 samples, 1.15%)</title><rect x="7.4372%" y="1109" width="1.1522%" height="15" fill="rgb(239,43,17)"/><text x="7.6872%" y="1119.50"></text></g><g><title>wake_up_q (47 samples, 0.82%)</title><rect x="7.7689%" y="1093" width="0.8205%" height="15" fill="rgb(231,177,25)"/><text x="8.0189%" y="1103.50"></text></g><g><title>try_to_wake_up (45 samples, 0.79%)</title><rect x="7.8038%" y="1077" width="0.7856%" height="15" fill="rgb(219,179,1)"/><text x="8.0538%" y="1087.50"></text></g><g><title>update_rq_clock (2 samples, 0.03%)</title><rect x="8.5545%" y="1061" width="0.0349%" height="15" fill="rgb(238,219,53)"/><text x="8.8045%" y="1071.50"></text></g><g><title>sched_clock_cpu (1 samples, 0.02%)</title><rect x="8.5719%" y="1045" width="0.0175%" height="15" fill="rgb(232,167,36)"/><text x="8.8219%" y="1055.50"></text></g><g><title>native_sched_clock (1 samples, 0.02%)</title><rect x="8.5719%" y="1029" width="0.0175%" height="15" fill="rgb(244,19,51)"/><text x="8.8219%" y="1039.50"></text></g><g><title>hash_futex (2 samples, 0.03%)</title><rect x="8.5894%" y="1109" width="0.0349%" height="15" fill="rgb(224,6,22)"/><text x="8.8394%" y="1119.50"></text></g><g><title>mark_wake_futex (1 samples, 0.02%)</title><rect x="8.6243%" y="1109" width="0.0175%" height="15" fill="rgb(224,145,5)"/><text x="8.8743%" y="1119.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (73 samples, 1.27%)</title><rect x="7.3848%" y="1173" width="1.2744%" height="15" fill="rgb(234,130,49)"/><text x="7.6348%" y="1183.50"></text></g><g><title>do_syscall_64 (73 samples, 1.27%)</title><rect x="7.3848%" y="1157" width="1.2744%" height="15" fill="rgb(254,6,2)"/><text x="7.6348%" y="1167.50"></text></g><g><title>__x64_sys_futex (72 samples, 1.26%)</title><rect x="7.4022%" y="1141" width="1.2570%" height="15" fill="rgb(208,96,46)"/><text x="7.6522%" y="1151.50"></text></g><g><title>do_futex (72 samples, 1.26%)</title><rect x="7.4022%" y="1125" width="1.2570%" height="15" fill="rgb(239,3,39)"/><text x="7.6522%" y="1135.50"></text></g><g><title>wake_up_q (1 samples, 0.02%)</title><rect x="8.6418%" y="1109" width="0.0175%" height="15" fill="rgb(233,210,1)"/><text x="8.8918%" y="1119.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (77 samples, 1.34%)</title><rect x="7.3324%" y="1205" width="1.3443%" height="15" fill="rgb(244,137,37)"/><text x="7.5824%" y="1215.50"></text></g><g><title>syscall (76 samples, 1.33%)</title><rect x="7.3499%" y="1189" width="1.3268%" height="15" fill="rgb(240,136,2)"/><text x="7.5999%" y="1199.50"></text></g><g><title>syscall_return_via_sysret (1 samples, 0.02%)</title><rect x="8.6592%" y="1173" width="0.0175%" height="15" fill="rgb(239,18,37)"/><text x="8.9092%" y="1183.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.03%)</title><rect x="8.6767%" y="1205" width="0.0349%" height="15" fill="rgb(218,185,22)"/><text x="8.9267%" y="1215.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.03%)</title><rect x="8.6767%" y="1189" width="0.0349%" height="15" fill="rgb(225,218,4)"/><text x="8.9267%" y="1199.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::should_timeout (1 samples, 0.02%)</title><rect x="8.7116%" y="1205" width="0.0175%" height="15" fill="rgb(230,182,32)"/><text x="8.9616%" y="1215.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.02%)</title><rect x="8.7116%" y="1189" width="0.0175%" height="15" fill="rgb(242,56,43)"/><text x="8.9616%" y="1199.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.02%)</title><rect x="8.7116%" y="1173" width="0.0175%" height="15" fill="rgb(233,99,24)"/><text x="8.9616%" y="1183.50"></text></g><g><title>std::sys::unix::time::inner::now (1 samples, 0.02%)</title><rect x="8.7116%" y="1157" width="0.0175%" height="15" fill="rgb(234,209,42)"/><text x="8.9616%" y="1167.50"></text></g><g><title>__clock_gettime (1 samples, 0.02%)</title><rect x="8.7116%" y="1141" width="0.0175%" height="15" fill="rgb(227,7,12)"/><text x="8.9616%" y="1151.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.02%)</title><rect x="8.7116%" y="1125" width="0.0175%" height="15" fill="rgb(245,203,43)"/><text x="8.9616%" y="1135.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (3 samples, 0.05%)</title><rect x="8.7291%" y="1205" width="0.0524%" height="15" fill="rgb(238,205,33)"/><text x="8.9791%" y="1215.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (3 samples, 0.05%)</title><rect x="8.7291%" y="1189" width="0.0524%" height="15" fill="rgb(231,56,7)"/><text x="8.9791%" y="1199.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (2 samples, 0.03%)</title><rect x="8.7465%" y="1173" width="0.0349%" height="15" fill="rgb(244,186,29)"/><text x="8.9965%" y="1183.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (2 samples, 0.03%)</title><rect x="8.7465%" y="1157" width="0.0349%" height="15" fill="rgb(234,111,31)"/><text x="8.9965%" y="1167.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (86 samples, 1.50%)</title><rect x="7.3324%" y="1237" width="1.5014%" height="15" fill="rgb(241,149,10)"/><text x="7.5824%" y="1247.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (86 samples, 1.50%)</title><rect x="7.3324%" y="1221" width="1.5014%" height="15" fill="rgb(249,206,44)"/><text x="7.5824%" y="1231.50"></text></g><g><title>parking_lot_core::parking_lot::unlock_bucket_pair (3 samples, 0.05%)</title><rect x="8.7814%" y="1205" width="0.0524%" height="15" fill="rgb(251,153,30)"/><text x="9.0314%" y="1215.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::unlock (3 samples, 0.05%)</title><rect x="8.7814%" y="1189" width="0.0524%" height="15" fill="rgb(239,152,38)"/><text x="9.0314%" y="1199.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.05%)</title><rect x="8.7814%" y="1173" width="0.0524%" height="15" fill="rgb(249,139,47)"/><text x="9.0314%" y="1183.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.05%)</title><rect x="8.7814%" y="1157" width="0.0524%" height="15" fill="rgb(244,64,35)"/><text x="9.0314%" y="1167.50"></text></g><g><title>tokio::runtime::task::joinable (4 samples, 0.07%)</title><rect x="8.8338%" y="1237" width="0.0698%" height="15" fill="rgb(216,46,15)"/><text x="9.0838%" y="1247.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::new (4 samples, 0.07%)</title><rect x="8.8338%" y="1221" width="0.0698%" height="15" fill="rgb(250,74,19)"/><text x="9.0838%" y="1231.50"></text></g><g><title>tokio::runtime::task::core::Cell&lt;T,S&gt;::new (4 samples, 0.07%)</title><rect x="8.8338%" y="1205" width="0.0698%" height="15" fill="rgb(249,42,33)"/><text x="9.0838%" y="1215.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (4 samples, 0.07%)</title><rect x="8.8338%" y="1189" width="0.0698%" height="15" fill="rgb(242,149,17)"/><text x="9.0838%" y="1199.50"></text></g><g><title>[libc-2.31.so] (2 samples, 0.03%)</title><rect x="8.8687%" y="1173" width="0.0349%" height="15" fill="rgb(244,29,21)"/><text x="9.1187%" y="1183.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (4 samples, 0.07%)</title><rect x="8.9211%" y="1205" width="0.0698%" height="15" fill="rgb(220,130,37)"/><text x="9.1711%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,alloc::vec::Vec&lt;usize&gt;&gt;&gt; (3 samples, 0.05%)</title><rect x="8.9909%" y="1205" width="0.0524%" height="15" fill="rgb(211,67,2)"/><text x="9.2409%" y="1215.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.05%)</title><rect x="8.9909%" y="1189" width="0.0524%" height="15" fill="rgb(235,68,52)"/><text x="9.2409%" y="1199.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (3 samples, 0.05%)</title><rect x="8.9909%" y="1173" width="0.0524%" height="15" fill="rgb(246,142,3)"/><text x="9.2409%" y="1183.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (3 samples, 0.05%)</title><rect x="8.9909%" y="1157" width="0.0524%" height="15" fill="rgb(241,25,7)"/><text x="9.2409%" y="1167.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (3 samples, 0.05%)</title><rect x="8.9909%" y="1141" width="0.0524%" height="15" fill="rgb(242,119,39)"/><text x="9.2409%" y="1151.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (2 samples, 0.03%)</title><rect x="9.0433%" y="1157" width="0.0349%" height="15" fill="rgb(241,98,45)"/><text x="9.2933%" y="1167.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (2 samples, 0.03%)</title><rect x="9.0433%" y="1141" width="0.0349%" height="15" fill="rgb(254,28,30)"/><text x="9.2933%" y="1151.50"></text></g><g><title>core::sync::atomic::AtomicU8::load (2 samples, 0.03%)</title><rect x="9.0782%" y="1141" width="0.0349%" height="15" fill="rgb(241,142,54)"/><text x="9.3282%" y="1151.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.03%)</title><rect x="9.0782%" y="1125" width="0.0349%" height="15" fill="rgb(222,85,15)"/><text x="9.3282%" y="1135.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (5 samples, 0.09%)</title><rect x="9.0433%" y="1205" width="0.0873%" height="15" fill="rgb(210,85,47)"/><text x="9.2933%" y="1215.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (5 samples, 0.09%)</title><rect x="9.0433%" y="1189" width="0.0873%" height="15" fill="rgb(224,206,25)"/><text x="9.2933%" y="1199.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (5 samples, 0.09%)</title><rect x="9.0433%" y="1173" width="0.0873%" height="15" fill="rgb(243,201,19)"/><text x="9.2933%" y="1183.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (3 samples, 0.05%)</title><rect x="9.0782%" y="1157" width="0.0524%" height="15" fill="rgb(236,59,4)"/><text x="9.3282%" y="1167.50"></text></g><g><title>parking_lot_core::spinwait::SpinWait::spin (1 samples, 0.02%)</title><rect x="9.1131%" y="1141" width="0.0175%" height="15" fill="rgb(254,179,45)"/><text x="9.3631%" y="1151.50"></text></g><g><title>parking_lot_core::spinwait::cpu_relax (1 samples, 0.02%)</title><rect x="9.1131%" y="1125" width="0.0175%" height="15" fill="rgb(226,14,10)"/><text x="9.3631%" y="1135.50"></text></g><g><title>core::sync::atomic::spin_loop_hint (1 samples, 0.02%)</title><rect x="9.1131%" y="1109" width="0.0175%" height="15" fill="rgb(244,27,41)"/><text x="9.3631%" y="1119.50"></text></g><g><title>core::hint::spin_loop (1 samples, 0.02%)</title><rect x="9.1131%" y="1093" width="0.0175%" height="15" fill="rgb(235,35,32)"/><text x="9.3631%" y="1103.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (1 samples, 0.02%)</title><rect x="9.1131%" y="1077" width="0.0175%" height="15" fill="rgb(218,68,31)"/><text x="9.3631%" y="1087.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::notify_should_wakeup (9 samples, 0.16%)</title><rect x="9.1306%" y="1205" width="0.1571%" height="15" fill="rgb(207,120,37)"/><text x="9.3806%" y="1215.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (9 samples, 0.16%)</title><rect x="9.1306%" y="1189" width="0.1571%" height="15" fill="rgb(227,98,0)"/><text x="9.3806%" y="1199.50"></text></g><g><title>core::sync::atomic::atomic_add (9 samples, 0.16%)</title><rect x="9.1306%" y="1173" width="0.1571%" height="15" fill="rgb(207,7,3)"/><text x="9.3806%" y="1183.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::notify_parked (23 samples, 0.40%)</title><rect x="8.9036%" y="1237" width="0.4015%" height="15" fill="rgb(206,98,19)"/><text x="9.1536%" y="1247.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::worker_to_notify (22 samples, 0.38%)</title><rect x="8.9211%" y="1221" width="0.3841%" height="15" fill="rgb(217,5,26)"/><text x="9.1711%" y="1231.50"></text></g><g><title>tokio::runtime::thread_pool::idle::State::unpark_one (1 samples, 0.02%)</title><rect x="9.2877%" y="1205" width="0.0175%" height="15" fill="rgb(235,190,38)"/><text x="9.5377%" y="1215.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.02%)</title><rect x="9.2877%" y="1189" width="0.0175%" height="15" fill="rgb(247,86,24)"/><text x="9.5377%" y="1199.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.02%)</title><rect x="9.2877%" y="1173" width="0.0175%" height="15" fill="rgb(205,101,16)"/><text x="9.5377%" y="1183.50"></text></g><g><title>sync_regs (1 samples, 0.02%)</title><rect x="9.3052%" y="1221" width="0.0175%" height="15" fill="rgb(246,168,33)"/><text x="9.5552%" y="1231.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (12 samples, 0.21%)</title><rect x="9.4623%" y="1125" width="0.2095%" height="15" fill="rgb(231,114,1)"/><text x="9.7123%" y="1135.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (12 samples, 0.21%)</title><rect x="9.4623%" y="1109" width="0.2095%" height="15" fill="rgb(207,184,53)"/><text x="9.7123%" y="1119.50"></text></g><g><title>rho_runtime::storage::coordinator::Coordinator::handle_produce (196 samples, 3.42%)</title><rect x="6.2675%" y="1301" width="3.4218%" height="15" fill="rgb(224,95,51)"/><text x="6.5175%" y="1311.50">rho..</text></g><g><title>tokio::task::spawn::spawn (175 samples, 3.06%)</title><rect x="6.6341%" y="1285" width="3.0552%" height="15" fill="rgb(212,188,45)"/><text x="6.8841%" y="1295.50">tok..</text></g><g><title>tokio::runtime::spawner::Spawner::spawn (170 samples, 2.97%)</title><rect x="6.7214%" y="1269" width="2.9679%" height="15" fill="rgb(223,154,38)"/><text x="6.9714%" y="1279.50">tok..</text></g><g><title>tokio::runtime::thread_pool::Spawner::spawn (143 samples, 2.50%)</title><rect x="7.1927%" y="1253" width="2.4965%" height="15" fill="rgb(251,22,52)"/><text x="7.4427%" y="1263.50">to..</text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (22 samples, 0.38%)</title><rect x="9.3052%" y="1237" width="0.3841%" height="15" fill="rgb(229,209,22)"/><text x="9.5552%" y="1247.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (21 samples, 0.37%)</title><rect x="9.3226%" y="1221" width="0.3666%" height="15" fill="rgb(234,138,34)"/><text x="9.5726%" y="1231.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule::{{closure}} (16 samples, 0.28%)</title><rect x="9.4099%" y="1205" width="0.2793%" height="15" fill="rgb(212,95,11)"/><text x="9.6599%" y="1215.50"></text></g><g><title>tokio::runtime::queue::Inject&lt;T&gt;::push (16 samples, 0.28%)</title><rect x="9.4099%" y="1189" width="0.2793%" height="15" fill="rgb(240,179,47)"/><text x="9.6599%" y="1199.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (13 samples, 0.23%)</title><rect x="9.4623%" y="1173" width="0.2270%" height="15" fill="rgb(240,163,11)"/><text x="9.7123%" y="1183.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (13 samples, 0.23%)</title><rect x="9.4623%" y="1157" width="0.2270%" height="15" fill="rgb(236,37,12)"/><text x="9.7123%" y="1167.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (13 samples, 0.23%)</title><rect x="9.4623%" y="1141" width="0.2270%" height="15" fill="rgb(232,164,16)"/><text x="9.7123%" y="1151.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (1 samples, 0.02%)</title><rect x="9.6718%" y="1125" width="0.0175%" height="15" fill="rgb(244,205,15)"/><text x="9.9218%" y="1135.50"></text></g><g><title>parking_lot_core::spinwait::SpinWait::spin (1 samples, 0.02%)</title><rect x="9.6718%" y="1109" width="0.0175%" height="15" fill="rgb(223,117,47)"/><text x="9.9218%" y="1119.50"></text></g><g><title>parking_lot_core::thread_parker::imp::thread_yield (1 samples, 0.02%)</title><rect x="9.6718%" y="1093" width="0.0175%" height="15" fill="rgb(244,107,35)"/><text x="9.9218%" y="1103.50"></text></g><g><title>std::thread::yield_now (1 samples, 0.02%)</title><rect x="9.6718%" y="1077" width="0.0175%" height="15" fill="rgb(205,140,8)"/><text x="9.9218%" y="1087.50"></text></g><g><title>std::sys::unix::thread::Thread::yield_now (1 samples, 0.02%)</title><rect x="9.6718%" y="1061" width="0.0175%" height="15" fill="rgb(228,84,46)"/><text x="9.9218%" y="1071.50"></text></g><g><title>__sched_yield (1 samples, 0.02%)</title><rect x="9.6718%" y="1045" width="0.0175%" height="15" fill="rgb(254,188,9)"/><text x="9.9218%" y="1055.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.02%)</title><rect x="9.6718%" y="1029" width="0.0175%" height="15" fill="rgb(206,112,54)"/><text x="9.9218%" y="1039.50"></text></g><g><title>do_syscall_64 (1 samples, 0.02%)</title><rect x="9.6718%" y="1013" width="0.0175%" height="15" fill="rgb(216,84,49)"/><text x="9.9218%" y="1023.50"></text></g><g><title>__x64_sys_sched_yield (1 samples, 0.02%)</title><rect x="9.6718%" y="997" width="0.0175%" height="15" fill="rgb(214,194,35)"/><text x="9.9218%" y="1007.50"></text></g><g><title>yield_task_fair (1 samples, 0.02%)</title><rect x="9.6718%" y="981" width="0.0175%" height="15" fill="rgb(249,28,3)"/><text x="9.9218%" y="991.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::len (8 samples, 0.14%)</title><rect x="9.6892%" y="1301" width="0.1397%" height="15" fill="rgb(222,56,52)"/><text x="9.9392%" y="1311.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::len (8 samples, 0.14%)</title><rect x="9.6892%" y="1285" width="0.1397%" height="15" fill="rgb(245,217,50)"/><text x="9.9392%" y="1295.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (551 samples, 9.62%)</title><rect x="0.2270%" y="1365" width="9.6194%" height="15" fill="rgb(213,201,24)"/><text x="0.4770%" y="1375.50">&lt;core::future:..</text></g><g><title>rho_runtime::run::{{closure}} (551 samples, 9.62%)</title><rect x="0.2270%" y="1349" width="9.6194%" height="15" fill="rgb(248,116,28)"/><text x="0.4770%" y="1359.50">rho_runtime::r..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (551 samples, 9.62%)</title><rect x="0.2270%" y="1333" width="9.6194%" height="15" fill="rgb(219,72,43)"/><text x="0.4770%" y="1343.50">&lt;core::future:..</text></g><g><title>rho_runtime::storage::coordinator::Coordinator::run::{{closure}} (551 samples, 9.62%)</title><rect x="0.2270%" y="1317" width="9.6194%" height="15" fill="rgb(209,138,14)"/><text x="0.4770%" y="1327.50">rho_runtime::s..</text></g><g><title>tokio::sync::notify::Notify::notified (1 samples, 0.02%)</title><rect x="9.8289%" y="1301" width="0.0175%" height="15" fill="rgb(222,18,33)"/><text x="10.0789%" y="1311.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.02%)</title><rect x="9.8289%" y="1285" width="0.0175%" height="15" fill="rgb(213,199,7)"/><text x="10.0789%" y="1295.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="9.8289%" y="1269" width="0.0175%" height="15" fill="rgb(250,110,10)"/><text x="10.0789%" y="1279.50"></text></g><g><title>&lt;tokio::sync::notify::Notified as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="9.8464%" y="1365" width="0.0175%" height="15" fill="rgb(248,123,6)"/><text x="10.0964%" y="1375.50"></text></g><g><title>[libc-2.31.so] (4 samples, 0.07%)</title><rect x="9.8638%" y="1365" width="0.0698%" height="15" fill="rgb(206,91,31)"/><text x="10.1138%" y="1375.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="9.9162%" y="1349" width="0.0175%" height="15" fill="rgb(211,154,13)"/><text x="10.1662%" y="1359.50"></text></g><g><title>execve (1 samples, 0.02%)</title><rect x="9.9162%" y="1333" width="0.0175%" height="15" fill="rgb(225,148,7)"/><text x="10.1662%" y="1343.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.02%)</title><rect x="9.9162%" y="1317" width="0.0175%" height="15" fill="rgb(220,160,43)"/><text x="10.1662%" y="1327.50"></text></g><g><title>do_syscall_64 (1 samples, 0.02%)</title><rect x="9.9162%" y="1301" width="0.0175%" height="15" fill="rgb(213,52,39)"/><text x="10.1662%" y="1311.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.02%)</title><rect x="9.9162%" y="1285" width="0.0175%" height="15" fill="rgb(243,137,7)"/><text x="10.1662%" y="1295.50"></text></g><g><title>__do_execve_file.isra.0 (1 samples, 0.02%)</title><rect x="9.9162%" y="1269" width="0.0175%" height="15" fill="rgb(230,79,13)"/><text x="10.1662%" y="1279.50"></text></g><g><title>do_open_execat (1 samples, 0.02%)</title><rect x="9.9162%" y="1253" width="0.0175%" height="15" fill="rgb(247,105,23)"/><text x="10.1662%" y="1263.50"></text></g><g><title>do_filp_open (1 samples, 0.02%)</title><rect x="9.9162%" y="1237" width="0.0175%" height="15" fill="rgb(223,179,41)"/><text x="10.1662%" y="1247.50"></text></g><g><title>path_openat (1 samples, 0.02%)</title><rect x="9.9162%" y="1221" width="0.0175%" height="15" fill="rgb(218,9,34)"/><text x="10.1662%" y="1231.50"></text></g><g><title>link_path_walk.part.0 (1 samples, 0.02%)</title><rect x="9.9162%" y="1205" width="0.0175%" height="15" fill="rgb(222,106,8)"/><text x="10.1662%" y="1215.50"></text></g><g><title>inode_permission (1 samples, 0.02%)</title><rect x="9.9162%" y="1189" width="0.0175%" height="15" fill="rgb(211,220,0)"/><text x="10.1662%" y="1199.50"></text></g><g><title>fuse_permission (1 samples, 0.02%)</title><rect x="9.9162%" y="1173" width="0.0175%" height="15" fill="rgb(229,52,16)"/><text x="10.1662%" y="1183.50"></text></g><g><title>fuse_perm_getattr (1 samples, 0.02%)</title><rect x="9.9162%" y="1157" width="0.0175%" height="15" fill="rgb(212,155,18)"/><text x="10.1662%" y="1167.50"></text></g><g><title>fuse_do_getattr (1 samples, 0.02%)</title><rect x="9.9162%" y="1141" width="0.0175%" height="15" fill="rgb(242,21,14)"/><text x="10.1662%" y="1151.50"></text></g><g><title>fuse_simple_request (1 samples, 0.02%)</title><rect x="9.9162%" y="1125" width="0.0175%" height="15" fill="rgb(222,19,48)"/><text x="10.1662%" y="1135.50"></text></g><g><title>request_wait_answer (1 samples, 0.02%)</title><rect x="9.9162%" y="1109" width="0.0175%" height="15" fill="rgb(232,45,27)"/><text x="10.1662%" y="1119.50"></text></g><g><title>schedule (1 samples, 0.02%)</title><rect x="9.9162%" y="1093" width="0.0175%" height="15" fill="rgb(249,103,42)"/><text x="10.1662%" y="1103.50"></text></g><g><title>__sched_text_start (1 samples, 0.02%)</title><rect x="9.9162%" y="1077" width="0.0175%" height="15" fill="rgb(246,81,33)"/><text x="10.1662%" y="1087.50"></text></g><g><title>finish_task_switch (1 samples, 0.02%)</title><rect x="9.9162%" y="1061" width="0.0175%" height="15" fill="rgb(252,33,42)"/><text x="10.1662%" y="1071.50"></text></g><g><title>__perf_event_task_sched_in (1 samples, 0.02%)</title><rect x="9.9162%" y="1045" width="0.0175%" height="15" fill="rgb(209,212,41)"/><text x="10.1662%" y="1055.50"></text></g><g><title>perf_pmu_enable.part.0 (1 samples, 0.02%)</title><rect x="9.9162%" y="1029" width="0.0175%" height="15" fill="rgb(207,154,6)"/><text x="10.1662%" y="1039.50"></text></g><g><title>x86_pmu_enable (1 samples, 0.02%)</title><rect x="9.9162%" y="1013" width="0.0175%" height="15" fill="rgb(223,64,47)"/><text x="10.1662%" y="1023.50"></text></g><g><title>intel_pmu_enable_all (1 samples, 0.02%)</title><rect x="9.9162%" y="997" width="0.0175%" height="15" fill="rgb(211,161,38)"/><text x="10.1662%" y="1007.50"></text></g><g><title>native_write_msr (1 samples, 0.02%)</title><rect x="9.9162%" y="981" width="0.0175%" height="15" fill="rgb(219,138,40)"/><text x="10.1662%" y="991.50"></text></g><g><title>mi_malloc (1 samples, 0.02%)</title><rect x="9.9337%" y="1365" width="0.0175%" height="15" fill="rgb(241,228,46)"/><text x="10.1837%" y="1375.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (4 samples, 0.07%)</title><rect x="9.9511%" y="1365" width="0.0698%" height="15" fill="rgb(223,209,38)"/><text x="10.2011%" y="1375.50"></text></g><g><title>__rust_probestack (2 samples, 0.03%)</title><rect x="10.0209%" y="1173" width="0.0349%" height="15" fill="rgb(236,164,45)"/><text x="10.2709%" y="1183.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="10.2654%" y="1157" width="0.0175%" height="15" fill="rgb(231,15,5)"/><text x="10.5154%" y="1167.50"></text></g><g><title>rho_runtime::storage::coordinator::Coordinator::run::{{closure}} (1 samples, 0.02%)</title><rect x="10.2654%" y="1141" width="0.0175%" height="15" fill="rgb(252,35,15)"/><text x="10.5154%" y="1151.50"></text></g><g><title>__rust_probestack (1 samples, 0.02%)</title><rect x="10.2654%" y="1125" width="0.0175%" height="15" fill="rgb(248,181,18)"/><text x="10.5154%" y="1135.50"></text></g><g><title>__mod_lruvec_state (2 samples, 0.03%)</title><rect x="10.4399%" y="693" width="0.0349%" height="15" fill="rgb(233,39,42)"/><text x="10.6899%" y="703.50"></text></g><g><title>page_remove_rmap (5 samples, 0.09%)</title><rect x="10.4050%" y="709" width="0.0873%" height="15" fill="rgb(238,110,33)"/><text x="10.6550%" y="719.50"></text></g><g><title>lock_page_memcg (1 samples, 0.02%)</title><rect x="10.4749%" y="693" width="0.0175%" height="15" fill="rgb(233,195,10)"/><text x="10.7249%" y="703.50"></text></g><g><title>free_unref_page_commit (1 samples, 0.02%)</title><rect x="10.5447%" y="661" width="0.0175%" height="15" fill="rgb(254,105,3)"/><text x="10.7947%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;rho_runtime::storage::coordinator::Coordinator&gt; (17 samples, 0.30%)</title><rect x="10.2828%" y="1157" width="0.2968%" height="15" fill="rgb(221,225,9)"/><text x="10.5328%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;rho_runtime::storage::coordinator::ThreadSafeQueue&gt;&gt; (17 samples, 0.30%)</title><rect x="10.2828%" y="1141" width="0.2968%" height="15" fill="rgb(224,227,45)"/><text x="10.5328%" y="1151.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.30%)</title><rect x="10.2828%" y="1125" width="0.2968%" height="15" fill="rgb(229,198,43)"/><text x="10.5328%" y="1135.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (17 samples, 0.30%)</title><rect x="10.2828%" y="1109" width="0.2968%" height="15" fill="rgb(206,209,35)"/><text x="10.5328%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;rho_runtime::storage::coordinator::ThreadSafeQueue&gt; (17 samples, 0.30%)</title><rect x="10.2828%" y="1093" width="0.2968%" height="15" fill="rgb(245,195,53)"/><text x="10.5328%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_queue::array_queue::ArrayQueue&lt;rho_runtime::storage::coordinator::PendingTask&gt;&gt; (17 samples, 0.30%)</title><rect x="10.2828%" y="1077" width="0.2968%" height="15" fill="rgb(240,92,26)"/><text x="10.5328%" y="1087.50"></text></g><g><title>&lt;crossbeam_queue::array_queue::ArrayQueue&lt;T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.30%)</title><rect x="10.2828%" y="1061" width="0.2968%" height="15" fill="rgb(207,40,23)"/><text x="10.5328%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[crossbeam_queue::array_queue::Slot&lt;rho_runtime::storage::coordinator::PendingTask&gt;]&gt;&gt; (17 samples, 0.30%)</title><rect x="10.2828%" y="1045" width="0.2968%" height="15" fill="rgb(223,111,35)"/><text x="10.5328%" y="1055.50"></text></g><g><title>alloc::alloc::box_free (17 samples, 0.30%)</title><rect x="10.2828%" y="1029" width="0.2968%" height="15" fill="rgb(229,147,28)"/><text x="10.5328%" y="1039.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (17 samples, 0.30%)</title><rect x="10.2828%" y="1013" width="0.2968%" height="15" fill="rgb(211,29,28)"/><text x="10.5328%" y="1023.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 0.30%)</title><rect x="10.2828%" y="997" width="0.2968%" height="15" fill="rgb(228,72,33)"/><text x="10.5328%" y="1007.50"></text></g><g><title>__rg_dealloc (17 samples, 0.30%)</title><rect x="10.2828%" y="981" width="0.2968%" height="15" fill="rgb(205,214,31)"/><text x="10.5328%" y="991.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (17 samples, 0.30%)</title><rect x="10.2828%" y="965" width="0.2968%" height="15" fill="rgb(224,111,15)"/><text x="10.5328%" y="975.50"></text></g><g><title>_mi_mem_free (17 samples, 0.30%)</title><rect x="10.2828%" y="949" width="0.2968%" height="15" fill="rgb(253,21,26)"/><text x="10.5328%" y="959.50"></text></g><g><title>_mi_os_free_ex (17 samples, 0.30%)</title><rect x="10.2828%" y="933" width="0.2968%" height="15" fill="rgb(245,139,43)"/><text x="10.5328%" y="943.50"></text></g><g><title>_mi_os_free_ex (17 samples, 0.30%)</title><rect x="10.2828%" y="917" width="0.2968%" height="15" fill="rgb(252,170,7)"/><text x="10.5328%" y="927.50"></text></g><g><title>mi_os_mem_free (17 samples, 0.30%)</title><rect x="10.2828%" y="901" width="0.2968%" height="15" fill="rgb(231,118,14)"/><text x="10.5328%" y="911.50"></text></g><g><title>__munmap (17 samples, 0.30%)</title><rect x="10.2828%" y="885" width="0.2968%" height="15" fill="rgb(238,83,0)"/><text x="10.5328%" y="895.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (17 samples, 0.30%)</title><rect x="10.2828%" y="869" width="0.2968%" height="15" fill="rgb(221,39,39)"/><text x="10.5328%" y="879.50"></text></g><g><title>do_syscall_64 (17 samples, 0.30%)</title><rect x="10.2828%" y="853" width="0.2968%" height="15" fill="rgb(222,119,46)"/><text x="10.5328%" y="863.50"></text></g><g><title>__x64_sys_munmap (17 samples, 0.30%)</title><rect x="10.2828%" y="837" width="0.2968%" height="15" fill="rgb(222,165,49)"/><text x="10.5328%" y="847.50"></text></g><g><title>__vm_munmap (17 samples, 0.30%)</title><rect x="10.2828%" y="821" width="0.2968%" height="15" fill="rgb(219,113,52)"/><text x="10.5328%" y="831.50"></text></g><g><title>__do_munmap (17 samples, 0.30%)</title><rect x="10.2828%" y="805" width="0.2968%" height="15" fill="rgb(214,7,15)"/><text x="10.5328%" y="815.50"></text></g><g><title>unmap_region (17 samples, 0.30%)</title><rect x="10.2828%" y="789" width="0.2968%" height="15" fill="rgb(235,32,4)"/><text x="10.5328%" y="799.50"></text></g><g><title>unmap_vmas (17 samples, 0.30%)</title><rect x="10.2828%" y="773" width="0.2968%" height="15" fill="rgb(238,90,54)"/><text x="10.5328%" y="783.50"></text></g><g><title>unmap_single_vma (17 samples, 0.30%)</title><rect x="10.2828%" y="757" width="0.2968%" height="15" fill="rgb(213,208,19)"/><text x="10.5328%" y="767.50"></text></g><g><title>unmap_page_range (17 samples, 0.30%)</title><rect x="10.2828%" y="741" width="0.2968%" height="15" fill="rgb(233,156,4)"/><text x="10.5328%" y="751.50"></text></g><g><title>zap_pte_range.isra.0 (17 samples, 0.30%)</title><rect x="10.2828%" y="725" width="0.2968%" height="15" fill="rgb(207,194,5)"/><text x="10.5328%" y="735.50"></text></g><g><title>tlb_flush_mmu (5 samples, 0.09%)</title><rect x="10.4923%" y="709" width="0.0873%" height="15" fill="rgb(206,111,30)"/><text x="10.7423%" y="719.50"></text></g><g><title>free_pages_and_swap_cache (5 samples, 0.09%)</title><rect x="10.4923%" y="693" width="0.0873%" height="15" fill="rgb(243,70,54)"/><text x="10.7423%" y="703.50"></text></g><g><title>release_pages (3 samples, 0.05%)</title><rect x="10.5272%" y="677" width="0.0524%" height="15" fill="rgb(242,28,8)"/><text x="10.7772%" y="687.50"></text></g><g><title>free_unref_page_list (1 samples, 0.02%)</title><rect x="10.5622%" y="661" width="0.0175%" height="15" fill="rgb(219,106,18)"/><text x="10.8122%" y="671.50"></text></g><g><title>free_unref_page_commit (1 samples, 0.02%)</title><rect x="10.5622%" y="645" width="0.0175%" height="15" fill="rgb(244,222,10)"/><text x="10.8122%" y="655.50"></text></g><g><title>free_pcppages_bulk (1 samples, 0.02%)</title><rect x="10.5622%" y="629" width="0.0175%" height="15" fill="rgb(236,179,52)"/><text x="10.8122%" y="639.50"></text></g><g><title>down_read_trylock (1 samples, 0.02%)</title><rect x="10.7193%" y="837" width="0.0175%" height="15" fill="rgb(213,23,39)"/><text x="10.9693%" y="847.50"></text></g><g><title>_raw_spin_lock (6 samples, 0.10%)</title><rect x="10.7891%" y="805" width="0.1047%" height="15" fill="rgb(238,48,10)"/><text x="11.0391%" y="815.50"></text></g><g><title>__get_vma_policy (1 samples, 0.02%)</title><rect x="10.8939%" y="789" width="0.0175%" height="15" fill="rgb(251,196,23)"/><text x="11.1439%" y="799.50"></text></g><g><title>__next_zones_zonelist (1 samples, 0.02%)</title><rect x="10.9113%" y="757" width="0.0175%" height="15" fill="rgb(250,152,24)"/><text x="11.1613%" y="767.50"></text></g><g><title>clear_page_erms (1 samples, 0.02%)</title><rect x="10.9288%" y="741" width="0.0175%" height="15" fill="rgb(209,150,17)"/><text x="11.1788%" y="751.50"></text></g><g><title>prep_new_page (2 samples, 0.03%)</title><rect x="10.9462%" y="741" width="0.0349%" height="15" fill="rgb(234,202,34)"/><text x="11.1962%" y="751.50"></text></g><g><title>__alloc_pages_nodemask (5 samples, 0.09%)</title><rect x="10.9113%" y="773" width="0.0873%" height="15" fill="rgb(253,148,53)"/><text x="11.1613%" y="783.50"></text></g><g><title>get_page_from_freelist (4 samples, 0.07%)</title><rect x="10.9288%" y="757" width="0.0698%" height="15" fill="rgb(218,129,16)"/><text x="11.1788%" y="767.50"></text></g><g><title>rmqueue (1 samples, 0.02%)</title><rect x="10.9811%" y="741" width="0.0175%" height="15" fill="rgb(216,85,19)"/><text x="11.2311%" y="751.50"></text></g><g><title>get_task_policy.part.0 (1 samples, 0.02%)</title><rect x="10.9986%" y="773" width="0.0175%" height="15" fill="rgb(235,228,7)"/><text x="11.2486%" y="783.50"></text></g><g><title>alloc_pages_vma (7 samples, 0.12%)</title><rect x="10.9113%" y="789" width="0.1222%" height="15" fill="rgb(245,175,0)"/><text x="11.1613%" y="799.50"></text></g><g><title>get_vma_policy.part.0 (1 samples, 0.02%)</title><rect x="11.0161%" y="773" width="0.0175%" height="15" fill="rgb(208,168,36)"/><text x="11.2661%" y="783.50"></text></g><g><title>get_task_policy.part.0 (1 samples, 0.02%)</title><rect x="11.0161%" y="757" width="0.0175%" height="15" fill="rgb(246,171,24)"/><text x="11.2661%" y="767.50"></text></g><g><title>cgroup_throttle_swaprate (2 samples, 0.03%)</title><rect x="11.0335%" y="789" width="0.0349%" height="15" fill="rgb(215,142,24)"/><text x="11.2835%" y="799.50"></text></g><g><title>lru_cache_add_active_or_unevictable (5 samples, 0.09%)</title><rect x="11.0684%" y="789" width="0.0873%" height="15" fill="rgb(250,187,7)"/><text x="11.3184%" y="799.50"></text></g><g><title>lru_cache_add (5 samples, 0.09%)</title><rect x="11.0684%" y="773" width="0.0873%" height="15" fill="rgb(228,66,33)"/><text x="11.3184%" y="783.50"></text></g><g><title>pagevec_lru_move_fn (4 samples, 0.07%)</title><rect x="11.0859%" y="757" width="0.0698%" height="15" fill="rgb(234,215,21)"/><text x="11.3359%" y="767.50"></text></g><g><title>__pagevec_lru_add_fn (4 samples, 0.07%)</title><rect x="11.0859%" y="741" width="0.0698%" height="15" fill="rgb(222,191,20)"/><text x="11.3359%" y="751.50"></text></g><g><title>page_mapping (2 samples, 0.03%)</title><rect x="11.1208%" y="725" width="0.0349%" height="15" fill="rgb(245,79,54)"/><text x="11.3708%" y="735.50"></text></g><g><title>__count_memcg_events (1 samples, 0.02%)</title><rect x="11.1906%" y="773" width="0.0175%" height="15" fill="rgb(240,10,37)"/><text x="11.4406%" y="783.50"></text></g><g><title>mem_cgroup_charge_statistics.isra.0 (3 samples, 0.05%)</title><rect x="11.2081%" y="773" width="0.0524%" height="15" fill="rgb(214,192,32)"/><text x="11.4581%" y="783.50"></text></g><g><title>__count_memcg_events (3 samples, 0.05%)</title><rect x="11.2081%" y="757" width="0.0524%" height="15" fill="rgb(209,36,54)"/><text x="11.4581%" y="767.50"></text></g><g><title>mem_cgroup_charge (21 samples, 0.37%)</title><rect x="11.1557%" y="789" width="0.3666%" height="15" fill="rgb(220,10,11)"/><text x="11.4057%" y="799.50"></text></g><g><title>try_charge (15 samples, 0.26%)</title><rect x="11.2605%" y="773" width="0.2619%" height="15" fill="rgb(221,106,17)"/><text x="11.5105%" y="783.50"></text></g><g><title>page_add_new_anon_rmap (1 samples, 0.02%)</title><rect x="11.5223%" y="789" width="0.0175%" height="15" fill="rgb(251,142,44)"/><text x="11.7723%" y="799.50"></text></g><g><title>__handle_mm_fault (46 samples, 0.80%)</title><rect x="10.7542%" y="821" width="0.8031%" height="15" fill="rgb(238,13,15)"/><text x="11.0042%" y="831.50"></text></g><g><title>do_anonymous_page (38 samples, 0.66%)</title><rect x="10.8939%" y="805" width="0.6634%" height="15" fill="rgb(208,107,27)"/><text x="11.1439%" y="815.50"></text></g><g><title>pfn_pte (1 samples, 0.02%)</title><rect x="11.5398%" y="789" width="0.0175%" height="15" fill="rgb(205,136,37)"/><text x="11.7898%" y="799.50"></text></g><g><title>asm_exc_page_fault (50 samples, 0.87%)</title><rect x="10.7018%" y="885" width="0.8729%" height="15" fill="rgb(250,205,27)"/><text x="10.9518%" y="895.50"></text></g><g><title>exc_page_fault (50 samples, 0.87%)</title><rect x="10.7018%" y="869" width="0.8729%" height="15" fill="rgb(210,80,43)"/><text x="10.9518%" y="879.50"></text></g><g><title>do_user_addr_fault (50 samples, 0.87%)</title><rect x="10.7018%" y="853" width="0.8729%" height="15" fill="rgb(247,160,36)"/><text x="10.9518%" y="863.50"></text></g><g><title>handle_mm_fault (48 samples, 0.84%)</title><rect x="10.7367%" y="837" width="0.8380%" height="15" fill="rgb(234,13,49)"/><text x="10.9867%" y="847.50"></text></g><g><title>pmd_page_vaddr (1 samples, 0.02%)</title><rect x="11.5573%" y="821" width="0.0175%" height="15" fill="rgb(234,122,0)"/><text x="11.8073%" y="831.50"></text></g><g><title>error_entry (1 samples, 0.02%)</title><rect x="11.5747%" y="885" width="0.0175%" height="15" fill="rgb(207,146,38)"/><text x="11.8247%" y="895.50"></text></g><g><title>rho_runtime::main (97 samples, 1.69%)</title><rect x="10.0209%" y="1365" width="1.6934%" height="15" fill="rgb(207,177,25)"/><text x="10.2709%" y="1375.50"></text></g><g><title>tokio::runtime::Runtime::block_on (97 samples, 1.69%)</title><rect x="10.0209%" y="1349" width="1.6934%" height="15" fill="rgb(211,178,42)"/><text x="10.2709%" y="1359.50"></text></g><g><title>tokio::runtime::thread_pool::ThreadPool::block_on (97 samples, 1.69%)</title><rect x="10.0209%" y="1333" width="1.6934%" height="15" fill="rgb(230,69,54)"/><text x="10.2709%" y="1343.50"></text></g><g><title>tokio::runtime::enter::Enter::block_on (97 samples, 1.69%)</title><rect x="10.0209%" y="1317" width="1.6934%" height="15" fill="rgb(214,135,41)"/><text x="10.2709%" y="1327.50"></text></g><g><title>tokio::park::thread::CachedParkThread::block_on (97 samples, 1.69%)</title><rect x="10.0209%" y="1301" width="1.6934%" height="15" fill="rgb(237,67,25)"/><text x="10.2709%" y="1311.50"></text></g><g><title>tokio::coop::budget (97 samples, 1.69%)</title><rect x="10.0209%" y="1285" width="1.6934%" height="15" fill="rgb(222,189,50)"/><text x="10.2709%" y="1295.50"></text></g><g><title>tokio::coop::with_budget (97 samples, 1.69%)</title><rect x="10.0209%" y="1269" width="1.6934%" height="15" fill="rgb(245,148,34)"/><text x="10.2709%" y="1279.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (97 samples, 1.69%)</title><rect x="10.0209%" y="1253" width="1.6934%" height="15" fill="rgb(222,29,6)"/><text x="10.2709%" y="1263.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (97 samples, 1.69%)</title><rect x="10.0209%" y="1237" width="1.6934%" height="15" fill="rgb(221,189,43)"/><text x="10.2709%" y="1247.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (97 samples, 1.69%)</title><rect x="10.0209%" y="1221" width="1.6934%" height="15" fill="rgb(207,36,27)"/><text x="10.2709%" y="1231.50"></text></g><g><title>tokio::park::thread::CachedParkThread::block_on::{{closure}} (97 samples, 1.69%)</title><rect x="10.0209%" y="1205" width="1.6934%" height="15" fill="rgb(217,90,24)"/><text x="10.2709%" y="1215.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (97 samples, 1.69%)</title><rect x="10.0209%" y="1189" width="1.6934%" height="15" fill="rgb(224,66,35)"/><text x="10.2709%" y="1199.50"></text></g><g><title>rho_runtime::run::{{closure}} (95 samples, 1.66%)</title><rect x="10.0559%" y="1173" width="1.6585%" height="15" fill="rgb(221,13,50)"/><text x="10.3059%" y="1183.50"></text></g><g><title>rho_runtime::storage::coordinator::Coordinator::create (65 samples, 1.13%)</title><rect x="10.5796%" y="1157" width="1.1348%" height="15" fill="rgb(236,68,49)"/><text x="10.8296%" y="1167.50"></text></g><g><title>&lt;rho_runtime::storage::coordinator::ThreadSafeQueue as core::default::Default&gt;::default (65 samples, 1.13%)</title><rect x="10.5796%" y="1141" width="1.1348%" height="15" fill="rgb(229,146,28)"/><text x="10.8296%" y="1151.50"></text></g><g><title>crossbeam_queue::array_queue::ArrayQueue&lt;T&gt;::new (65 samples, 1.13%)</title><rect x="10.5796%" y="1125" width="1.1348%" height="15" fill="rgb(225,31,38)"/><text x="10.8296%" y="1135.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (65 samples, 1.13%)</title><rect x="10.5796%" y="1109" width="1.1348%" height="15" fill="rgb(250,208,3)"/><text x="10.8296%" y="1119.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[I]&gt; as core::iter::traits::collect::FromIterator&lt;I&gt;&gt;::from_iter (65 samples, 1.13%)</title><rect x="10.5796%" y="1093" width="1.1348%" height="15" fill="rgb(246,54,23)"/><text x="10.8296%" y="1103.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (65 samples, 1.13%)</title><rect x="10.5796%" y="1077" width="1.1348%" height="15" fill="rgb(243,76,11)"/><text x="10.8296%" y="1087.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (65 samples, 1.13%)</title><rect x="10.5796%" y="1061" width="1.1348%" height="15" fill="rgb(245,21,50)"/><text x="10.8296%" y="1071.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (65 samples, 1.13%)</title><rect x="10.5796%" y="1045" width="1.1348%" height="15" fill="rgb(228,9,43)"/><text x="10.8296%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (65 samples, 1.13%)</title><rect x="10.5796%" y="1029" width="1.1348%" height="15" fill="rgb(208,100,47)"/><text x="10.8296%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (65 samples, 1.13%)</title><rect x="10.5796%" y="1013" width="1.1348%" height="15" fill="rgb(232,26,8)"/><text x="10.8296%" y="1023.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (65 samples, 1.13%)</title><rect x="10.5796%" y="997" width="1.1348%" height="15" fill="rgb(216,166,38)"/><text x="10.8296%" y="1007.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (65 samples, 1.13%)</title><rect x="10.5796%" y="981" width="1.1348%" height="15" fill="rgb(251,202,51)"/><text x="10.8296%" y="991.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (65 samples, 1.13%)</title><rect x="10.5796%" y="965" width="1.1348%" height="15" fill="rgb(254,216,34)"/><text x="10.8296%" y="975.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (65 samples, 1.13%)</title><rect x="10.5796%" y="949" width="1.1348%" height="15" fill="rgb(251,32,27)"/><text x="10.8296%" y="959.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (65 samples, 1.13%)</title><rect x="10.5796%" y="933" width="1.1348%" height="15" fill="rgb(208,127,28)"/><text x="10.8296%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (65 samples, 1.13%)</title><rect x="10.5796%" y="917" width="1.1348%" height="15" fill="rgb(224,137,22)"/><text x="10.8296%" y="927.50"></text></g><g><title>core::ptr::write (65 samples, 1.13%)</title><rect x="10.5796%" y="901" width="1.1348%" height="15" fill="rgb(254,70,32)"/><text x="10.8296%" y="911.50"></text></g><g><title>sync_regs (7 samples, 0.12%)</title><rect x="11.5922%" y="885" width="0.1222%" height="15" fill="rgb(229,75,37)"/><text x="11.8422%" y="895.50"></text></g><g><title>[unknown] (659 samples, 11.50%)</title><rect x="0.2270%" y="1381" width="11.5049%" height="15" fill="rgb(252,64,23)"/><text x="0.4770%" y="1391.50">[unknown]</text></g><g><title>rho_runtime::storage::coordinator::Coordinator::run::{{closure}} (1 samples, 0.02%)</title><rect x="11.7144%" y="1365" width="0.0175%" height="15" fill="rgb(232,162,48)"/><text x="11.9644%" y="1375.50"></text></g><g><title>pthread_getattr_np (1 samples, 0.02%)</title><rect x="11.7318%" y="1333" width="0.0175%" height="15" fill="rgb(246,160,12)"/><text x="11.9818%" y="1343.50"></text></g><g><title>getdelim (1 samples, 0.02%)</title><rect x="11.7318%" y="1317" width="0.0175%" height="15" fill="rgb(247,166,0)"/><text x="11.9818%" y="1327.50"></text></g><g><title>_IO_file_underflow (1 samples, 0.02%)</title><rect x="11.7318%" y="1301" width="0.0175%" height="15" fill="rgb(249,219,21)"/><text x="11.9818%" y="1311.50"></text></g><g><title>__read_nocancel (1 samples, 0.02%)</title><rect x="11.7318%" y="1285" width="0.0175%" height="15" fill="rgb(205,209,3)"/><text x="11.9818%" y="1295.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.02%)</title><rect x="11.7318%" y="1269" width="0.0175%" height="15" fill="rgb(243,44,1)"/><text x="11.9818%" y="1279.50"></text></g><g><title>do_syscall_64 (1 samples, 0.02%)</title><rect x="11.7318%" y="1253" width="0.0175%" height="15" fill="rgb(206,159,16)"/><text x="11.9818%" y="1263.50"></text></g><g><title>__x64_sys_read (1 samples, 0.02%)</title><rect x="11.7318%" y="1237" width="0.0175%" height="15" fill="rgb(244,77,30)"/><text x="11.9818%" y="1247.50"></text></g><g><title>ksys_read (1 samples, 0.02%)</title><rect x="11.7318%" y="1221" width="0.0175%" height="15" fill="rgb(218,69,12)"/><text x="11.9818%" y="1231.50"></text></g><g><title>vfs_read (1 samples, 0.02%)</title><rect x="11.7318%" y="1205" width="0.0175%" height="15" fill="rgb(212,87,7)"/><text x="11.9818%" y="1215.50"></text></g><g><title>seq_read (1 samples, 0.02%)</title><rect x="11.7318%" y="1189" width="0.0175%" height="15" fill="rgb(245,114,25)"/><text x="11.9818%" y="1199.50"></text></g><g><title>seq_read_iter (1 samples, 0.02%)</title><rect x="11.7318%" y="1173" width="0.0175%" height="15" fill="rgb(210,61,42)"/><text x="11.9818%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::Runtime&gt; (1 samples, 0.02%)</title><rect x="11.7493%" y="1285" width="0.0175%" height="15" fill="rgb(211,52,33)"/><text x="11.9993%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::blocking::pool::BlockingPool&gt; (1 samples, 0.02%)</title><rect x="11.7493%" y="1269" width="0.0175%" height="15" fill="rgb(234,58,33)"/><text x="11.9993%" y="1279.50"></text></g><g><title>&lt;tokio::runtime::blocking::pool::BlockingPool as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="11.7493%" y="1253" width="0.0175%" height="15" fill="rgb(220,115,36)"/><text x="11.9993%" y="1263.50"></text></g><g><title>tokio::runtime::blocking::pool::BlockingPool::shutdown (1 samples, 0.02%)</title><rect x="11.7493%" y="1237" width="0.0175%" height="15" fill="rgb(243,153,54)"/><text x="11.9993%" y="1247.50"></text></g><g><title>std::thread::JoinHandle&lt;T&gt;::join (1 samples, 0.02%)</title><rect x="11.7493%" y="1221" width="0.0175%" height="15" fill="rgb(251,47,18)"/><text x="11.9993%" y="1231.50"></text></g><g><title>std::thread::JoinInner&lt;T&gt;::join (1 samples, 0.02%)</title><rect x="11.7493%" y="1205" width="0.0175%" height="15" fill="rgb(242,102,42)"/><text x="11.9993%" y="1215.50"></text></g><g><title>std::sys::unix::thread::Thread::join (1 samples, 0.02%)</title><rect x="11.7493%" y="1189" width="0.0175%" height="15" fill="rgb(234,31,38)"/><text x="11.9993%" y="1199.50"></text></g><g><title>__pthread_clockjoin_ex (1 samples, 0.02%)</title><rect x="11.7493%" y="1173" width="0.0175%" height="15" fill="rgb(221,117,51)"/><text x="11.9993%" y="1183.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.02%)</title><rect x="11.7493%" y="1157" width="0.0175%" height="15" fill="rgb(212,20,18)"/><text x="11.9993%" y="1167.50"></text></g><g><title>do_syscall_64 (1 samples, 0.02%)</title><rect x="11.7493%" y="1141" width="0.0175%" height="15" fill="rgb(245,133,36)"/><text x="11.9993%" y="1151.50"></text></g><g><title>__x64_sys_futex (1 samples, 0.02%)</title><rect x="11.7493%" y="1125" width="0.0175%" height="15" fill="rgb(212,6,19)"/><text x="11.9993%" y="1135.50"></text></g><g><title>do_futex (1 samples, 0.02%)</title><rect x="11.7493%" y="1109" width="0.0175%" height="15" fill="rgb(218,1,36)"/><text x="11.9993%" y="1119.50"></text></g><g><title>futex_wait (1 samples, 0.02%)</title><rect x="11.7493%" y="1093" width="0.0175%" height="15" fill="rgb(246,84,54)"/><text x="11.9993%" y="1103.50"></text></g><g><title>futex_wait_queue_me (1 samples, 0.02%)</title><rect x="11.7493%" y="1077" width="0.0175%" height="15" fill="rgb(242,110,6)"/><text x="11.9993%" y="1087.50"></text></g><g><title>schedule (1 samples, 0.02%)</title><rect x="11.7493%" y="1061" width="0.0175%" height="15" fill="rgb(214,47,5)"/><text x="11.9993%" y="1071.50"></text></g><g><title>__sched_text_start (1 samples, 0.02%)</title><rect x="11.7493%" y="1045" width="0.0175%" height="15" fill="rgb(218,159,25)"/><text x="11.9993%" y="1055.50"></text></g><g><title>__perf_event_task_sched_out (1 samples, 0.02%)</title><rect x="11.7493%" y="1029" width="0.0175%" height="15" fill="rgb(215,211,28)"/><text x="11.9993%" y="1039.50"></text></g><g><title>task_ctx_sched_out (1 samples, 0.02%)</title><rect x="11.7493%" y="1013" width="0.0175%" height="15" fill="rgb(238,59,32)"/><text x="11.9993%" y="1023.50"></text></g><g><title>ctx_sched_out (1 samples, 0.02%)</title><rect x="11.7493%" y="997" width="0.0175%" height="15" fill="rgb(226,82,3)"/><text x="11.9993%" y="1007.50"></text></g><g><title>x86_pmu_disable (1 samples, 0.02%)</title><rect x="11.7493%" y="981" width="0.0175%" height="15" fill="rgb(240,164,32)"/><text x="11.9993%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,()&gt;&gt; (2 samples, 0.03%)</title><rect x="11.7668%" y="1125" width="0.0349%" height="15" fill="rgb(232,46,7)"/><text x="12.0168%" y="1135.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="11.7668%" y="1109" width="0.0349%" height="15" fill="rgb(229,129,53)"/><text x="12.0168%" y="1119.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (2 samples, 0.03%)</title><rect x="11.7668%" y="1093" width="0.0349%" height="15" fill="rgb(234,188,29)"/><text x="12.0168%" y="1103.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (2 samples, 0.03%)</title><rect x="11.7668%" y="1077" width="0.0349%" height="15" fill="rgb(246,141,4)"/><text x="12.0168%" y="1087.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2 samples, 0.03%)</title><rect x="11.7668%" y="1061" width="0.0349%" height="15" fill="rgb(229,23,39)"/><text x="12.0168%" y="1071.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (12 samples, 0.21%)</title><rect x="11.8017%" y="1125" width="0.2095%" height="15" fill="rgb(206,12,3)"/><text x="12.0517%" y="1135.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (12 samples, 0.21%)</title><rect x="11.8017%" y="1109" width="0.2095%" height="15" fill="rgb(252,226,20)"/><text x="12.0517%" y="1119.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (2 samples, 0.03%)</title><rect x="12.0112%" y="1077" width="0.0349%" height="15" fill="rgb(216,123,35)"/><text x="12.2612%" y="1087.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (2 samples, 0.03%)</title><rect x="12.0112%" y="1061" width="0.0349%" height="15" fill="rgb(212,68,40)"/><text x="12.2612%" y="1071.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (2 samples, 0.03%)</title><rect x="12.0112%" y="1045" width="0.0349%" height="15" fill="rgb(254,125,32)"/><text x="12.2612%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;parking_lot_core::parking_lot::ThreadData&gt;&gt; (2 samples, 0.03%)</title><rect x="12.0461%" y="1045" width="0.0349%" height="15" fill="rgb(253,97,22)"/><text x="12.2961%" y="1055.50"></text></g><g><title>core::sync::atomic::AtomicI32::load (19 samples, 0.33%)</title><rect x="12.0985%" y="1013" width="0.3317%" height="15" fill="rgb(241,101,14)"/><text x="12.3485%" y="1023.50"></text></g><g><title>core::sync::atomic::atomic_load (19 samples, 0.33%)</title><rect x="12.0985%" y="997" width="0.3317%" height="15" fill="rgb(238,103,29)"/><text x="12.3485%" y="1007.50"></text></g><g><title>entry_SYSCALL_64 (5 samples, 0.09%)</title><rect x="12.5873%" y="981" width="0.0873%" height="15" fill="rgb(233,195,47)"/><text x="12.8373%" y="991.50"></text></g><g><title>__syscall_return_slowpath (1 samples, 0.02%)</title><rect x="12.8492%" y="965" width="0.0175%" height="15" fill="rgb(246,218,30)"/><text x="13.0992%" y="975.50"></text></g><g><title>__syscall_return_slowpath (15 samples, 0.26%)</title><rect x="12.9714%" y="949" width="0.2619%" height="15" fill="rgb(219,145,47)"/><text x="13.2214%" y="959.50"></text></g><g><title>__prepare_exit_to_usermode (15 samples, 0.26%)</title><rect x="12.9714%" y="933" width="0.2619%" height="15" fill="rgb(243,12,26)"/><text x="13.2214%" y="943.50"></text></g><g><title>switch_fpu_return (12 samples, 0.21%)</title><rect x="13.0237%" y="917" width="0.2095%" height="15" fill="rgb(214,87,16)"/><text x="13.2737%" y="927.50"></text></g><g><title>_cond_resched (1 samples, 0.02%)</title><rect x="13.4777%" y="901" width="0.0175%" height="15" fill="rgb(208,99,42)"/><text x="13.7277%" y="911.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.02%)</title><rect x="13.4951%" y="901" width="0.0175%" height="15" fill="rgb(253,99,2)"/><text x="13.7451%" y="911.50"></text></g><g><title>rcu_all_qs (3 samples, 0.05%)</title><rect x="13.6173%" y="885" width="0.0524%" height="15" fill="rgb(220,168,23)"/><text x="13.8673%" y="895.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="13.6522%" y="869" width="0.0175%" height="15" fill="rgb(242,38,24)"/><text x="13.9022%" y="879.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="13.6522%" y="853" width="0.0175%" height="15" fill="rgb(225,182,9)"/><text x="13.9022%" y="863.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.02%)</title><rect x="13.6522%" y="837" width="0.0175%" height="15" fill="rgb(243,178,37)"/><text x="13.9022%" y="847.50"></text></g><g><title>do_softirq_own_stack (1 samples, 0.02%)</title><rect x="13.6522%" y="821" width="0.0175%" height="15" fill="rgb(232,139,19)"/><text x="13.9022%" y="831.50"></text></g><g><title>asm_call_sysvec_on_stack (1 samples, 0.02%)</title><rect x="13.6522%" y="805" width="0.0175%" height="15" fill="rgb(225,201,24)"/><text x="13.9022%" y="815.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="13.6522%" y="789" width="0.0175%" height="15" fill="rgb(221,47,46)"/><text x="13.9022%" y="799.50"></text></g><g><title>sched_clock (1 samples, 0.02%)</title><rect x="14.0014%" y="805" width="0.0175%" height="15" fill="rgb(249,23,13)"/><text x="14.2514%" y="815.50"></text></g><g><title>sched_clock_cpu (2 samples, 0.03%)</title><rect x="14.0189%" y="805" width="0.0349%" height="15" fill="rgb(219,9,5)"/><text x="14.2689%" y="815.50"></text></g><g><title>native_sched_clock (2 samples, 0.03%)</title><rect x="14.0189%" y="789" width="0.0349%" height="15" fill="rgb(254,171,16)"/><text x="14.2689%" y="799.50"></text></g><g><title>__perf_event_task_sched_out (5 samples, 0.09%)</title><rect x="13.9839%" y="853" width="0.0873%" height="15" fill="rgb(230,171,20)"/><text x="14.2339%" y="863.50"></text></g><g><title>task_ctx_sched_out (5 samples, 0.09%)</title><rect x="13.9839%" y="837" width="0.0873%" height="15" fill="rgb(210,71,41)"/><text x="14.2339%" y="847.50"></text></g><g><title>ctx_sched_out (5 samples, 0.09%)</title><rect x="13.9839%" y="821" width="0.0873%" height="15" fill="rgb(206,173,20)"/><text x="14.2339%" y="831.50"></text></g><g><title>x86_pmu_disable (1 samples, 0.02%)</title><rect x="14.0538%" y="805" width="0.0175%" height="15" fill="rgb(233,88,34)"/><text x="14.3038%" y="815.50"></text></g><g><title>_raw_spin_lock (5 samples, 0.09%)</title><rect x="14.0712%" y="853" width="0.0873%" height="15" fill="rgb(223,209,46)"/><text x="14.3212%" y="863.50"></text></g><g><title>asm_sysvec_reschedule_ipi (1 samples, 0.02%)</title><rect x="14.1585%" y="853" width="0.0175%" height="15" fill="rgb(250,43,18)"/><text x="14.4085%" y="863.50"></text></g><g><title>account_entity_dequeue (2 samples, 0.03%)</title><rect x="14.2633%" y="837" width="0.0349%" height="15" fill="rgb(208,13,10)"/><text x="14.5133%" y="847.50"></text></g><g><title>__update_load_avg_se (1 samples, 0.02%)</title><rect x="14.3331%" y="821" width="0.0175%" height="15" fill="rgb(212,200,36)"/><text x="14.5831%" y="831.50"></text></g><g><title>account_entity_dequeue (1 samples, 0.02%)</title><rect x="14.3506%" y="821" width="0.0175%" height="15" fill="rgb(225,90,30)"/><text x="14.6006%" y="831.50"></text></g><g><title>clear_buddies (2 samples, 0.03%)</title><rect x="14.3680%" y="821" width="0.0349%" height="15" fill="rgb(236,182,39)"/><text x="14.6180%" y="831.50"></text></g><g><title>cpuacct_charge (1 samples, 0.02%)</title><rect x="14.4029%" y="821" width="0.0175%" height="15" fill="rgb(212,144,35)"/><text x="14.6529%" y="831.50"></text></g><g><title>update_cfs_group (3 samples, 0.05%)</title><rect x="14.4204%" y="821" width="0.0524%" height="15" fill="rgb(228,63,44)"/><text x="14.6704%" y="831.50"></text></g><g><title>reweight_entity (1 samples, 0.02%)</title><rect x="14.4553%" y="805" width="0.0175%" height="15" fill="rgb(228,109,6)"/><text x="14.7053%" y="815.50"></text></g><g><title>__calc_delta (7 samples, 0.12%)</title><rect x="14.5251%" y="805" width="0.1222%" height="15" fill="rgb(238,117,24)"/><text x="14.7751%" y="815.50"></text></g><g><title>cpuacct_charge (4 samples, 0.07%)</title><rect x="14.6473%" y="805" width="0.0698%" height="15" fill="rgb(242,26,26)"/><text x="14.8973%" y="815.50"></text></g><g><title>update_curr (17 samples, 0.30%)</title><rect x="14.4728%" y="821" width="0.2968%" height="15" fill="rgb(221,92,48)"/><text x="14.7228%" y="831.50"></text></g><g><title>update_min_vruntime (3 samples, 0.05%)</title><rect x="14.7172%" y="805" width="0.0524%" height="15" fill="rgb(209,209,32)"/><text x="14.9672%" y="815.50"></text></g><g><title>__update_load_avg_cfs_rq (7 samples, 0.12%)</title><rect x="14.8743%" y="805" width="0.1222%" height="15" fill="rgb(221,70,22)"/><text x="15.1243%" y="815.50"></text></g><g><title>dequeue_entity (46 samples, 0.80%)</title><rect x="14.2982%" y="837" width="0.8031%" height="15" fill="rgb(248,145,5)"/><text x="14.5482%" y="847.50"></text></g><g><title>update_load_avg (19 samples, 0.33%)</title><rect x="14.7696%" y="821" width="0.3317%" height="15" fill="rgb(226,116,26)"/><text x="15.0196%" y="831.50"></text></g><g><title>__update_load_avg_se (6 samples, 0.10%)</title><rect x="14.9965%" y="805" width="0.1047%" height="15" fill="rgb(244,5,17)"/><text x="15.2465%" y="815.50"></text></g><g><title>dequeue_task_fair (54 samples, 0.94%)</title><rect x="14.1760%" y="853" width="0.9427%" height="15" fill="rgb(252,159,33)"/><text x="14.4260%" y="863.50"></text></g><g><title>update_min_vruntime (1 samples, 0.02%)</title><rect x="15.1013%" y="837" width="0.0175%" height="15" fill="rgb(206,71,0)"/><text x="15.3513%" y="847.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (1 samples, 0.02%)</title><rect x="15.5726%" y="773" width="0.0175%" height="15" fill="rgb(233,118,54)"/><text x="15.8226%" y="783.50"></text></g><g><title>__perf_event_task_sched_in (52 samples, 0.91%)</title><rect x="15.5377%" y="837" width="0.9078%" height="15" fill="rgb(234,83,48)"/><text x="15.7877%" y="847.50"></text></g><g><title>perf_pmu_enable.part.0 (52 samples, 0.91%)</title><rect x="15.5377%" y="821" width="0.9078%" height="15" fill="rgb(228,3,54)"/><text x="15.7877%" y="831.50"></text></g><g><title>x86_pmu_enable (52 samples, 0.91%)</title><rect x="15.5377%" y="805" width="0.9078%" height="15" fill="rgb(226,155,13)"/><text x="15.7877%" y="815.50"></text></g><g><title>intel_pmu_enable_all (51 samples, 0.89%)</title><rect x="15.5552%" y="789" width="0.8904%" height="15" fill="rgb(241,28,37)"/><text x="15.8052%" y="799.50"></text></g><g><title>native_write_msr (49 samples, 0.86%)</title><rect x="15.5901%" y="773" width="0.8554%" height="15" fill="rgb(233,93,10)"/><text x="15.8401%" y="783.50"></text></g><g><title>finish_task_switch (77 samples, 1.34%)</title><rect x="15.1187%" y="853" width="1.3443%" height="15" fill="rgb(225,113,19)"/><text x="15.3687%" y="863.50"></text></g><g><title>asm_common_interrupt (1 samples, 0.02%)</title><rect x="16.4455%" y="837" width="0.0175%" height="15" fill="rgb(241,2,18)"/><text x="16.6955%" y="847.50"></text></g><g><title>common_interrupt (1 samples, 0.02%)</title><rect x="16.4455%" y="821" width="0.0175%" height="15" fill="rgb(228,207,21)"/><text x="16.6955%" y="831.50"></text></g><g><title>asm_call_sysvec_on_stack (1 samples, 0.02%)</title><rect x="16.4455%" y="805" width="0.0175%" height="15" fill="rgb(213,211,35)"/><text x="16.6955%" y="815.50"></text></g><g><title>handle_edge_irq (1 samples, 0.02%)</title><rect x="16.4455%" y="789" width="0.0175%" height="15" fill="rgb(209,83,10)"/><text x="16.6955%" y="799.50"></text></g><g><title>handle_irq_event (1 samples, 0.02%)</title><rect x="16.4455%" y="773" width="0.0175%" height="15" fill="rgb(209,164,1)"/><text x="16.6955%" y="783.50"></text></g><g><title>handle_irq_event_percpu (1 samples, 0.02%)</title><rect x="16.4455%" y="757" width="0.0175%" height="15" fill="rgb(213,184,43)"/><text x="16.6955%" y="767.50"></text></g><g><title>__handle_irq_event_percpu (1 samples, 0.02%)</title><rect x="16.4455%" y="741" width="0.0175%" height="15" fill="rgb(231,61,34)"/><text x="16.6955%" y="751.50"></text></g><g><title>xhci_msi_irq (1 samples, 0.02%)</title><rect x="16.4455%" y="725" width="0.0175%" height="15" fill="rgb(235,75,3)"/><text x="16.6955%" y="735.50"></text></g><g><title>usb_hcd_is_primary_hcd (1 samples, 0.02%)</title><rect x="16.4455%" y="709" width="0.0175%" height="15" fill="rgb(220,106,47)"/><text x="16.6955%" y="719.50"></text></g><g><title>pick_next_task_fair (7 samples, 0.12%)</title><rect x="16.4630%" y="853" width="0.1222%" height="15" fill="rgb(210,196,33)"/><text x="16.7130%" y="863.50"></text></g><g><title>newidle_balance (5 samples, 0.09%)</title><rect x="16.4979%" y="837" width="0.0873%" height="15" fill="rgb(229,154,42)"/><text x="16.7479%" y="847.50"></text></g><g><title>__update_idle_core (1 samples, 0.02%)</title><rect x="16.5852%" y="837" width="0.0175%" height="15" fill="rgb(228,114,26)"/><text x="16.8352%" y="847.50"></text></g><g><title>pick_next_task_idle (4 samples, 0.07%)</title><rect x="16.5852%" y="853" width="0.0698%" height="15" fill="rgb(208,144,1)"/><text x="16.8352%" y="863.50"></text></g><g><title>set_next_task_idle (3 samples, 0.05%)</title><rect x="16.6027%" y="837" width="0.0524%" height="15" fill="rgb(239,112,37)"/><text x="16.8527%" y="847.50"></text></g><g><title>__update_idle_core (2 samples, 0.03%)</title><rect x="16.6201%" y="821" width="0.0349%" height="15" fill="rgb(210,96,50)"/><text x="16.8701%" y="831.50"></text></g><g><title>psi_flags_change (1 samples, 0.02%)</title><rect x="16.8296%" y="837" width="0.0175%" height="15" fill="rgb(222,178,2)"/><text x="17.0796%" y="847.50"></text></g><g><title>psi_group_change (38 samples, 0.66%)</title><rect x="16.8471%" y="837" width="0.6634%" height="15" fill="rgb(226,74,18)"/><text x="17.0971%" y="847.50"></text></g><g><title>record_times (12 samples, 0.21%)</title><rect x="17.3010%" y="821" width="0.2095%" height="15" fill="rgb(225,67,54)"/><text x="17.5510%" y="831.50"></text></g><g><title>sched_clock_cpu (9 samples, 0.16%)</title><rect x="17.3534%" y="805" width="0.1571%" height="15" fill="rgb(251,92,32)"/><text x="17.6034%" y="815.50"></text></g><g><title>native_sched_clock (9 samples, 0.16%)</title><rect x="17.3534%" y="789" width="0.1571%" height="15" fill="rgb(228,149,22)"/><text x="17.6034%" y="799.50"></text></g><g><title>psi_task_change (50 samples, 0.87%)</title><rect x="16.6550%" y="853" width="0.8729%" height="15" fill="rgb(243,54,13)"/><text x="16.9050%" y="863.50"></text></g><g><title>record_times (1 samples, 0.02%)</title><rect x="17.5105%" y="837" width="0.0175%" height="15" fill="rgb(243,180,28)"/><text x="17.7605%" y="847.50"></text></g><g><title>psi_task_switch (1 samples, 0.02%)</title><rect x="17.5279%" y="853" width="0.0175%" height="15" fill="rgb(208,167,24)"/><text x="17.7779%" y="863.50"></text></g><g><title>put_prev_task_fair (7 samples, 0.12%)</title><rect x="17.5454%" y="853" width="0.1222%" height="15" fill="rgb(245,73,45)"/><text x="17.7954%" y="863.50"></text></g><g><title>put_prev_entity (2 samples, 0.03%)</title><rect x="17.6327%" y="837" width="0.0349%" height="15" fill="rgb(237,203,48)"/><text x="17.8827%" y="847.50"></text></g><g><title>sysvec_irq_work (1 samples, 0.02%)</title><rect x="17.6676%" y="853" width="0.0175%" height="15" fill="rgb(211,197,16)"/><text x="17.9176%" y="863.50"></text></g><g><title>__sched_text_start (229 samples, 4.00%)</title><rect x="13.7570%" y="869" width="3.9979%" height="15" fill="rgb(243,99,51)"/><text x="14.0070%" y="879.50">__sc..</text></g><g><title>update_rq_clock (4 samples, 0.07%)</title><rect x="17.6851%" y="853" width="0.0698%" height="15" fill="rgb(215,123,29)"/><text x="17.9351%" y="863.50"></text></g><g><title>sched_clock_cpu (3 samples, 0.05%)</title><rect x="17.7025%" y="837" width="0.0524%" height="15" fill="rgb(239,186,37)"/><text x="17.9525%" y="847.50"></text></g><g><title>native_sched_clock (2 samples, 0.03%)</title><rect x="17.7200%" y="821" width="0.0349%" height="15" fill="rgb(252,136,39)"/><text x="17.9700%" y="831.50"></text></g><g><title>futex_wait_queue_me (244 samples, 4.26%)</title><rect x="13.5126%" y="901" width="4.2598%" height="15" fill="rgb(223,213,32)"/><text x="13.7626%" y="911.50">futex..</text></g><g><title>schedule (235 samples, 4.10%)</title><rect x="13.6697%" y="885" width="4.1027%" height="15" fill="rgb(233,115,5)"/><text x="13.9197%" y="895.50">sche..</text></g><g><title>_raw_spin_lock (1 samples, 0.02%)</title><rect x="17.7549%" y="869" width="0.0175%" height="15" fill="rgb(207,226,44)"/><text x="18.0049%" y="879.50"></text></g><g><title>get_futex_key (1 samples, 0.02%)</title><rect x="18.0517%" y="885" width="0.0175%" height="15" fill="rgb(208,126,0)"/><text x="18.3017%" y="895.50"></text></g><g><title>futex_wait_setup (24 samples, 0.42%)</title><rect x="17.7723%" y="901" width="0.4190%" height="15" fill="rgb(244,66,21)"/><text x="18.0223%" y="911.50"></text></g><g><title>get_futex_value_locked (7 samples, 0.12%)</title><rect x="18.0691%" y="885" width="0.1222%" height="15" fill="rgb(222,97,12)"/><text x="18.3191%" y="895.50"></text></g><g><title>get_futex_value_locked (1 samples, 0.02%)</title><rect x="18.1913%" y="901" width="0.0175%" height="15" fill="rgb(219,213,19)"/><text x="18.4413%" y="911.50"></text></g><g><title>futex_wait (280 samples, 4.89%)</title><rect x="13.3380%" y="917" width="4.8883%" height="15" fill="rgb(252,169,30)"/><text x="13.5880%" y="927.50">futex_..</text></g><g><title>hash_futex (1 samples, 0.02%)</title><rect x="18.2088%" y="901" width="0.0175%" height="15" fill="rgb(206,32,51)"/><text x="18.4588%" y="911.50"></text></g><g><title>futex_wait_queue_me (1 samples, 0.02%)</title><rect x="18.2263%" y="917" width="0.0175%" height="15" fill="rgb(250,172,42)"/><text x="18.4763%" y="927.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (320 samples, 5.59%)</title><rect x="12.6746%" y="981" width="5.5866%" height="15" fill="rgb(209,34,43)"/><text x="12.9246%" y="991.50">entry_S..</text></g><g><title>do_syscall_64 (309 samples, 5.39%)</title><rect x="12.8666%" y="965" width="5.3946%" height="15" fill="rgb(223,11,35)"/><text x="13.1166%" y="975.50">do_sysc..</text></g><g><title>__x64_sys_futex (288 samples, 5.03%)</title><rect x="13.2332%" y="949" width="5.0279%" height="15" fill="rgb(251,219,26)"/><text x="13.4832%" y="959.50">__x64_..</text></g><g><title>do_futex (283 samples, 4.94%)</title><rect x="13.3205%" y="933" width="4.9406%" height="15" fill="rgb(231,119,3)"/><text x="13.5705%" y="943.50">do_fut..</text></g><g><title>futex_wait_setup (1 samples, 0.02%)</title><rect x="18.2437%" y="917" width="0.0175%" height="15" fill="rgb(216,97,11)"/><text x="18.4937%" y="927.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (356 samples, 6.22%)</title><rect x="12.0985%" y="1029" width="6.2151%" height="15" fill="rgb(223,59,9)"/><text x="12.3485%" y="1039.50">&lt;parking..</text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (337 samples, 5.88%)</title><rect x="12.4302%" y="1013" width="5.8834%" height="15" fill="rgb(233,93,31)"/><text x="12.6802%" y="1023.50">parking..</text></g><g><title>syscall (335 samples, 5.85%)</title><rect x="12.4651%" y="997" width="5.8485%" height="15" fill="rgb(239,81,33)"/><text x="12.7151%" y="1007.50">syscall</text></g><g><title>syscall_return_via_sysret (3 samples, 0.05%)</title><rect x="18.2612%" y="981" width="0.0524%" height="15" fill="rgb(213,120,34)"/><text x="18.5112%" y="991.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3 samples, 0.05%)</title><rect x="18.3135%" y="1029" width="0.0524%" height="15" fill="rgb(243,49,53)"/><text x="18.5635%" y="1039.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal::{{closure}} (3 samples, 0.05%)</title><rect x="18.3135%" y="1013" width="0.0524%" height="15" fill="rgb(247,216,33)"/><text x="18.5635%" y="1023.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (3 samples, 0.05%)</title><rect x="18.3135%" y="997" width="0.0524%" height="15" fill="rgb(226,26,14)"/><text x="18.5635%" y="1007.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (3 samples, 0.05%)</title><rect x="18.3135%" y="981" width="0.0524%" height="15" fill="rgb(215,49,53)"/><text x="18.5635%" y="991.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (3 samples, 0.05%)</title><rect x="18.3135%" y="965" width="0.0524%" height="15" fill="rgb(245,162,40)"/><text x="18.5635%" y="975.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket (2 samples, 0.03%)</title><rect x="18.3659%" y="1029" width="0.0349%" height="15" fill="rgb(229,68,17)"/><text x="18.6159%" y="1039.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (2 samples, 0.03%)</title><rect x="18.3659%" y="1013" width="0.0349%" height="15" fill="rgb(213,182,10)"/><text x="18.6159%" y="1023.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (2 samples, 0.03%)</title><rect x="18.3659%" y="997" width="0.0349%" height="15" fill="rgb(245,125,30)"/><text x="18.6159%" y="1007.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (2 samples, 0.03%)</title><rect x="18.3659%" y="981" width="0.0349%" height="15" fill="rgb(232,202,2)"/><text x="18.6159%" y="991.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (363 samples, 6.34%)</title><rect x="12.0810%" y="1045" width="6.3373%" height="15" fill="rgb(237,140,51)"/><text x="12.3310%" y="1055.50">parking_..</text></g><g><title>parking_lot_core::word_lock::WordLock::unlock (1 samples, 0.02%)</title><rect x="18.4008%" y="1029" width="0.0175%" height="15" fill="rgb(236,157,25)"/><text x="18.6508%" y="1039.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.02%)</title><rect x="18.4008%" y="1013" width="0.0175%" height="15" fill="rgb(219,209,0)"/><text x="18.6508%" y="1023.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.02%)</title><rect x="18.4008%" y="997" width="0.0175%" height="15" fill="rgb(240,116,54)"/><text x="18.6508%" y="1007.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (368 samples, 6.42%)</title><rect x="12.0112%" y="1125" width="6.4246%" height="15" fill="rgb(216,10,36)"/><text x="12.2612%" y="1135.50">tokio::l..</text></g><g><title>parking_lot::condvar::Condvar::wait (368 samples, 6.42%)</title><rect x="12.0112%" y="1109" width="6.4246%" height="15" fill="rgb(222,72,44)"/><text x="12.2612%" y="1119.50">parking_..</text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (368 samples, 6.42%)</title><rect x="12.0112%" y="1093" width="6.4246%" height="15" fill="rgb(232,159,9)"/><text x="12.2612%" y="1103.50">parking_..</text></g><g><title>parking_lot_core::parking_lot::park (366 samples, 6.39%)</title><rect x="12.0461%" y="1077" width="6.3897%" height="15" fill="rgb(210,39,32)"/><text x="12.2961%" y="1087.50">parking_..</text></g><g><title>parking_lot_core::parking_lot::with_thread_data (366 samples, 6.39%)</title><rect x="12.0461%" y="1061" width="6.3897%" height="15" fill="rgb(216,194,45)"/><text x="12.2961%" y="1071.50">parking_..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.02%)</title><rect x="18.4183%" y="1045" width="0.0175%" height="15" fill="rgb(218,18,35)"/><text x="18.6683%" y="1055.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__getit (1 samples, 0.02%)</title><rect x="18.4183%" y="1029" width="0.0175%" height="15" fill="rgb(207,83,51)"/><text x="18.6683%" y="1039.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (1 samples, 0.02%)</title><rect x="18.4183%" y="1013" width="0.0175%" height="15" fill="rgb(225,63,43)"/><text x="18.6683%" y="1023.50"></text></g><g><title>&lt;tokio::park::thread::CachedParkThread as tokio::park::Park&gt;::park (384 samples, 6.70%)</title><rect x="11.7668%" y="1221" width="6.7039%" height="15" fill="rgb(207,57,36)"/><text x="12.0168%" y="1231.50">&lt;tokio::p..</text></g><g><title>tokio::park::thread::CachedParkThread::with_current (384 samples, 6.70%)</title><rect x="11.7668%" y="1205" width="6.7039%" height="15" fill="rgb(216,99,33)"/><text x="12.0168%" y="1215.50">tokio::pa..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (384 samples, 6.70%)</title><rect x="11.7668%" y="1189" width="6.7039%" height="15" fill="rgb(225,42,16)"/><text x="12.0168%" y="1199.50">std::thre..</text></g><g><title>tokio::park::thread::CachedParkThread::with_current::{{closure}} (384 samples, 6.70%)</title><rect x="11.7668%" y="1173" width="6.7039%" height="15" fill="rgb(220,201,45)"/><text x="12.0168%" y="1183.50">tokio::pa..</text></g><g><title>&lt;tokio::park::thread::CachedParkThread as tokio::park::Park&gt;::park::{{closure}} (384 samples, 6.70%)</title><rect x="11.7668%" y="1157" width="6.7039%" height="15" fill="rgb(225,33,4)"/><text x="12.0168%" y="1167.50">&lt;tokio::p..</text></g><g><title>tokio::park::thread::Inner::park (384 samples, 6.70%)</title><rect x="11.7668%" y="1141" width="6.7039%" height="15" fill="rgb(224,33,50)"/><text x="12.0168%" y="1151.50">tokio::pa..</text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (2 samples, 0.03%)</title><rect x="18.4358%" y="1125" width="0.0349%" height="15" fill="rgb(246,198,51)"/><text x="18.6858%" y="1135.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (2 samples, 0.03%)</title><rect x="18.4358%" y="1109" width="0.0349%" height="15" fill="rgb(205,22,4)"/><text x="18.6858%" y="1119.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (2 samples, 0.03%)</title><rect x="18.4358%" y="1093" width="0.0349%" height="15" fill="rgb(206,3,8)"/><text x="18.6858%" y="1103.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (2 samples, 0.03%)</title><rect x="18.4358%" y="1077" width="0.0349%" height="15" fill="rgb(251,23,15)"/><text x="18.6858%" y="1087.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (2 samples, 0.03%)</title><rect x="18.4358%" y="1061" width="0.0349%" height="15" fill="rgb(252,88,28)"/><text x="18.6858%" y="1071.50"></text></g><g><title>tokio::coop::CURRENT::__getit (1 samples, 0.02%)</title><rect x="18.4707%" y="1157" width="0.0175%" height="15" fill="rgb(212,127,14)"/><text x="18.7207%" y="1167.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (1 samples, 0.02%)</title><rect x="18.4707%" y="1141" width="0.0175%" height="15" fill="rgb(247,145,37)"/><text x="18.7207%" y="1151.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (1 samples, 0.02%)</title><rect x="18.4707%" y="1125" width="0.0175%" height="15" fill="rgb(209,117,53)"/><text x="18.7207%" y="1135.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.02%)</title><rect x="18.4707%" y="1109" width="0.0175%" height="15" fill="rgb(212,90,42)"/><text x="18.7207%" y="1119.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (2 samples, 0.03%)</title><rect x="18.4881%" y="1141" width="0.0349%" height="15" fill="rgb(218,164,37)"/><text x="18.7381%" y="1151.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (2 samples, 0.03%)</title><rect x="18.4881%" y="1125" width="0.0349%" height="15" fill="rgb(246,65,34)"/><text x="18.7381%" y="1135.50"></text></g><g><title>core::mem::replace (2 samples, 0.03%)</title><rect x="18.4881%" y="1109" width="0.0349%" height="15" fill="rgb(231,100,33)"/><text x="18.7381%" y="1119.50"></text></g><g><title>core::mem::swap (2 samples, 0.03%)</title><rect x="18.4881%" y="1093" width="0.0349%" height="15" fill="rgb(228,126,14)"/><text x="18.7381%" y="1103.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (2 samples, 0.03%)</title><rect x="18.4881%" y="1077" width="0.0349%" height="15" fill="rgb(215,173,21)"/><text x="18.7381%" y="1087.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.03%)</title><rect x="18.4881%" y="1061" width="0.0349%" height="15" fill="rgb(210,6,40)"/><text x="18.7381%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::coop::with_budget::ResetGuard&gt; (2 samples, 0.03%)</title><rect x="18.5230%" y="1141" width="0.0349%" height="15" fill="rgb(212,48,18)"/><text x="18.7730%" y="1151.50"></text></g><g><title>&lt;tokio::coop::with_budget::ResetGuard as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="18.5230%" y="1125" width="0.0349%" height="15" fill="rgb(230,214,11)"/><text x="18.7730%" y="1135.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (2 samples, 0.03%)</title><rect x="18.5230%" y="1109" width="0.0349%" height="15" fill="rgb(254,105,39)"/><text x="18.7730%" y="1119.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (2 samples, 0.03%)</title><rect x="18.5230%" y="1093" width="0.0349%" height="15" fill="rgb(245,158,5)"/><text x="18.7730%" y="1103.50"></text></g><g><title>core::mem::replace (2 samples, 0.03%)</title><rect x="18.5230%" y="1077" width="0.0349%" height="15" fill="rgb(249,208,11)"/><text x="18.7730%" y="1087.50"></text></g><g><title>core::mem::swap (2 samples, 0.03%)</title><rect x="18.5230%" y="1061" width="0.0349%" height="15" fill="rgb(210,39,28)"/><text x="18.7730%" y="1071.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (2 samples, 0.03%)</title><rect x="18.5230%" y="1045" width="0.0349%" height="15" fill="rgb(211,56,53)"/><text x="18.7730%" y="1055.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.03%)</title><rect x="18.5230%" y="1029" width="0.0349%" height="15" fill="rgb(226,201,30)"/><text x="18.7730%" y="1039.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="18.5580%" y="965" width="0.0175%" height="15" fill="rgb(239,101,34)"/><text x="18.8080%" y="975.50"></text></g><g><title>_start (395 samples, 6.90%)</title><rect x="11.7318%" y="1381" width="6.8959%" height="15" fill="rgb(226,209,5)"/><text x="11.9818%" y="1391.50">_start</text></g><g><title>__libc_start_main (395 samples, 6.90%)</title><rect x="11.7318%" y="1365" width="6.8959%" height="15" fill="rgb(250,105,47)"/><text x="11.9818%" y="1375.50">__libc_st..</text></g><g><title>main (395 samples, 6.90%)</title><rect x="11.7318%" y="1349" width="6.8959%" height="15" fill="rgb(230,72,3)"/><text x="11.9818%" y="1359.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (394 samples, 6.88%)</title><rect x="11.7493%" y="1333" width="6.8785%" height="15" fill="rgb(232,218,39)"/><text x="11.9993%" y="1343.50">std::sys_..</text></g><g><title>core::ops::function::FnOnce::call_once (394 samples, 6.88%)</title><rect x="11.7493%" y="1317" width="6.8785%" height="15" fill="rgb(248,166,6)"/><text x="11.9993%" y="1327.50">core::ops..</text></g><g><title>rho_runtime::main (394 samples, 6.88%)</title><rect x="11.7493%" y="1301" width="6.8785%" height="15" fill="rgb(247,89,20)"/><text x="11.9993%" y="1311.50">rho_runti..</text></g><g><title>tokio::runtime::Runtime::block_on (393 samples, 6.86%)</title><rect x="11.7668%" y="1285" width="6.8610%" height="15" fill="rgb(248,130,54)"/><text x="12.0168%" y="1295.50">tokio::ru..</text></g><g><title>tokio::runtime::thread_pool::ThreadPool::block_on (393 samples, 6.86%)</title><rect x="11.7668%" y="1269" width="6.8610%" height="15" fill="rgb(234,196,4)"/><text x="12.0168%" y="1279.50">tokio::ru..</text></g><g><title>tokio::runtime::enter::Enter::block_on (393 samples, 6.86%)</title><rect x="11.7668%" y="1253" width="6.8610%" height="15" fill="rgb(250,143,31)"/><text x="12.0168%" y="1263.50">tokio::ru..</text></g><g><title>tokio::park::thread::CachedParkThread::block_on (393 samples, 6.86%)</title><rect x="11.7668%" y="1237" width="6.8610%" height="15" fill="rgb(211,110,34)"/><text x="12.0168%" y="1247.50">tokio::pa..</text></g><g><title>tokio::coop::budget (9 samples, 0.16%)</title><rect x="18.4707%" y="1221" width="0.1571%" height="15" fill="rgb(215,124,48)"/><text x="18.7207%" y="1231.50"></text></g><g><title>tokio::coop::with_budget (9 samples, 0.16%)</title><rect x="18.4707%" y="1205" width="0.1571%" height="15" fill="rgb(216,46,13)"/><text x="18.7207%" y="1215.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (9 samples, 0.16%)</title><rect x="18.4707%" y="1189" width="0.1571%" height="15" fill="rgb(205,184,25)"/><text x="18.7207%" y="1199.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (9 samples, 0.16%)</title><rect x="18.4707%" y="1173" width="0.1571%" height="15" fill="rgb(228,1,10)"/><text x="18.7207%" y="1183.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (8 samples, 0.14%)</title><rect x="18.4881%" y="1157" width="0.1397%" height="15" fill="rgb(213,116,27)"/><text x="18.7381%" y="1167.50"></text></g><g><title>tokio::park::thread::CachedParkThread::block_on::{{closure}} (4 samples, 0.07%)</title><rect x="18.5580%" y="1141" width="0.0698%" height="15" fill="rgb(241,95,50)"/><text x="18.8080%" y="1151.50"></text></g><g><title>tokio::park::thread::Inner::park (4 samples, 0.07%)</title><rect x="18.5580%" y="1125" width="0.0698%" height="15" fill="rgb(238,48,32)"/><text x="18.8080%" y="1135.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (4 samples, 0.07%)</title><rect x="18.5580%" y="1109" width="0.0698%" height="15" fill="rgb(235,113,49)"/><text x="18.8080%" y="1119.50"></text></g><g><title>parking_lot::condvar::Condvar::wait (4 samples, 0.07%)</title><rect x="18.5580%" y="1093" width="0.0698%" height="15" fill="rgb(205,127,43)"/><text x="18.8080%" y="1103.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (4 samples, 0.07%)</title><rect x="18.5580%" y="1077" width="0.0698%" height="15" fill="rgb(250,162,2)"/><text x="18.8080%" y="1087.50"></text></g><g><title>parking_lot_core::parking_lot::park (4 samples, 0.07%)</title><rect x="18.5580%" y="1061" width="0.0698%" height="15" fill="rgb(220,13,41)"/><text x="18.8080%" y="1071.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (4 samples, 0.07%)</title><rect x="18.5580%" y="1045" width="0.0698%" height="15" fill="rgb(249,221,25)"/><text x="18.8080%" y="1055.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (4 samples, 0.07%)</title><rect x="18.5580%" y="1029" width="0.0698%" height="15" fill="rgb(215,208,19)"/><text x="18.8080%" y="1039.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (4 samples, 0.07%)</title><rect x="18.5580%" y="1013" width="0.0698%" height="15" fill="rgb(236,175,2)"/><text x="18.8080%" y="1023.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (4 samples, 0.07%)</title><rect x="18.5580%" y="997" width="0.0698%" height="15" fill="rgb(241,52,2)"/><text x="18.8080%" y="1007.50"></text></g><g><title>syscall (4 samples, 0.07%)</title><rect x="18.5580%" y="981" width="0.0698%" height="15" fill="rgb(248,140,14)"/><text x="18.8080%" y="991.50"></text></g><g><title>entry_SYSCALL_64 (3 samples, 0.05%)</title><rect x="18.5754%" y="965" width="0.0524%" height="15" fill="rgb(253,22,42)"/><text x="18.8254%" y="975.50"></text></g><g><title>asm_exc_page_fault (15 samples, 0.26%)</title><rect x="18.6278%" y="1381" width="0.2619%" height="15" fill="rgb(234,61,47)"/><text x="18.8778%" y="1391.50"></text></g><g><title>schedule_tail (43 samples, 0.75%)</title><rect x="18.8897%" y="1349" width="0.7507%" height="15" fill="rgb(208,226,15)"/><text x="19.1397%" y="1359.50"></text></g><g><title>finish_task_switch (43 samples, 0.75%)</title><rect x="18.8897%" y="1333" width="0.7507%" height="15" fill="rgb(217,221,4)"/><text x="19.1397%" y="1343.50"></text></g><g><title>__perf_event_task_sched_in (40 samples, 0.70%)</title><rect x="18.9420%" y="1317" width="0.6983%" height="15" fill="rgb(212,174,34)"/><text x="19.1920%" y="1327.50"></text></g><g><title>perf_pmu_enable.part.0 (39 samples, 0.68%)</title><rect x="18.9595%" y="1301" width="0.6809%" height="15" fill="rgb(253,83,4)"/><text x="19.2095%" y="1311.50"></text></g><g><title>x86_pmu_enable (39 samples, 0.68%)</title><rect x="18.9595%" y="1285" width="0.6809%" height="15" fill="rgb(250,195,49)"/><text x="19.2095%" y="1295.50"></text></g><g><title>intel_pmu_enable_all (39 samples, 0.68%)</title><rect x="18.9595%" y="1269" width="0.6809%" height="15" fill="rgb(241,192,25)"/><text x="19.2095%" y="1279.50"></text></g><g><title>native_write_msr (39 samples, 0.68%)</title><rect x="18.9595%" y="1253" width="0.6809%" height="15" fill="rgb(208,124,10)"/><text x="19.2095%" y="1263.50"></text></g><g><title>clone (45 samples, 0.79%)</title><rect x="18.8897%" y="1381" width="0.7856%" height="15" fill="rgb(222,33,0)"/><text x="19.1397%" y="1391.50"></text></g><g><title>ret_from_fork (45 samples, 0.79%)</title><rect x="18.8897%" y="1365" width="0.7856%" height="15" fill="rgb(234,209,28)"/><text x="19.1397%" y="1375.50"></text></g><g><title>syscall_return_slowpath (2 samples, 0.03%)</title><rect x="19.6404%" y="1349" width="0.0349%" height="15" fill="rgb(224,11,23)"/><text x="19.8904%" y="1359.50"></text></g><g><title>__syscall_return_slowpath (2 samples, 0.03%)</title><rect x="19.6404%" y="1333" width="0.0349%" height="15" fill="rgb(232,99,1)"/><text x="19.8904%" y="1343.50"></text></g><g><title>__prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="19.6404%" y="1317" width="0.0349%" height="15" fill="rgb(237,95,45)"/><text x="19.8904%" y="1327.50"></text></g><g><title>switch_fpu_return (2 samples, 0.03%)</title><rect x="19.6404%" y="1301" width="0.0349%" height="15" fill="rgb(208,109,11)"/><text x="19.8904%" y="1311.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.02%)</title><rect x="19.6753%" y="1381" width="0.0175%" height="15" fill="rgb(216,190,48)"/><text x="19.9253%" y="1391.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.02%)</title><rect x="19.6927%" y="1349" width="0.0175%" height="15" fill="rgb(251,171,36)"/><text x="19.9427%" y="1359.50"></text></g><g><title>__do_execve_file.isra.0 (1 samples, 0.02%)</title><rect x="19.6927%" y="1333" width="0.0175%" height="15" fill="rgb(230,62,22)"/><text x="19.9427%" y="1343.50"></text></g><g><title>exec_binprm (1 samples, 0.02%)</title><rect x="19.6927%" y="1317" width="0.0175%" height="15" fill="rgb(225,114,35)"/><text x="19.9427%" y="1327.50"></text></g><g><title>load_elf_binary (1 samples, 0.02%)</title><rect x="19.6927%" y="1301" width="0.0175%" height="15" fill="rgb(215,118,42)"/><text x="19.9427%" y="1311.50"></text></g><g><title>elf_map (1 samples, 0.02%)</title><rect x="19.6927%" y="1285" width="0.0175%" height="15" fill="rgb(243,119,21)"/><text x="19.9427%" y="1295.50"></text></g><g><title>vm_munmap (1 samples, 0.02%)</title><rect x="19.6927%" y="1269" width="0.0175%" height="15" fill="rgb(252,177,53)"/><text x="19.9427%" y="1279.50"></text></g><g><title>__vm_munmap (1 samples, 0.02%)</title><rect x="19.6927%" y="1253" width="0.0175%" height="15" fill="rgb(237,209,29)"/><text x="19.9427%" y="1263.50"></text></g><g><title>__do_munmap (1 samples, 0.02%)</title><rect x="19.6927%" y="1237" width="0.0175%" height="15" fill="rgb(212,65,23)"/><text x="19.9427%" y="1247.50"></text></g><g><title>fuse_vma_close (1 samples, 0.02%)</title><rect x="19.6927%" y="1221" width="0.0175%" height="15" fill="rgb(230,222,46)"/><text x="19.9427%" y="1231.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.03%)</title><rect x="19.6927%" y="1381" width="0.0349%" height="15" fill="rgb(215,135,32)"/><text x="19.9427%" y="1391.50"></text></g><g><title>do_syscall_64 (2 samples, 0.03%)</title><rect x="19.6927%" y="1365" width="0.0349%" height="15" fill="rgb(246,101,22)"/><text x="19.9427%" y="1375.50"></text></g><g><title>__x64_sys_exit_group (1 samples, 0.02%)</title><rect x="19.7102%" y="1349" width="0.0175%" height="15" fill="rgb(206,107,13)"/><text x="19.9602%" y="1359.50"></text></g><g><title>do_group_exit (1 samples, 0.02%)</title><rect x="19.7102%" y="1333" width="0.0175%" height="15" fill="rgb(250,100,44)"/><text x="19.9602%" y="1343.50"></text></g><g><title>do_exit (1 samples, 0.02%)</title><rect x="19.7102%" y="1317" width="0.0175%" height="15" fill="rgb(231,147,38)"/><text x="19.9602%" y="1327.50"></text></g><g><title>mmput (1 samples, 0.02%)</title><rect x="19.7102%" y="1301" width="0.0175%" height="15" fill="rgb(229,8,40)"/><text x="19.9602%" y="1311.50"></text></g><g><title>exit_mmap (1 samples, 0.02%)</title><rect x="19.7102%" y="1285" width="0.0175%" height="15" fill="rgb(221,135,30)"/><text x="19.9602%" y="1295.50"></text></g><g><title>unmap_vmas (1 samples, 0.02%)</title><rect x="19.7102%" y="1269" width="0.0175%" height="15" fill="rgb(249,193,18)"/><text x="19.9602%" y="1279.50"></text></g><g><title>unmap_single_vma (1 samples, 0.02%)</title><rect x="19.7102%" y="1253" width="0.0175%" height="15" fill="rgb(209,133,39)"/><text x="19.9602%" y="1263.50"></text></g><g><title>unmap_page_range (1 samples, 0.02%)</title><rect x="19.7102%" y="1237" width="0.0175%" height="15" fill="rgb(232,100,14)"/><text x="19.9602%" y="1247.50"></text></g><g><title>zap_pte_range.isra.0 (1 samples, 0.02%)</title><rect x="19.7102%" y="1221" width="0.0175%" height="15" fill="rgb(224,185,1)"/><text x="19.9602%" y="1231.50"></text></g><g><title>page_remove_rmap (1 samples, 0.02%)</title><rect x="19.7102%" y="1205" width="0.0175%" height="15" fill="rgb(223,139,8)"/><text x="19.9602%" y="1215.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.02%)</title><rect x="19.7102%" y="1189" width="0.0175%" height="15" fill="rgb(232,213,38)"/><text x="19.9602%" y="1199.50"></text></g><g><title>rho_runtime (1,126 samples, 19.66%)</title><rect x="0.0873%" y="1397" width="19.6578%" height="15" fill="rgb(207,94,22)"/><text x="0.3373%" y="1407.50">rho_runtime</text></g><g><title>syscall_return_via_sysret (1 samples, 0.02%)</title><rect x="19.7277%" y="1381" width="0.0175%" height="15" fill="rgb(219,183,54)"/><text x="19.9777%" y="1391.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="19.7451%" y="1381" width="0.0175%" height="15" fill="rgb(216,185,54)"/><text x="19.9951%" y="1391.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.02%)</title><rect x="19.7626%" y="1365" width="0.0175%" height="15" fill="rgb(254,217,39)"/><text x="20.0126%" y="1375.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.05%)</title><rect x="19.7800%" y="1365" width="0.0524%" height="15" fill="rgb(240,178,23)"/><text x="20.0300%" y="1375.50"></text></g><g><title>&lt;model::ordering::ScoreTreeIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="19.8324%" y="1365" width="0.0175%" height="15" fill="rgb(218,11,47)"/><text x="20.0824%" y="1375.50"></text></g><g><title>&lt;model::ordering::sort_unforgeable::UnforgeableScoreTreeIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="19.8324%" y="1349" width="0.0175%" height="15" fill="rgb(218,51,51)"/><text x="20.0824%" y="1359.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="19.8499%" y="1349" width="0.0175%" height="15" fill="rgb(238,126,27)"/><text x="20.0999%" y="1359.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.02%)</title><rect x="19.8499%" y="1333" width="0.0175%" height="15" fill="rgb(249,202,22)"/><text x="20.0999%" y="1343.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="19.8499%" y="1317" width="0.0175%" height="15" fill="rgb(254,195,49)"/><text x="20.0999%" y="1327.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.02%)</title><rect x="19.8499%" y="1301" width="0.0175%" height="15" fill="rgb(208,123,14)"/><text x="20.0999%" y="1311.50"></text></g><g><title>&lt;model::rho_types::GUnforgeable as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="19.8499%" y="1285" width="0.0175%" height="15" fill="rgb(224,200,8)"/><text x="20.0999%" y="1295.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="19.8499%" y="1269" width="0.0175%" height="15" fill="rgb(217,61,36)"/><text x="20.0999%" y="1279.50"></text></g><g><title>&lt;model::rho_types::g_unforgeable::UnfInstance as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="19.8499%" y="1253" width="0.0175%" height="15" fill="rgb(206,35,45)"/><text x="20.0999%" y="1263.50"></text></g><g><title>&lt;model::rho_types::GPrivate as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="19.8499%" y="1237" width="0.0175%" height="15" fill="rgb(217,65,33)"/><text x="20.0999%" y="1247.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="19.8499%" y="1221" width="0.0175%" height="15" fill="rgb(222,158,48)"/><text x="20.0999%" y="1231.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="19.8499%" y="1365" width="0.0349%" height="15" fill="rgb(254,2,54)"/><text x="20.0999%" y="1375.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="19.8673%" y="1349" width="0.0175%" height="15" fill="rgb(250,143,38)"/><text x="20.1173%" y="1359.50"></text></g><g><title>&lt;model::bitset::BitSet&lt;B&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="19.8673%" y="1333" width="0.0175%" height="15" fill="rgb(248,25,0)"/><text x="20.1173%" y="1343.50"></text></g><g><title>&lt;bit_vec::BitVec&lt;B&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="19.8673%" y="1317" width="0.0175%" height="15" fill="rgb(206,152,27)"/><text x="20.1173%" y="1327.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="19.8673%" y="1301" width="0.0175%" height="15" fill="rgb(240,77,30)"/><text x="20.1173%" y="1311.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.02%)</title><rect x="19.8673%" y="1285" width="0.0175%" height="15" fill="rgb(231,5,3)"/><text x="20.1173%" y="1295.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="19.8673%" y="1269" width="0.0175%" height="15" fill="rgb(207,226,32)"/><text x="20.1173%" y="1279.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.02%)</title><rect x="19.8673%" y="1253" width="0.0175%" height="15" fill="rgb(222,207,47)"/><text x="20.1173%" y="1263.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="19.8673%" y="1237" width="0.0175%" height="15" fill="rgb(229,115,45)"/><text x="20.1173%" y="1247.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="19.8673%" y="1221" width="0.0175%" height="15" fill="rgb(224,191,6)"/><text x="20.1173%" y="1231.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="19.8673%" y="1205" width="0.0175%" height="15" fill="rgb(230,227,24)"/><text x="20.1173%" y="1215.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="19.8673%" y="1189" width="0.0175%" height="15" fill="rgb(228,80,19)"/><text x="20.1173%" y="1199.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="19.8673%" y="1173" width="0.0175%" height="15" fill="rgb(247,229,0)"/><text x="20.1173%" y="1183.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="19.8673%" y="1157" width="0.0175%" height="15" fill="rgb(237,194,15)"/><text x="20.1173%" y="1167.50"></text></g><g><title>__rg_alloc (1 samples, 0.02%)</title><rect x="19.8673%" y="1141" width="0.0175%" height="15" fill="rgb(219,203,20)"/><text x="20.1173%" y="1151.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.02%)</title><rect x="19.8673%" y="1125" width="0.0175%" height="15" fill="rgb(234,128,8)"/><text x="20.1173%" y="1135.50"></text></g><g><title>&lt;model::rho_types::Par as model::ordering::hash::Blake3Hashable&gt;::blake3_hash (1 samples, 0.02%)</title><rect x="19.8848%" y="1365" width="0.0175%" height="15" fill="rgb(248,202,8)"/><text x="20.1348%" y="1375.50"></text></g><g><title>&lt;model::rho_types::Par as rho_runtime::interpreter::reduce::eval_expression::ParExpressionEvaluator&lt;S&gt;&gt;::evaluate_nested_expressions (3 samples, 0.05%)</title><rect x="19.9022%" y="1365" width="0.0524%" height="15" fill="rgb(206,104,37)"/><text x="20.1522%" y="1375.50"></text></g><g><title>&lt;model::rho_types::Par as rho_runtime::interpreter::reduce::eval_expression::ParExpressionEvaluator&lt;S&gt;&gt;::evaluate_single_expression (3 samples, 0.05%)</title><rect x="19.9546%" y="1365" width="0.0524%" height="15" fill="rgb(223,8,27)"/><text x="20.2046%" y="1375.50"></text></g><g><title>&lt;rho_runtime::storage::signal::CompletionSignal as core::future::future::Future&gt;::poll (2 samples, 0.03%)</title><rect x="20.0070%" y="1365" width="0.0349%" height="15" fill="rgb(216,217,28)"/><text x="20.2570%" y="1375.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="20.0244%" y="1349" width="0.0175%" height="15" fill="rgb(249,199,1)"/><text x="20.2744%" y="1359.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::try_read_output (1 samples, 0.02%)</title><rect x="20.0244%" y="1333" width="0.0175%" height="15" fill="rgb(240,85,17)"/><text x="20.2744%" y="1343.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (7 samples, 0.12%)</title><rect x="20.0419%" y="1365" width="0.1222%" height="15" fill="rgb(206,108,45)"/><text x="20.2919%" y="1375.50"></text></g><g><title>tokio::runtime::park::Inner::park (5 samples, 0.09%)</title><rect x="20.0768%" y="1349" width="0.0873%" height="15" fill="rgb(245,210,41)"/><text x="20.3268%" y="1359.50"></text></g><g><title>tokio::runtime::park::Inner::park_condvar (5 samples, 0.09%)</title><rect x="20.0768%" y="1333" width="0.0873%" height="15" fill="rgb(206,13,37)"/><text x="20.3268%" y="1343.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (5 samples, 0.09%)</title><rect x="20.0768%" y="1317" width="0.0873%" height="15" fill="rgb(250,61,18)"/><text x="20.3268%" y="1327.50"></text></g><g><title>parking_lot::condvar::Condvar::wait (5 samples, 0.09%)</title><rect x="20.0768%" y="1301" width="0.0873%" height="15" fill="rgb(235,172,48)"/><text x="20.3268%" y="1311.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (5 samples, 0.09%)</title><rect x="20.0768%" y="1285" width="0.0873%" height="15" fill="rgb(249,201,17)"/><text x="20.3268%" y="1295.50"></text></g><g><title>parking_lot_core::parking_lot::park (5 samples, 0.09%)</title><rect x="20.0768%" y="1269" width="0.0873%" height="15" fill="rgb(219,208,6)"/><text x="20.3268%" y="1279.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (5 samples, 0.09%)</title><rect x="20.0768%" y="1253" width="0.0873%" height="15" fill="rgb(248,31,23)"/><text x="20.3268%" y="1263.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (5 samples, 0.09%)</title><rect x="20.0768%" y="1237" width="0.0873%" height="15" fill="rgb(245,15,42)"/><text x="20.3268%" y="1247.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (5 samples, 0.09%)</title><rect x="20.0768%" y="1221" width="0.0873%" height="15" fill="rgb(222,217,39)"/><text x="20.3268%" y="1231.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (5 samples, 0.09%)</title><rect x="20.0768%" y="1205" width="0.0873%" height="15" fill="rgb(210,219,27)"/><text x="20.3268%" y="1215.50"></text></g><g><title>syscall (5 samples, 0.09%)</title><rect x="20.0768%" y="1189" width="0.0873%" height="15" fill="rgb(252,166,36)"/><text x="20.3268%" y="1199.50"></text></g><g><title>entry_SYSCALL_64 (5 samples, 0.09%)</title><rect x="20.0768%" y="1173" width="0.0873%" height="15" fill="rgb(245,132,34)"/><text x="20.3268%" y="1183.50"></text></g><g><title>&lt;tokio::sync::oneshot::Receiver&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="20.1641%" y="1365" width="0.0175%" height="15" fill="rgb(236,54,3)"/><text x="20.4141%" y="1375.50"></text></g><g><title>__clock_gettime (1 samples, 0.02%)</title><rect x="20.1816%" y="1365" width="0.0175%" height="15" fill="rgb(241,173,43)"/><text x="20.4316%" y="1375.50"></text></g><g><title>__sched_yield (1 samples, 0.02%)</title><rect x="20.1990%" y="1365" width="0.0175%" height="15" fill="rgb(215,190,9)"/><text x="20.4490%" y="1375.50"></text></g><g><title>_mi_page_retire (1 samples, 0.02%)</title><rect x="20.2165%" y="1365" width="0.0175%" height="15" fill="rgb(242,101,16)"/><text x="20.4665%" y="1375.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="20.2339%" y="1365" width="0.0175%" height="15" fill="rgb(223,190,21)"/><text x="20.4839%" y="1375.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.02%)</title><rect x="20.2514%" y="1365" width="0.0175%" height="15" fill="rgb(215,228,25)"/><text x="20.5014%" y="1375.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::oneshot::Inner&lt;core::option::Option&lt;smallvec::SmallVec&lt;[(rho_runtime::storage::TaggedContinuation,smallvec::SmallVec&lt;[model::rho_types::ListParWithRandom: 3]&gt;): 3]&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="20.2514%" y="1349" width="0.0175%" height="15" fill="rgb(225,36,22)"/><text x="20.5014%" y="1359.50"></text></g><g><title>&lt;tokio::sync::oneshot::Inner&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="20.2514%" y="1333" width="0.0175%" height="15" fill="rgb(251,106,46)"/><text x="20.5014%" y="1343.50"></text></g><g><title>tokio::sync::oneshot::Task::drop_task (1 samples, 0.02%)</title><rect x="20.2514%" y="1317" width="0.0175%" height="15" fill="rgb(208,90,1)"/><text x="20.5014%" y="1327.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1 samples, 0.02%)</title><rect x="20.2514%" y="1301" width="0.0175%" height="15" fill="rgb(243,10,4)"/><text x="20.5014%" y="1311.50"></text></g><g><title>tokio::sync::oneshot::Task::drop_task::{{closure}} (1 samples, 0.02%)</title><rect x="20.2514%" y="1285" width="0.0175%" height="15" fill="rgb(212,137,27)"/><text x="20.5014%" y="1295.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 0.02%)</title><rect x="20.2514%" y="1269" width="0.0175%" height="15" fill="rgb(231,220,49)"/><text x="20.5014%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (1 samples, 0.02%)</title><rect x="20.2514%" y="1253" width="0.0175%" height="15" fill="rgb(237,96,20)"/><text x="20.5014%" y="1263.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="20.2514%" y="1237" width="0.0175%" height="15" fill="rgb(239,229,30)"/><text x="20.5014%" y="1247.50"></text></g><g><title>blake3::ChunkState::update (1 samples, 0.02%)</title><rect x="20.2689%" y="1365" width="0.0175%" height="15" fill="rgb(219,65,33)"/><text x="20.5189%" y="1375.50"></text></g><g><title>blake3::ChunkState::fill_buf (1 samples, 0.02%)</title><rect x="20.2689%" y="1349" width="0.0175%" height="15" fill="rgb(243,134,7)"/><text x="20.5189%" y="1359.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.02%)</title><rect x="20.2689%" y="1333" width="0.0175%" height="15" fill="rgb(216,177,54)"/><text x="20.5189%" y="1343.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="20.2689%" y="1317" width="0.0175%" height="15" fill="rgb(211,160,20)"/><text x="20.5189%" y="1327.50"></text></g><g><title>blake3::Hasher::update (1 samples, 0.02%)</title><rect x="20.2863%" y="1365" width="0.0175%" height="15" fill="rgb(239,85,39)"/><text x="20.5363%" y="1375.50"></text></g><g><title>constant_time_eq::constant_time_ne_32 (1 samples, 0.02%)</title><rect x="20.3038%" y="1365" width="0.0175%" height="15" fill="rgb(232,125,22)"/><text x="20.5538%" y="1375.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;smallvec::IntoIter&lt;[(usize,model::rho_types::ListParWithRandom): 3]&gt;,rho_runtime::storage::tuplecell::TuplespaceChannel::join::{{closure}}&gt;&gt; (1 samples, 0.02%)</title><rect x="20.3212%" y="1365" width="0.0175%" height="15" fill="rgb(244,57,34)"/><text x="20.5712%" y="1375.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::expr::ExprInstance&gt; (1 samples, 0.02%)</title><rect x="20.3387%" y="1365" width="0.0175%" height="15" fill="rgb(214,203,32)"/><text x="20.5887%" y="1375.50"></text></g><g><title>core::ptr::drop_in_place&lt;smallvec::IntoIter&lt;[model::rho_types::Expr: 5]&gt;&gt; (1 samples, 0.02%)</title><rect x="20.3561%" y="1365" width="0.0175%" height="15" fill="rgb(207,58,43)"/><text x="20.6061%" y="1375.50"></text></g><g><title>mi_free (2 samples, 0.03%)</title><rect x="20.3736%" y="1365" width="0.0349%" height="15" fill="rgb(215,193,15)"/><text x="20.6236%" y="1375.50"></text></g><g><title>model::ordering::sort_unforgeable::UnforgeableScoreTreeIter::private_body_next (1 samples, 0.02%)</title><rect x="20.4085%" y="1365" width="0.0175%" height="15" fill="rgb(232,15,44)"/><text x="20.6585%" y="1375.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (1 samples, 0.02%)</title><rect x="20.5133%" y="1333" width="0.0175%" height="15" fill="rgb(212,3,48)"/><text x="20.7633%" y="1343.50"></text></g><g><title>syscall (1 samples, 0.02%)</title><rect x="20.5133%" y="1317" width="0.0175%" height="15" fill="rgb(218,128,7)"/><text x="20.7633%" y="1327.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.02%)</title><rect x="20.5133%" y="1301" width="0.0175%" height="15" fill="rgb(226,216,39)"/><text x="20.7633%" y="1311.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (7 samples, 0.12%)</title><rect x="20.4260%" y="1365" width="0.1222%" height="15" fill="rgb(243,47,51)"/><text x="20.6760%" y="1375.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (2 samples, 0.03%)</title><rect x="20.5133%" y="1349" width="0.0349%" height="15" fill="rgb(241,183,40)"/><text x="20.7633%" y="1359.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::should_timeout (1 samples, 0.02%)</title><rect x="20.5307%" y="1333" width="0.0175%" height="15" fill="rgb(231,217,32)"/><text x="20.7807%" y="1343.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.02%)</title><rect x="20.5307%" y="1317" width="0.0175%" height="15" fill="rgb(229,61,38)"/><text x="20.7807%" y="1327.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.02%)</title><rect x="20.5307%" y="1301" width="0.0175%" height="15" fill="rgb(225,210,5)"/><text x="20.7807%" y="1311.50"></text></g><g><title>std::sys::unix::time::inner::now (1 samples, 0.02%)</title><rect x="20.5307%" y="1285" width="0.0175%" height="15" fill="rgb(231,79,45)"/><text x="20.7807%" y="1295.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.02%)</title><rect x="20.5482%" y="1365" width="0.0175%" height="15" fill="rgb(224,100,7)"/><text x="20.7982%" y="1375.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1 samples, 0.02%)</title><rect x="20.5831%" y="1349" width="0.0175%" height="15" fill="rgb(241,198,18)"/><text x="20.8331%" y="1359.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_expression::expr_instance::&lt;impl rho_runtime::interpreter::reduce::Evaluator&lt;S&gt; for model::rho_types::Expr&gt;::evaluate (4 samples, 0.07%)</title><rect x="20.5656%" y="1365" width="0.0698%" height="15" fill="rgb(252,97,53)"/><text x="20.8156%" y="1375.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_expression::eval_eplus::&lt;impl rho_runtime::interpreter::reduce::eval_expression::ExprInstanceEvaluator&lt;S&gt; for model::rho_types::EPlus&gt;::evaluate (2 samples, 0.03%)</title><rect x="20.6006%" y="1349" width="0.0349%" height="15" fill="rgb(220,88,7)"/><text x="20.8506%" y="1359.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1 samples, 0.02%)</title><rect x="20.6180%" y="1333" width="0.0175%" height="15" fill="rgb(213,176,14)"/><text x="20.8680%" y="1343.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_send::&lt;impl rho_runtime::interpreter::reduce::Evaluator&lt;S&gt; for model::rho_types::Send&gt;::evaluate (2 samples, 0.03%)</title><rect x="20.6355%" y="1365" width="0.0349%" height="15" fill="rgb(246,73,7)"/><text x="20.8855%" y="1375.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::produce (1 samples, 0.02%)</title><rect x="20.6529%" y="1349" width="0.0175%" height="15" fill="rgb(245,64,36)"/><text x="20.9029%" y="1359.50"></text></g><g><title>tokio::task::spawn::spawn (1 samples, 0.02%)</title><rect x="20.6529%" y="1333" width="0.0175%" height="15" fill="rgb(245,80,10)"/><text x="20.9029%" y="1343.50"></text></g><g><title>tokio::runtime::spawner::Spawner::spawn (1 samples, 0.02%)</title><rect x="20.6529%" y="1317" width="0.0175%" height="15" fill="rgb(232,107,50)"/><text x="20.9029%" y="1327.50"></text></g><g><title>__rg_alloc (1 samples, 0.02%)</title><rect x="20.6529%" y="1301" width="0.0175%" height="15" fill="rgb(253,3,0)"/><text x="20.9029%" y="1311.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.02%)</title><rect x="20.6529%" y="1285" width="0.0175%" height="15" fill="rgb(212,99,53)"/><text x="20.9029%" y="1295.50"></text></g><g><title>rho_runtime::interpreter::reduce::substitute::sub_par::substitute_expressions_in_par (3 samples, 0.05%)</title><rect x="20.6704%" y="1365" width="0.0524%" height="15" fill="rgb(249,111,54)"/><text x="20.9204%" y="1375.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (1 samples, 0.02%)</title><rect x="20.7053%" y="1349" width="0.0175%" height="15" fill="rgb(249,55,30)"/><text x="20.9553%" y="1359.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.02%)</title><rect x="20.7053%" y="1333" width="0.0175%" height="15" fill="rgb(237,47,42)"/><text x="20.9553%" y="1343.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="20.7053%" y="1317" width="0.0175%" height="15" fill="rgb(211,20,18)"/><text x="20.9553%" y="1327.50"></text></g><g><title>syscall (3 samples, 0.05%)</title><rect x="20.7228%" y="1365" width="0.0524%" height="15" fill="rgb(231,203,46)"/><text x="20.9728%" y="1375.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.02%)</title><rect x="20.7577%" y="1349" width="0.0175%" height="15" fill="rgb(237,142,3)"/><text x="21.0077%" y="1359.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::store_output (1 samples, 0.02%)</title><rect x="20.7926%" y="1349" width="0.0175%" height="15" fill="rgb(241,107,1)"/><text x="21.0426%" y="1359.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::set_stage (1 samples, 0.02%)</title><rect x="20.7926%" y="1333" width="0.0175%" height="15" fill="rgb(229,83,13)"/><text x="21.0426%" y="1343.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1 samples, 0.02%)</title><rect x="20.7926%" y="1317" width="0.0175%" height="15" fill="rgb(241,91,40)"/><text x="21.0426%" y="1327.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::set_stage::{{closure}} (1 samples, 0.02%)</title><rect x="20.7926%" y="1301" width="0.0175%" height="15" fill="rgb(225,3,45)"/><text x="21.0426%" y="1311.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (4 samples, 0.07%)</title><rect x="20.7751%" y="1365" width="0.0698%" height="15" fill="rgb(244,223,14)"/><text x="21.0251%" y="1375.50"></text></g><g><title>tokio::runtime::task::harness::SchedulerView&lt;S&gt;::transition_to_terminal (2 samples, 0.03%)</title><rect x="20.8101%" y="1349" width="0.0349%" height="15" fill="rgb(224,124,37)"/><text x="21.0601%" y="1359.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::release (1 samples, 0.02%)</title><rect x="20.8275%" y="1333" width="0.0175%" height="15" fill="rgb(251,171,30)"/><text x="21.0775%" y="1343.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="20.8275%" y="1317" width="0.0175%" height="15" fill="rgb(236,46,54)"/><text x="21.0775%" y="1327.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::release::{{closure}} (1 samples, 0.02%)</title><rect x="20.8275%" y="1301" width="0.0175%" height="15" fill="rgb(245,213,5)"/><text x="21.0775%" y="1311.50"></text></g><g><title>tokio::runtime::task::harness::can_read_output (1 samples, 0.02%)</title><rect x="20.8450%" y="1365" width="0.0175%" height="15" fill="rgb(230,144,27)"/><text x="21.0950%" y="1375.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::produce::{{closure}} (1 samples, 0.02%)</title><rect x="20.8799%" y="1205" width="0.0175%" height="15" fill="rgb(220,86,6)"/><text x="21.1299%" y="1215.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (2 samples, 0.03%)</title><rect x="20.8799%" y="1253" width="0.0349%" height="15" fill="rgb(240,20,13)"/><text x="21.1299%" y="1263.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (2 samples, 0.03%)</title><rect x="20.8799%" y="1237" width="0.0349%" height="15" fill="rgb(217,89,34)"/><text x="21.1299%" y="1247.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.03%)</title><rect x="20.8799%" y="1221" width="0.0349%" height="15" fill="rgb(229,13,5)"/><text x="21.1299%" y="1231.50"></text></g><g><title>rho_runtime::storage::coordinator::Coordinator::handle_produce::{{closure}} (1 samples, 0.02%)</title><rect x="20.8973%" y="1205" width="0.0175%" height="15" fill="rgb(244,67,35)"/><text x="21.1473%" y="1215.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (4 samples, 0.07%)</title><rect x="20.8624%" y="1365" width="0.0698%" height="15" fill="rgb(221,40,2)"/><text x="21.1124%" y="1375.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.05%)</title><rect x="20.8799%" y="1349" width="0.0524%" height="15" fill="rgb(237,157,21)"/><text x="21.1299%" y="1359.50"></text></g><g><title>std::panicking::try (3 samples, 0.05%)</title><rect x="20.8799%" y="1333" width="0.0524%" height="15" fill="rgb(222,94,11)"/><text x="21.1299%" y="1343.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.05%)</title><rect x="20.8799%" y="1317" width="0.0524%" height="15" fill="rgb(249,113,6)"/><text x="21.1299%" y="1327.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3 samples, 0.05%)</title><rect x="20.8799%" y="1301" width="0.0524%" height="15" fill="rgb(238,137,36)"/><text x="21.1299%" y="1311.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (3 samples, 0.05%)</title><rect x="20.8799%" y="1285" width="0.0524%" height="15" fill="rgb(210,102,26)"/><text x="21.1299%" y="1295.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (3 samples, 0.05%)</title><rect x="20.8799%" y="1269" width="0.0524%" height="15" fill="rgb(218,30,30)"/><text x="21.1299%" y="1279.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::drop_future_or_output (1 samples, 0.02%)</title><rect x="20.9148%" y="1253" width="0.0175%" height="15" fill="rgb(214,67,26)"/><text x="21.1648%" y="1263.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::set_stage (1 samples, 0.02%)</title><rect x="20.9148%" y="1237" width="0.0175%" height="15" fill="rgb(251,9,53)"/><text x="21.1648%" y="1247.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1 samples, 0.02%)</title><rect x="20.9148%" y="1221" width="0.0175%" height="15" fill="rgb(228,204,25)"/><text x="21.1648%" y="1231.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::set_stage::{{closure}} (1 samples, 0.02%)</title><rect x="20.9148%" y="1205" width="0.0175%" height="15" fill="rgb(207,153,8)"/><text x="21.1648%" y="1215.50"></text></g><g><title>tokio::runtime::task::raw::poll (7 samples, 0.12%)</title><rect x="20.9323%" y="1365" width="0.1222%" height="15" fill="rgb(242,9,16)"/><text x="21.1823%" y="1375.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1 samples, 0.02%)</title><rect x="21.0370%" y="1349" width="0.0175%" height="15" fill="rgb(217,211,10)"/><text x="21.2870%" y="1359.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (1 samples, 0.02%)</title><rect x="21.0370%" y="1333" width="0.0175%" height="15" fill="rgb(219,228,52)"/><text x="21.2870%" y="1343.50"></text></g><g><title>tokio::runtime::task::raw::try_read_output (2 samples, 0.03%)</title><rect x="21.0545%" y="1365" width="0.0349%" height="15" fill="rgb(231,92,29)"/><text x="21.3045%" y="1375.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (3 samples, 0.05%)</title><rect x="21.0894%" y="1365" width="0.0524%" height="15" fill="rgb(232,8,23)"/><text x="21.3394%" y="1375.50"></text></g><g><title>tokio::coop::budget (3 samples, 0.05%)</title><rect x="21.0894%" y="1349" width="0.0524%" height="15" fill="rgb(216,211,34)"/><text x="21.3394%" y="1359.50"></text></g><g><title>tokio::coop::with_budget (3 samples, 0.05%)</title><rect x="21.0894%" y="1333" width="0.0524%" height="15" fill="rgb(236,151,0)"/><text x="21.3394%" y="1343.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.05%)</title><rect x="21.0894%" y="1317" width="0.0524%" height="15" fill="rgb(209,168,3)"/><text x="21.3394%" y="1327.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 0.05%)</title><rect x="21.0894%" y="1301" width="0.0524%" height="15" fill="rgb(208,129,28)"/><text x="21.3394%" y="1311.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (3 samples, 0.05%)</title><rect x="21.0894%" y="1285" width="0.0524%" height="15" fill="rgb(229,78,22)"/><text x="21.3394%" y="1295.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (3 samples, 0.05%)</title><rect x="21.0894%" y="1269" width="0.0524%" height="15" fill="rgb(228,187,13)"/><text x="21.3394%" y="1279.50"></text></g><g><title>[anon] (80 samples, 1.40%)</title><rect x="19.7626%" y="1381" width="1.3966%" height="15" fill="rgb(240,119,24)"/><text x="20.0126%" y="1391.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (1 samples, 0.02%)</title><rect x="21.1418%" y="1365" width="0.0175%" height="15" fill="rgb(209,194,42)"/><text x="21.3918%" y="1375.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Par&gt; (1 samples, 0.02%)</title><rect x="21.1592%" y="1365" width="0.0175%" height="15" fill="rgb(247,200,46)"/><text x="21.4092%" y="1375.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.02%)</title><rect x="21.1767%" y="1365" width="0.0175%" height="15" fill="rgb(218,76,16)"/><text x="21.4267%" y="1375.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::handle_comm_events (1 samples, 0.02%)</title><rect x="21.1941%" y="1365" width="0.0175%" height="15" fill="rgb(225,21,48)"/><text x="21.4441%" y="1375.50"></text></g><g><title>[libc-2.31.so] (5 samples, 0.09%)</title><rect x="21.1592%" y="1381" width="0.0873%" height="15" fill="rgb(239,223,50)"/><text x="21.4092%" y="1391.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::notify_parked (2 samples, 0.03%)</title><rect x="21.2116%" y="1365" width="0.0349%" height="15" fill="rgb(244,45,21)"/><text x="21.4616%" y="1375.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::FlatMap&lt;smallvec::IntoIter&lt;[model::rho_types::ListParWithRandom: 3]&gt;,alloc::vec::into_iter::IntoIter&lt;model::rho_types::Par&gt;,rho_runtime::interpreter::InterpreterContext&lt;rho_runtime::storage::store::AsyncStore&gt;::handle_comm_events::{{closure}}&gt;&gt; (1 samples, 0.02%)</title><rect x="21.2465%" y="1365" width="0.0175%" height="15" fill="rgb(232,33,43)"/><text x="21.4965%" y="1375.50"></text></g><g><title>[rho_runtime] (2 samples, 0.03%)</title><rect x="21.2465%" y="1381" width="0.0349%" height="15" fill="rgb(209,8,3)"/><text x="21.4965%" y="1391.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.02%)</title><rect x="21.2640%" y="1365" width="0.0175%" height="15" fill="rgb(214,25,53)"/><text x="21.5140%" y="1375.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (1 samples, 0.02%)</title><rect x="21.2640%" y="1349" width="0.0175%" height="15" fill="rgb(254,186,54)"/><text x="21.5140%" y="1359.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::should_timeout (1 samples, 0.02%)</title><rect x="21.2640%" y="1333" width="0.0175%" height="15" fill="rgb(208,174,49)"/><text x="21.5140%" y="1343.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.02%)</title><rect x="21.2640%" y="1317" width="0.0175%" height="15" fill="rgb(233,191,51)"/><text x="21.5140%" y="1327.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.02%)</title><rect x="21.2640%" y="1301" width="0.0175%" height="15" fill="rgb(222,134,10)"/><text x="21.5140%" y="1311.50"></text></g><g><title>std::sys::unix::time::inner::now (1 samples, 0.02%)</title><rect x="21.2640%" y="1285" width="0.0175%" height="15" fill="rgb(230,226,20)"/><text x="21.5140%" y="1295.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="21.5608%" y="1077" width="0.0175%" height="15" fill="rgb(251,111,25)"/><text x="21.8108%" y="1087.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="21.5782%" y="981" width="0.0175%" height="15" fill="rgb(224,40,46)"/><text x="21.8282%" y="991.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="21.5782%" y="965" width="0.0175%" height="15" fill="rgb(236,108,47)"/><text x="21.8282%" y="975.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity_from_bytes (1 samples, 0.02%)</title><rect x="21.5957%" y="981" width="0.0175%" height="15" fill="rgb(234,93,0)"/><text x="21.8457%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.07%)</title><rect x="21.5608%" y="1093" width="0.0698%" height="15" fill="rgb(224,213,32)"/><text x="21.8108%" y="1103.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.05%)</title><rect x="21.5782%" y="1077" width="0.0524%" height="15" fill="rgb(251,11,48)"/><text x="21.8282%" y="1087.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.05%)</title><rect x="21.5782%" y="1061" width="0.0524%" height="15" fill="rgb(236,173,5)"/><text x="21.8282%" y="1071.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.05%)</title><rect x="21.5782%" y="1045" width="0.0524%" height="15" fill="rgb(230,95,12)"/><text x="21.8282%" y="1055.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.05%)</title><rect x="21.5782%" y="1029" width="0.0524%" height="15" fill="rgb(232,209,1)"/><text x="21.8282%" y="1039.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.05%)</title><rect x="21.5782%" y="1013" width="0.0524%" height="15" fill="rgb(232,6,1)"/><text x="21.8282%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.05%)</title><rect x="21.5782%" y="997" width="0.0524%" height="15" fill="rgb(210,224,50)"/><text x="21.8282%" y="1007.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.02%)</title><rect x="21.6131%" y="981" width="0.0175%" height="15" fill="rgb(228,127,35)"/><text x="21.8631%" y="991.50"></text></g><g><title>core::alloc::layout::Layout::repeat (1 samples, 0.02%)</title><rect x="21.6131%" y="965" width="0.0175%" height="15" fill="rgb(245,102,45)"/><text x="21.8631%" y="975.50"></text></g><g><title>&lt;model::rho_types::Expr as core::clone::Clone&gt;::clone (16 samples, 0.28%)</title><rect x="21.3862%" y="1349" width="0.2793%" height="15" fill="rgb(214,1,49)"/><text x="21.6362%" y="1359.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (15 samples, 0.26%)</title><rect x="21.4036%" y="1333" width="0.2619%" height="15" fill="rgb(226,163,40)"/><text x="21.6536%" y="1343.50"></text></g><g><title>&lt;model::rho_types::expr::ExprInstance as core::clone::Clone&gt;::clone (13 samples, 0.23%)</title><rect x="21.4385%" y="1317" width="0.2270%" height="15" fill="rgb(239,212,28)"/><text x="21.6885%" y="1327.50"></text></g><g><title>&lt;model::rho_types::EPlus as core::clone::Clone&gt;::clone (13 samples, 0.23%)</title><rect x="21.4385%" y="1301" width="0.2270%" height="15" fill="rgb(220,20,13)"/><text x="21.6885%" y="1311.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (13 samples, 0.23%)</title><rect x="21.4385%" y="1285" width="0.2270%" height="15" fill="rgb(210,164,35)"/><text x="21.6885%" y="1295.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (13 samples, 0.23%)</title><rect x="21.4385%" y="1269" width="0.2270%" height="15" fill="rgb(248,109,41)"/><text x="21.6885%" y="1279.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (13 samples, 0.23%)</title><rect x="21.4385%" y="1253" width="0.2270%" height="15" fill="rgb(238,23,50)"/><text x="21.6885%" y="1263.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (13 samples, 0.23%)</title><rect x="21.4385%" y="1237" width="0.2270%" height="15" fill="rgb(211,48,49)"/><text x="21.6885%" y="1247.50"></text></g><g><title>alloc::slice::hack::to_vec (13 samples, 0.23%)</title><rect x="21.4385%" y="1221" width="0.2270%" height="15" fill="rgb(223,36,21)"/><text x="21.6885%" y="1231.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (13 samples, 0.23%)</title><rect x="21.4385%" y="1205" width="0.2270%" height="15" fill="rgb(207,123,46)"/><text x="21.6885%" y="1215.50"></text></g><g><title>&lt;model::rho_types::Expr as core::clone::Clone&gt;::clone (13 samples, 0.23%)</title><rect x="21.4385%" y="1189" width="0.2270%" height="15" fill="rgb(240,218,32)"/><text x="21.6885%" y="1199.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (13 samples, 0.23%)</title><rect x="21.4385%" y="1173" width="0.2270%" height="15" fill="rgb(252,5,43)"/><text x="21.6885%" y="1183.50"></text></g><g><title>&lt;model::rho_types::expr::ExprInstance as core::clone::Clone&gt;::clone (13 samples, 0.23%)</title><rect x="21.4385%" y="1157" width="0.2270%" height="15" fill="rgb(252,84,19)"/><text x="21.6885%" y="1167.50"></text></g><g><title>&lt;model::rho_types::EPlus as core::clone::Clone&gt;::clone (13 samples, 0.23%)</title><rect x="21.4385%" y="1141" width="0.2270%" height="15" fill="rgb(243,152,39)"/><text x="21.6885%" y="1151.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (13 samples, 0.23%)</title><rect x="21.4385%" y="1125" width="0.2270%" height="15" fill="rgb(234,160,15)"/><text x="21.6885%" y="1135.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (13 samples, 0.23%)</title><rect x="21.4385%" y="1109" width="0.2270%" height="15" fill="rgb(237,34,20)"/><text x="21.6885%" y="1119.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="21.6306%" y="1093" width="0.0349%" height="15" fill="rgb(229,97,13)"/><text x="21.8806%" y="1103.50"></text></g><g><title>&lt;model::bitset::BitSet&lt;B&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="21.6306%" y="1077" width="0.0349%" height="15" fill="rgb(234,71,50)"/><text x="21.8806%" y="1087.50"></text></g><g><title>&lt;bit_vec::BitVec&lt;B&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="21.6306%" y="1061" width="0.0349%" height="15" fill="rgb(253,155,4)"/><text x="21.8806%" y="1071.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="21.6306%" y="1045" width="0.0349%" height="15" fill="rgb(222,185,37)"/><text x="21.8806%" y="1055.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.03%)</title><rect x="21.6306%" y="1029" width="0.0349%" height="15" fill="rgb(251,177,13)"/><text x="21.8806%" y="1039.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.03%)</title><rect x="21.6306%" y="1013" width="0.0349%" height="15" fill="rgb(250,179,40)"/><text x="21.8806%" y="1023.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.03%)</title><rect x="21.6306%" y="997" width="0.0349%" height="15" fill="rgb(242,44,2)"/><text x="21.8806%" y="1007.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.03%)</title><rect x="21.6306%" y="981" width="0.0349%" height="15" fill="rgb(216,177,13)"/><text x="21.8806%" y="991.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.03%)</title><rect x="21.6306%" y="965" width="0.0349%" height="15" fill="rgb(216,106,43)"/><text x="21.8806%" y="975.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.03%)</title><rect x="21.6306%" y="949" width="0.0349%" height="15" fill="rgb(216,183,2)"/><text x="21.8806%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.03%)</title><rect x="21.6306%" y="933" width="0.0349%" height="15" fill="rgb(249,75,3)"/><text x="21.8806%" y="943.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.03%)</title><rect x="21.6306%" y="917" width="0.0349%" height="15" fill="rgb(219,67,39)"/><text x="21.8806%" y="927.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.03%)</title><rect x="21.6306%" y="901" width="0.0349%" height="15" fill="rgb(253,228,2)"/><text x="21.8806%" y="911.50"></text></g><g><title>__rg_alloc (2 samples, 0.03%)</title><rect x="21.6306%" y="885" width="0.0349%" height="15" fill="rgb(235,138,27)"/><text x="21.8806%" y="895.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (2 samples, 0.03%)</title><rect x="21.6306%" y="869" width="0.0349%" height="15" fill="rgb(236,97,51)"/><text x="21.8806%" y="879.50"></text></g><g><title>mi_malloc (2 samples, 0.03%)</title><rect x="21.6306%" y="853" width="0.0349%" height="15" fill="rgb(240,80,30)"/><text x="21.8806%" y="863.50"></text></g><g><title>mi_heap_malloc (2 samples, 0.03%)</title><rect x="21.6306%" y="837" width="0.0349%" height="15" fill="rgb(230,178,19)"/><text x="21.8806%" y="847.50"></text></g><g><title>mi_heap_malloc_small (2 samples, 0.03%)</title><rect x="21.6306%" y="821" width="0.0349%" height="15" fill="rgb(210,190,27)"/><text x="21.8806%" y="831.50"></text></g><g><title>_mi_page_malloc (2 samples, 0.03%)</title><rect x="21.6306%" y="805" width="0.0349%" height="15" fill="rgb(222,107,31)"/><text x="21.8806%" y="815.50"></text></g><g><title>&lt;model::rho_types::MatchCase as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="21.6655%" y="1349" width="0.0175%" height="15" fill="rgb(216,127,34)"/><text x="21.9155%" y="1359.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="21.6655%" y="1333" width="0.0175%" height="15" fill="rgb(234,116,52)"/><text x="21.9155%" y="1343.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="21.6655%" y="1317" width="0.0175%" height="15" fill="rgb(222,124,15)"/><text x="21.9155%" y="1327.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="21.6655%" y="1301" width="0.0175%" height="15" fill="rgb(231,179,28)"/><text x="21.9155%" y="1311.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.02%)</title><rect x="21.6655%" y="1285" width="0.0175%" height="15" fill="rgb(226,93,45)"/><text x="21.9155%" y="1295.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="21.6655%" y="1269" width="0.0175%" height="15" fill="rgb(215,8,51)"/><text x="21.9155%" y="1279.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.02%)</title><rect x="21.6655%" y="1253" width="0.0175%" height="15" fill="rgb(223,106,5)"/><text x="21.9155%" y="1263.50"></text></g><g><title>&lt;model::rho_types::Send as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="21.6655%" y="1237" width="0.0175%" height="15" fill="rgb(250,191,5)"/><text x="21.9155%" y="1247.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="21.6655%" y="1221" width="0.0175%" height="15" fill="rgb(242,132,44)"/><text x="21.9155%" y="1231.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.02%)</title><rect x="21.6655%" y="1205" width="0.0175%" height="15" fill="rgb(251,152,29)"/><text x="21.9155%" y="1215.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="21.6655%" y="1189" width="0.0175%" height="15" fill="rgb(218,179,5)"/><text x="21.9155%" y="1199.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.02%)</title><rect x="21.6655%" y="1173" width="0.0175%" height="15" fill="rgb(227,67,19)"/><text x="21.9155%" y="1183.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="21.6655%" y="1157" width="0.0175%" height="15" fill="rgb(233,119,31)"/><text x="21.9155%" y="1167.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="21.6655%" y="1141" width="0.0175%" height="15" fill="rgb(241,120,22)"/><text x="21.9155%" y="1151.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.02%)</title><rect x="21.6655%" y="1125" width="0.0175%" height="15" fill="rgb(224,102,30)"/><text x="21.9155%" y="1135.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="21.6655%" y="1109" width="0.0175%" height="15" fill="rgb(210,164,37)"/><text x="21.9155%" y="1119.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.02%)</title><rect x="21.6655%" y="1093" width="0.0175%" height="15" fill="rgb(226,191,16)"/><text x="21.9155%" y="1103.50"></text></g><g><title>&lt;model::rho_types::Expr as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="21.6655%" y="1077" width="0.0175%" height="15" fill="rgb(214,40,45)"/><text x="21.9155%" y="1087.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="21.6655%" y="1061" width="0.0175%" height="15" fill="rgb(244,29,26)"/><text x="21.9155%" y="1071.50"></text></g><g><title>&lt;model::rho_types::expr::ExprInstance as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="21.6655%" y="1045" width="0.0175%" height="15" fill="rgb(216,16,5)"/><text x="21.9155%" y="1055.50"></text></g><g><title>&lt;model::rho_types::EPlus as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="21.6655%" y="1029" width="0.0175%" height="15" fill="rgb(249,76,35)"/><text x="21.9155%" y="1039.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="21.6655%" y="1013" width="0.0175%" height="15" fill="rgb(207,11,44)"/><text x="21.9155%" y="1023.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="21.6655%" y="997" width="0.0175%" height="15" fill="rgb(228,190,49)"/><text x="21.9155%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="21.6655%" y="981" width="0.0175%" height="15" fill="rgb(214,173,12)"/><text x="21.9155%" y="991.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.02%)</title><rect x="21.6655%" y="965" width="0.0175%" height="15" fill="rgb(218,26,35)"/><text x="21.9155%" y="975.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="21.6655%" y="949" width="0.0175%" height="15" fill="rgb(220,200,19)"/><text x="21.9155%" y="959.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.02%)</title><rect x="21.6655%" y="933" width="0.0175%" height="15" fill="rgb(239,95,49)"/><text x="21.9155%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.02%)</title><rect x="21.6655%" y="917" width="0.0175%" height="15" fill="rgb(235,85,53)"/><text x="21.9155%" y="927.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.05%)</title><rect x="21.6830%" y="1349" width="0.0524%" height="15" fill="rgb(233,133,31)"/><text x="21.9330%" y="1359.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.05%)</title><rect x="21.6830%" y="1333" width="0.0524%" height="15" fill="rgb(218,25,20)"/><text x="21.9330%" y="1343.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.05%)</title><rect x="21.6830%" y="1317" width="0.0524%" height="15" fill="rgb(252,210,38)"/><text x="21.9330%" y="1327.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.05%)</title><rect x="21.6830%" y="1301" width="0.0524%" height="15" fill="rgb(242,134,21)"/><text x="21.9330%" y="1311.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.05%)</title><rect x="21.6830%" y="1285" width="0.0524%" height="15" fill="rgb(213,28,48)"/><text x="21.9330%" y="1295.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.05%)</title><rect x="21.6830%" y="1269" width="0.0524%" height="15" fill="rgb(250,196,2)"/><text x="21.9330%" y="1279.50"></text></g><g><title>__rg_alloc (3 samples, 0.05%)</title><rect x="21.6830%" y="1253" width="0.0524%" height="15" fill="rgb(227,5,17)"/><text x="21.9330%" y="1263.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (3 samples, 0.05%)</title><rect x="21.6830%" y="1237" width="0.0524%" height="15" fill="rgb(221,226,24)"/><text x="21.9330%" y="1247.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (31 samples, 0.54%)</title><rect x="21.2814%" y="1365" width="0.5412%" height="15" fill="rgb(211,5,48)"/><text x="21.5314%" y="1375.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (5 samples, 0.09%)</title><rect x="21.7353%" y="1349" width="0.0873%" height="15" fill="rgb(219,150,6)"/><text x="21.9853%" y="1359.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.07%)</title><rect x="21.8226%" y="1365" width="0.0698%" height="15" fill="rgb(251,46,16)"/><text x="22.0726%" y="1375.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="21.8925%" y="1365" width="0.0175%" height="15" fill="rgb(220,204,40)"/><text x="22.1425%" y="1375.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="21.8925%" y="1349" width="0.0175%" height="15" fill="rgb(211,85,2)"/><text x="22.1425%" y="1359.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="21.8925%" y="1333" width="0.0175%" height="15" fill="rgb(229,17,7)"/><text x="22.1425%" y="1343.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (1 samples, 0.02%)</title><rect x="21.8925%" y="1317" width="0.0175%" height="15" fill="rgb(239,72,28)"/><text x="22.1425%" y="1327.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="21.8925%" y="1301" width="0.0175%" height="15" fill="rgb(230,47,54)"/><text x="22.1425%" y="1311.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.02%)</title><rect x="21.8925%" y="1285" width="0.0175%" height="15" fill="rgb(214,50,8)"/><text x="22.1425%" y="1295.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.02%)</title><rect x="21.8925%" y="1269" width="0.0175%" height="15" fill="rgb(216,198,43)"/><text x="22.1425%" y="1279.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::handle_comm_events::{{closure}} (1 samples, 0.02%)</title><rect x="21.8925%" y="1253" width="0.0175%" height="15" fill="rgb(234,20,35)"/><text x="22.1425%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (1 samples, 0.02%)</title><rect x="21.8925%" y="1237" width="0.0175%" height="15" fill="rgb(254,45,19)"/><text x="22.1425%" y="1247.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="21.8925%" y="1221" width="0.0175%" height="15" fill="rgb(219,14,44)"/><text x="22.1425%" y="1231.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="21.9099%" y="1365" width="0.0175%" height="15" fill="rgb(217,220,26)"/><text x="22.1599%" y="1375.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="21.9099%" y="1349" width="0.0175%" height="15" fill="rgb(213,158,28)"/><text x="22.1599%" y="1359.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (1 samples, 0.02%)</title><rect x="21.9099%" y="1333" width="0.0175%" height="15" fill="rgb(252,51,52)"/><text x="22.1599%" y="1343.50"></text></g><g><title>&lt;model::locally_free::ExprInstanceLocallyFree as model::locally_free::HasLocallyFree&lt;model::rho_types::expr::ExprInstance&gt;&gt;::locally_free (2 samples, 0.03%)</title><rect x="21.9274%" y="1365" width="0.0349%" height="15" fill="rgb(246,89,16)"/><text x="22.1774%" y="1375.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.05%)</title><rect x="22.1194%" y="1109" width="0.0524%" height="15" fill="rgb(216,158,49)"/><text x="22.3694%" y="1119.50"></text></g><g><title>[libc-2.31.so] (2 samples, 0.03%)</title><rect x="22.1369%" y="1093" width="0.0349%" height="15" fill="rgb(236,107,19)"/><text x="22.3869%" y="1103.50"></text></g><g><title>&lt;model::rho_types::Expr as core::clone::Clone&gt;::clone (7 samples, 0.12%)</title><rect x="22.0845%" y="1125" width="0.1222%" height="15" fill="rgb(228,185,30)"/><text x="22.3345%" y="1135.50"></text></g><g><title>[libc-2.31.so] (2 samples, 0.03%)</title><rect x="22.1718%" y="1109" width="0.0349%" height="15" fill="rgb(246,134,8)"/><text x="22.4218%" y="1119.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.07%)</title><rect x="22.2067%" y="1125" width="0.0698%" height="15" fill="rgb(214,143,50)"/><text x="22.4567%" y="1135.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.07%)</title><rect x="22.2067%" y="1109" width="0.0698%" height="15" fill="rgb(228,75,8)"/><text x="22.4567%" y="1119.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.07%)</title><rect x="22.2067%" y="1093" width="0.0698%" height="15" fill="rgb(207,175,4)"/><text x="22.4567%" y="1103.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.07%)</title><rect x="22.2067%" y="1077" width="0.0698%" height="15" fill="rgb(205,108,24)"/><text x="22.4567%" y="1087.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.07%)</title><rect x="22.2067%" y="1061" width="0.0698%" height="15" fill="rgb(244,120,49)"/><text x="22.4567%" y="1071.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.07%)</title><rect x="22.2067%" y="1045" width="0.0698%" height="15" fill="rgb(223,47,38)"/><text x="22.4567%" y="1055.50"></text></g><g><title>__rg_alloc (4 samples, 0.07%)</title><rect x="22.2067%" y="1029" width="0.0698%" height="15" fill="rgb(229,179,11)"/><text x="22.4567%" y="1039.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (4 samples, 0.07%)</title><rect x="22.2067%" y="1013" width="0.0698%" height="15" fill="rgb(231,122,1)"/><text x="22.4567%" y="1023.50"></text></g><g><title>_mi_malloc_generic (4 samples, 0.07%)</title><rect x="22.2067%" y="997" width="0.0698%" height="15" fill="rgb(245,119,9)"/><text x="22.4567%" y="1007.50"></text></g><g><title>_mi_heap_delayed_free (3 samples, 0.05%)</title><rect x="22.2242%" y="981" width="0.0524%" height="15" fill="rgb(241,163,25)"/><text x="22.4742%" y="991.50"></text></g><g><title>_mi_free_delayed_block (2 samples, 0.03%)</title><rect x="22.2416%" y="965" width="0.0349%" height="15" fill="rgb(217,214,3)"/><text x="22.4916%" y="975.50"></text></g><g><title>_mi_page_use_delayed_free (2 samples, 0.03%)</title><rect x="22.2416%" y="949" width="0.0349%" height="15" fill="rgb(240,86,28)"/><text x="22.4916%" y="959.50"></text></g><g><title>&lt;model::rho_types::ELt as core::clone::Clone&gt;::clone (17 samples, 0.30%)</title><rect x="22.0670%" y="1237" width="0.2968%" height="15" fill="rgb(215,47,9)"/><text x="22.3170%" y="1247.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (17 samples, 0.30%)</title><rect x="22.0670%" y="1221" width="0.2968%" height="15" fill="rgb(252,25,45)"/><text x="22.3170%" y="1231.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (17 samples, 0.30%)</title><rect x="22.0670%" y="1205" width="0.2968%" height="15" fill="rgb(251,164,9)"/><text x="22.3170%" y="1215.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (17 samples, 0.30%)</title><rect x="22.0670%" y="1189" width="0.2968%" height="15" fill="rgb(233,194,0)"/><text x="22.3170%" y="1199.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (17 samples, 0.30%)</title><rect x="22.0670%" y="1173" width="0.2968%" height="15" fill="rgb(249,111,24)"/><text x="22.3170%" y="1183.50"></text></g><g><title>alloc::slice::hack::to_vec (17 samples, 0.30%)</title><rect x="22.0670%" y="1157" width="0.2968%" height="15" fill="rgb(250,223,3)"/><text x="22.3170%" y="1167.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (17 samples, 0.30%)</title><rect x="22.0670%" y="1141" width="0.2968%" height="15" fill="rgb(236,178,37)"/><text x="22.3170%" y="1151.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (5 samples, 0.09%)</title><rect x="22.2765%" y="1125" width="0.0873%" height="15" fill="rgb(241,158,50)"/><text x="22.5265%" y="1135.50"></text></g><g><title>[libc-2.31.so] (2 samples, 0.03%)</title><rect x="22.3289%" y="1109" width="0.0349%" height="15" fill="rgb(213,121,41)"/><text x="22.5789%" y="1119.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="22.3638%" y="1125" width="0.0175%" height="15" fill="rgb(240,92,3)"/><text x="22.6138%" y="1135.50"></text></g><g><title>&lt;model::rho_types::expr::ExprInstance as core::clone::Clone&gt;::clone (9 samples, 0.16%)</title><rect x="22.5035%" y="1093" width="0.1571%" height="15" fill="rgb(205,123,3)"/><text x="22.7535%" y="1103.50"></text></g><g><title>&lt;model::rho_types::EPlus as core::clone::Clone&gt;::clone (7 samples, 0.12%)</title><rect x="22.5384%" y="1077" width="0.1222%" height="15" fill="rgb(205,97,47)"/><text x="22.7884%" y="1087.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (7 samples, 0.12%)</title><rect x="22.5384%" y="1061" width="0.1222%" height="15" fill="rgb(247,152,14)"/><text x="22.7884%" y="1071.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="22.6432%" y="1045" width="0.0175%" height="15" fill="rgb(248,195,53)"/><text x="22.8932%" y="1055.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (17 samples, 0.30%)</title><rect x="22.4337%" y="1109" width="0.2968%" height="15" fill="rgb(226,201,16)"/><text x="22.6837%" y="1119.50"></text></g><g><title>[libc-2.31.so] (4 samples, 0.07%)</title><rect x="22.6606%" y="1093" width="0.0698%" height="15" fill="rgb(205,98,0)"/><text x="22.9106%" y="1103.50"></text></g><g><title>&lt;model::rho_types::Expr as core::clone::Clone&gt;::clone (22 samples, 0.38%)</title><rect x="22.3813%" y="1125" width="0.3841%" height="15" fill="rgb(214,191,48)"/><text x="22.6313%" y="1135.50"></text></g><g><title>[libc-2.31.so] (2 samples, 0.03%)</title><rect x="22.7304%" y="1109" width="0.0349%" height="15" fill="rgb(237,112,39)"/><text x="22.9804%" y="1119.50"></text></g><g><title>_mi_page_free_collect (2 samples, 0.03%)</title><rect x="22.7828%" y="949" width="0.0349%" height="15" fill="rgb(247,203,27)"/><text x="23.0328%" y="959.50"></text></g><g><title>_mi_page_thread_free_collect (1 samples, 0.02%)</title><rect x="22.8003%" y="933" width="0.0175%" height="15" fill="rgb(235,124,28)"/><text x="23.0503%" y="943.50"></text></g><g><title>mi_block_next (1 samples, 0.02%)</title><rect x="22.8003%" y="917" width="0.0175%" height="15" fill="rgb(208,207,46)"/><text x="23.0503%" y="927.50"></text></g><g><title>mi_block_nextx (1 samples, 0.02%)</title><rect x="22.8003%" y="901" width="0.0175%" height="15" fill="rgb(234,176,4)"/><text x="23.0503%" y="911.50"></text></g><g><title>_mi_heap_delayed_free (4 samples, 0.07%)</title><rect x="22.7654%" y="981" width="0.0698%" height="15" fill="rgb(230,133,28)"/><text x="23.0154%" y="991.50"></text></g><g><title>_mi_free_delayed_block (3 samples, 0.05%)</title><rect x="22.7828%" y="965" width="0.0524%" height="15" fill="rgb(211,137,40)"/><text x="23.0328%" y="975.50"></text></g><g><title>_mi_page_use_delayed_free (1 samples, 0.02%)</title><rect x="22.8177%" y="949" width="0.0175%" height="15" fill="rgb(254,35,13)"/><text x="23.0677%" y="959.50"></text></g><g><title>_mi_malloc_generic (6 samples, 0.10%)</title><rect x="22.7654%" y="997" width="0.1047%" height="15" fill="rgb(225,49,51)"/><text x="23.0154%" y="1007.50"></text></g><g><title>mi_find_page (2 samples, 0.03%)</title><rect x="22.8352%" y="981" width="0.0349%" height="15" fill="rgb(251,10,15)"/><text x="23.0852%" y="991.50"></text></g><g><title>mi_find_free_page (2 samples, 0.03%)</title><rect x="22.8352%" y="965" width="0.0349%" height="15" fill="rgb(228,207,15)"/><text x="23.0852%" y="975.50"></text></g><g><title>mi_page_queue (1 samples, 0.02%)</title><rect x="22.8527%" y="949" width="0.0175%" height="15" fill="rgb(241,99,19)"/><text x="23.1027%" y="959.50"></text></g><g><title>_mi_bin (1 samples, 0.02%)</title><rect x="22.8527%" y="933" width="0.0175%" height="15" fill="rgb(207,104,49)"/><text x="23.1027%" y="943.50"></text></g><g><title>_mi_heap_get_free_small_page (1 samples, 0.02%)</title><rect x="22.8701%" y="949" width="0.0175%" height="15" fill="rgb(234,99,18)"/><text x="23.1201%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.16%)</title><rect x="22.7654%" y="1077" width="0.1571%" height="15" fill="rgb(213,191,49)"/><text x="23.0154%" y="1087.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.16%)</title><rect x="22.7654%" y="1061" width="0.1571%" height="15" fill="rgb(210,226,19)"/><text x="23.0154%" y="1071.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.16%)</title><rect x="22.7654%" y="1045" width="0.1571%" height="15" fill="rgb(229,97,18)"/><text x="23.0154%" y="1055.50"></text></g><g><title>__rg_alloc (9 samples, 0.16%)</title><rect x="22.7654%" y="1029" width="0.1571%" height="15" fill="rgb(211,167,15)"/><text x="23.0154%" y="1039.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (9 samples, 0.16%)</title><rect x="22.7654%" y="1013" width="0.1571%" height="15" fill="rgb(210,169,34)"/><text x="23.0154%" y="1023.50"></text></g><g><title>mi_malloc (3 samples, 0.05%)</title><rect x="22.8701%" y="997" width="0.0524%" height="15" fill="rgb(241,121,31)"/><text x="23.1201%" y="1007.50"></text></g><g><title>mi_heap_malloc (3 samples, 0.05%)</title><rect x="22.8701%" y="981" width="0.0524%" height="15" fill="rgb(232,40,11)"/><text x="23.1201%" y="991.50"></text></g><g><title>mi_heap_malloc_small (3 samples, 0.05%)</title><rect x="22.8701%" y="965" width="0.0524%" height="15" fill="rgb(205,86,26)"/><text x="23.1201%" y="975.50"></text></g><g><title>_mi_page_malloc (2 samples, 0.03%)</title><rect x="22.8876%" y="949" width="0.0349%" height="15" fill="rgb(231,126,28)"/><text x="23.1376%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity_from_bytes (1 samples, 0.02%)</title><rect x="22.9225%" y="1077" width="0.0175%" height="15" fill="rgb(219,221,18)"/><text x="23.1725%" y="1087.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (11 samples, 0.19%)</title><rect x="22.7654%" y="1125" width="0.1920%" height="15" fill="rgb(211,40,0)"/><text x="23.0154%" y="1135.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11 samples, 0.19%)</title><rect x="22.7654%" y="1109" width="0.1920%" height="15" fill="rgb(239,85,43)"/><text x="23.0154%" y="1119.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (11 samples, 0.19%)</title><rect x="22.7654%" y="1093" width="0.1920%" height="15" fill="rgb(231,55,21)"/><text x="23.0154%" y="1103.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.02%)</title><rect x="22.9399%" y="1077" width="0.0175%" height="15" fill="rgb(225,184,43)"/><text x="23.1899%" y="1087.50"></text></g><g><title>core::alloc::layout::Layout::repeat (1 samples, 0.02%)</title><rect x="22.9399%" y="1061" width="0.0175%" height="15" fill="rgb(251,158,41)"/><text x="23.1899%" y="1071.50"></text></g><g><title>&lt;model::rho_types::Expr as core::clone::Clone&gt;::clone (61 samples, 1.06%)</title><rect x="22.0670%" y="1285" width="1.0649%" height="15" fill="rgb(234,159,37)"/><text x="22.3170%" y="1295.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (61 samples, 1.06%)</title><rect x="22.0670%" y="1269" width="1.0649%" height="15" fill="rgb(216,204,22)"/><text x="22.3170%" y="1279.50"></text></g><g><title>&lt;model::rho_types::expr::ExprInstance as core::clone::Clone&gt;::clone (61 samples, 1.06%)</title><rect x="22.0670%" y="1253" width="1.0649%" height="15" fill="rgb(214,17,3)"/><text x="22.3170%" y="1263.50"></text></g><g><title>&lt;model::rho_types::EPlus as core::clone::Clone&gt;::clone (44 samples, 0.77%)</title><rect x="22.3638%" y="1237" width="0.7682%" height="15" fill="rgb(212,111,17)"/><text x="22.6138%" y="1247.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (44 samples, 0.77%)</title><rect x="22.3638%" y="1221" width="0.7682%" height="15" fill="rgb(221,157,24)"/><text x="22.6138%" y="1231.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (44 samples, 0.77%)</title><rect x="22.3638%" y="1205" width="0.7682%" height="15" fill="rgb(252,16,13)"/><text x="22.6138%" y="1215.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (44 samples, 0.77%)</title><rect x="22.3638%" y="1189" width="0.7682%" height="15" fill="rgb(221,62,2)"/><text x="22.6138%" y="1199.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (44 samples, 0.77%)</title><rect x="22.3638%" y="1173" width="0.7682%" height="15" fill="rgb(247,87,22)"/><text x="22.6138%" y="1183.50"></text></g><g><title>alloc::slice::hack::to_vec (44 samples, 0.77%)</title><rect x="22.3638%" y="1157" width="0.7682%" height="15" fill="rgb(215,73,9)"/><text x="22.6138%" y="1167.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (44 samples, 0.77%)</title><rect x="22.3638%" y="1141" width="0.7682%" height="15" fill="rgb(207,175,33)"/><text x="22.6138%" y="1151.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (10 samples, 0.17%)</title><rect x="22.9574%" y="1125" width="0.1746%" height="15" fill="rgb(243,129,54)"/><text x="23.2074%" y="1135.50"></text></g><g><title>[libc-2.31.so] (4 samples, 0.07%)</title><rect x="23.0622%" y="1109" width="0.0698%" height="15" fill="rgb(227,119,45)"/><text x="23.3122%" y="1119.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="23.2367%" y="821" width="0.0175%" height="15" fill="rgb(205,109,36)"/><text x="23.4867%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="23.2891%" y="725" width="0.0175%" height="15" fill="rgb(205,6,39)"/><text x="23.5391%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="23.2891%" y="709" width="0.0175%" height="15" fill="rgb(221,32,16)"/><text x="23.5391%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity_from_bytes (3 samples, 0.05%)</title><rect x="23.3066%" y="725" width="0.0524%" height="15" fill="rgb(228,144,50)"/><text x="23.5566%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.16%)</title><rect x="23.2367%" y="837" width="0.1571%" height="15" fill="rgb(229,201,53)"/><text x="23.4867%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8 samples, 0.14%)</title><rect x="23.2542%" y="821" width="0.1397%" height="15" fill="rgb(249,153,27)"/><text x="23.5042%" y="831.50"></text></g><g><title>alloc::slice::hack::to_vec (8 samples, 0.14%)</title><rect x="23.2542%" y="805" width="0.1397%" height="15" fill="rgb(227,106,25)"/><text x="23.5042%" y="815.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (8 samples, 0.14%)</title><rect x="23.2542%" y="789" width="0.1397%" height="15" fill="rgb(230,65,29)"/><text x="23.5042%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8 samples, 0.14%)</title><rect x="23.2542%" y="773" width="0.1397%" height="15" fill="rgb(221,57,46)"/><text x="23.5042%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8 samples, 0.14%)</title><rect x="23.2542%" y="757" width="0.1397%" height="15" fill="rgb(229,161,17)"/><text x="23.5042%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (8 samples, 0.14%)</title><rect x="23.2542%" y="741" width="0.1397%" height="15" fill="rgb(222,213,11)"/><text x="23.5042%" y="751.50"></text></g><g><title>core::alloc::layout::Layout::array (2 samples, 0.03%)</title><rect x="23.3589%" y="725" width="0.0349%" height="15" fill="rgb(235,35,13)"/><text x="23.6089%" y="735.50"></text></g><g><title>core::alloc::layout::Layout::repeat (2 samples, 0.03%)</title><rect x="23.3589%" y="709" width="0.0349%" height="15" fill="rgb(233,158,34)"/><text x="23.6089%" y="719.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (2 samples, 0.03%)</title><rect x="23.3589%" y="693" width="0.0349%" height="15" fill="rgb(215,151,48)"/><text x="23.6089%" y="703.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (2 samples, 0.03%)</title><rect x="23.3589%" y="677" width="0.0349%" height="15" fill="rgb(229,84,14)"/><text x="23.6089%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (16 samples, 0.28%)</title><rect x="23.1320%" y="1269" width="0.2793%" height="15" fill="rgb(229,68,14)"/><text x="23.3820%" y="1279.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (16 samples, 0.28%)</title><rect x="23.1320%" y="1253" width="0.2793%" height="15" fill="rgb(243,106,26)"/><text x="23.3820%" y="1263.50"></text></g><g><title>alloc::slice::hack::to_vec (16 samples, 0.28%)</title><rect x="23.1320%" y="1237" width="0.2793%" height="15" fill="rgb(206,45,38)"/><text x="23.3820%" y="1247.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (16 samples, 0.28%)</title><rect x="23.1320%" y="1221" width="0.2793%" height="15" fill="rgb(226,6,15)"/><text x="23.3820%" y="1231.50"></text></g><g><title>&lt;model::rho_types::MatchCase as core::clone::Clone&gt;::clone (16 samples, 0.28%)</title><rect x="23.1320%" y="1205" width="0.2793%" height="15" fill="rgb(232,22,54)"/><text x="23.3820%" y="1215.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (16 samples, 0.28%)</title><rect x="23.1320%" y="1189" width="0.2793%" height="15" fill="rgb(229,222,32)"/><text x="23.3820%" y="1199.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (16 samples, 0.28%)</title><rect x="23.1320%" y="1173" width="0.2793%" height="15" fill="rgb(228,62,29)"/><text x="23.3820%" y="1183.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (16 samples, 0.28%)</title><rect x="23.1320%" y="1157" width="0.2793%" height="15" fill="rgb(251,103,34)"/><text x="23.3820%" y="1167.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (16 samples, 0.28%)</title><rect x="23.1320%" y="1141" width="0.2793%" height="15" fill="rgb(233,12,30)"/><text x="23.3820%" y="1151.50"></text></g><g><title>alloc::slice::hack::to_vec (16 samples, 0.28%)</title><rect x="23.1320%" y="1125" width="0.2793%" height="15" fill="rgb(238,52,0)"/><text x="23.3820%" y="1135.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (16 samples, 0.28%)</title><rect x="23.1320%" y="1109" width="0.2793%" height="15" fill="rgb(223,98,5)"/><text x="23.3820%" y="1119.50"></text></g><g><title>&lt;model::rho_types::Send as core::clone::Clone&gt;::clone (16 samples, 0.28%)</title><rect x="23.1320%" y="1093" width="0.2793%" height="15" fill="rgb(228,75,37)"/><text x="23.3820%" y="1103.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (16 samples, 0.28%)</title><rect x="23.1320%" y="1077" width="0.2793%" height="15" fill="rgb(205,115,49)"/><text x="23.3820%" y="1087.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (16 samples, 0.28%)</title><rect x="23.1320%" y="1061" width="0.2793%" height="15" fill="rgb(250,154,43)"/><text x="23.3820%" y="1071.50"></text></g><g><title>alloc::slice::hack::to_vec (16 samples, 0.28%)</title><rect x="23.1320%" y="1045" width="0.2793%" height="15" fill="rgb(226,43,29)"/><text x="23.3820%" y="1055.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (16 samples, 0.28%)</title><rect x="23.1320%" y="1029" width="0.2793%" height="15" fill="rgb(249,228,39)"/><text x="23.3820%" y="1039.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (16 samples, 0.28%)</title><rect x="23.1320%" y="1013" width="0.2793%" height="15" fill="rgb(216,79,43)"/><text x="23.3820%" y="1023.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (16 samples, 0.28%)</title><rect x="23.1320%" y="997" width="0.2793%" height="15" fill="rgb(228,95,12)"/><text x="23.3820%" y="1007.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (16 samples, 0.28%)</title><rect x="23.1320%" y="981" width="0.2793%" height="15" fill="rgb(249,221,15)"/><text x="23.3820%" y="991.50"></text></g><g><title>alloc::slice::hack::to_vec (16 samples, 0.28%)</title><rect x="23.1320%" y="965" width="0.2793%" height="15" fill="rgb(233,34,13)"/><text x="23.3820%" y="975.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (16 samples, 0.28%)</title><rect x="23.1320%" y="949" width="0.2793%" height="15" fill="rgb(214,103,39)"/><text x="23.3820%" y="959.50"></text></g><g><title>&lt;model::rho_types::Expr as core::clone::Clone&gt;::clone (16 samples, 0.28%)</title><rect x="23.1320%" y="933" width="0.2793%" height="15" fill="rgb(251,126,39)"/><text x="23.3820%" y="943.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (16 samples, 0.28%)</title><rect x="23.1320%" y="917" width="0.2793%" height="15" fill="rgb(214,216,36)"/><text x="23.3820%" y="927.50"></text></g><g><title>&lt;model::rho_types::expr::ExprInstance as core::clone::Clone&gt;::clone (16 samples, 0.28%)</title><rect x="23.1320%" y="901" width="0.2793%" height="15" fill="rgb(220,221,8)"/><text x="23.3820%" y="911.50"></text></g><g><title>&lt;model::rho_types::EPlus as core::clone::Clone&gt;::clone (16 samples, 0.28%)</title><rect x="23.1320%" y="885" width="0.2793%" height="15" fill="rgb(240,216,3)"/><text x="23.3820%" y="895.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (16 samples, 0.28%)</title><rect x="23.1320%" y="869" width="0.2793%" height="15" fill="rgb(232,218,17)"/><text x="23.3820%" y="879.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (16 samples, 0.28%)</title><rect x="23.1320%" y="853" width="0.2793%" height="15" fill="rgb(229,163,45)"/><text x="23.3820%" y="863.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="23.3939%" y="837" width="0.0175%" height="15" fill="rgb(231,110,42)"/><text x="23.6439%" y="847.50"></text></g><g><title>&lt;model::bitset::BitSet&lt;B&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="23.3939%" y="821" width="0.0175%" height="15" fill="rgb(208,170,48)"/><text x="23.6439%" y="831.50"></text></g><g><title>&lt;bit_vec::BitVec&lt;B&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="23.3939%" y="805" width="0.0175%" height="15" fill="rgb(239,116,25)"/><text x="23.6439%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="23.3939%" y="789" width="0.0175%" height="15" fill="rgb(219,200,50)"/><text x="23.6439%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.02%)</title><rect x="23.3939%" y="773" width="0.0175%" height="15" fill="rgb(245,200,0)"/><text x="23.6439%" y="783.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="23.3939%" y="757" width="0.0175%" height="15" fill="rgb(245,119,33)"/><text x="23.6439%" y="767.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.02%)</title><rect x="23.3939%" y="741" width="0.0175%" height="15" fill="rgb(231,125,12)"/><text x="23.6439%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="23.3939%" y="725" width="0.0175%" height="15" fill="rgb(216,96,41)"/><text x="23.6439%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="23.3939%" y="709" width="0.0175%" height="15" fill="rgb(248,43,45)"/><text x="23.6439%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="23.3939%" y="693" width="0.0175%" height="15" fill="rgb(217,222,7)"/><text x="23.6439%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="23.3939%" y="677" width="0.0175%" height="15" fill="rgb(233,28,6)"/><text x="23.6439%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="23.3939%" y="661" width="0.0175%" height="15" fill="rgb(231,218,15)"/><text x="23.6439%" y="671.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="23.3939%" y="645" width="0.0175%" height="15" fill="rgb(226,171,48)"/><text x="23.6439%" y="655.50"></text></g><g><title>__rg_alloc (1 samples, 0.02%)</title><rect x="23.3939%" y="629" width="0.0175%" height="15" fill="rgb(235,201,9)"/><text x="23.6439%" y="639.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.02%)</title><rect x="23.3939%" y="613" width="0.0175%" height="15" fill="rgb(217,80,15)"/><text x="23.6439%" y="623.50"></text></g><g><title>mi_malloc (1 samples, 0.02%)</title><rect x="23.3939%" y="597" width="0.0175%" height="15" fill="rgb(219,152,8)"/><text x="23.6439%" y="607.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.02%)</title><rect x="23.3939%" y="581" width="0.0175%" height="15" fill="rgb(243,107,38)"/><text x="23.6439%" y="591.50"></text></g><g><title>mi_heap_malloc_small (1 samples, 0.02%)</title><rect x="23.3939%" y="565" width="0.0175%" height="15" fill="rgb(231,17,5)"/><text x="23.6439%" y="575.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.02%)</title><rect x="23.3939%" y="549" width="0.0175%" height="15" fill="rgb(209,25,54)"/><text x="23.6439%" y="559.50"></text></g><g><title>&lt;model::rho_types::Match as core::clone::Clone&gt;::clone (17 samples, 0.30%)</title><rect x="23.1320%" y="1285" width="0.2968%" height="15" fill="rgb(219,0,2)"/><text x="23.3820%" y="1295.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="23.4113%" y="1269" width="0.0175%" height="15" fill="rgb(246,9,5)"/><text x="23.6613%" y="1279.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (80 samples, 1.40%)</title><rect x="22.0496%" y="1349" width="1.3966%" height="15" fill="rgb(226,159,4)"/><text x="22.2996%" y="1359.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (80 samples, 1.40%)</title><rect x="22.0496%" y="1333" width="1.3966%" height="15" fill="rgb(219,175,34)"/><text x="22.2996%" y="1343.50"></text></g><g><title>alloc::slice::hack::to_vec (80 samples, 1.40%)</title><rect x="22.0496%" y="1317" width="1.3966%" height="15" fill="rgb(236,10,46)"/><text x="22.2996%" y="1327.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (79 samples, 1.38%)</title><rect x="22.0670%" y="1301" width="1.3792%" height="15" fill="rgb(240,211,16)"/><text x="22.3170%" y="1311.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (1 samples, 0.02%)</title><rect x="23.4288%" y="1285" width="0.0175%" height="15" fill="rgb(205,3,43)"/><text x="23.6788%" y="1295.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (86 samples, 1.50%)</title><rect x="21.9623%" y="1365" width="1.5014%" height="15" fill="rgb(245,7,22)"/><text x="22.2123%" y="1375.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="23.4462%" y="1349" width="0.0175%" height="15" fill="rgb(239,132,32)"/><text x="23.6962%" y="1359.50"></text></g><g><title>&lt;model::bitset::BitSet&lt;B&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="23.4462%" y="1333" width="0.0175%" height="15" fill="rgb(228,202,34)"/><text x="23.6962%" y="1343.50"></text></g><g><title>&lt;bit_vec::BitVec&lt;B&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="23.4462%" y="1317" width="0.0175%" height="15" fill="rgb(254,200,22)"/><text x="23.6962%" y="1327.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="23.4462%" y="1301" width="0.0175%" height="15" fill="rgb(219,10,39)"/><text x="23.6962%" y="1311.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.02%)</title><rect x="23.4462%" y="1285" width="0.0175%" height="15" fill="rgb(226,210,39)"/><text x="23.6962%" y="1295.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="23.4462%" y="1269" width="0.0175%" height="15" fill="rgb(208,219,16)"/><text x="23.6962%" y="1279.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.02%)</title><rect x="23.4462%" y="1253" width="0.0175%" height="15" fill="rgb(216,158,51)"/><text x="23.6962%" y="1263.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.02%)</title><rect x="23.4462%" y="1237" width="0.0175%" height="15" fill="rgb(233,14,44)"/><text x="23.6962%" y="1247.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="23.4462%" y="1221" width="0.0175%" height="15" fill="rgb(237,97,39)"/><text x="23.6962%" y="1231.50"></text></g><g><title>&lt;model::rho_types::Par as model::ordering::hash::Blake3Hashable&gt;::blake3_hash::traverse (1 samples, 0.02%)</title><rect x="23.4637%" y="1365" width="0.0175%" height="15" fill="rgb(218,198,43)"/><text x="23.7137%" y="1375.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (5 samples, 0.09%)</title><rect x="23.5335%" y="1333" width="0.0873%" height="15" fill="rgb(231,104,20)"/><text x="23.7835%" y="1343.50"></text></g><g><title>[libc-2.31.so] (5 samples, 0.09%)</title><rect x="23.5335%" y="1317" width="0.0873%" height="15" fill="rgb(254,36,13)"/><text x="23.7835%" y="1327.50"></text></g><g><title>[libc-2.31.so] (3 samples, 0.05%)</title><rect x="23.6208%" y="1317" width="0.0524%" height="15" fill="rgb(248,14,50)"/><text x="23.8708%" y="1327.50"></text></g><g><title>&lt;model::rho_types::Par as rho_runtime::interpreter::reduce::eval_expression::ParExpressionEvaluator&lt;S&gt;&gt;::evaluate_single_expression (4 samples, 0.07%)</title><rect x="23.6208%" y="1333" width="0.0698%" height="15" fill="rgb(217,107,29)"/><text x="23.8708%" y="1343.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.02%)</title><rect x="23.6732%" y="1317" width="0.0175%" height="15" fill="rgb(251,169,33)"/><text x="23.9232%" y="1327.50"></text></g><g><title>core::ptr::read (1 samples, 0.02%)</title><rect x="23.6732%" y="1301" width="0.0175%" height="15" fill="rgb(217,108,32)"/><text x="23.9232%" y="1311.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="23.6732%" y="1285" width="0.0175%" height="15" fill="rgb(219,66,42)"/><text x="23.9232%" y="1295.50"></text></g><g><title>[libc-2.31.so] (10 samples, 0.17%)</title><rect x="23.6906%" y="1333" width="0.1746%" height="15" fill="rgb(206,180,7)"/><text x="23.9406%" y="1343.50"></text></g><g><title>mi_free (1 samples, 0.02%)</title><rect x="23.8652%" y="1189" width="0.0175%" height="15" fill="rgb(208,226,31)"/><text x="24.1152%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Par&gt; (3 samples, 0.05%)</title><rect x="23.8652%" y="1317" width="0.0524%" height="15" fill="rgb(218,26,49)"/><text x="24.1152%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Expr&gt;&gt; (3 samples, 0.05%)</title><rect x="23.8652%" y="1301" width="0.0524%" height="15" fill="rgb(233,197,48)"/><text x="24.1152%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::Expr&gt;&gt; (3 samples, 0.05%)</title><rect x="23.8652%" y="1285" width="0.0524%" height="15" fill="rgb(252,181,51)"/><text x="24.1152%" y="1295.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.05%)</title><rect x="23.8652%" y="1269" width="0.0524%" height="15" fill="rgb(253,90,19)"/><text x="24.1152%" y="1279.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.05%)</title><rect x="23.8652%" y="1253" width="0.0524%" height="15" fill="rgb(215,171,30)"/><text x="24.1152%" y="1263.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.05%)</title><rect x="23.8652%" y="1237" width="0.0524%" height="15" fill="rgb(214,222,9)"/><text x="24.1152%" y="1247.50"></text></g><g><title>__rg_dealloc (3 samples, 0.05%)</title><rect x="23.8652%" y="1221" width="0.0524%" height="15" fill="rgb(223,3,22)"/><text x="24.1152%" y="1231.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (3 samples, 0.05%)</title><rect x="23.8652%" y="1205" width="0.0524%" height="15" fill="rgb(225,196,46)"/><text x="24.1152%" y="1215.50"></text></g><g><title>mi_free_generic (2 samples, 0.03%)</title><rect x="23.8827%" y="1189" width="0.0349%" height="15" fill="rgb(209,110,37)"/><text x="24.1327%" y="1199.50"></text></g><g><title>_mi_free_block_mt (10 samples, 0.17%)</title><rect x="23.9351%" y="1173" width="0.1746%" height="15" fill="rgb(249,89,12)"/><text x="24.1851%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Par&gt; (12 samples, 0.21%)</title><rect x="23.9351%" y="1301" width="0.2095%" height="15" fill="rgb(226,27,33)"/><text x="24.1851%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Expr&gt;&gt; (12 samples, 0.21%)</title><rect x="23.9351%" y="1285" width="0.2095%" height="15" fill="rgb(213,82,22)"/><text x="24.1851%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::Expr&gt;&gt; (12 samples, 0.21%)</title><rect x="23.9351%" y="1269" width="0.2095%" height="15" fill="rgb(248,140,0)"/><text x="24.1851%" y="1279.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.21%)</title><rect x="23.9351%" y="1253" width="0.2095%" height="15" fill="rgb(228,106,3)"/><text x="24.1851%" y="1263.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12 samples, 0.21%)</title><rect x="23.9351%" y="1237" width="0.2095%" height="15" fill="rgb(209,23,37)"/><text x="24.1851%" y="1247.50"></text></g><g><title>alloc::alloc::dealloc (12 samples, 0.21%)</title><rect x="23.9351%" y="1221" width="0.2095%" height="15" fill="rgb(241,93,50)"/><text x="24.1851%" y="1231.50"></text></g><g><title>__rg_dealloc (12 samples, 0.21%)</title><rect x="23.9351%" y="1205" width="0.2095%" height="15" fill="rgb(253,46,43)"/><text x="24.1851%" y="1215.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (12 samples, 0.21%)</title><rect x="23.9351%" y="1189" width="0.2095%" height="15" fill="rgb(226,206,43)"/><text x="24.1851%" y="1199.50"></text></g><g><title>mi_free (2 samples, 0.03%)</title><rect x="24.1096%" y="1173" width="0.0349%" height="15" fill="rgb(217,54,7)"/><text x="24.3596%" y="1183.50"></text></g><g><title>_mi_segment_page_of (2 samples, 0.03%)</title><rect x="24.1096%" y="1157" width="0.0349%" height="15" fill="rgb(223,5,52)"/><text x="24.3596%" y="1167.50"></text></g><g><title>_mi_segment_page_idx_of (2 samples, 0.03%)</title><rect x="24.1096%" y="1141" width="0.0349%" height="15" fill="rgb(206,52,46)"/><text x="24.3596%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;model::rho_types::expr::ExprInstance&gt;&gt; (17 samples, 0.30%)</title><rect x="23.8652%" y="1333" width="0.2968%" height="15" fill="rgb(253,136,11)"/><text x="24.1152%" y="1343.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::expr::ExprInstance&gt; (14 samples, 0.24%)</title><rect x="23.9176%" y="1317" width="0.2444%" height="15" fill="rgb(208,106,33)"/><text x="24.1676%" y="1327.50"></text></g><g><title>mi_free (1 samples, 0.02%)</title><rect x="24.1446%" y="1301" width="0.0175%" height="15" fill="rgb(206,54,4)"/><text x="24.3946%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Expr&gt;&gt; (1 samples, 0.02%)</title><rect x="24.1795%" y="1301" width="0.0175%" height="15" fill="rgb(213,3,15)"/><text x="24.4295%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::Expr&gt;&gt; (1 samples, 0.02%)</title><rect x="24.1795%" y="1285" width="0.0175%" height="15" fill="rgb(252,211,39)"/><text x="24.4295%" y="1295.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="24.1795%" y="1269" width="0.0175%" height="15" fill="rgb(223,6,36)"/><text x="24.4295%" y="1279.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="24.1795%" y="1253" width="0.0175%" height="15" fill="rgb(252,169,45)"/><text x="24.4295%" y="1263.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="24.1795%" y="1237" width="0.0175%" height="15" fill="rgb(212,48,26)"/><text x="24.4295%" y="1247.50"></text></g><g><title>__rg_dealloc (1 samples, 0.02%)</title><rect x="24.1795%" y="1221" width="0.0175%" height="15" fill="rgb(251,102,48)"/><text x="24.4295%" y="1231.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (1 samples, 0.02%)</title><rect x="24.1795%" y="1205" width="0.0175%" height="15" fill="rgb(243,208,16)"/><text x="24.4295%" y="1215.50"></text></g><g><title>_mi_free_block_mt (1 samples, 0.02%)</title><rect x="24.1795%" y="1189" width="0.0175%" height="15" fill="rgb(219,96,24)"/><text x="24.4295%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Par&gt; (2 samples, 0.03%)</title><rect x="24.1795%" y="1317" width="0.0349%" height="15" fill="rgb(219,33,29)"/><text x="24.4295%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;model::bitset::BitSet&gt;&gt; (1 samples, 0.02%)</title><rect x="24.1969%" y="1301" width="0.0175%" height="15" fill="rgb(223,176,5)"/><text x="24.4469%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::expr::ExprInstance&gt; (4 samples, 0.07%)</title><rect x="24.1620%" y="1333" width="0.0698%" height="15" fill="rgb(228,140,14)"/><text x="24.4120%" y="1343.50"></text></g><g><title>mi_free (1 samples, 0.02%)</title><rect x="24.2144%" y="1317" width="0.0175%" height="15" fill="rgb(217,179,31)"/><text x="24.4644%" y="1327.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (6 samples, 0.10%)</title><rect x="24.2318%" y="1317" width="0.1047%" height="15" fill="rgb(230,9,30)"/><text x="24.4818%" y="1327.50"></text></g><g><title>[libc-2.31.so] (6 samples, 0.10%)</title><rect x="24.2318%" y="1301" width="0.1047%" height="15" fill="rgb(230,136,20)"/><text x="24.4818%" y="1311.50"></text></g><g><title>[libc-2.31.so] (8 samples, 0.14%)</title><rect x="24.3715%" y="1301" width="0.1397%" height="15" fill="rgb(215,210,22)"/><text x="24.6215%" y="1311.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (2 samples, 0.03%)</title><rect x="24.5112%" y="1301" width="0.0349%" height="15" fill="rgb(218,43,5)"/><text x="24.7612%" y="1311.50"></text></g><g><title>&lt;model::rho_types::Par as rho_runtime::interpreter::reduce::eval_expression::ParExpressionEvaluator&lt;S&gt;&gt;::evaluate_single_expression (20 samples, 0.35%)</title><rect x="24.3366%" y="1317" width="0.3492%" height="15" fill="rgb(216,11,5)"/><text x="24.5866%" y="1327.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (8 samples, 0.14%)</title><rect x="24.5461%" y="1301" width="0.1397%" height="15" fill="rgb(209,82,29)"/><text x="24.7961%" y="1311.50"></text></g><g><title>core::ptr::read (8 samples, 0.14%)</title><rect x="24.5461%" y="1285" width="0.1397%" height="15" fill="rgb(244,115,12)"/><text x="24.7961%" y="1295.50"></text></g><g><title>[libc-2.31.so] (5 samples, 0.09%)</title><rect x="24.5985%" y="1269" width="0.0873%" height="15" fill="rgb(222,82,18)"/><text x="24.8485%" y="1279.50"></text></g><g><title>&lt;model::rho_types::Par as rho_runtime::interpreter::reduce::eval_expression::ParExpressionEvaluator&lt;S&gt;&gt;::evaluate_nested_expressions (77 samples, 1.34%)</title><rect x="23.4811%" y="1365" width="1.3443%" height="15" fill="rgb(249,227,8)"/><text x="23.7311%" y="1375.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_expression::expr_instance::&lt;impl rho_runtime::interpreter::reduce::Evaluator&lt;S&gt; for model::rho_types::Expr&gt;::evaluate (76 samples, 1.33%)</title><rect x="23.4986%" y="1349" width="1.3268%" height="15" fill="rgb(253,141,45)"/><text x="23.7486%" y="1359.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_expression::eval_eplus::&lt;impl rho_runtime::interpreter::reduce::eval_expression::ExprInstanceEvaluator&lt;S&gt; for model::rho_types::EPlus&gt;::evaluate (34 samples, 0.59%)</title><rect x="24.2318%" y="1333" width="0.5936%" height="15" fill="rgb(234,184,4)"/><text x="24.4818%" y="1343.50"></text></g><g><title>[libc-2.31.so] (8 samples, 0.14%)</title><rect x="24.6858%" y="1317" width="0.1397%" height="15" fill="rgb(218,194,23)"/><text x="24.9358%" y="1327.50"></text></g><g><title>&lt;rho_runtime::storage::signal::CompletionSignal as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="24.8254%" y="1365" width="0.0175%" height="15" fill="rgb(235,66,41)"/><text x="25.0754%" y="1375.50"></text></g><g><title>&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (1 samples, 0.02%)</title><rect x="24.8429%" y="1365" width="0.0175%" height="15" fill="rgb(245,217,1)"/><text x="25.0929%" y="1375.50"></text></g><g><title>&lt;tokio::sync::oneshot::Receiver&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="24.8603%" y="1365" width="0.0175%" height="15" fill="rgb(229,91,1)"/><text x="25.1103%" y="1375.50"></text></g><g><title>&lt;model::rho_types::Par as rho_runtime::interpreter::reduce::eval_expression::ParExpressionEvaluator&lt;S&gt;&gt;::evaluate_single_expression (1 samples, 0.02%)</title><rect x="25.1571%" y="1349" width="0.0175%" height="15" fill="rgb(207,101,30)"/><text x="25.4071%" y="1359.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.02%)</title><rect x="25.2095%" y="1333" width="0.0175%" height="15" fill="rgb(223,82,49)"/><text x="25.4595%" y="1343.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::FromIterator&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="25.2095%" y="1317" width="0.0175%" height="15" fill="rgb(218,167,17)"/><text x="25.4595%" y="1327.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (1 samples, 0.02%)</title><rect x="25.2095%" y="1301" width="0.0175%" height="15" fill="rgb(208,103,14)"/><text x="25.4595%" y="1311.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="25.2095%" y="1285" width="0.0175%" height="15" fill="rgb(238,20,8)"/><text x="25.4595%" y="1295.50"></text></g><g><title>[libc-2.31.so] (21 samples, 0.37%)</title><rect x="24.8778%" y="1365" width="0.3666%" height="15" fill="rgb(218,80,54)"/><text x="25.1278%" y="1375.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::handle_comm_events (4 samples, 0.07%)</title><rect x="25.1746%" y="1349" width="0.0698%" height="15" fill="rgb(240,144,17)"/><text x="25.4246%" y="1359.50"></text></g><g><title>rho_runtime::interpreter::reduce::environment::Env&lt;T&gt;::create (1 samples, 0.02%)</title><rect x="25.2270%" y="1333" width="0.0175%" height="15" fill="rgb(245,27,50)"/><text x="25.4770%" y="1343.50"></text></g><g><title>[rho_runtime] (1 samples, 0.02%)</title><rect x="25.2444%" y="1365" width="0.0175%" height="15" fill="rgb(251,51,7)"/><text x="25.4944%" y="1375.50"></text></g><g><title>blake3::ChunkState::update (1 samples, 0.02%)</title><rect x="25.2444%" y="1349" width="0.0175%" height="15" fill="rgb(245,217,29)"/><text x="25.4944%" y="1359.50"></text></g><g><title>blake3::ChunkState::fill_buf (1 samples, 0.02%)</title><rect x="25.2444%" y="1333" width="0.0175%" height="15" fill="rgb(221,176,29)"/><text x="25.4944%" y="1343.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.02%)</title><rect x="25.2444%" y="1317" width="0.0175%" height="15" fill="rgb(212,180,24)"/><text x="25.4944%" y="1327.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="25.2444%" y="1301" width="0.0175%" height="15" fill="rgb(254,24,2)"/><text x="25.4944%" y="1311.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.02%)</title><rect x="25.2619%" y="1365" width="0.0175%" height="15" fill="rgb(230,100,2)"/><text x="25.5119%" y="1375.50"></text></g><g><title>blake3::ChunkState::update (5 samples, 0.09%)</title><rect x="25.2793%" y="1365" width="0.0873%" height="15" fill="rgb(219,142,25)"/><text x="25.5293%" y="1375.50"></text></g><g><title>blake3::Hasher::update (3 samples, 0.05%)</title><rect x="25.3666%" y="1365" width="0.0524%" height="15" fill="rgb(240,73,43)"/><text x="25.6166%" y="1375.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (1 samples, 0.02%)</title><rect x="25.4190%" y="1365" width="0.0175%" height="15" fill="rgb(214,114,15)"/><text x="25.6690%" y="1375.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (1 samples, 0.02%)</title><rect x="25.4190%" y="1349" width="0.0175%" height="15" fill="rgb(207,130,4)"/><text x="25.6690%" y="1359.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.02%)</title><rect x="25.4190%" y="1333" width="0.0175%" height="15" fill="rgb(221,25,40)"/><text x="25.6690%" y="1343.50"></text></g><g><title>std::panicking::try (1 samples, 0.02%)</title><rect x="25.4190%" y="1317" width="0.0175%" height="15" fill="rgb(241,184,7)"/><text x="25.6690%" y="1327.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.02%)</title><rect x="25.4190%" y="1301" width="0.0175%" height="15" fill="rgb(235,159,4)"/><text x="25.6690%" y="1311.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.02%)</title><rect x="25.4190%" y="1285" width="0.0175%" height="15" fill="rgb(214,87,48)"/><text x="25.6690%" y="1295.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (1 samples, 0.02%)</title><rect x="25.4190%" y="1269" width="0.0175%" height="15" fill="rgb(246,198,24)"/><text x="25.6690%" y="1279.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.02%)</title><rect x="25.4190%" y="1253" width="0.0175%" height="15" fill="rgb(209,66,40)"/><text x="25.6690%" y="1263.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (1 samples, 0.02%)</title><rect x="25.4190%" y="1237" width="0.0175%" height="15" fill="rgb(233,147,39)"/><text x="25.6690%" y="1247.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (1 samples, 0.02%)</title><rect x="25.4190%" y="1221" width="0.0175%" height="15" fill="rgb(231,145,52)"/><text x="25.6690%" y="1231.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (1 samples, 0.02%)</title><rect x="25.4190%" y="1205" width="0.0175%" height="15" fill="rgb(206,20,26)"/><text x="25.6690%" y="1215.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (1 samples, 0.02%)</title><rect x="25.4190%" y="1189" width="0.0175%" height="15" fill="rgb(238,220,4)"/><text x="25.6690%" y="1199.50"></text></g><g><title>tokio::runtime::task::raw::poll (1 samples, 0.02%)</title><rect x="25.4190%" y="1173" width="0.0175%" height="15" fill="rgb(252,195,42)"/><text x="25.6690%" y="1183.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1 samples, 0.02%)</title><rect x="25.4190%" y="1157" width="0.0175%" height="15" fill="rgb(209,10,6)"/><text x="25.6690%" y="1167.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (1 samples, 0.02%)</title><rect x="25.4190%" y="1141" width="0.0175%" height="15" fill="rgb(229,3,52)"/><text x="25.6690%" y="1151.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (1 samples, 0.02%)</title><rect x="25.4190%" y="1125" width="0.0175%" height="15" fill="rgb(253,49,37)"/><text x="25.6690%" y="1135.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.02%)</title><rect x="25.4190%" y="1109" width="0.0175%" height="15" fill="rgb(240,103,49)"/><text x="25.6690%" y="1119.50"></text></g><g><title>std::panicking::try (1 samples, 0.02%)</title><rect x="25.4190%" y="1093" width="0.0175%" height="15" fill="rgb(250,182,30)"/><text x="25.6690%" y="1103.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.02%)</title><rect x="25.4190%" y="1077" width="0.0175%" height="15" fill="rgb(248,8,30)"/><text x="25.6690%" y="1087.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.02%)</title><rect x="25.4190%" y="1061" width="0.0175%" height="15" fill="rgb(237,120,30)"/><text x="25.6690%" y="1071.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (1 samples, 0.02%)</title><rect x="25.4190%" y="1045" width="0.0175%" height="15" fill="rgb(221,146,34)"/><text x="25.6690%" y="1055.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (1 samples, 0.02%)</title><rect x="25.4190%" y="1029" width="0.0175%" height="15" fill="rgb(242,55,13)"/><text x="25.6690%" y="1039.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1 samples, 0.02%)</title><rect x="25.4190%" y="1013" width="0.0175%" height="15" fill="rgb(242,112,31)"/><text x="25.6690%" y="1023.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (1 samples, 0.02%)</title><rect x="25.4190%" y="997" width="0.0175%" height="15" fill="rgb(249,192,27)"/><text x="25.6690%" y="1007.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="25.4190%" y="981" width="0.0175%" height="15" fill="rgb(208,204,44)"/><text x="25.6690%" y="991.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (1 samples, 0.02%)</title><rect x="25.4190%" y="965" width="0.0175%" height="15" fill="rgb(208,93,54)"/><text x="25.6690%" y="975.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (1 samples, 0.02%)</title><rect x="25.4190%" y="949" width="0.0175%" height="15" fill="rgb(242,1,31)"/><text x="25.6690%" y="959.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1 samples, 0.02%)</title><rect x="25.4190%" y="933" width="0.0175%" height="15" fill="rgb(241,83,25)"/><text x="25.6690%" y="943.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (1 samples, 0.02%)</title><rect x="25.4190%" y="917" width="0.0175%" height="15" fill="rgb(205,169,50)"/><text x="25.6690%" y="927.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (1 samples, 0.02%)</title><rect x="25.4190%" y="901" width="0.0175%" height="15" fill="rgb(239,186,37)"/><text x="25.6690%" y="911.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (1 samples, 0.02%)</title><rect x="25.4190%" y="885" width="0.0175%" height="15" fill="rgb(205,221,10)"/><text x="25.6690%" y="895.50"></text></g><g><title>tokio::coop::budget (1 samples, 0.02%)</title><rect x="25.4190%" y="869" width="0.0175%" height="15" fill="rgb(218,196,15)"/><text x="25.6690%" y="879.50"></text></g><g><title>tokio::coop::with_budget (1 samples, 0.02%)</title><rect x="25.4190%" y="853" width="0.0175%" height="15" fill="rgb(218,196,35)"/><text x="25.6690%" y="863.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="25.4190%" y="837" width="0.0175%" height="15" fill="rgb(233,63,24)"/><text x="25.6690%" y="847.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.02%)</title><rect x="25.4190%" y="821" width="0.0175%" height="15" fill="rgb(225,8,4)"/><text x="25.6690%" y="831.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (1 samples, 0.02%)</title><rect x="25.4190%" y="805" width="0.0175%" height="15" fill="rgb(234,105,35)"/><text x="25.6690%" y="815.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (1 samples, 0.02%)</title><rect x="25.4190%" y="789" width="0.0175%" height="15" fill="rgb(236,21,32)"/><text x="25.6690%" y="799.50"></text></g><g><title>tokio::runtime::task::raw::poll (1 samples, 0.02%)</title><rect x="25.4190%" y="773" width="0.0175%" height="15" fill="rgb(228,109,6)"/><text x="25.6690%" y="783.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1 samples, 0.02%)</title><rect x="25.4190%" y="757" width="0.0175%" height="15" fill="rgb(229,215,31)"/><text x="25.6690%" y="767.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (1 samples, 0.02%)</title><rect x="25.4190%" y="741" width="0.0175%" height="15" fill="rgb(221,52,54)"/><text x="25.6690%" y="751.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (1 samples, 0.02%)</title><rect x="25.4190%" y="725" width="0.0175%" height="15" fill="rgb(252,129,43)"/><text x="25.6690%" y="735.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.02%)</title><rect x="25.4190%" y="709" width="0.0175%" height="15" fill="rgb(248,183,27)"/><text x="25.6690%" y="719.50"></text></g><g><title>std::panicking::try (1 samples, 0.02%)</title><rect x="25.4190%" y="693" width="0.0175%" height="15" fill="rgb(250,0,22)"/><text x="25.6690%" y="703.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.02%)</title><rect x="25.4190%" y="677" width="0.0175%" height="15" fill="rgb(213,166,10)"/><text x="25.6690%" y="687.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.02%)</title><rect x="25.4190%" y="661" width="0.0175%" height="15" fill="rgb(207,163,36)"/><text x="25.6690%" y="671.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (1 samples, 0.02%)</title><rect x="25.4190%" y="645" width="0.0175%" height="15" fill="rgb(208,122,22)"/><text x="25.6690%" y="655.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (1 samples, 0.02%)</title><rect x="25.4190%" y="629" width="0.0175%" height="15" fill="rgb(207,104,49)"/><text x="25.6690%" y="639.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1 samples, 0.02%)</title><rect x="25.4190%" y="613" width="0.0175%" height="15" fill="rgb(248,211,50)"/><text x="25.6690%" y="623.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (1 samples, 0.02%)</title><rect x="25.4190%" y="597" width="0.0175%" height="15" fill="rgb(217,13,45)"/><text x="25.6690%" y="607.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="25.4190%" y="581" width="0.0175%" height="15" fill="rgb(211,216,49)"/><text x="25.6690%" y="591.50"></text></g><g><title>rho_runtime::storage::coordinator::Coordinator::handle_join_double::{{closure}} (1 samples, 0.02%)</title><rect x="25.4190%" y="565" width="0.0175%" height="15" fill="rgb(221,58,53)"/><text x="25.6690%" y="575.50"></text></g><g><title>rho_runtime::storage::tuplecell::TuplespaceChannel::join (1 samples, 0.02%)</title><rect x="25.4190%" y="549" width="0.0175%" height="15" fill="rgb(220,112,41)"/><text x="25.6690%" y="559.50"></text></g><g><title>&lt;rho_runtime::storage::TaggedContinuation as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="25.4190%" y="533" width="0.0175%" height="15" fill="rgb(236,38,28)"/><text x="25.6690%" y="543.50"></text></g><g><title>&lt;model::rho_types::ParWithRandom as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="25.4190%" y="517" width="0.0175%" height="15" fill="rgb(227,195,22)"/><text x="25.6690%" y="527.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="25.4190%" y="501" width="0.0175%" height="15" fill="rgb(214,55,33)"/><text x="25.6690%" y="511.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="25.4190%" y="485" width="0.0175%" height="15" fill="rgb(248,80,13)"/><text x="25.6690%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="25.4190%" y="469" width="0.0175%" height="15" fill="rgb(238,52,6)"/><text x="25.6690%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.02%)</title><rect x="25.4190%" y="453" width="0.0175%" height="15" fill="rgb(224,198,47)"/><text x="25.6690%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="25.4190%" y="437" width="0.0175%" height="15" fill="rgb(233,171,20)"/><text x="25.6690%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.02%)</title><rect x="25.4190%" y="421" width="0.0175%" height="15" fill="rgb(241,30,25)"/><text x="25.6690%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="25.4190%" y="405" width="0.0175%" height="15" fill="rgb(207,171,38)"/><text x="25.6690%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="25.4190%" y="389" width="0.0175%" height="15" fill="rgb(234,70,1)"/><text x="25.6690%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="25.4190%" y="373" width="0.0175%" height="15" fill="rgb(232,178,18)"/><text x="25.6690%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity_from_bytes (1 samples, 0.02%)</title><rect x="25.4190%" y="357" width="0.0175%" height="15" fill="rgb(241,78,40)"/><text x="25.6690%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Par&gt; (2 samples, 0.03%)</title><rect x="25.4365%" y="1365" width="0.0349%" height="15" fill="rgb(222,35,25)"/><text x="25.6865%" y="1375.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Expr&gt;&gt; (1 samples, 0.02%)</title><rect x="25.4539%" y="1349" width="0.0175%" height="15" fill="rgb(207,92,16)"/><text x="25.7039%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::Expr&gt;&gt; (1 samples, 0.02%)</title><rect x="25.4539%" y="1333" width="0.0175%" height="15" fill="rgb(216,59,51)"/><text x="25.7039%" y="1343.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="25.4539%" y="1317" width="0.0175%" height="15" fill="rgb(213,80,28)"/><text x="25.7039%" y="1327.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="25.4539%" y="1301" width="0.0175%" height="15" fill="rgb(220,93,7)"/><text x="25.7039%" y="1311.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="25.4539%" y="1285" width="0.0175%" height="15" fill="rgb(225,24,44)"/><text x="25.7039%" y="1295.50"></text></g><g><title>__rg_dealloc (1 samples, 0.02%)</title><rect x="25.4539%" y="1269" width="0.0175%" height="15" fill="rgb(243,74,40)"/><text x="25.7039%" y="1279.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (1 samples, 0.02%)</title><rect x="25.4539%" y="1253" width="0.0175%" height="15" fill="rgb(228,39,7)"/><text x="25.7039%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::expr::ExprInstance&gt; (1 samples, 0.02%)</title><rect x="25.4714%" y="1365" width="0.0175%" height="15" fill="rgb(227,79,8)"/><text x="25.7214%" y="1375.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Stage&lt;core::future::from_generator::GenFuture&lt;rho_runtime::interpreter::InterpreterContext&lt;rho_runtime::storage::store::AsyncStore&gt;::spawn_evaluation&lt;model::rho_types::Send&gt;::{{closure}}&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="25.4888%" y="1365" width="0.0175%" height="15" fill="rgb(236,58,11)"/><text x="25.7388%" y="1375.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Stage&lt;core::future::from_generator::GenFuture&lt;rho_runtime::storage::coordinator::Coordinator::handle_join_double::{{closure}}&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="25.5063%" y="1365" width="0.0175%" height="15" fill="rgb(249,63,35)"/><text x="25.7563%" y="1375.50"></text></g><g><title>mi_malloc (2 samples, 0.03%)</title><rect x="25.5237%" y="1365" width="0.0349%" height="15" fill="rgb(252,114,16)"/><text x="25.7737%" y="1375.50"></text></g><g><title>model::ordering::sort_par::&lt;impl model::ordering::Sortable for model::rho_types::Par&gt;::sort (1 samples, 0.02%)</title><rect x="25.5587%" y="1365" width="0.0175%" height="15" fill="rgb(254,151,24)"/><text x="25.8087%" y="1375.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (4 samples, 0.07%)</title><rect x="25.5761%" y="1365" width="0.0698%" height="15" fill="rgb(253,54,39)"/><text x="25.8261%" y="1375.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (1 samples, 0.02%)</title><rect x="25.6459%" y="1365" width="0.0175%" height="15" fill="rgb(243,25,45)"/><text x="25.8959%" y="1375.50"></text></g><g><title>parking_lot_core::parking_lot::park (1 samples, 0.02%)</title><rect x="25.6459%" y="1349" width="0.0175%" height="15" fill="rgb(234,134,9)"/><text x="25.8959%" y="1359.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (1 samples, 0.02%)</title><rect x="25.6459%" y="1333" width="0.0175%" height="15" fill="rgb(227,166,31)"/><text x="25.8959%" y="1343.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (1 samples, 0.02%)</title><rect x="25.6459%" y="1317" width="0.0175%" height="15" fill="rgb(245,143,41)"/><text x="25.8959%" y="1327.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (1 samples, 0.02%)</title><rect x="25.6459%" y="1301" width="0.0175%" height="15" fill="rgb(238,181,32)"/><text x="25.8959%" y="1311.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (1 samples, 0.02%)</title><rect x="25.6459%" y="1285" width="0.0175%" height="15" fill="rgb(224,113,18)"/><text x="25.8959%" y="1295.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.02%)</title><rect x="25.6634%" y="1365" width="0.0175%" height="15" fill="rgb(240,229,28)"/><text x="25.9134%" y="1375.50"></text></g><g><title>[libc-2.31.so] (2 samples, 0.03%)</title><rect x="25.6983%" y="1333" width="0.0349%" height="15" fill="rgb(250,185,3)"/><text x="25.9483%" y="1343.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (3 samples, 0.05%)</title><rect x="25.7332%" y="1333" width="0.0524%" height="15" fill="rgb(212,59,25)"/><text x="25.9832%" y="1343.50"></text></g><g><title>core::ptr::read (2 samples, 0.03%)</title><rect x="25.7507%" y="1317" width="0.0349%" height="15" fill="rgb(221,87,20)"/><text x="26.0007%" y="1327.50"></text></g><g><title>[libc-2.31.so] (2 samples, 0.03%)</title><rect x="25.7507%" y="1301" width="0.0349%" height="15" fill="rgb(213,74,28)"/><text x="26.0007%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Bundle&gt;&gt; (1 samples, 0.02%)</title><rect x="25.7856%" y="1221" width="0.0175%" height="15" fill="rgb(224,132,34)"/><text x="26.0356%" y="1231.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="25.7856%" y="1205" width="0.0175%" height="15" fill="rgb(222,101,24)"/><text x="26.0356%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place&lt;[model::rho_types::Bundle]&gt; (1 samples, 0.02%)</title><rect x="25.7856%" y="1189" width="0.0175%" height="15" fill="rgb(254,142,4)"/><text x="26.0356%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Expr&gt;&gt; (1 samples, 0.02%)</title><rect x="25.8031%" y="1221" width="0.0175%" height="15" fill="rgb(230,229,49)"/><text x="26.0531%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::Expr&gt;&gt; (1 samples, 0.02%)</title><rect x="25.8031%" y="1205" width="0.0175%" height="15" fill="rgb(238,70,47)"/><text x="26.0531%" y="1215.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="25.8031%" y="1189" width="0.0175%" height="15" fill="rgb(231,160,17)"/><text x="26.0531%" y="1199.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="25.8031%" y="1173" width="0.0175%" height="15" fill="rgb(218,68,53)"/><text x="26.0531%" y="1183.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="25.8031%" y="1157" width="0.0175%" height="15" fill="rgb(236,111,10)"/><text x="26.0531%" y="1167.50"></text></g><g><title>__rg_dealloc (1 samples, 0.02%)</title><rect x="25.8031%" y="1141" width="0.0175%" height="15" fill="rgb(224,34,41)"/><text x="26.0531%" y="1151.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (1 samples, 0.02%)</title><rect x="25.8031%" y="1125" width="0.0175%" height="15" fill="rgb(241,118,19)"/><text x="26.0531%" y="1135.50"></text></g><g><title>_mi_free_block_mt (1 samples, 0.02%)</title><rect x="25.8031%" y="1109" width="0.0175%" height="15" fill="rgb(238,129,25)"/><text x="26.0531%" y="1119.50"></text></g><g><title>_mi_free_block_mt (1 samples, 0.02%)</title><rect x="25.8380%" y="1109" width="0.0175%" height="15" fill="rgb(238,22,31)"/><text x="26.0880%" y="1119.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="25.8554%" y="1077" width="0.0175%" height="15" fill="rgb(222,174,48)"/><text x="26.1054%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;[model::rho_types::Expr]&gt; (1 samples, 0.02%)</title><rect x="25.8554%" y="1061" width="0.0175%" height="15" fill="rgb(206,152,40)"/><text x="26.1054%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Expr&gt; (1 samples, 0.02%)</title><rect x="25.8554%" y="1045" width="0.0175%" height="15" fill="rgb(218,99,54)"/><text x="26.1054%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;model::rho_types::expr::ExprInstance&gt;&gt; (1 samples, 0.02%)</title><rect x="25.8554%" y="1029" width="0.0175%" height="15" fill="rgb(220,174,26)"/><text x="26.1054%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Par&gt; (2 samples, 0.03%)</title><rect x="25.8554%" y="1109" width="0.0349%" height="15" fill="rgb(245,116,9)"/><text x="26.1054%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Expr&gt;&gt; (2 samples, 0.03%)</title><rect x="25.8554%" y="1093" width="0.0349%" height="15" fill="rgb(209,72,35)"/><text x="26.1054%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::Expr&gt;&gt; (1 samples, 0.02%)</title><rect x="25.8729%" y="1077" width="0.0175%" height="15" fill="rgb(226,126,21)"/><text x="26.1229%" y="1087.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="25.8729%" y="1061" width="0.0175%" height="15" fill="rgb(227,192,1)"/><text x="26.1229%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Par&gt;&gt; (4 samples, 0.07%)</title><rect x="25.8380%" y="1157" width="0.0698%" height="15" fill="rgb(237,180,29)"/><text x="26.0880%" y="1167.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.07%)</title><rect x="25.8380%" y="1141" width="0.0698%" height="15" fill="rgb(230,197,35)"/><text x="26.0880%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;[model::rho_types::Par]&gt; (4 samples, 0.07%)</title><rect x="25.8380%" y="1125" width="0.0698%" height="15" fill="rgb(246,193,31)"/><text x="26.0880%" y="1135.50"></text></g><g><title>mi_free (1 samples, 0.02%)</title><rect x="25.8904%" y="1109" width="0.0175%" height="15" fill="rgb(241,36,4)"/><text x="26.1404%" y="1119.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.16%)</title><rect x="25.7856%" y="1301" width="0.1571%" height="15" fill="rgb(241,130,17)"/><text x="26.0356%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;[model::rho_types::MatchCase]&gt; (9 samples, 0.16%)</title><rect x="25.7856%" y="1285" width="0.1571%" height="15" fill="rgb(206,137,32)"/><text x="26.0356%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::MatchCase&gt; (9 samples, 0.16%)</title><rect x="25.7856%" y="1269" width="0.1571%" height="15" fill="rgb(237,228,51)"/><text x="26.0356%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;model::rho_types::Par&gt;&gt; (9 samples, 0.16%)</title><rect x="25.7856%" y="1253" width="0.1571%" height="15" fill="rgb(243,6,42)"/><text x="26.0356%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Par&gt; (9 samples, 0.16%)</title><rect x="25.7856%" y="1237" width="0.1571%" height="15" fill="rgb(251,74,28)"/><text x="26.0356%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Send&gt;&gt; (7 samples, 0.12%)</title><rect x="25.8205%" y="1221" width="0.1222%" height="15" fill="rgb(218,20,49)"/><text x="26.0705%" y="1231.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.12%)</title><rect x="25.8205%" y="1205" width="0.1222%" height="15" fill="rgb(238,28,14)"/><text x="26.0705%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place&lt;[model::rho_types::Send]&gt; (6 samples, 0.10%)</title><rect x="25.8380%" y="1189" width="0.1047%" height="15" fill="rgb(229,40,46)"/><text x="26.0880%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Send&gt; (6 samples, 0.10%)</title><rect x="25.8380%" y="1173" width="0.1047%" height="15" fill="rgb(244,195,20)"/><text x="26.0880%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;model::rho_types::Par&gt;&gt; (2 samples, 0.03%)</title><rect x="25.9078%" y="1157" width="0.0349%" height="15" fill="rgb(253,56,35)"/><text x="26.1578%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Par&gt; (2 samples, 0.03%)</title><rect x="25.9078%" y="1141" width="0.0349%" height="15" fill="rgb(210,149,44)"/><text x="26.1578%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::GUnforgeable&gt;&gt; (2 samples, 0.03%)</title><rect x="25.9078%" y="1125" width="0.0349%" height="15" fill="rgb(240,135,12)"/><text x="26.1578%" y="1135.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="25.9078%" y="1109" width="0.0349%" height="15" fill="rgb(251,24,50)"/><text x="26.1578%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;[model::rho_types::GUnforgeable]&gt; (2 samples, 0.03%)</title><rect x="25.9078%" y="1093" width="0.0349%" height="15" fill="rgb(243,200,47)"/><text x="26.1578%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::GUnforgeable&gt; (2 samples, 0.03%)</title><rect x="25.9078%" y="1077" width="0.0349%" height="15" fill="rgb(224,166,26)"/><text x="26.1578%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;model::rho_types::g_unforgeable::UnfInstance&gt;&gt; (2 samples, 0.03%)</title><rect x="25.9078%" y="1061" width="0.0349%" height="15" fill="rgb(233,0,47)"/><text x="26.1578%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::g_unforgeable::UnfInstance&gt; (2 samples, 0.03%)</title><rect x="25.9078%" y="1045" width="0.0349%" height="15" fill="rgb(253,80,5)"/><text x="26.1578%" y="1055.50"></text></g><g><title>bytes::bytes::shared_drop (2 samples, 0.03%)</title><rect x="25.9078%" y="1029" width="0.0349%" height="15" fill="rgb(214,133,25)"/><text x="26.1578%" y="1039.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (2 samples, 0.03%)</title><rect x="25.9078%" y="1013" width="0.0349%" height="15" fill="rgb(209,27,14)"/><text x="26.1578%" y="1023.50"></text></g><g><title>bytes::bytes::shared_drop::{{closure}} (2 samples, 0.03%)</title><rect x="25.9078%" y="997" width="0.0349%" height="15" fill="rgb(219,102,51)"/><text x="26.1578%" y="1007.50"></text></g><g><title>bytes::bytes::release_shared (2 samples, 0.03%)</title><rect x="25.9078%" y="981" width="0.0349%" height="15" fill="rgb(237,18,16)"/><text x="26.1578%" y="991.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.03%)</title><rect x="25.9078%" y="965" width="0.0349%" height="15" fill="rgb(241,85,17)"/><text x="26.1578%" y="975.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.03%)</title><rect x="25.9078%" y="949" width="0.0349%" height="15" fill="rgb(236,90,42)"/><text x="26.1578%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::MatchCase&gt;&gt; (10 samples, 0.17%)</title><rect x="25.7856%" y="1317" width="0.1746%" height="15" fill="rgb(249,57,21)"/><text x="26.0356%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::MatchCase&gt;&gt; (1 samples, 0.02%)</title><rect x="25.9427%" y="1301" width="0.0175%" height="15" fill="rgb(243,12,36)"/><text x="26.1927%" y="1311.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="25.9427%" y="1285" width="0.0175%" height="15" fill="rgb(253,128,47)"/><text x="26.1927%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Match&gt; (12 samples, 0.21%)</title><rect x="25.7856%" y="1333" width="0.2095%" height="15" fill="rgb(207,33,20)"/><text x="26.0356%" y="1343.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;model::rho_types::Par&gt;&gt; (2 samples, 0.03%)</title><rect x="25.9602%" y="1317" width="0.0349%" height="15" fill="rgb(233,215,35)"/><text x="26.2102%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Par&gt; (1 samples, 0.02%)</title><rect x="25.9777%" y="1301" width="0.0175%" height="15" fill="rgb(249,188,52)"/><text x="26.2277%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Expr&gt;&gt; (1 samples, 0.02%)</title><rect x="25.9777%" y="1285" width="0.0175%" height="15" fill="rgb(225,12,32)"/><text x="26.2277%" y="1295.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="25.9777%" y="1269" width="0.0175%" height="15" fill="rgb(247,98,14)"/><text x="26.2277%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;[model::rho_types::Expr]&gt; (1 samples, 0.02%)</title><rect x="25.9777%" y="1253" width="0.0175%" height="15" fill="rgb(247,219,48)"/><text x="26.2277%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Expr&gt; (1 samples, 0.02%)</title><rect x="25.9777%" y="1237" width="0.0175%" height="15" fill="rgb(253,60,48)"/><text x="26.2277%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;model::rho_types::expr::ExprInstance&gt;&gt; (1 samples, 0.02%)</title><rect x="25.9777%" y="1221" width="0.0175%" height="15" fill="rgb(245,15,52)"/><text x="26.2277%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::expr::ExprInstance&gt; (1 samples, 0.02%)</title><rect x="25.9777%" y="1205" width="0.0175%" height="15" fill="rgb(220,133,28)"/><text x="26.2277%" y="1215.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="26.0126%" y="1317" width="0.0175%" height="15" fill="rgb(217,180,4)"/><text x="26.2626%" y="1327.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.02%)</title><rect x="26.0300%" y="1317" width="0.0175%" height="15" fill="rgb(251,24,1)"/><text x="26.2800%" y="1327.50"></text></g><g><title>core::mem::take (1 samples, 0.02%)</title><rect x="26.0300%" y="1301" width="0.0175%" height="15" fill="rgb(212,185,49)"/><text x="26.2800%" y="1311.50"></text></g><g><title>core::mem::replace (1 samples, 0.02%)</title><rect x="26.0300%" y="1285" width="0.0175%" height="15" fill="rgb(215,175,22)"/><text x="26.2800%" y="1295.50"></text></g><g><title>core::mem::swap (1 samples, 0.02%)</title><rect x="26.0300%" y="1269" width="0.0175%" height="15" fill="rgb(250,205,14)"/><text x="26.2800%" y="1279.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (1 samples, 0.02%)</title><rect x="26.0300%" y="1253" width="0.0175%" height="15" fill="rgb(225,211,22)"/><text x="26.2800%" y="1263.50"></text></g><g><title>core::ptr::swap_nonoverlapping (1 samples, 0.02%)</title><rect x="26.0300%" y="1237" width="0.0175%" height="15" fill="rgb(251,179,42)"/><text x="26.2800%" y="1247.50"></text></g><g><title>core::ptr::swap_nonoverlapping_bytes (1 samples, 0.02%)</title><rect x="26.0300%" y="1221" width="0.0175%" height="15" fill="rgb(208,216,51)"/><text x="26.2800%" y="1231.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="26.0300%" y="1205" width="0.0175%" height="15" fill="rgb(235,36,11)"/><text x="26.2800%" y="1215.50"></text></g><g><title>_mi_free_block_mt (3 samples, 0.05%)</title><rect x="26.0475%" y="1189" width="0.0524%" height="15" fill="rgb(213,189,28)"/><text x="26.2975%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Par&gt; (5 samples, 0.09%)</title><rect x="26.0475%" y="1317" width="0.0873%" height="15" fill="rgb(227,203,42)"/><text x="26.2975%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Send&gt;&gt; (5 samples, 0.09%)</title><rect x="26.0475%" y="1301" width="0.0873%" height="15" fill="rgb(244,72,36)"/><text x="26.2975%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::Send&gt;&gt; (5 samples, 0.09%)</title><rect x="26.0475%" y="1285" width="0.0873%" height="15" fill="rgb(213,53,17)"/><text x="26.2975%" y="1295.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.09%)</title><rect x="26.0475%" y="1269" width="0.0873%" height="15" fill="rgb(207,167,3)"/><text x="26.2975%" y="1279.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.09%)</title><rect x="26.0475%" y="1253" width="0.0873%" height="15" fill="rgb(216,98,30)"/><text x="26.2975%" y="1263.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.09%)</title><rect x="26.0475%" y="1237" width="0.0873%" height="15" fill="rgb(236,123,15)"/><text x="26.2975%" y="1247.50"></text></g><g><title>__rg_dealloc (5 samples, 0.09%)</title><rect x="26.0475%" y="1221" width="0.0873%" height="15" fill="rgb(248,81,50)"/><text x="26.2975%" y="1231.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (5 samples, 0.09%)</title><rect x="26.0475%" y="1205" width="0.0873%" height="15" fill="rgb(214,120,4)"/><text x="26.2975%" y="1215.50"></text></g><g><title>_mi_page_retire (2 samples, 0.03%)</title><rect x="26.0999%" y="1189" width="0.0349%" height="15" fill="rgb(208,179,34)"/><text x="26.3499%" y="1199.50"></text></g><g><title>mi_page_queue_of (1 samples, 0.02%)</title><rect x="26.1173%" y="1173" width="0.0175%" height="15" fill="rgb(227,140,7)"/><text x="26.3673%" y="1183.50"></text></g><g><title>_mi_bin (1 samples, 0.02%)</title><rect x="26.1173%" y="1157" width="0.0175%" height="15" fill="rgb(214,22,6)"/><text x="26.3673%" y="1167.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1 samples, 0.02%)</title><rect x="26.1348%" y="1301" width="0.0175%" height="15" fill="rgb(207,137,27)"/><text x="26.3848%" y="1311.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="26.1522%" y="1285" width="0.0175%" height="15" fill="rgb(210,8,46)"/><text x="26.4022%" y="1295.50"></text></g><g><title>model::ordering::sort_par::&lt;impl model::ordering::Sortable for model::rho_types::Par&gt;::sort (4 samples, 0.07%)</title><rect x="26.1522%" y="1301" width="0.0698%" height="15" fill="rgb(240,16,54)"/><text x="26.4022%" y="1311.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by (3 samples, 0.05%)</title><rect x="26.1697%" y="1285" width="0.0524%" height="15" fill="rgb(211,209,29)"/><text x="26.4197%" y="1295.50"></text></g><g><title>alloc::slice::merge_sort (3 samples, 0.05%)</title><rect x="26.1697%" y="1269" width="0.0524%" height="15" fill="rgb(226,228,24)"/><text x="26.4197%" y="1279.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1 samples, 0.02%)</title><rect x="26.2221%" y="1285" width="0.0175%" height="15" fill="rgb(222,84,9)"/><text x="26.4721%" y="1295.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="26.2395%" y="1285" width="0.0175%" height="15" fill="rgb(234,203,30)"/><text x="26.4895%" y="1295.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::handle_comm_events (34 samples, 0.59%)</title><rect x="25.6809%" y="1365" width="0.5936%" height="15" fill="rgb(238,109,14)"/><text x="25.9309%" y="1375.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_par::&lt;impl rho_runtime::interpreter::reduce::Evaluator&lt;S&gt; for model::rho_types::Par&gt;::evaluate (34 samples, 0.59%)</title><rect x="25.6809%" y="1349" width="0.5936%" height="15" fill="rgb(233,206,34)"/><text x="25.9309%" y="1359.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_match::&lt;impl rho_runtime::interpreter::reduce::Evaluator&lt;S&gt; for model::rho_types::Match&gt;::evaluate (16 samples, 0.28%)</title><rect x="25.9951%" y="1333" width="0.2793%" height="15" fill="rgb(220,167,47)"/><text x="26.2451%" y="1343.50"></text></g><g><title>rho_runtime::interpreter::reduce::substitute::sub_par::&lt;impl rho_runtime::interpreter::reduce::substitute::Substitutable&lt;S&gt; for model::rho_types::Par&gt;::substitute (8 samples, 0.14%)</title><rect x="26.1348%" y="1317" width="0.1397%" height="15" fill="rgb(238,105,10)"/><text x="26.3848%" y="1327.50"></text></g><g><title>rho_runtime::interpreter::reduce::substitute::sub_par::&lt;impl rho_runtime::interpreter::reduce::substitute::Substitutable&lt;S&gt; for model::rho_types::Par&gt;::substitute_no_sort (3 samples, 0.05%)</title><rect x="26.2221%" y="1301" width="0.0524%" height="15" fill="rgb(213,227,17)"/><text x="26.4721%" y="1311.50"></text></g><g><title>rho_runtime::interpreter::reduce::substitute::sub_par::substitute_connectives_in_par (1 samples, 0.02%)</title><rect x="26.2570%" y="1285" width="0.0175%" height="15" fill="rgb(217,132,38)"/><text x="26.5070%" y="1295.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1 samples, 0.02%)</title><rect x="26.3268%" y="1317" width="0.0175%" height="15" fill="rgb(242,146,4)"/><text x="26.5768%" y="1327.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="26.3268%" y="1301" width="0.0175%" height="15" fill="rgb(212,61,9)"/><text x="26.5768%" y="1311.50"></text></g><g><title>&lt;model::rho_types::Par as rho_runtime::interpreter::reduce::eval_expression::ParExpressionEvaluator&lt;S&gt;&gt;::evaluate_single_expression (1 samples, 0.02%)</title><rect x="26.3443%" y="1317" width="0.0175%" height="15" fill="rgb(247,126,22)"/><text x="26.5943%" y="1327.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.02%)</title><rect x="26.3443%" y="1301" width="0.0175%" height="15" fill="rgb(220,196,2)"/><text x="26.5943%" y="1311.50"></text></g><g><title>core::ptr::read (1 samples, 0.02%)</title><rect x="26.3443%" y="1285" width="0.0175%" height="15" fill="rgb(208,46,4)"/><text x="26.5943%" y="1295.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="26.3443%" y="1269" width="0.0175%" height="15" fill="rgb(252,104,46)"/><text x="26.5943%" y="1279.50"></text></g><g><title>[libc-2.31.so] (8 samples, 0.14%)</title><rect x="26.3617%" y="1317" width="0.1397%" height="15" fill="rgb(237,152,48)"/><text x="26.6117%" y="1327.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (5 samples, 0.09%)</title><rect x="26.5014%" y="1301" width="0.0873%" height="15" fill="rgb(221,59,37)"/><text x="26.7514%" y="1311.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="26.5538%" y="1285" width="0.0349%" height="15" fill="rgb(209,202,51)"/><text x="26.8038%" y="1295.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.03%)</title><rect x="26.5538%" y="1269" width="0.0349%" height="15" fill="rgb(228,81,30)"/><text x="26.8038%" y="1279.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.03%)</title><rect x="26.5538%" y="1253" width="0.0349%" height="15" fill="rgb(227,42,39)"/><text x="26.8038%" y="1263.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.03%)</title><rect x="26.5538%" y="1237" width="0.0349%" height="15" fill="rgb(221,26,2)"/><text x="26.8038%" y="1247.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.03%)</title><rect x="26.5538%" y="1221" width="0.0349%" height="15" fill="rgb(254,61,31)"/><text x="26.8038%" y="1231.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.03%)</title><rect x="26.5538%" y="1205" width="0.0349%" height="15" fill="rgb(222,173,38)"/><text x="26.8038%" y="1215.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.03%)</title><rect x="26.5538%" y="1189" width="0.0349%" height="15" fill="rgb(218,50,12)"/><text x="26.8038%" y="1199.50"></text></g><g><title>&lt;model::rho_types::Par as rho_runtime::interpreter::reduce::eval_expression::ParExpressionEvaluator&lt;S&gt;&gt;::evaluate_single_expression (24 samples, 0.42%)</title><rect x="26.2744%" y="1349" width="0.4190%" height="15" fill="rgb(223,88,40)"/><text x="26.5244%" y="1359.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_expression::expr_instance::&lt;impl rho_runtime::interpreter::reduce::Evaluator&lt;S&gt; for model::rho_types::Expr&gt;::evaluate (24 samples, 0.42%)</title><rect x="26.2744%" y="1333" width="0.4190%" height="15" fill="rgb(237,54,19)"/><text x="26.5244%" y="1343.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_var::&lt;impl rho_runtime::interpreter::reduce::Evaluator&lt;S,model::rho_types::Par&gt; for model::rho_types::Var&gt;::evaluate (11 samples, 0.19%)</title><rect x="26.5014%" y="1317" width="0.1920%" height="15" fill="rgb(251,129,25)"/><text x="26.7514%" y="1327.50"></text></g><g><title>[libc-2.31.so] (6 samples, 0.10%)</title><rect x="26.5887%" y="1301" width="0.1047%" height="15" fill="rgb(238,97,19)"/><text x="26.8387%" y="1311.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (3 samples, 0.05%)</title><rect x="26.7982%" y="1301" width="0.0524%" height="15" fill="rgb(240,169,18)"/><text x="27.0482%" y="1311.50"></text></g><g><title>[libc-2.31.so] (3 samples, 0.05%)</title><rect x="26.7982%" y="1285" width="0.0524%" height="15" fill="rgb(230,187,49)"/><text x="27.0482%" y="1295.50"></text></g><g><title>[libc-2.31.so] (4 samples, 0.07%)</title><rect x="26.8680%" y="1285" width="0.0698%" height="15" fill="rgb(209,44,26)"/><text x="27.1180%" y="1295.50"></text></g><g><title>&lt;model::rho_types::Par as rho_runtime::interpreter::reduce::eval_expression::ParExpressionEvaluator&lt;S&gt;&gt;::evaluate_single_expression (8 samples, 0.14%)</title><rect x="26.8506%" y="1301" width="0.1397%" height="15" fill="rgb(244,0,6)"/><text x="27.1006%" y="1311.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (3 samples, 0.05%)</title><rect x="26.9378%" y="1285" width="0.0524%" height="15" fill="rgb(248,18,21)"/><text x="27.1878%" y="1295.50"></text></g><g><title>core::ptr::read (3 samples, 0.05%)</title><rect x="26.9378%" y="1269" width="0.0524%" height="15" fill="rgb(245,180,19)"/><text x="27.1878%" y="1279.50"></text></g><g><title>[libc-2.31.so] (2 samples, 0.03%)</title><rect x="26.9553%" y="1253" width="0.0349%" height="15" fill="rgb(252,118,36)"/><text x="27.2053%" y="1263.50"></text></g><g><title>[libc-2.31.so] (15 samples, 0.26%)</title><rect x="26.9902%" y="1301" width="0.2619%" height="15" fill="rgb(210,224,19)"/><text x="27.2402%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Par&gt; (1 samples, 0.02%)</title><rect x="27.2521%" y="1285" width="0.0175%" height="15" fill="rgb(218,30,24)"/><text x="27.5021%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Bundle&gt;&gt; (1 samples, 0.02%)</title><rect x="27.2521%" y="1269" width="0.0175%" height="15" fill="rgb(219,75,50)"/><text x="27.5021%" y="1279.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="27.2521%" y="1253" width="0.0175%" height="15" fill="rgb(234,72,50)"/><text x="27.5021%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;[model::rho_types::Bundle]&gt; (1 samples, 0.02%)</title><rect x="27.2521%" y="1237" width="0.0175%" height="15" fill="rgb(219,100,48)"/><text x="27.5021%" y="1247.50"></text></g><g><title>_mi_free_block_mt (1 samples, 0.02%)</title><rect x="27.2870%" y="1269" width="0.0175%" height="15" fill="rgb(253,5,41)"/><text x="27.5370%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Par&gt; (1 samples, 0.02%)</title><rect x="27.3045%" y="1269" width="0.0175%" height="15" fill="rgb(247,181,11)"/><text x="27.5545%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Expr&gt;&gt; (1 samples, 0.02%)</title><rect x="27.3045%" y="1253" width="0.0175%" height="15" fill="rgb(222,223,25)"/><text x="27.5545%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::Expr&gt;&gt; (1 samples, 0.02%)</title><rect x="27.3045%" y="1237" width="0.0175%" height="15" fill="rgb(214,198,28)"/><text x="27.5545%" y="1247.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="27.3045%" y="1221" width="0.0175%" height="15" fill="rgb(230,46,43)"/><text x="27.5545%" y="1231.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="27.3045%" y="1205" width="0.0175%" height="15" fill="rgb(233,65,53)"/><text x="27.5545%" y="1215.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="27.3045%" y="1189" width="0.0175%" height="15" fill="rgb(221,121,27)"/><text x="27.5545%" y="1199.50"></text></g><g><title>__rg_dealloc (1 samples, 0.02%)</title><rect x="27.3045%" y="1173" width="0.0175%" height="15" fill="rgb(247,70,47)"/><text x="27.5545%" y="1183.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (1 samples, 0.02%)</title><rect x="27.3045%" y="1157" width="0.0175%" height="15" fill="rgb(228,85,35)"/><text x="27.5545%" y="1167.50"></text></g><g><title>mi_free (1 samples, 0.02%)</title><rect x="27.3045%" y="1141" width="0.0175%" height="15" fill="rgb(209,50,18)"/><text x="27.5545%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;model::rho_types::expr::ExprInstance&gt;&gt; (5 samples, 0.09%)</title><rect x="27.2521%" y="1301" width="0.0873%" height="15" fill="rgb(250,19,35)"/><text x="27.5021%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::expr::ExprInstance&gt; (4 samples, 0.07%)</title><rect x="27.2696%" y="1285" width="0.0698%" height="15" fill="rgb(253,107,29)"/><text x="27.5196%" y="1295.50"></text></g><g><title>mi_free_generic (1 samples, 0.02%)</title><rect x="27.3219%" y="1269" width="0.0175%" height="15" fill="rgb(252,179,29)"/><text x="27.5719%" y="1279.50"></text></g><g><title>_mi_segment_page_of (1 samples, 0.02%)</title><rect x="27.3219%" y="1253" width="0.0175%" height="15" fill="rgb(238,194,6)"/><text x="27.5719%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Connective&gt;&gt; (1 samples, 0.02%)</title><rect x="27.3394%" y="1285" width="0.0175%" height="15" fill="rgb(238,164,29)"/><text x="27.5894%" y="1295.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="27.3394%" y="1269" width="0.0175%" height="15" fill="rgb(224,25,9)"/><text x="27.5894%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;[model::rho_types::Connective]&gt; (1 samples, 0.02%)</title><rect x="27.3394%" y="1253" width="0.0175%" height="15" fill="rgb(244,153,23)"/><text x="27.5894%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Expr&gt;&gt; (3 samples, 0.05%)</title><rect x="27.3568%" y="1285" width="0.0524%" height="15" fill="rgb(212,203,14)"/><text x="27.6068%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::Expr&gt;&gt; (3 samples, 0.05%)</title><rect x="27.3568%" y="1269" width="0.0524%" height="15" fill="rgb(220,164,20)"/><text x="27.6068%" y="1279.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.05%)</title><rect x="27.3568%" y="1253" width="0.0524%" height="15" fill="rgb(222,203,48)"/><text x="27.6068%" y="1263.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.05%)</title><rect x="27.3568%" y="1237" width="0.0524%" height="15" fill="rgb(215,159,22)"/><text x="27.6068%" y="1247.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.05%)</title><rect x="27.3568%" y="1221" width="0.0524%" height="15" fill="rgb(216,183,47)"/><text x="27.6068%" y="1231.50"></text></g><g><title>__rg_dealloc (3 samples, 0.05%)</title><rect x="27.3568%" y="1205" width="0.0524%" height="15" fill="rgb(229,195,25)"/><text x="27.6068%" y="1215.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (3 samples, 0.05%)</title><rect x="27.3568%" y="1189" width="0.0524%" height="15" fill="rgb(224,132,51)"/><text x="27.6068%" y="1199.50"></text></g><g><title>mi_free (3 samples, 0.05%)</title><rect x="27.3568%" y="1173" width="0.0524%" height="15" fill="rgb(240,63,7)"/><text x="27.6068%" y="1183.50"></text></g><g><title>_mi_segment_page_of (1 samples, 0.02%)</title><rect x="27.3918%" y="1157" width="0.0175%" height="15" fill="rgb(249,182,41)"/><text x="27.6418%" y="1167.50"></text></g><g><title>_mi_segment_page_idx_of (1 samples, 0.02%)</title><rect x="27.3918%" y="1141" width="0.0175%" height="15" fill="rgb(243,47,26)"/><text x="27.6418%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Match&gt;&gt; (1 samples, 0.02%)</title><rect x="27.4092%" y="1285" width="0.0175%" height="15" fill="rgb(233,48,2)"/><text x="27.6592%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::Match&gt;&gt; (1 samples, 0.02%)</title><rect x="27.4092%" y="1269" width="0.0175%" height="15" fill="rgb(244,165,34)"/><text x="27.6592%" y="1279.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="27.4092%" y="1253" width="0.0175%" height="15" fill="rgb(207,89,7)"/><text x="27.6592%" y="1263.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.02%)</title><rect x="27.4092%" y="1237" width="0.0175%" height="15" fill="rgb(244,117,36)"/><text x="27.6592%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Receive&gt;&gt; (1 samples, 0.02%)</title><rect x="27.4267%" y="1285" width="0.0175%" height="15" fill="rgb(226,144,34)"/><text x="27.6767%" y="1295.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="27.4267%" y="1269" width="0.0175%" height="15" fill="rgb(213,23,19)"/><text x="27.6767%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;[model::rho_types::Receive]&gt; (1 samples, 0.02%)</title><rect x="27.4267%" y="1253" width="0.0175%" height="15" fill="rgb(217,75,12)"/><text x="27.6767%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Par&gt; (7 samples, 0.12%)</title><rect x="27.3394%" y="1301" width="0.1222%" height="15" fill="rgb(224,159,17)"/><text x="27.5894%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Send&gt;&gt; (1 samples, 0.02%)</title><rect x="27.4441%" y="1285" width="0.0175%" height="15" fill="rgb(217,118,1)"/><text x="27.6941%" y="1295.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="27.4441%" y="1269" width="0.0175%" height="15" fill="rgb(232,180,48)"/><text x="27.6941%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;[model::rho_types::Send]&gt; (1 samples, 0.02%)</title><rect x="27.4441%" y="1253" width="0.0175%" height="15" fill="rgb(230,27,33)"/><text x="27.6941%" y="1263.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1 samples, 0.02%)</title><rect x="27.4791%" y="1285" width="0.0175%" height="15" fill="rgb(205,31,21)"/><text x="27.7291%" y="1295.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="27.4791%" y="1269" width="0.0175%" height="15" fill="rgb(253,59,4)"/><text x="27.7291%" y="1279.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="27.5140%" y="1269" width="0.0175%" height="15" fill="rgb(224,201,9)"/><text x="27.7640%" y="1279.50"></text></g><g><title>&lt;model::rho_types::Par as rho_runtime::interpreter::reduce::eval_expression::ParExpressionEvaluator&lt;S&gt;&gt;::evaluate_single_expression (4 samples, 0.07%)</title><rect x="27.4965%" y="1285" width="0.0698%" height="15" fill="rgb(229,206,30)"/><text x="27.7465%" y="1295.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (2 samples, 0.03%)</title><rect x="27.5314%" y="1269" width="0.0349%" height="15" fill="rgb(212,67,47)"/><text x="27.7814%" y="1279.50"></text></g><g><title>core::ptr::read (2 samples, 0.03%)</title><rect x="27.5314%" y="1253" width="0.0349%" height="15" fill="rgb(211,96,50)"/><text x="27.7814%" y="1263.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="27.5489%" y="1237" width="0.0175%" height="15" fill="rgb(252,114,18)"/><text x="27.7989%" y="1247.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_expression::eval_eplus::&lt;impl rho_runtime::interpreter::reduce::eval_expression::ExprInstanceEvaluator&lt;S&gt; for model::rho_types::EPlus&gt;::evaluate (11 samples, 0.19%)</title><rect x="27.4616%" y="1301" width="0.1920%" height="15" fill="rgb(223,58,37)"/><text x="27.7116%" y="1311.50"></text></g><g><title>[libc-2.31.so] (5 samples, 0.09%)</title><rect x="27.5663%" y="1285" width="0.0873%" height="15" fill="rgb(237,70,4)"/><text x="27.8163%" y="1295.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="27.6885%" y="1253" width="0.0175%" height="15" fill="rgb(244,85,46)"/><text x="27.9385%" y="1263.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.02%)</title><rect x="27.7235%" y="1205" width="0.0175%" height="15" fill="rgb(223,39,52)"/><text x="27.9735%" y="1215.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="27.7409%" y="1157" width="0.0175%" height="15" fill="rgb(218,200,14)"/><text x="27.9909%" y="1167.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="27.7409%" y="1141" width="0.0175%" height="15" fill="rgb(208,171,16)"/><text x="27.9909%" y="1151.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.10%)</title><rect x="27.6885%" y="1269" width="0.1047%" height="15" fill="rgb(234,200,18)"/><text x="27.9385%" y="1279.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.09%)</title><rect x="27.7060%" y="1253" width="0.0873%" height="15" fill="rgb(228,45,11)"/><text x="27.9560%" y="1263.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.09%)</title><rect x="27.7060%" y="1237" width="0.0873%" height="15" fill="rgb(237,182,11)"/><text x="27.9560%" y="1247.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.09%)</title><rect x="27.7060%" y="1221" width="0.0873%" height="15" fill="rgb(241,175,49)"/><text x="27.9560%" y="1231.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.05%)</title><rect x="27.7409%" y="1205" width="0.0524%" height="15" fill="rgb(247,38,35)"/><text x="27.9909%" y="1215.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.05%)</title><rect x="27.7409%" y="1189" width="0.0524%" height="15" fill="rgb(228,39,49)"/><text x="27.9909%" y="1199.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.05%)</title><rect x="27.7409%" y="1173" width="0.0524%" height="15" fill="rgb(226,101,26)"/><text x="27.9909%" y="1183.50"></text></g><g><title>core::alloc::layout::Layout::array (2 samples, 0.03%)</title><rect x="27.7584%" y="1157" width="0.0349%" height="15" fill="rgb(206,141,19)"/><text x="28.0084%" y="1167.50"></text></g><g><title>core::alloc::layout::Layout::repeat (2 samples, 0.03%)</title><rect x="27.7584%" y="1141" width="0.0349%" height="15" fill="rgb(211,200,13)"/><text x="28.0084%" y="1151.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="27.7933%" y="1157" width="0.0175%" height="15" fill="rgb(241,121,6)"/><text x="28.0433%" y="1167.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="27.7933%" y="1141" width="0.0175%" height="15" fill="rgb(234,221,29)"/><text x="28.0433%" y="1151.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="27.7933%" y="1125" width="0.0175%" height="15" fill="rgb(229,136,5)"/><text x="28.0433%" y="1135.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="27.7933%" y="1109" width="0.0175%" height="15" fill="rgb(238,36,11)"/><text x="28.0433%" y="1119.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="27.7933%" y="1093" width="0.0175%" height="15" fill="rgb(251,55,41)"/><text x="28.0433%" y="1103.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (10 samples, 0.17%)</title><rect x="27.6536%" y="1285" width="0.1746%" height="15" fill="rgb(242,34,40)"/><text x="27.9036%" y="1295.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="27.7933%" y="1269" width="0.0349%" height="15" fill="rgb(215,42,17)"/><text x="28.0433%" y="1279.50"></text></g><g><title>&lt;model::bitset::BitSet&lt;B&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="27.7933%" y="1253" width="0.0349%" height="15" fill="rgb(207,44,46)"/><text x="28.0433%" y="1263.50"></text></g><g><title>&lt;bit_vec::BitVec&lt;B&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="27.7933%" y="1237" width="0.0349%" height="15" fill="rgb(211,206,28)"/><text x="28.0433%" y="1247.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="27.7933%" y="1221" width="0.0349%" height="15" fill="rgb(237,167,16)"/><text x="28.0433%" y="1231.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.03%)</title><rect x="27.7933%" y="1205" width="0.0349%" height="15" fill="rgb(233,66,6)"/><text x="28.0433%" y="1215.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.03%)</title><rect x="27.7933%" y="1189" width="0.0349%" height="15" fill="rgb(246,123,29)"/><text x="28.0433%" y="1199.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.03%)</title><rect x="27.7933%" y="1173" width="0.0349%" height="15" fill="rgb(209,62,40)"/><text x="28.0433%" y="1183.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.02%)</title><rect x="27.8108%" y="1157" width="0.0175%" height="15" fill="rgb(218,4,25)"/><text x="28.0608%" y="1167.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="27.8108%" y="1141" width="0.0175%" height="15" fill="rgb(253,91,49)"/><text x="28.0608%" y="1151.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="27.8108%" y="1125" width="0.0175%" height="15" fill="rgb(228,155,29)"/><text x="28.0608%" y="1135.50"></text></g><g><title>[libc-2.31.so] (6 samples, 0.10%)</title><rect x="27.8282%" y="1285" width="0.1047%" height="15" fill="rgb(243,57,37)"/><text x="28.0782%" y="1295.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_expression::eval_eplus::&lt;impl rho_runtime::interpreter::reduce::eval_expression::ExprInstanceEvaluator&lt;S&gt; for model::rho_types::EPlus&gt;::evaluate (72 samples, 1.26%)</title><rect x="26.6934%" y="1349" width="1.2570%" height="15" fill="rgb(244,167,17)"/><text x="26.9434%" y="1359.50"></text></g><g><title>&lt;model::rho_types::Par as rho_runtime::interpreter::reduce::eval_expression::ParExpressionEvaluator&lt;S&gt;&gt;::evaluate_single_expression (72 samples, 1.26%)</title><rect x="26.6934%" y="1333" width="1.2570%" height="15" fill="rgb(207,181,38)"/><text x="26.9434%" y="1343.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_expression::expr_instance::&lt;impl rho_runtime::interpreter::reduce::Evaluator&lt;S&gt; for model::rho_types::Expr&gt;::evaluate (72 samples, 1.26%)</title><rect x="26.6934%" y="1317" width="1.2570%" height="15" fill="rgb(211,8,23)"/><text x="26.9434%" y="1327.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_var::&lt;impl rho_runtime::interpreter::reduce::Evaluator&lt;S,model::rho_types::Par&gt; for model::rho_types::Var&gt;::evaluate (17 samples, 0.30%)</title><rect x="27.6536%" y="1301" width="0.2968%" height="15" fill="rgb(235,11,44)"/><text x="27.9036%" y="1311.50"></text></g><g><title>rho_runtime::interpreter::reduce::environment::Env&lt;T&gt;::get (1 samples, 0.02%)</title><rect x="27.9330%" y="1285" width="0.0175%" height="15" fill="rgb(248,18,52)"/><text x="28.1830%" y="1295.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="27.9679%" y="1253" width="0.0349%" height="15" fill="rgb(208,4,7)"/><text x="28.2179%" y="1263.50"></text></g><g><title>&lt;model::rho_types::expr::ExprInstance as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="28.0901%" y="1221" width="0.0349%" height="15" fill="rgb(240,17,39)"/><text x="28.3401%" y="1231.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (8 samples, 0.14%)</title><rect x="28.0552%" y="1237" width="0.1397%" height="15" fill="rgb(207,170,3)"/><text x="28.3052%" y="1247.50"></text></g><g><title>[libc-2.31.so] (4 samples, 0.07%)</title><rect x="28.1250%" y="1221" width="0.0698%" height="15" fill="rgb(236,100,52)"/><text x="28.3750%" y="1231.50"></text></g><g><title>&lt;model::rho_types::Expr as core::clone::Clone&gt;::clone (15 samples, 0.26%)</title><rect x="28.0028%" y="1253" width="0.2619%" height="15" fill="rgb(246,78,51)"/><text x="28.2528%" y="1263.50"></text></g><g><title>[libc-2.31.so] (4 samples, 0.07%)</title><rect x="28.1948%" y="1237" width="0.0698%" height="15" fill="rgb(211,17,15)"/><text x="28.4448%" y="1247.50"></text></g><g><title>_mi_bin (3 samples, 0.05%)</title><rect x="28.3520%" y="1029" width="0.0524%" height="15" fill="rgb(209,59,46)"/><text x="28.6020%" y="1039.50"></text></g><g><title>_mi_free_block (5 samples, 0.09%)</title><rect x="28.3345%" y="1077" width="0.0873%" height="15" fill="rgb(210,92,25)"/><text x="28.5845%" y="1087.50"></text></g><g><title>_mi_page_retire (5 samples, 0.09%)</title><rect x="28.3345%" y="1061" width="0.0873%" height="15" fill="rgb(238,174,52)"/><text x="28.5845%" y="1071.50"></text></g><g><title>mi_page_queue_of (4 samples, 0.07%)</title><rect x="28.3520%" y="1045" width="0.0698%" height="15" fill="rgb(230,73,7)"/><text x="28.6020%" y="1055.50"></text></g><g><title>mi_page_heap (1 samples, 0.02%)</title><rect x="28.4043%" y="1029" width="0.0175%" height="15" fill="rgb(243,124,40)"/><text x="28.6543%" y="1039.50"></text></g><g><title>_mi_page_free_collect (4 samples, 0.07%)</title><rect x="28.4218%" y="1077" width="0.0698%" height="15" fill="rgb(244,170,11)"/><text x="28.6718%" y="1087.50"></text></g><g><title>_mi_page_thread_free_collect (4 samples, 0.07%)</title><rect x="28.4218%" y="1061" width="0.0698%" height="15" fill="rgb(207,114,54)"/><text x="28.6718%" y="1071.50"></text></g><g><title>mi_block_next (4 samples, 0.07%)</title><rect x="28.4218%" y="1045" width="0.0698%" height="15" fill="rgb(205,42,20)"/><text x="28.6718%" y="1055.50"></text></g><g><title>mi_block_nextx (1 samples, 0.02%)</title><rect x="28.4742%" y="1029" width="0.0175%" height="15" fill="rgb(230,30,28)"/><text x="28.7242%" y="1039.50"></text></g><g><title>_mi_malloc_generic (17 samples, 0.30%)</title><rect x="28.2647%" y="1125" width="0.2968%" height="15" fill="rgb(205,73,54)"/><text x="28.5147%" y="1135.50"></text></g><g><title>_mi_heap_delayed_free (17 samples, 0.30%)</title><rect x="28.2647%" y="1109" width="0.2968%" height="15" fill="rgb(254,227,23)"/><text x="28.5147%" y="1119.50"></text></g><g><title>_mi_free_delayed_block (14 samples, 0.24%)</title><rect x="28.3170%" y="1093" width="0.2444%" height="15" fill="rgb(228,202,34)"/><text x="28.5670%" y="1103.50"></text></g><g><title>_mi_page_use_delayed_free (4 samples, 0.07%)</title><rect x="28.4916%" y="1077" width="0.0698%" height="15" fill="rgb(222,225,37)"/><text x="28.7416%" y="1087.50"></text></g><g><title>_mi_heap_get_free_small_page (1 samples, 0.02%)</title><rect x="28.5615%" y="1077" width="0.0175%" height="15" fill="rgb(221,14,54)"/><text x="28.8115%" y="1087.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (23 samples, 0.40%)</title><rect x="28.2647%" y="1205" width="0.4015%" height="15" fill="rgb(254,102,2)"/><text x="28.5147%" y="1215.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (23 samples, 0.40%)</title><rect x="28.2647%" y="1189" width="0.4015%" height="15" fill="rgb(232,104,17)"/><text x="28.5147%" y="1199.50"></text></g><g><title>alloc::alloc::alloc (23 samples, 0.40%)</title><rect x="28.2647%" y="1173" width="0.4015%" height="15" fill="rgb(250,220,14)"/><text x="28.5147%" y="1183.50"></text></g><g><title>__rg_alloc (23 samples, 0.40%)</title><rect x="28.2647%" y="1157" width="0.4015%" height="15" fill="rgb(241,158,9)"/><text x="28.5147%" y="1167.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (23 samples, 0.40%)</title><rect x="28.2647%" y="1141" width="0.4015%" height="15" fill="rgb(246,9,43)"/><text x="28.5147%" y="1151.50"></text></g><g><title>mi_malloc (6 samples, 0.10%)</title><rect x="28.5615%" y="1125" width="0.1047%" height="15" fill="rgb(206,73,33)"/><text x="28.8115%" y="1135.50"></text></g><g><title>mi_heap_malloc (6 samples, 0.10%)</title><rect x="28.5615%" y="1109" width="0.1047%" height="15" fill="rgb(222,79,8)"/><text x="28.8115%" y="1119.50"></text></g><g><title>mi_heap_malloc_small (6 samples, 0.10%)</title><rect x="28.5615%" y="1093" width="0.1047%" height="15" fill="rgb(234,8,54)"/><text x="28.8115%" y="1103.50"></text></g><g><title>_mi_page_malloc (5 samples, 0.09%)</title><rect x="28.5789%" y="1077" width="0.0873%" height="15" fill="rgb(209,134,38)"/><text x="28.8289%" y="1087.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (24 samples, 0.42%)</title><rect x="28.2647%" y="1253" width="0.4190%" height="15" fill="rgb(230,127,29)"/><text x="28.5147%" y="1263.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (24 samples, 0.42%)</title><rect x="28.2647%" y="1237" width="0.4190%" height="15" fill="rgb(242,44,41)"/><text x="28.5147%" y="1247.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (24 samples, 0.42%)</title><rect x="28.2647%" y="1221" width="0.4190%" height="15" fill="rgb(222,56,43)"/><text x="28.5147%" y="1231.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity_from_bytes (1 samples, 0.02%)</title><rect x="28.6662%" y="1205" width="0.0175%" height="15" fill="rgb(238,39,47)"/><text x="28.9162%" y="1215.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_expression::expr_instance::&lt;impl rho_runtime::interpreter::reduce::Evaluator&lt;S&gt; for model::rho_types::Expr&gt;::evaluate (150 samples, 2.62%)</title><rect x="26.2744%" y="1365" width="2.6187%" height="15" fill="rgb(226,79,43)"/><text x="26.5244%" y="1375.50">rh..</text></g><g><title>rho_runtime::interpreter::reduce::eval_var::&lt;impl rho_runtime::interpreter::reduce::Evaluator&lt;S,model::rho_types::Par&gt; for model::rho_types::Var&gt;::evaluate (54 samples, 0.94%)</title><rect x="27.9504%" y="1349" width="0.9427%" height="15" fill="rgb(242,105,53)"/><text x="28.2004%" y="1359.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (54 samples, 0.94%)</title><rect x="27.9504%" y="1333" width="0.9427%" height="15" fill="rgb(251,132,46)"/><text x="28.2004%" y="1343.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (54 samples, 0.94%)</title><rect x="27.9504%" y="1317" width="0.9427%" height="15" fill="rgb(231,77,14)"/><text x="28.2004%" y="1327.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (54 samples, 0.94%)</title><rect x="27.9504%" y="1301" width="0.9427%" height="15" fill="rgb(240,135,9)"/><text x="28.2004%" y="1311.50"></text></g><g><title>alloc::slice::hack::to_vec (54 samples, 0.94%)</title><rect x="27.9504%" y="1285" width="0.9427%" height="15" fill="rgb(248,109,14)"/><text x="28.2004%" y="1295.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (54 samples, 0.94%)</title><rect x="27.9504%" y="1269" width="0.9427%" height="15" fill="rgb(227,146,52)"/><text x="28.2004%" y="1279.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (12 samples, 0.21%)</title><rect x="28.6837%" y="1253" width="0.2095%" height="15" fill="rgb(232,54,3)"/><text x="28.9337%" y="1263.50"></text></g><g><title>[libc-2.31.so] (5 samples, 0.09%)</title><rect x="28.8059%" y="1237" width="0.0873%" height="15" fill="rgb(229,201,43)"/><text x="29.0559%" y="1247.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.07%)</title><rect x="28.8932%" y="1317" width="0.0698%" height="15" fill="rgb(252,161,33)"/><text x="29.1432%" y="1327.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (4 samples, 0.07%)</title><rect x="28.8932%" y="1301" width="0.0698%" height="15" fill="rgb(226,146,40)"/><text x="29.1432%" y="1311.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (4 samples, 0.07%)</title><rect x="28.8932%" y="1285" width="0.0698%" height="15" fill="rgb(219,47,25)"/><text x="29.1432%" y="1295.50"></text></g><g><title>core::ptr::read (4 samples, 0.07%)</title><rect x="28.8932%" y="1269" width="0.0698%" height="15" fill="rgb(250,135,13)"/><text x="29.1432%" y="1279.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="28.9455%" y="1253" width="0.0175%" height="15" fill="rgb(219,229,18)"/><text x="29.1955%" y="1263.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_match::&lt;impl rho_runtime::interpreter::reduce::Evaluator&lt;S&gt; for model::rho_types::Match&gt;::evaluate (8 samples, 0.14%)</title><rect x="28.8932%" y="1365" width="0.1397%" height="15" fill="rgb(217,152,27)"/><text x="29.1432%" y="1375.50"></text></g><g><title>&lt;model::rho_types::Par as rho_runtime::interpreter::reduce::eval_expression::ParExpressionEvaluator&lt;S&gt;&gt;::evaluate_nested_expressions (8 samples, 0.14%)</title><rect x="28.8932%" y="1349" width="0.1397%" height="15" fill="rgb(225,71,47)"/><text x="29.1432%" y="1359.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (8 samples, 0.14%)</title><rect x="28.8932%" y="1333" width="0.1397%" height="15" fill="rgb(220,139,14)"/><text x="29.1432%" y="1343.50"></text></g><g><title>core::ptr::write (4 samples, 0.07%)</title><rect x="28.9630%" y="1317" width="0.0698%" height="15" fill="rgb(247,54,32)"/><text x="29.2130%" y="1327.50"></text></g><g><title>[libc-2.31.so] (4 samples, 0.07%)</title><rect x="28.9630%" y="1301" width="0.0698%" height="15" fill="rgb(252,131,39)"/><text x="29.2130%" y="1311.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="29.0503%" y="1093" width="0.0175%" height="15" fill="rgb(210,108,39)"/><text x="29.3003%" y="1103.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="29.0852%" y="1077" width="0.0349%" height="15" fill="rgb(205,23,29)"/><text x="29.3352%" y="1087.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="29.1027%" y="1061" width="0.0175%" height="15" fill="rgb(246,139,46)"/><text x="29.3527%" y="1071.50"></text></g><g><title>&lt;model::rho_types::Expr as core::clone::Clone&gt;::clone (11 samples, 0.19%)</title><rect x="29.0677%" y="1093" width="0.1920%" height="15" fill="rgb(250,81,26)"/><text x="29.3177%" y="1103.50"></text></g><g><title>[libc-2.31.so] (8 samples, 0.14%)</title><rect x="29.1201%" y="1077" width="0.1397%" height="15" fill="rgb(214,104,7)"/><text x="29.3701%" y="1087.50"></text></g><g><title>_mi_page_free_collect (1 samples, 0.02%)</title><rect x="29.2772%" y="917" width="0.0175%" height="15" fill="rgb(233,189,8)"/><text x="29.5272%" y="927.50"></text></g><g><title>_mi_page_thread_free_collect (1 samples, 0.02%)</title><rect x="29.2772%" y="901" width="0.0175%" height="15" fill="rgb(228,141,17)"/><text x="29.5272%" y="911.50"></text></g><g><title>mi_block_next (1 samples, 0.02%)</title><rect x="29.2772%" y="885" width="0.0175%" height="15" fill="rgb(247,157,1)"/><text x="29.5272%" y="895.50"></text></g><g><title>mi_block_nextx (1 samples, 0.02%)</title><rect x="29.2772%" y="869" width="0.0175%" height="15" fill="rgb(249,225,5)"/><text x="29.5272%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.07%)</title><rect x="29.2598%" y="1093" width="0.0698%" height="15" fill="rgb(242,55,13)"/><text x="29.5098%" y="1103.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.07%)</title><rect x="29.2598%" y="1077" width="0.0698%" height="15" fill="rgb(230,49,50)"/><text x="29.5098%" y="1087.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.07%)</title><rect x="29.2598%" y="1061" width="0.0698%" height="15" fill="rgb(241,111,38)"/><text x="29.5098%" y="1071.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.07%)</title><rect x="29.2598%" y="1045" width="0.0698%" height="15" fill="rgb(252,155,4)"/><text x="29.5098%" y="1055.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.07%)</title><rect x="29.2598%" y="1029" width="0.0698%" height="15" fill="rgb(212,69,32)"/><text x="29.5098%" y="1039.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.07%)</title><rect x="29.2598%" y="1013" width="0.0698%" height="15" fill="rgb(243,107,47)"/><text x="29.5098%" y="1023.50"></text></g><g><title>__rg_alloc (4 samples, 0.07%)</title><rect x="29.2598%" y="997" width="0.0698%" height="15" fill="rgb(247,130,12)"/><text x="29.5098%" y="1007.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (4 samples, 0.07%)</title><rect x="29.2598%" y="981" width="0.0698%" height="15" fill="rgb(233,74,16)"/><text x="29.5098%" y="991.50"></text></g><g><title>_mi_malloc_generic (3 samples, 0.05%)</title><rect x="29.2772%" y="965" width="0.0524%" height="15" fill="rgb(208,58,18)"/><text x="29.5272%" y="975.50"></text></g><g><title>_mi_heap_delayed_free (3 samples, 0.05%)</title><rect x="29.2772%" y="949" width="0.0524%" height="15" fill="rgb(242,225,1)"/><text x="29.5272%" y="959.50"></text></g><g><title>_mi_free_delayed_block (3 samples, 0.05%)</title><rect x="29.2772%" y="933" width="0.0524%" height="15" fill="rgb(249,39,40)"/><text x="29.5272%" y="943.50"></text></g><g><title>_mi_page_use_delayed_free (2 samples, 0.03%)</title><rect x="29.2947%" y="917" width="0.0349%" height="15" fill="rgb(207,72,44)"/><text x="29.5447%" y="927.50"></text></g><g><title>mi_tf_delayed (1 samples, 0.02%)</title><rect x="29.3122%" y="901" width="0.0175%" height="15" fill="rgb(215,193,12)"/><text x="29.5622%" y="911.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::spawn_evaluation (18 samples, 0.31%)</title><rect x="29.0328%" y="1349" width="0.3142%" height="15" fill="rgb(248,41,39)"/><text x="29.2828%" y="1359.50"></text></g><g><title>&lt;rho_runtime::interpreter::reduce::environment::Env&lt;T&gt; as core::clone::Clone&gt;::clone (18 samples, 0.31%)</title><rect x="29.0328%" y="1333" width="0.3142%" height="15" fill="rgb(253,85,4)"/><text x="29.2828%" y="1343.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::clone::Clone&gt;::clone (18 samples, 0.31%)</title><rect x="29.0328%" y="1317" width="0.3142%" height="15" fill="rgb(243,70,31)"/><text x="29.2828%" y="1327.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::convert::From&lt;&amp;[&lt;A as smallvec::Array&gt;::Item]&gt;&gt;::from (18 samples, 0.31%)</title><rect x="29.0328%" y="1301" width="0.3142%" height="15" fill="rgb(253,195,26)"/><text x="29.2828%" y="1311.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (18 samples, 0.31%)</title><rect x="29.0328%" y="1285" width="0.3142%" height="15" fill="rgb(243,42,11)"/><text x="29.2828%" y="1295.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::FromIterator&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::from_iter (18 samples, 0.31%)</title><rect x="29.0328%" y="1269" width="0.3142%" height="15" fill="rgb(239,66,17)"/><text x="29.2828%" y="1279.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (18 samples, 0.31%)</title><rect x="29.0328%" y="1253" width="0.3142%" height="15" fill="rgb(217,132,21)"/><text x="29.2828%" y="1263.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.31%)</title><rect x="29.0328%" y="1237" width="0.3142%" height="15" fill="rgb(252,202,21)"/><text x="29.2828%" y="1247.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (18 samples, 0.31%)</title><rect x="29.0328%" y="1221" width="0.3142%" height="15" fill="rgb(233,98,36)"/><text x="29.2828%" y="1231.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (18 samples, 0.31%)</title><rect x="29.0328%" y="1205" width="0.3142%" height="15" fill="rgb(216,153,54)"/><text x="29.2828%" y="1215.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned::{{closure}} (18 samples, 0.31%)</title><rect x="29.0328%" y="1189" width="0.3142%" height="15" fill="rgb(250,99,7)"/><text x="29.2828%" y="1199.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (18 samples, 0.31%)</title><rect x="29.0328%" y="1173" width="0.3142%" height="15" fill="rgb(207,56,50)"/><text x="29.2828%" y="1183.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (18 samples, 0.31%)</title><rect x="29.0328%" y="1157" width="0.3142%" height="15" fill="rgb(244,61,34)"/><text x="29.2828%" y="1167.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (18 samples, 0.31%)</title><rect x="29.0328%" y="1141" width="0.3142%" height="15" fill="rgb(241,50,38)"/><text x="29.2828%" y="1151.50"></text></g><g><title>alloc::slice::hack::to_vec (18 samples, 0.31%)</title><rect x="29.0328%" y="1125" width="0.3142%" height="15" fill="rgb(212,166,30)"/><text x="29.2828%" y="1135.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (18 samples, 0.31%)</title><rect x="29.0328%" y="1109" width="0.3142%" height="15" fill="rgb(249,127,32)"/><text x="29.2828%" y="1119.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (1 samples, 0.02%)</title><rect x="29.3296%" y="1093" width="0.0175%" height="15" fill="rgb(209,103,0)"/><text x="29.5796%" y="1103.50"></text></g><g><title>&lt;smallvec::IntoIter&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="29.3471%" y="1317" width="0.0349%" height="15" fill="rgb(238,209,51)"/><text x="29.5971%" y="1327.50"></text></g><g><title>[libc-2.31.so] (2 samples, 0.03%)</title><rect x="29.3471%" y="1301" width="0.0349%" height="15" fill="rgb(237,56,23)"/><text x="29.5971%" y="1311.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.02%)</title><rect x="29.3820%" y="1317" width="0.0175%" height="15" fill="rgb(215,153,46)"/><text x="29.6320%" y="1327.50"></text></g><g><title>[libc-2.31.so] (5 samples, 0.09%)</title><rect x="29.3994%" y="1317" width="0.0873%" height="15" fill="rgb(224,49,31)"/><text x="29.6494%" y="1327.50"></text></g><g><title>__rust_probestack (1 samples, 0.02%)</title><rect x="29.4867%" y="1317" width="0.0175%" height="15" fill="rgb(250,18,42)"/><text x="29.7367%" y="1327.50"></text></g><g><title>&lt;model::locally_free::ExprInstanceLocallyFree as model::locally_free::HasLocallyFree&lt;model::rho_types::expr::ExprInstance&gt;&gt;::locally_free (1 samples, 0.02%)</title><rect x="29.5042%" y="1301" width="0.0175%" height="15" fill="rgb(215,176,39)"/><text x="29.7542%" y="1311.50"></text></g><g><title>model::rho_types::Par::append_expr (2 samples, 0.03%)</title><rect x="29.5042%" y="1317" width="0.0349%" height="15" fill="rgb(223,77,29)"/><text x="29.7542%" y="1327.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="29.5216%" y="1301" width="0.0175%" height="15" fill="rgb(234,94,52)"/><text x="29.7716%" y="1311.50"></text></g><g><title>&lt;model::rho_types::Par as rho_runtime::interpreter::reduce::eval_expression::ParExpressionEvaluator&lt;S&gt;&gt;::evaluate_nested_expressions (12 samples, 0.21%)</title><rect x="29.3471%" y="1333" width="0.2095%" height="15" fill="rgb(220,154,50)"/><text x="29.5971%" y="1343.50"></text></g><g><title>model::rho_types::Par::append_mut (1 samples, 0.02%)</title><rect x="29.5391%" y="1317" width="0.0175%" height="15" fill="rgb(212,11,10)"/><text x="29.7891%" y="1327.50"></text></g><g><title>[libc-2.31.so] (2 samples, 0.03%)</title><rect x="29.5566%" y="1317" width="0.0349%" height="15" fill="rgb(205,166,19)"/><text x="29.8066%" y="1327.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (2 samples, 0.03%)</title><rect x="29.5915%" y="1317" width="0.0349%" height="15" fill="rgb(244,198,16)"/><text x="29.8415%" y="1327.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::may_raise_aborted_error (1 samples, 0.02%)</title><rect x="29.6264%" y="1317" width="0.0175%" height="15" fill="rgb(219,69,12)"/><text x="29.8764%" y="1327.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (1 samples, 0.02%)</title><rect x="29.6264%" y="1301" width="0.0175%" height="15" fill="rgb(245,30,7)"/><text x="29.8764%" y="1311.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="29.6264%" y="1285" width="0.0175%" height="15" fill="rgb(218,221,48)"/><text x="29.8764%" y="1295.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (4 samples, 0.07%)</title><rect x="29.6613%" y="1301" width="0.0698%" height="15" fill="rgb(216,66,15)"/><text x="29.9113%" y="1311.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (4 samples, 0.07%)</title><rect x="29.6613%" y="1285" width="0.0698%" height="15" fill="rgb(226,122,50)"/><text x="29.9113%" y="1295.50"></text></g><g><title>core::sync::atomic::atomic_add (4 samples, 0.07%)</title><rect x="29.6613%" y="1269" width="0.0698%" height="15" fill="rgb(239,156,16)"/><text x="29.9113%" y="1279.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.03%)</title><rect x="29.8010%" y="1013" width="0.0349%" height="15" fill="rgb(224,27,38)"/><text x="30.0510%" y="1023.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.03%)</title><rect x="29.8010%" y="997" width="0.0349%" height="15" fill="rgb(224,39,27)"/><text x="30.0510%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity_from_bytes (2 samples, 0.03%)</title><rect x="29.8359%" y="1013" width="0.0349%" height="15" fill="rgb(215,92,29)"/><text x="30.0859%" y="1023.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (8 samples, 0.14%)</title><rect x="29.7835%" y="1125" width="0.1397%" height="15" fill="rgb(207,159,16)"/><text x="30.0335%" y="1135.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8 samples, 0.14%)</title><rect x="29.7835%" y="1109" width="0.1397%" height="15" fill="rgb(238,163,47)"/><text x="30.0335%" y="1119.50"></text></g><g><title>alloc::slice::hack::to_vec (8 samples, 0.14%)</title><rect x="29.7835%" y="1093" width="0.1397%" height="15" fill="rgb(219,91,49)"/><text x="30.0335%" y="1103.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (8 samples, 0.14%)</title><rect x="29.7835%" y="1077" width="0.1397%" height="15" fill="rgb(227,167,31)"/><text x="30.0335%" y="1087.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8 samples, 0.14%)</title><rect x="29.7835%" y="1061" width="0.1397%" height="15" fill="rgb(234,80,54)"/><text x="30.0335%" y="1071.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8 samples, 0.14%)</title><rect x="29.7835%" y="1045" width="0.1397%" height="15" fill="rgb(212,114,2)"/><text x="30.0335%" y="1055.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (8 samples, 0.14%)</title><rect x="29.7835%" y="1029" width="0.1397%" height="15" fill="rgb(234,50,24)"/><text x="30.0335%" y="1039.50"></text></g><g><title>core::alloc::layout::Layout::array (3 samples, 0.05%)</title><rect x="29.8708%" y="1013" width="0.0524%" height="15" fill="rgb(221,68,8)"/><text x="30.1208%" y="1023.50"></text></g><g><title>core::alloc::layout::Layout::repeat (3 samples, 0.05%)</title><rect x="29.8708%" y="997" width="0.0524%" height="15" fill="rgb(254,180,31)"/><text x="30.1208%" y="1007.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (1 samples, 0.02%)</title><rect x="29.9057%" y="981" width="0.0175%" height="15" fill="rgb(247,130,50)"/><text x="30.1557%" y="991.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (1 samples, 0.02%)</title><rect x="29.9057%" y="965" width="0.0175%" height="15" fill="rgb(211,109,4)"/><text x="30.1557%" y="975.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.21%)</title><rect x="29.7311%" y="1205" width="0.2095%" height="15" fill="rgb(238,50,21)"/><text x="29.9811%" y="1215.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (12 samples, 0.21%)</title><rect x="29.7311%" y="1189" width="0.2095%" height="15" fill="rgb(225,57,45)"/><text x="29.9811%" y="1199.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (12 samples, 0.21%)</title><rect x="29.7311%" y="1173" width="0.2095%" height="15" fill="rgb(209,196,50)"/><text x="29.9811%" y="1183.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned::{{closure}} (12 samples, 0.21%)</title><rect x="29.7311%" y="1157" width="0.2095%" height="15" fill="rgb(242,140,13)"/><text x="29.9811%" y="1167.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (12 samples, 0.21%)</title><rect x="29.7311%" y="1141" width="0.2095%" height="15" fill="rgb(217,111,7)"/><text x="29.9811%" y="1151.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="29.9232%" y="1125" width="0.0175%" height="15" fill="rgb(253,193,51)"/><text x="30.1732%" y="1135.50"></text></g><g><title>&lt;model::bitset::BitSet&lt;B&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="29.9232%" y="1109" width="0.0175%" height="15" fill="rgb(252,70,29)"/><text x="30.1732%" y="1119.50"></text></g><g><title>&lt;bit_vec::BitVec&lt;B&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="29.9232%" y="1093" width="0.0175%" height="15" fill="rgb(232,127,12)"/><text x="30.1732%" y="1103.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="29.9232%" y="1077" width="0.0175%" height="15" fill="rgb(211,180,21)"/><text x="30.1732%" y="1087.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.02%)</title><rect x="29.9232%" y="1061" width="0.0175%" height="15" fill="rgb(229,72,13)"/><text x="30.1732%" y="1071.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="29.9232%" y="1045" width="0.0175%" height="15" fill="rgb(240,211,49)"/><text x="30.1732%" y="1055.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.02%)</title><rect x="29.9232%" y="1029" width="0.0175%" height="15" fill="rgb(219,149,40)"/><text x="30.1732%" y="1039.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.02%)</title><rect x="29.9232%" y="1013" width="0.0175%" height="15" fill="rgb(210,127,46)"/><text x="30.1732%" y="1023.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="29.9232%" y="997" width="0.0175%" height="15" fill="rgb(220,106,7)"/><text x="30.1732%" y="1007.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="29.9232%" y="981" width="0.0175%" height="15" fill="rgb(249,31,22)"/><text x="30.1732%" y="991.50"></text></g><g><title>core::ptr::write (13 samples, 0.23%)</title><rect x="29.9406%" y="1205" width="0.2270%" height="15" fill="rgb(253,1,49)"/><text x="30.1906%" y="1215.50"></text></g><g><title>[libc-2.31.so] (13 samples, 0.23%)</title><rect x="29.9406%" y="1189" width="0.2270%" height="15" fill="rgb(227,144,33)"/><text x="30.1906%" y="1199.50"></text></g><g><title>&lt;rho_runtime::interpreter::reduce::environment::Env&lt;T&gt; as core::clone::Clone&gt;::clone (26 samples, 0.45%)</title><rect x="29.7311%" y="1301" width="0.4539%" height="15" fill="rgb(249,163,44)"/><text x="29.9811%" y="1311.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::clone::Clone&gt;::clone (26 samples, 0.45%)</title><rect x="29.7311%" y="1285" width="0.4539%" height="15" fill="rgb(234,15,39)"/><text x="29.9811%" y="1295.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::convert::From&lt;&amp;[&lt;A as smallvec::Array&gt;::Item]&gt;&gt;::from (26 samples, 0.45%)</title><rect x="29.7311%" y="1269" width="0.4539%" height="15" fill="rgb(207,66,16)"/><text x="29.9811%" y="1279.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (26 samples, 0.45%)</title><rect x="29.7311%" y="1253" width="0.4539%" height="15" fill="rgb(233,112,24)"/><text x="29.9811%" y="1263.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::FromIterator&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::from_iter (26 samples, 0.45%)</title><rect x="29.7311%" y="1237" width="0.4539%" height="15" fill="rgb(230,90,22)"/><text x="29.9811%" y="1247.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (26 samples, 0.45%)</title><rect x="29.7311%" y="1221" width="0.4539%" height="15" fill="rgb(229,61,13)"/><text x="29.9811%" y="1231.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple_mut (1 samples, 0.02%)</title><rect x="30.1676%" y="1205" width="0.0175%" height="15" fill="rgb(225,57,24)"/><text x="30.4176%" y="1215.50"></text></g><g><title>[libc-2.31.so] (3 samples, 0.05%)</title><rect x="30.1851%" y="1301" width="0.0524%" height="15" fill="rgb(208,169,48)"/><text x="30.4351%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::join::JoinHandle&lt;()&gt;&gt; (2 samples, 0.03%)</title><rect x="30.2374%" y="1301" width="0.0349%" height="15" fill="rgb(244,218,51)"/><text x="30.4874%" y="1311.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="30.2374%" y="1285" width="0.0349%" height="15" fill="rgb(214,148,10)"/><text x="30.4874%" y="1295.50"></text></g><g><title>tokio::runtime::task::state::State::drop_join_handle_fast (2 samples, 0.03%)</title><rect x="30.2374%" y="1269" width="0.0349%" height="15" fill="rgb(225,174,27)"/><text x="30.4874%" y="1279.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (2 samples, 0.03%)</title><rect x="30.2374%" y="1253" width="0.0349%" height="15" fill="rgb(230,96,26)"/><text x="30.4874%" y="1263.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (2 samples, 0.03%)</title><rect x="30.2374%" y="1237" width="0.0349%" height="15" fill="rgb(232,10,30)"/><text x="30.4874%" y="1247.50"></text></g><g><title>rho_runtime::interpreter::AsynWaitGroup::acquire (3 samples, 0.05%)</title><rect x="30.2723%" y="1301" width="0.0524%" height="15" fill="rgb(222,8,50)"/><text x="30.5223%" y="1311.50"></text></g><g><title>core::sync::atomic::AtomicI32::fetch_add (3 samples, 0.05%)</title><rect x="30.2723%" y="1285" width="0.0524%" height="15" fill="rgb(213,81,27)"/><text x="30.5223%" y="1295.50"></text></g><g><title>core::sync::atomic::atomic_add (3 samples, 0.05%)</title><rect x="30.2723%" y="1269" width="0.0524%" height="15" fill="rgb(245,50,10)"/><text x="30.5223%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::spawner::Spawner&gt; (4 samples, 0.07%)</title><rect x="30.3422%" y="1285" width="0.0698%" height="15" fill="rgb(216,100,18)"/><text x="30.5922%" y="1295.50"></text></g><g><title>tokio::runtime::context::spawn_handle (4 samples, 0.07%)</title><rect x="30.4120%" y="1285" width="0.0698%" height="15" fill="rgb(236,147,54)"/><text x="30.6620%" y="1295.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (4 samples, 0.07%)</title><rect x="30.4120%" y="1269" width="0.0698%" height="15" fill="rgb(205,143,26)"/><text x="30.6620%" y="1279.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4 samples, 0.07%)</title><rect x="30.4120%" y="1253" width="0.0698%" height="15" fill="rgb(236,26,9)"/><text x="30.6620%" y="1263.50"></text></g><g><title>tokio::runtime::context::spawn_handle::{{closure}} (4 samples, 0.07%)</title><rect x="30.4120%" y="1237" width="0.0698%" height="15" fill="rgb(221,165,53)"/><text x="30.6620%" y="1247.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (4 samples, 0.07%)</title><rect x="30.4120%" y="1221" width="0.0698%" height="15" fill="rgb(214,110,17)"/><text x="30.6620%" y="1231.50"></text></g><g><title>tokio::runtime::context::spawn_handle::{{closure}}::{{closure}} (4 samples, 0.07%)</title><rect x="30.4120%" y="1205" width="0.0698%" height="15" fill="rgb(237,197,12)"/><text x="30.6620%" y="1215.50"></text></g><g><title>&lt;tokio::runtime::spawner::Spawner as core::clone::Clone&gt;::clone (4 samples, 0.07%)</title><rect x="30.4120%" y="1189" width="0.0698%" height="15" fill="rgb(205,84,17)"/><text x="30.6620%" y="1199.50"></text></g><g><title>[libc-2.31.so] (3 samples, 0.05%)</title><rect x="30.5168%" y="1269" width="0.0524%" height="15" fill="rgb(237,18,45)"/><text x="30.7668%" y="1279.50"></text></g><g><title>_mi_free_block (1 samples, 0.02%)</title><rect x="30.6913%" y="1189" width="0.0175%" height="15" fill="rgb(221,87,14)"/><text x="30.9413%" y="1199.50"></text></g><g><title>_mi_page_thread_free_collect (1 samples, 0.02%)</title><rect x="30.7088%" y="1173" width="0.0175%" height="15" fill="rgb(238,186,15)"/><text x="30.9588%" y="1183.50"></text></g><g><title>mi_block_next (1 samples, 0.02%)</title><rect x="30.7088%" y="1157" width="0.0175%" height="15" fill="rgb(208,115,11)"/><text x="30.9588%" y="1167.50"></text></g><g><title>_mi_heap_delayed_free (8 samples, 0.14%)</title><rect x="30.6041%" y="1221" width="0.1397%" height="15" fill="rgb(254,175,0)"/><text x="30.8541%" y="1231.50"></text></g><g><title>_mi_free_delayed_block (3 samples, 0.05%)</title><rect x="30.6913%" y="1205" width="0.0524%" height="15" fill="rgb(227,24,42)"/><text x="30.9413%" y="1215.50"></text></g><g><title>_mi_page_free_collect (2 samples, 0.03%)</title><rect x="30.7088%" y="1189" width="0.0349%" height="15" fill="rgb(223,211,37)"/><text x="30.9588%" y="1199.50"></text></g><g><title>mi_page_thread_free (1 samples, 0.02%)</title><rect x="30.7263%" y="1173" width="0.0175%" height="15" fill="rgb(235,49,27)"/><text x="30.9763%" y="1183.50"></text></g><g><title>_mi_page_malloc (3 samples, 0.05%)</title><rect x="30.7437%" y="1221" width="0.0524%" height="15" fill="rgb(254,97,51)"/><text x="30.9937%" y="1231.50"></text></g><g><title>__rg_alloc (15 samples, 0.26%)</title><rect x="30.5691%" y="1269" width="0.2619%" height="15" fill="rgb(249,51,40)"/><text x="30.8191%" y="1279.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (15 samples, 0.26%)</title><rect x="30.5691%" y="1253" width="0.2619%" height="15" fill="rgb(210,128,45)"/><text x="30.8191%" y="1263.50"></text></g><g><title>_mi_malloc_generic (15 samples, 0.26%)</title><rect x="30.5691%" y="1237" width="0.2619%" height="15" fill="rgb(224,137,50)"/><text x="30.8191%" y="1247.50"></text></g><g><title>mi_find_page (2 samples, 0.03%)</title><rect x="30.7961%" y="1221" width="0.0349%" height="15" fill="rgb(242,15,9)"/><text x="31.0461%" y="1231.50"></text></g><g><title>mi_find_free_page (2 samples, 0.03%)</title><rect x="30.7961%" y="1205" width="0.0349%" height="15" fill="rgb(233,187,41)"/><text x="31.0461%" y="1215.50"></text></g><g><title>mi_page_queue (2 samples, 0.03%)</title><rect x="30.7961%" y="1189" width="0.0349%" height="15" fill="rgb(227,2,29)"/><text x="31.0461%" y="1199.50"></text></g><g><title>_mi_bin (2 samples, 0.03%)</title><rect x="30.7961%" y="1173" width="0.0349%" height="15" fill="rgb(222,70,3)"/><text x="31.0461%" y="1183.50"></text></g><g><title>_mi_wsize_from_size (1 samples, 0.02%)</title><rect x="30.8135%" y="1157" width="0.0175%" height="15" fill="rgb(213,11,42)"/><text x="31.0635%" y="1167.50"></text></g><g><title>tokio::runtime::task::joinable (8 samples, 0.14%)</title><rect x="30.8310%" y="1253" width="0.1397%" height="15" fill="rgb(225,150,9)"/><text x="31.0810%" y="1263.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::new (8 samples, 0.14%)</title><rect x="30.8310%" y="1237" width="0.1397%" height="15" fill="rgb(230,162,45)"/><text x="31.0810%" y="1247.50"></text></g><g><title>tokio::runtime::task::core::Cell&lt;T,S&gt;::new (8 samples, 0.14%)</title><rect x="30.8310%" y="1221" width="0.1397%" height="15" fill="rgb(222,14,52)"/><text x="31.0810%" y="1231.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (8 samples, 0.14%)</title><rect x="30.8310%" y="1205" width="0.1397%" height="15" fill="rgb(254,198,14)"/><text x="31.0810%" y="1215.50"></text></g><g><title>[libc-2.31.so] (8 samples, 0.14%)</title><rect x="30.8310%" y="1189" width="0.1397%" height="15" fill="rgb(220,217,30)"/><text x="31.0810%" y="1199.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="30.9707%" y="1221" width="0.0175%" height="15" fill="rgb(215,146,41)"/><text x="31.2207%" y="1231.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.02%)</title><rect x="30.9707%" y="1205" width="0.0175%" height="15" fill="rgb(217,27,36)"/><text x="31.2207%" y="1215.50"></text></g><g><title>tokio::runtime::thread_pool::worker::CURRENT::FOO::__getit (1 samples, 0.02%)</title><rect x="30.9707%" y="1189" width="0.0175%" height="15" fill="rgb(219,218,39)"/><text x="31.2207%" y="1199.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (1 samples, 0.02%)</title><rect x="30.9707%" y="1173" width="0.0175%" height="15" fill="rgb(219,4,42)"/><text x="31.2207%" y="1183.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (1 samples, 0.02%)</title><rect x="30.9707%" y="1157" width="0.0175%" height="15" fill="rgb(249,119,36)"/><text x="31.2207%" y="1167.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.02%)</title><rect x="30.9707%" y="1141" width="0.0175%" height="15" fill="rgb(209,23,33)"/><text x="31.2207%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;core::option::Option&lt;alloc::boxed::Box&lt;tokio::runtime::thread_pool::worker::Core&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="30.9881%" y="1205" width="0.0175%" height="15" fill="rgb(211,10,0)"/><text x="31.2381%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (1 samples, 0.02%)</title><rect x="30.9881%" y="1189" width="0.0175%" height="15" fill="rgb(208,99,37)"/><text x="31.2381%" y="1199.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="30.9881%" y="1173" width="0.0175%" height="15" fill="rgb(213,132,31)"/><text x="31.2381%" y="1183.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.02%)</title><rect x="30.9881%" y="1157" width="0.0175%" height="15" fill="rgb(243,129,40)"/><text x="31.2381%" y="1167.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.02%)</title><rect x="30.9881%" y="1141" width="0.0175%" height="15" fill="rgb(210,66,33)"/><text x="31.2381%" y="1151.50"></text></g><g><title>core::mem::replace (1 samples, 0.02%)</title><rect x="30.9881%" y="1125" width="0.0175%" height="15" fill="rgb(209,189,4)"/><text x="31.2381%" y="1135.50"></text></g><g><title>core::mem::swap (1 samples, 0.02%)</title><rect x="30.9881%" y="1109" width="0.0175%" height="15" fill="rgb(214,107,37)"/><text x="31.2381%" y="1119.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (1 samples, 0.02%)</title><rect x="30.9881%" y="1093" width="0.0175%" height="15" fill="rgb(245,88,54)"/><text x="31.2381%" y="1103.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="30.9881%" y="1077" width="0.0175%" height="15" fill="rgb(205,146,20)"/><text x="31.2381%" y="1087.50"></text></g><g><title>&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (5 samples, 0.09%)</title><rect x="31.0056%" y="1189" width="0.0873%" height="15" fill="rgb(220,161,25)"/><text x="31.2556%" y="1199.50"></text></g><g><title>tokio::runtime::park::Inner::unpark (5 samples, 0.09%)</title><rect x="31.0056%" y="1173" width="0.0873%" height="15" fill="rgb(215,152,15)"/><text x="31.2556%" y="1183.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (5 samples, 0.09%)</title><rect x="31.0056%" y="1157" width="0.0873%" height="15" fill="rgb(233,192,44)"/><text x="31.2556%" y="1167.50"></text></g><g><title>core::sync::atomic::atomic_swap (5 samples, 0.09%)</title><rect x="31.0056%" y="1141" width="0.0873%" height="15" fill="rgb(240,170,46)"/><text x="31.2556%" y="1151.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.02%)</title><rect x="31.0929%" y="1189" width="0.0175%" height="15" fill="rgb(207,104,33)"/><text x="31.3429%" y="1199.50"></text></g><g><title>core::mem::take (1 samples, 0.02%)</title><rect x="31.0929%" y="1173" width="0.0175%" height="15" fill="rgb(219,21,39)"/><text x="31.3429%" y="1183.50"></text></g><g><title>core::mem::replace (1 samples, 0.02%)</title><rect x="31.0929%" y="1157" width="0.0175%" height="15" fill="rgb(214,133,29)"/><text x="31.3429%" y="1167.50"></text></g><g><title>core::mem::swap (1 samples, 0.02%)</title><rect x="31.0929%" y="1141" width="0.0175%" height="15" fill="rgb(226,93,6)"/><text x="31.3429%" y="1151.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (1 samples, 0.02%)</title><rect x="31.0929%" y="1125" width="0.0175%" height="15" fill="rgb(252,222,34)"/><text x="31.3429%" y="1135.50"></text></g><g><title>core::ptr::read (1 samples, 0.02%)</title><rect x="31.0929%" y="1109" width="0.0175%" height="15" fill="rgb(252,92,48)"/><text x="31.3429%" y="1119.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="31.0929%" y="1093" width="0.0175%" height="15" fill="rgb(245,223,24)"/><text x="31.3429%" y="1103.50"></text></g><g><title>_raw_spin_lock (3 samples, 0.05%)</title><rect x="31.1453%" y="1061" width="0.0524%" height="15" fill="rgb(205,176,3)"/><text x="31.3953%" y="1071.50"></text></g><g><title>get_futex_key (1 samples, 0.02%)</title><rect x="31.2675%" y="1045" width="0.0175%" height="15" fill="rgb(235,151,15)"/><text x="31.5175%" y="1055.50"></text></g><g><title>mark_wake_futex (7 samples, 0.12%)</title><rect x="31.2849%" y="1045" width="0.1222%" height="15" fill="rgb(237,209,11)"/><text x="31.5349%" y="1055.50"></text></g><g><title>__unqueue_futex (2 samples, 0.03%)</title><rect x="31.3722%" y="1029" width="0.0349%" height="15" fill="rgb(243,227,24)"/><text x="31.6222%" y="1039.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.02%)</title><rect x="31.4595%" y="1029" width="0.0175%" height="15" fill="rgb(239,193,16)"/><text x="31.7095%" y="1039.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.02%)</title><rect x="31.4770%" y="1013" width="0.0175%" height="15" fill="rgb(231,27,9)"/><text x="31.7270%" y="1023.50"></text></g><g><title>select_task_rq_fair (2 samples, 0.03%)</title><rect x="31.4944%" y="1013" width="0.0349%" height="15" fill="rgb(219,169,10)"/><text x="31.7444%" y="1023.50"></text></g><g><title>available_idle_cpu (2 samples, 0.03%)</title><rect x="31.4944%" y="997" width="0.0349%" height="15" fill="rgb(244,229,43)"/><text x="31.7444%" y="1007.50"></text></g><g><title>account_entity_enqueue (1 samples, 0.02%)</title><rect x="31.5642%" y="981" width="0.0175%" height="15" fill="rgb(254,38,20)"/><text x="31.8142%" y="991.50"></text></g><g><title>place_entity (1 samples, 0.02%)</title><rect x="31.5992%" y="965" width="0.0175%" height="15" fill="rgb(250,47,30)"/><text x="31.8492%" y="975.50"></text></g><g><title>enqueue_task_fair (5 samples, 0.09%)</title><rect x="31.5468%" y="997" width="0.0873%" height="15" fill="rgb(224,124,36)"/><text x="31.7968%" y="1007.50"></text></g><g><title>enqueue_entity (3 samples, 0.05%)</title><rect x="31.5817%" y="981" width="0.0524%" height="15" fill="rgb(246,68,51)"/><text x="31.8317%" y="991.50"></text></g><g><title>update_curr (1 samples, 0.02%)</title><rect x="31.6166%" y="965" width="0.0175%" height="15" fill="rgb(253,43,49)"/><text x="31.8666%" y="975.50"></text></g><g><title>psi_task_change (11 samples, 0.19%)</title><rect x="31.6341%" y="997" width="0.1920%" height="15" fill="rgb(219,54,36)"/><text x="31.8841%" y="1007.50"></text></g><g><title>psi_group_change (6 samples, 0.10%)</title><rect x="31.7214%" y="981" width="0.1047%" height="15" fill="rgb(227,133,34)"/><text x="31.9714%" y="991.50"></text></g><g><title>ttwu_do_activate (20 samples, 0.35%)</title><rect x="31.5293%" y="1013" width="0.3492%" height="15" fill="rgb(247,227,15)"/><text x="31.7793%" y="1023.50"></text></g><g><title>ttwu_do_wakeup (3 samples, 0.05%)</title><rect x="31.8261%" y="997" width="0.0524%" height="15" fill="rgb(229,96,14)"/><text x="32.0761%" y="1007.50"></text></g><g><title>check_preempt_curr (3 samples, 0.05%)</title><rect x="31.8261%" y="981" width="0.0524%" height="15" fill="rgb(220,79,17)"/><text x="32.0761%" y="991.50"></text></g><g><title>resched_curr (1 samples, 0.02%)</title><rect x="31.8610%" y="965" width="0.0175%" height="15" fill="rgb(205,131,53)"/><text x="32.1110%" y="975.50"></text></g><g><title>__smp_call_single_queue (2 samples, 0.03%)</title><rect x="31.9134%" y="997" width="0.0349%" height="15" fill="rgb(209,50,29)"/><text x="32.1634%" y="1007.50"></text></g><g><title>send_call_function_single_ipi (2 samples, 0.03%)</title><rect x="31.9134%" y="981" width="0.0349%" height="15" fill="rgb(245,86,46)"/><text x="32.1634%" y="991.50"></text></g><g><title>native_send_call_func_single_ipi (2 samples, 0.03%)</title><rect x="31.9134%" y="965" width="0.0349%" height="15" fill="rgb(235,66,46)"/><text x="32.1634%" y="975.50"></text></g><g><title>x2apic_send_IPI (2 samples, 0.03%)</title><rect x="31.9134%" y="949" width="0.0349%" height="15" fill="rgb(232,148,31)"/><text x="32.1634%" y="959.50"></text></g><g><title>native_write_msr (2 samples, 0.03%)</title><rect x="31.9134%" y="933" width="0.0349%" height="15" fill="rgb(217,149,8)"/><text x="32.1634%" y="943.50"></text></g><g><title>ttwu_queue_wakelist (5 samples, 0.09%)</title><rect x="31.8785%" y="1013" width="0.0873%" height="15" fill="rgb(209,183,11)"/><text x="32.1285%" y="1023.50"></text></g><g><title>sched_clock_cpu (1 samples, 0.02%)</title><rect x="31.9483%" y="997" width="0.0175%" height="15" fill="rgb(208,55,20)"/><text x="32.1983%" y="1007.50"></text></g><g><title>native_sched_clock (1 samples, 0.02%)</title><rect x="31.9483%" y="981" width="0.0175%" height="15" fill="rgb(218,39,14)"/><text x="32.1983%" y="991.50"></text></g><g><title>update_cfs_rq_h_load (3 samples, 0.05%)</title><rect x="31.9658%" y="1013" width="0.0524%" height="15" fill="rgb(216,169,33)"/><text x="32.2158%" y="1023.50"></text></g><g><title>futex_wake (50 samples, 0.87%)</title><rect x="31.1976%" y="1061" width="0.8729%" height="15" fill="rgb(233,80,24)"/><text x="31.4476%" y="1071.50"></text></g><g><title>wake_up_q (38 samples, 0.66%)</title><rect x="31.4071%" y="1045" width="0.6634%" height="15" fill="rgb(213,179,31)"/><text x="31.6571%" y="1055.50"></text></g><g><title>try_to_wake_up (34 samples, 0.59%)</title><rect x="31.4770%" y="1029" width="0.5936%" height="15" fill="rgb(209,19,5)"/><text x="31.7270%" y="1039.50"></text></g><g><title>update_rq_clock (3 samples, 0.05%)</title><rect x="32.0182%" y="1013" width="0.0524%" height="15" fill="rgb(219,18,35)"/><text x="32.2682%" y="1023.50"></text></g><g><title>sched_clock_cpu (1 samples, 0.02%)</title><rect x="32.0531%" y="997" width="0.0175%" height="15" fill="rgb(209,169,16)"/><text x="32.3031%" y="1007.50"></text></g><g><title>native_sched_clock (1 samples, 0.02%)</title><rect x="32.0531%" y="981" width="0.0175%" height="15" fill="rgb(245,90,51)"/><text x="32.3031%" y="991.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (56 samples, 0.98%)</title><rect x="31.1103%" y="1157" width="0.9777%" height="15" fill="rgb(220,99,45)"/><text x="31.3603%" y="1167.50"></text></g><g><title>syscall (56 samples, 0.98%)</title><rect x="31.1103%" y="1141" width="0.9777%" height="15" fill="rgb(249,89,25)"/><text x="31.3603%" y="1151.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (56 samples, 0.98%)</title><rect x="31.1103%" y="1125" width="0.9777%" height="15" fill="rgb(239,193,0)"/><text x="31.3603%" y="1135.50"></text></g><g><title>do_syscall_64 (56 samples, 0.98%)</title><rect x="31.1103%" y="1109" width="0.9777%" height="15" fill="rgb(231,126,1)"/><text x="31.3603%" y="1119.50"></text></g><g><title>__x64_sys_futex (54 samples, 0.94%)</title><rect x="31.1453%" y="1093" width="0.9427%" height="15" fill="rgb(243,166,3)"/><text x="31.3953%" y="1103.50"></text></g><g><title>do_futex (54 samples, 0.94%)</title><rect x="31.1453%" y="1077" width="0.9427%" height="15" fill="rgb(223,22,34)"/><text x="31.3953%" y="1087.50"></text></g><g><title>hash_futex (1 samples, 0.02%)</title><rect x="32.0705%" y="1061" width="0.0175%" height="15" fill="rgb(251,52,51)"/><text x="32.3205%" y="1071.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (3 samples, 0.05%)</title><rect x="32.0880%" y="1157" width="0.0524%" height="15" fill="rgb(221,165,28)"/><text x="32.3380%" y="1167.50"></text></g><g><title>core::sync::atomic::atomic_load (3 samples, 0.05%)</title><rect x="32.0880%" y="1141" width="0.0524%" height="15" fill="rgb(218,121,47)"/><text x="32.3380%" y="1151.50"></text></g><g><title>&lt;std::time::Instant as core::cmp::PartialOrd&gt;::gt (1 samples, 0.02%)</title><rect x="32.1404%" y="1141" width="0.0175%" height="15" fill="rgb(209,120,9)"/><text x="32.3904%" y="1151.50"></text></g><g><title>&lt;core::cmp::Ordering as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="32.1404%" y="1125" width="0.0175%" height="15" fill="rgb(236,68,12)"/><text x="32.3904%" y="1135.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::should_timeout (2 samples, 0.03%)</title><rect x="32.1404%" y="1157" width="0.0349%" height="15" fill="rgb(225,194,26)"/><text x="32.3904%" y="1167.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.02%)</title><rect x="32.1578%" y="1141" width="0.0175%" height="15" fill="rgb(231,84,39)"/><text x="32.4078%" y="1151.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.02%)</title><rect x="32.1578%" y="1125" width="0.0175%" height="15" fill="rgb(210,11,45)"/><text x="32.4078%" y="1135.50"></text></g><g><title>std::sys::unix::time::inner::now (1 samples, 0.02%)</title><rect x="32.1578%" y="1109" width="0.0175%" height="15" fill="rgb(224,54,52)"/><text x="32.4078%" y="1119.50"></text></g><g><title>__clock_gettime (1 samples, 0.02%)</title><rect x="32.1578%" y="1093" width="0.0175%" height="15" fill="rgb(238,102,14)"/><text x="32.4078%" y="1103.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.02%)</title><rect x="32.1753%" y="1157" width="0.0175%" height="15" fill="rgb(243,160,52)"/><text x="32.4253%" y="1167.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (1 samples, 0.02%)</title><rect x="32.1753%" y="1141" width="0.0175%" height="15" fill="rgb(216,114,19)"/><text x="32.4253%" y="1151.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (1 samples, 0.02%)</title><rect x="32.1753%" y="1125" width="0.0175%" height="15" fill="rgb(244,166,37)"/><text x="32.4253%" y="1135.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (1 samples, 0.02%)</title><rect x="32.1753%" y="1109" width="0.0175%" height="15" fill="rgb(246,29,44)"/><text x="32.4253%" y="1119.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (64 samples, 1.12%)</title><rect x="31.1103%" y="1189" width="1.1173%" height="15" fill="rgb(215,56,53)"/><text x="31.3603%" y="1199.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (64 samples, 1.12%)</title><rect x="31.1103%" y="1173" width="1.1173%" height="15" fill="rgb(217,60,2)"/><text x="31.3603%" y="1183.50"></text></g><g><title>parking_lot_core::parking_lot::unlock_bucket_pair (2 samples, 0.03%)</title><rect x="32.1927%" y="1157" width="0.0349%" height="15" fill="rgb(207,26,24)"/><text x="32.4427%" y="1167.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::unlock (2 samples, 0.03%)</title><rect x="32.1927%" y="1141" width="0.0349%" height="15" fill="rgb(252,210,15)"/><text x="32.4427%" y="1151.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.03%)</title><rect x="32.1927%" y="1125" width="0.0349%" height="15" fill="rgb(253,209,26)"/><text x="32.4427%" y="1135.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.03%)</title><rect x="32.1927%" y="1109" width="0.0349%" height="15" fill="rgb(238,170,14)"/><text x="32.4427%" y="1119.50"></text></g><g><title>tokio::runtime::queue::Local&lt;T&gt;::push_back (5 samples, 0.09%)</title><rect x="32.2277%" y="1189" width="0.0873%" height="15" fill="rgb(216,178,15)"/><text x="32.4777%" y="1199.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (5 samples, 0.09%)</title><rect x="32.2277%" y="1173" width="0.0873%" height="15" fill="rgb(250,197,2)"/><text x="32.4777%" y="1183.50"></text></g><g><title>core::sync::atomic::atomic_load (5 samples, 0.09%)</title><rect x="32.2277%" y="1157" width="0.0873%" height="15" fill="rgb(212,70,42)"/><text x="32.4777%" y="1167.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (2 samples, 0.03%)</title><rect x="32.3324%" y="1157" width="0.0349%" height="15" fill="rgb(227,213,9)"/><text x="32.5824%" y="1167.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (5 samples, 0.09%)</title><rect x="32.3673%" y="1157" width="0.0873%" height="15" fill="rgb(245,99,25)"/><text x="32.6173%" y="1167.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (5 samples, 0.09%)</title><rect x="32.3673%" y="1141" width="0.0873%" height="15" fill="rgb(250,82,29)"/><text x="32.6173%" y="1151.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (5 samples, 0.09%)</title><rect x="32.3673%" y="1125" width="0.0873%" height="15" fill="rgb(241,226,54)"/><text x="32.6173%" y="1135.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (4 samples, 0.07%)</title><rect x="32.3848%" y="1109" width="0.0698%" height="15" fill="rgb(221,99,41)"/><text x="32.6348%" y="1119.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (4 samples, 0.07%)</title><rect x="32.3848%" y="1093" width="0.0698%" height="15" fill="rgb(213,90,21)"/><text x="32.6348%" y="1103.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::notify_should_wakeup (14 samples, 0.24%)</title><rect x="32.4546%" y="1157" width="0.2444%" height="15" fill="rgb(205,208,24)"/><text x="32.7046%" y="1167.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (13 samples, 0.23%)</title><rect x="32.4721%" y="1141" width="0.2270%" height="15" fill="rgb(246,31,12)"/><text x="32.7221%" y="1151.50"></text></g><g><title>core::sync::atomic::atomic_add (13 samples, 0.23%)</title><rect x="32.4721%" y="1125" width="0.2270%" height="15" fill="rgb(213,154,6)"/><text x="32.7221%" y="1135.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_par::&lt;impl rho_runtime::interpreter::reduce::Evaluator&lt;S&gt; for model::rho_types::Par&gt;::evaluate (181 samples, 3.16%)</title><rect x="29.5566%" y="1333" width="3.1599%" height="15" fill="rgb(222,163,29)"/><text x="29.8066%" y="1343.50">rho..</text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::spawn_evaluation (176 samples, 3.07%)</title><rect x="29.6439%" y="1317" width="3.0726%" height="15" fill="rgb(227,201,8)"/><text x="29.8939%" y="1327.50">rho..</text></g><g><title>tokio::task::spawn::spawn (137 samples, 2.39%)</title><rect x="30.3247%" y="1301" width="2.3918%" height="15" fill="rgb(233,9,32)"/><text x="30.5747%" y="1311.50">to..</text></g><g><title>tokio::runtime::spawner::Spawner::spawn (128 samples, 2.23%)</title><rect x="30.4818%" y="1285" width="2.2346%" height="15" fill="rgb(217,54,24)"/><text x="30.7318%" y="1295.50">t..</text></g><g><title>tokio::runtime::thread_pool::Spawner::spawn (108 samples, 1.89%)</title><rect x="30.8310%" y="1269" width="1.8855%" height="15" fill="rgb(235,192,0)"/><text x="31.0810%" y="1279.50">t..</text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (100 samples, 1.75%)</title><rect x="30.9707%" y="1253" width="1.7458%" height="15" fill="rgb(235,45,9)"/><text x="31.2207%" y="1263.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (100 samples, 1.75%)</title><rect x="30.9707%" y="1237" width="1.7458%" height="15" fill="rgb(246,42,40)"/><text x="31.2207%" y="1247.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule::{{closure}} (99 samples, 1.73%)</title><rect x="30.9881%" y="1221" width="1.7284%" height="15" fill="rgb(248,111,24)"/><text x="31.2381%" y="1231.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule_local (98 samples, 1.71%)</title><rect x="31.0056%" y="1205" width="1.7109%" height="15" fill="rgb(249,65,22)"/><text x="31.2556%" y="1215.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::notify_parked (23 samples, 0.40%)</title><rect x="32.3149%" y="1189" width="0.4015%" height="15" fill="rgb(238,111,51)"/><text x="32.5649%" y="1199.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::worker_to_notify (22 samples, 0.38%)</title><rect x="32.3324%" y="1173" width="0.3841%" height="15" fill="rgb(250,118,22)"/><text x="32.5824%" y="1183.50"></text></g><g><title>tokio::runtime::thread_pool::idle::State::unpark_one (1 samples, 0.02%)</title><rect x="32.6990%" y="1157" width="0.0175%" height="15" fill="rgb(234,84,26)"/><text x="32.9490%" y="1167.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.02%)</title><rect x="32.6990%" y="1141" width="0.0175%" height="15" fill="rgb(243,172,12)"/><text x="32.9490%" y="1151.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.02%)</title><rect x="32.6990%" y="1125" width="0.0175%" height="15" fill="rgb(236,150,49)"/><text x="32.9490%" y="1135.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.10%)</title><rect x="32.7165%" y="1285" width="0.1047%" height="15" fill="rgb(225,197,26)"/><text x="32.9665%" y="1295.50"></text></g><g><title>core::ptr::read (6 samples, 0.10%)</title><rect x="32.7165%" y="1269" width="0.1047%" height="15" fill="rgb(214,17,42)"/><text x="32.9665%" y="1279.50"></text></g><g><title>[libc-2.31.so] (6 samples, 0.10%)</title><rect x="32.7165%" y="1253" width="0.1047%" height="15" fill="rgb(224,165,40)"/><text x="32.9665%" y="1263.50"></text></g><g><title>[libc-2.31.so] (6 samples, 0.10%)</title><rect x="32.8212%" y="1285" width="0.1047%" height="15" fill="rgb(246,100,4)"/><text x="33.0712%" y="1295.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (5 samples, 0.09%)</title><rect x="32.9260%" y="1285" width="0.0873%" height="15" fill="rgb(222,103,0)"/><text x="33.1760%" y="1295.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (5 samples, 0.09%)</title><rect x="32.9260%" y="1269" width="0.0873%" height="15" fill="rgb(227,189,26)"/><text x="33.1760%" y="1279.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.09%)</title><rect x="32.9260%" y="1253" width="0.0873%" height="15" fill="rgb(214,202,17)"/><text x="33.1760%" y="1263.50"></text></g><g><title>[libc-2.31.so] (4 samples, 0.07%)</title><rect x="32.9434%" y="1237" width="0.0698%" height="15" fill="rgb(229,111,3)"/><text x="33.1934%" y="1247.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="33.0133%" y="1221" width="0.0175%" height="15" fill="rgb(229,172,15)"/><text x="33.2633%" y="1231.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="33.0133%" y="1205" width="0.0175%" height="15" fill="rgb(230,224,35)"/><text x="33.2633%" y="1215.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="33.0133%" y="1189" width="0.0175%" height="15" fill="rgb(251,141,6)"/><text x="33.2633%" y="1199.50"></text></g><g><title>__rg_alloc (1 samples, 0.02%)</title><rect x="33.0133%" y="1173" width="0.0175%" height="15" fill="rgb(225,208,6)"/><text x="33.2633%" y="1183.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.02%)</title><rect x="33.0133%" y="1157" width="0.0175%" height="15" fill="rgb(246,181,16)"/><text x="33.2633%" y="1167.50"></text></g><g><title>mi_malloc (1 samples, 0.02%)</title><rect x="33.0133%" y="1141" width="0.0175%" height="15" fill="rgb(227,129,36)"/><text x="33.2633%" y="1151.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.02%)</title><rect x="33.0133%" y="1125" width="0.0175%" height="15" fill="rgb(248,117,24)"/><text x="33.2633%" y="1135.50"></text></g><g><title>mi_heap_malloc_small (1 samples, 0.02%)</title><rect x="33.0133%" y="1109" width="0.0175%" height="15" fill="rgb(214,185,35)"/><text x="33.2633%" y="1119.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.02%)</title><rect x="33.0133%" y="1093" width="0.0175%" height="15" fill="rgb(236,150,34)"/><text x="33.2633%" y="1103.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.03%)</title><rect x="33.0133%" y="1285" width="0.0349%" height="15" fill="rgb(243,228,27)"/><text x="33.2633%" y="1295.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.03%)</title><rect x="33.0133%" y="1269" width="0.0349%" height="15" fill="rgb(245,77,44)"/><text x="33.2633%" y="1279.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.03%)</title><rect x="33.0133%" y="1253" width="0.0349%" height="15" fill="rgb(235,214,42)"/><text x="33.2633%" y="1263.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.03%)</title><rect x="33.0133%" y="1237" width="0.0349%" height="15" fill="rgb(221,74,3)"/><text x="33.2633%" y="1247.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.02%)</title><rect x="33.0307%" y="1221" width="0.0175%" height="15" fill="rgb(206,121,29)"/><text x="33.2807%" y="1231.50"></text></g><g><title>core::alloc::layout::Layout::repeat (1 samples, 0.02%)</title><rect x="33.0307%" y="1205" width="0.0175%" height="15" fill="rgb(249,131,53)"/><text x="33.2807%" y="1215.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (1 samples, 0.02%)</title><rect x="33.0307%" y="1189" width="0.0175%" height="15" fill="rgb(236,170,29)"/><text x="33.2807%" y="1199.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (1 samples, 0.02%)</title><rect x="33.0307%" y="1173" width="0.0175%" height="15" fill="rgb(247,96,15)"/><text x="33.2807%" y="1183.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="33.0482%" y="1269" width="0.0175%" height="15" fill="rgb(211,210,7)"/><text x="33.2982%" y="1279.50"></text></g><g><title>model::rho_types::Par::append_expr (4 samples, 0.07%)</title><rect x="33.0482%" y="1285" width="0.0698%" height="15" fill="rgb(240,88,50)"/><text x="33.2982%" y="1295.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.05%)</title><rect x="33.0656%" y="1269" width="0.0524%" height="15" fill="rgb(209,229,26)"/><text x="33.3156%" y="1279.50"></text></g><g><title>core::ptr::write (3 samples, 0.05%)</title><rect x="33.0656%" y="1253" width="0.0524%" height="15" fill="rgb(210,68,23)"/><text x="33.3156%" y="1263.50"></text></g><g><title>[libc-2.31.so] (2 samples, 0.03%)</title><rect x="33.0831%" y="1237" width="0.0349%" height="15" fill="rgb(229,180,13)"/><text x="33.3331%" y="1247.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_par::&lt;impl rho_runtime::interpreter::reduce::Evaluator&lt;S&gt; for model::rho_types::Par&gt;::evaluate (235 samples, 4.10%)</title><rect x="29.0328%" y="1365" width="4.1027%" height="15" fill="rgb(236,53,44)"/><text x="29.2828%" y="1375.50">rho_..</text></g><g><title>rho_runtime::interpreter::reduce::eval_match::&lt;impl rho_runtime::interpreter::reduce::Evaluator&lt;S&gt; for model::rho_types::Match&gt;::evaluate (217 samples, 3.79%)</title><rect x="29.3471%" y="1349" width="3.7884%" height="15" fill="rgb(244,214,29)"/><text x="29.5971%" y="1359.50">rho_..</text></g><g><title>rho_runtime::interpreter::reduce::substitute::sub_par::&lt;impl rho_runtime::interpreter::reduce::substitute::Substitutable&lt;S&gt; for model::rho_types::Par&gt;::substitute (24 samples, 0.42%)</title><rect x="32.7165%" y="1333" width="0.4190%" height="15" fill="rgb(220,75,29)"/><text x="32.9665%" y="1343.50"></text></g><g><title>rho_runtime::interpreter::reduce::substitute::sub_par::&lt;impl rho_runtime::interpreter::reduce::substitute::Substitutable&lt;S&gt; for model::rho_types::Par&gt;::substitute_no_sort (24 samples, 0.42%)</title><rect x="32.7165%" y="1317" width="0.4190%" height="15" fill="rgb(214,183,37)"/><text x="32.9665%" y="1327.50"></text></g><g><title>rho_runtime::interpreter::reduce::substitute::sub_par::substitute_expressions_in_par (24 samples, 0.42%)</title><rect x="32.7165%" y="1301" width="0.4190%" height="15" fill="rgb(239,117,29)"/><text x="32.9665%" y="1311.50"></text></g><g><title>rho_runtime::interpreter::reduce::substitute::sub_expr::&lt;impl rho_runtime::interpreter::reduce::substitute::Substitutable&lt;S&gt; for model::rho_types::Expr&gt;::substitute_no_sort (1 samples, 0.02%)</title><rect x="33.1180%" y="1285" width="0.0175%" height="15" fill="rgb(237,171,35)"/><text x="33.3680%" y="1295.50"></text></g><g><title>rho_runtime::interpreter::reduce::substitute::sub_expr::dispatch (1 samples, 0.02%)</title><rect x="33.1180%" y="1269" width="0.0175%" height="15" fill="rgb(229,178,53)"/><text x="33.3680%" y="1279.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="33.1704%" y="1301" width="0.0349%" height="15" fill="rgb(210,102,19)"/><text x="33.4204%" y="1311.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.26%)</title><rect x="33.1704%" y="1317" width="0.2619%" height="15" fill="rgb(235,127,22)"/><text x="33.4204%" y="1327.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (13 samples, 0.23%)</title><rect x="33.2053%" y="1301" width="0.2270%" height="15" fill="rgb(244,31,31)"/><text x="33.4553%" y="1311.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (13 samples, 0.23%)</title><rect x="33.2053%" y="1285" width="0.2270%" height="15" fill="rgb(231,43,21)"/><text x="33.4553%" y="1295.50"></text></g><g><title>core::ptr::read (13 samples, 0.23%)</title><rect x="33.2053%" y="1269" width="0.2270%" height="15" fill="rgb(217,131,35)"/><text x="33.4553%" y="1279.50"></text></g><g><title>[libc-2.31.so] (9 samples, 0.16%)</title><rect x="33.2751%" y="1253" width="0.1571%" height="15" fill="rgb(221,149,4)"/><text x="33.5251%" y="1263.50"></text></g><g><title>core::ptr::write (2 samples, 0.03%)</title><rect x="33.4323%" y="1317" width="0.0349%" height="15" fill="rgb(232,170,28)"/><text x="33.6823%" y="1327.50"></text></g><g><title>[libc-2.31.so] (2 samples, 0.03%)</title><rect x="33.4323%" y="1301" width="0.0349%" height="15" fill="rgb(238,56,10)"/><text x="33.6823%" y="1311.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::reserve (1 samples, 0.02%)</title><rect x="33.4672%" y="1317" width="0.0175%" height="15" fill="rgb(235,196,14)"/><text x="33.7172%" y="1327.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::try_reserve (1 samples, 0.02%)</title><rect x="33.4672%" y="1301" width="0.0175%" height="15" fill="rgb(216,45,48)"/><text x="33.7172%" y="1311.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple_mut (1 samples, 0.02%)</title><rect x="33.4672%" y="1285" width="0.0175%" height="15" fill="rgb(238,213,17)"/><text x="33.7172%" y="1295.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (20 samples, 0.35%)</title><rect x="33.1529%" y="1333" width="0.3492%" height="15" fill="rgb(212,13,2)"/><text x="33.4029%" y="1343.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple_mut (1 samples, 0.02%)</title><rect x="33.4846%" y="1317" width="0.0175%" height="15" fill="rgb(240,114,20)"/><text x="33.7346%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place&lt;smallvec::IntoIter&lt;[model::rho_types::Expr: 5]&gt;&gt; (1 samples, 0.02%)</title><rect x="33.5021%" y="1333" width="0.0175%" height="15" fill="rgb(228,41,40)"/><text x="33.7521%" y="1343.50"></text></g><g><title>core::ptr::drop_in_place&lt;smallvec::SmallVec&lt;[model::rho_types::Expr: 5]&gt;&gt; (1 samples, 0.02%)</title><rect x="33.5021%" y="1317" width="0.0175%" height="15" fill="rgb(244,132,35)"/><text x="33.7521%" y="1327.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="33.5021%" y="1301" width="0.0175%" height="15" fill="rgb(253,189,4)"/><text x="33.7521%" y="1311.50"></text></g><g><title>&lt;model::locally_free::ExprInstanceLocallyFree as model::locally_free::HasLocallyFree&lt;model::rho_types::expr::ExprInstance&gt;&gt;::locally_free (1 samples, 0.02%)</title><rect x="33.5196%" y="1317" width="0.0175%" height="15" fill="rgb(224,37,19)"/><text x="33.7696%" y="1327.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="33.5370%" y="1317" width="0.0175%" height="15" fill="rgb(235,223,18)"/><text x="33.7870%" y="1327.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_send::&lt;impl rho_runtime::interpreter::reduce::Evaluator&lt;S&gt; for model::rho_types::Send&gt;::evaluate (26 samples, 0.45%)</title><rect x="33.1355%" y="1365" width="0.4539%" height="15" fill="rgb(235,163,25)"/><text x="33.3855%" y="1375.50"></text></g><g><title>&lt;model::rho_types::Par as rho_runtime::interpreter::reduce::eval_expression::ParExpressionEvaluator&lt;S&gt;&gt;::evaluate_nested_expressions (25 samples, 0.44%)</title><rect x="33.1529%" y="1349" width="0.4365%" height="15" fill="rgb(217,145,28)"/><text x="33.4029%" y="1359.50"></text></g><g><title>model::rho_types::Par::append_expr (4 samples, 0.07%)</title><rect x="33.5196%" y="1333" width="0.0698%" height="15" fill="rgb(223,223,32)"/><text x="33.7696%" y="1343.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.03%)</title><rect x="33.5545%" y="1317" width="0.0349%" height="15" fill="rgb(227,189,39)"/><text x="33.8045%" y="1327.50"></text></g><g><title>core::ptr::write (2 samples, 0.03%)</title><rect x="33.5545%" y="1301" width="0.0349%" height="15" fill="rgb(248,10,22)"/><text x="33.8045%" y="1311.50"></text></g><g><title>[libc-2.31.so] (2 samples, 0.03%)</title><rect x="33.5545%" y="1285" width="0.0349%" height="15" fill="rgb(248,46,39)"/><text x="33.8045%" y="1295.50"></text></g><g><title>rho_runtime::interpreter::reduce::substitute::sub_par::&lt;impl rho_runtime::interpreter::reduce::substitute::Substitutable&lt;S&gt; for model::rho_types::Par&gt;::substitute_no_sort (2 samples, 0.03%)</title><rect x="33.5894%" y="1365" width="0.0349%" height="15" fill="rgb(248,113,48)"/><text x="33.8394%" y="1375.50"></text></g><g><title>rho_runtime::interpreter::reduce::substitute::sub_par::substitute_expressions_in_par (2 samples, 0.03%)</title><rect x="33.6243%" y="1365" width="0.0349%" height="15" fill="rgb(245,16,25)"/><text x="33.8743%" y="1375.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="33.6767%" y="1317" width="0.0175%" height="15" fill="rgb(249,152,16)"/><text x="33.9267%" y="1327.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.03%)</title><rect x="33.7640%" y="1077" width="0.0349%" height="15" fill="rgb(250,16,1)"/><text x="34.0140%" y="1087.50"></text></g><g><title>&lt;model::rho_types::Expr as core::clone::Clone&gt;::clone (9 samples, 0.16%)</title><rect x="33.7989%" y="1029" width="0.1571%" height="15" fill="rgb(249,138,3)"/><text x="34.0489%" y="1039.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.10%)</title><rect x="33.8513%" y="1013" width="0.1047%" height="15" fill="rgb(227,71,41)"/><text x="34.1013%" y="1023.50"></text></g><g><title>[libc-2.31.so] (4 samples, 0.07%)</title><rect x="33.8862%" y="997" width="0.0698%" height="15" fill="rgb(209,184,23)"/><text x="34.1362%" y="1007.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (20 samples, 0.35%)</title><rect x="34.0608%" y="805" width="0.3492%" height="15" fill="rgb(223,215,31)"/><text x="34.3108%" y="815.50"></text></g><g><title>[libc-2.31.so] (2 samples, 0.03%)</title><rect x="34.3750%" y="789" width="0.0349%" height="15" fill="rgb(210,146,28)"/><text x="34.6250%" y="799.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (25 samples, 0.44%)</title><rect x="33.9909%" y="853" width="0.4365%" height="15" fill="rgb(209,183,41)"/><text x="34.2409%" y="863.50"></text></g><g><title>&lt;model::rho_types::expr::ExprInstance as core::clone::Clone&gt;::clone (25 samples, 0.44%)</title><rect x="33.9909%" y="837" width="0.4365%" height="15" fill="rgb(209,224,45)"/><text x="34.2409%" y="847.50"></text></g><g><title>&lt;model::rho_types::EPlus as core::clone::Clone&gt;::clone (22 samples, 0.38%)</title><rect x="34.0433%" y="821" width="0.3841%" height="15" fill="rgb(224,209,51)"/><text x="34.2933%" y="831.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="34.4099%" y="805" width="0.0175%" height="15" fill="rgb(223,17,39)"/><text x="34.6599%" y="815.50"></text></g><g><title>&lt;model::rho_types::Expr as core::clone::Clone&gt;::clone (28 samples, 0.49%)</title><rect x="33.9735%" y="869" width="0.4888%" height="15" fill="rgb(234,204,37)"/><text x="34.2235%" y="879.50"></text></g><g><title>[libc-2.31.so] (2 samples, 0.03%)</title><rect x="34.4274%" y="853" width="0.0349%" height="15" fill="rgb(236,120,5)"/><text x="34.6774%" y="863.50"></text></g><g><title>_mi_page_free_collect (1 samples, 0.02%)</title><rect x="34.5147%" y="693" width="0.0175%" height="15" fill="rgb(248,97,27)"/><text x="34.7647%" y="703.50"></text></g><g><title>_mi_page_thread_free_collect (1 samples, 0.02%)</title><rect x="34.5147%" y="677" width="0.0175%" height="15" fill="rgb(240,66,17)"/><text x="34.7647%" y="687.50"></text></g><g><title>mi_block_next (1 samples, 0.02%)</title><rect x="34.5147%" y="661" width="0.0175%" height="15" fill="rgb(210,79,3)"/><text x="34.7647%" y="671.50"></text></g><g><title>mi_block_nextx (1 samples, 0.02%)</title><rect x="34.5147%" y="645" width="0.0175%" height="15" fill="rgb(214,176,27)"/><text x="34.7647%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.07%)</title><rect x="34.4797%" y="821" width="0.0698%" height="15" fill="rgb(235,185,3)"/><text x="34.7297%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.07%)</title><rect x="34.4797%" y="805" width="0.0698%" height="15" fill="rgb(227,24,12)"/><text x="34.7297%" y="815.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.05%)</title><rect x="34.4972%" y="789" width="0.0524%" height="15" fill="rgb(252,169,48)"/><text x="34.7472%" y="799.50"></text></g><g><title>__rg_alloc (3 samples, 0.05%)</title><rect x="34.4972%" y="773" width="0.0524%" height="15" fill="rgb(212,65,1)"/><text x="34.7472%" y="783.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (3 samples, 0.05%)</title><rect x="34.4972%" y="757" width="0.0524%" height="15" fill="rgb(242,39,24)"/><text x="34.7472%" y="767.50"></text></g><g><title>_mi_malloc_generic (3 samples, 0.05%)</title><rect x="34.4972%" y="741" width="0.0524%" height="15" fill="rgb(249,32,23)"/><text x="34.7472%" y="751.50"></text></g><g><title>_mi_heap_delayed_free (3 samples, 0.05%)</title><rect x="34.4972%" y="725" width="0.0524%" height="15" fill="rgb(251,195,23)"/><text x="34.7472%" y="735.50"></text></g><g><title>_mi_free_delayed_block (2 samples, 0.03%)</title><rect x="34.5147%" y="709" width="0.0349%" height="15" fill="rgb(236,174,8)"/><text x="34.7647%" y="719.50"></text></g><g><title>_mi_page_use_delayed_free (1 samples, 0.02%)</title><rect x="34.5321%" y="693" width="0.0175%" height="15" fill="rgb(220,197,8)"/><text x="34.7821%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.12%)</title><rect x="34.4623%" y="869" width="0.1222%" height="15" fill="rgb(240,108,37)"/><text x="34.7123%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.12%)</title><rect x="34.4623%" y="853" width="0.1222%" height="15" fill="rgb(232,176,24)"/><text x="34.7123%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.12%)</title><rect x="34.4623%" y="837" width="0.1222%" height="15" fill="rgb(243,35,29)"/><text x="34.7123%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity_from_bytes (2 samples, 0.03%)</title><rect x="34.5496%" y="821" width="0.0349%" height="15" fill="rgb(210,37,18)"/><text x="34.7996%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (36 samples, 0.63%)</title><rect x="33.9735%" y="933" width="0.6285%" height="15" fill="rgb(224,184,40)"/><text x="34.2235%" y="943.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (36 samples, 0.63%)</title><rect x="33.9735%" y="917" width="0.6285%" height="15" fill="rgb(236,39,29)"/><text x="34.2235%" y="927.50"></text></g><g><title>alloc::slice::hack::to_vec (36 samples, 0.63%)</title><rect x="33.9735%" y="901" width="0.6285%" height="15" fill="rgb(232,48,39)"/><text x="34.2235%" y="911.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (36 samples, 0.63%)</title><rect x="33.9735%" y="885" width="0.6285%" height="15" fill="rgb(236,34,42)"/><text x="34.2235%" y="895.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (1 samples, 0.02%)</title><rect x="34.5845%" y="869" width="0.0175%" height="15" fill="rgb(243,106,37)"/><text x="34.8345%" y="879.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (38 samples, 0.66%)</title><rect x="33.9560%" y="949" width="0.6634%" height="15" fill="rgb(218,96,6)"/><text x="34.2060%" y="959.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="34.6020%" y="933" width="0.0175%" height="15" fill="rgb(235,130,12)"/><text x="34.8520%" y="943.50"></text></g><g><title>&lt;model::bitset::BitSet&lt;B&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="34.6020%" y="917" width="0.0175%" height="15" fill="rgb(231,95,0)"/><text x="34.8520%" y="927.50"></text></g><g><title>&lt;bit_vec::BitVec&lt;B&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="34.6020%" y="901" width="0.0175%" height="15" fill="rgb(228,12,23)"/><text x="34.8520%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="34.6020%" y="885" width="0.0175%" height="15" fill="rgb(216,12,1)"/><text x="34.8520%" y="895.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.02%)</title><rect x="34.6020%" y="869" width="0.0175%" height="15" fill="rgb(219,59,3)"/><text x="34.8520%" y="879.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="34.6020%" y="853" width="0.0175%" height="15" fill="rgb(215,208,46)"/><text x="34.8520%" y="863.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.02%)</title><rect x="34.6020%" y="837" width="0.0175%" height="15" fill="rgb(254,224,29)"/><text x="34.8520%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="34.6020%" y="821" width="0.0175%" height="15" fill="rgb(232,14,29)"/><text x="34.8520%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="34.6020%" y="805" width="0.0175%" height="15" fill="rgb(208,45,52)"/><text x="34.8520%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="34.6020%" y="789" width="0.0175%" height="15" fill="rgb(234,191,28)"/><text x="34.8520%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="34.6020%" y="773" width="0.0175%" height="15" fill="rgb(244,67,43)"/><text x="34.8520%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="34.6020%" y="757" width="0.0175%" height="15" fill="rgb(236,189,24)"/><text x="34.8520%" y="767.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="34.6020%" y="741" width="0.0175%" height="15" fill="rgb(239,214,33)"/><text x="34.8520%" y="751.50"></text></g><g><title>__rg_alloc (1 samples, 0.02%)</title><rect x="34.6020%" y="725" width="0.0175%" height="15" fill="rgb(226,176,41)"/><text x="34.8520%" y="735.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.02%)</title><rect x="34.6020%" y="709" width="0.0175%" height="15" fill="rgb(248,47,8)"/><text x="34.8520%" y="719.50"></text></g><g><title>mi_malloc (1 samples, 0.02%)</title><rect x="34.6020%" y="693" width="0.0175%" height="15" fill="rgb(218,81,44)"/><text x="34.8520%" y="703.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.02%)</title><rect x="34.6020%" y="677" width="0.0175%" height="15" fill="rgb(213,98,6)"/><text x="34.8520%" y="687.50"></text></g><g><title>mi_heap_malloc_small (1 samples, 0.02%)</title><rect x="34.6020%" y="661" width="0.0175%" height="15" fill="rgb(222,85,22)"/><text x="34.8520%" y="671.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.02%)</title><rect x="34.6020%" y="645" width="0.0175%" height="15" fill="rgb(239,46,39)"/><text x="34.8520%" y="655.50"></text></g><g><title>_mi_malloc_generic (2 samples, 0.03%)</title><rect x="34.6369%" y="821" width="0.0349%" height="15" fill="rgb(237,12,29)"/><text x="34.8869%" y="831.50"></text></g><g><title>_mi_heap_delayed_free (2 samples, 0.03%)</title><rect x="34.6369%" y="805" width="0.0349%" height="15" fill="rgb(214,77,8)"/><text x="34.8869%" y="815.50"></text></g><g><title>_mi_free_delayed_block (1 samples, 0.02%)</title><rect x="34.6543%" y="789" width="0.0175%" height="15" fill="rgb(217,168,37)"/><text x="34.9043%" y="799.50"></text></g><g><title>_mi_page_free_collect (1 samples, 0.02%)</title><rect x="34.6543%" y="773" width="0.0175%" height="15" fill="rgb(221,217,23)"/><text x="34.9043%" y="783.50"></text></g><g><title>_mi_page_thread_free_collect (1 samples, 0.02%)</title><rect x="34.6543%" y="757" width="0.0175%" height="15" fill="rgb(243,229,36)"/><text x="34.9043%" y="767.50"></text></g><g><title>mi_block_next (1 samples, 0.02%)</title><rect x="34.6543%" y="741" width="0.0175%" height="15" fill="rgb(251,163,40)"/><text x="34.9043%" y="751.50"></text></g><g><title>mi_block_nextx (1 samples, 0.02%)</title><rect x="34.6543%" y="725" width="0.0175%" height="15" fill="rgb(237,222,12)"/><text x="34.9043%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.09%)</title><rect x="34.6194%" y="949" width="0.0873%" height="15" fill="rgb(248,132,6)"/><text x="34.8694%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.09%)</title><rect x="34.6194%" y="933" width="0.0873%" height="15" fill="rgb(227,167,50)"/><text x="34.8694%" y="943.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.09%)</title><rect x="34.6194%" y="917" width="0.0873%" height="15" fill="rgb(242,84,37)"/><text x="34.8694%" y="927.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.09%)</title><rect x="34.6194%" y="901" width="0.0873%" height="15" fill="rgb(212,4,50)"/><text x="34.8694%" y="911.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.09%)</title><rect x="34.6194%" y="885" width="0.0873%" height="15" fill="rgb(230,228,32)"/><text x="34.8694%" y="895.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.09%)</title><rect x="34.6194%" y="869" width="0.0873%" height="15" fill="rgb(248,217,23)"/><text x="34.8694%" y="879.50"></text></g><g><title>__rg_alloc (5 samples, 0.09%)</title><rect x="34.6194%" y="853" width="0.0873%" height="15" fill="rgb(238,197,32)"/><text x="34.8694%" y="863.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (5 samples, 0.09%)</title><rect x="34.6194%" y="837" width="0.0873%" height="15" fill="rgb(236,106,1)"/><text x="34.8694%" y="847.50"></text></g><g><title>mi_malloc (2 samples, 0.03%)</title><rect x="34.6718%" y="821" width="0.0349%" height="15" fill="rgb(219,228,13)"/><text x="34.9218%" y="831.50"></text></g><g><title>mi_heap_malloc (2 samples, 0.03%)</title><rect x="34.6718%" y="805" width="0.0349%" height="15" fill="rgb(238,30,35)"/><text x="34.9218%" y="815.50"></text></g><g><title>mi_heap_malloc_small (2 samples, 0.03%)</title><rect x="34.6718%" y="789" width="0.0349%" height="15" fill="rgb(236,70,23)"/><text x="34.9218%" y="799.50"></text></g><g><title>_mi_page_malloc (2 samples, 0.03%)</title><rect x="34.6718%" y="773" width="0.0349%" height="15" fill="rgb(249,104,48)"/><text x="34.9218%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (52 samples, 0.91%)</title><rect x="33.9560%" y="1013" width="0.9078%" height="15" fill="rgb(254,117,50)"/><text x="34.2060%" y="1023.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (52 samples, 0.91%)</title><rect x="33.9560%" y="997" width="0.9078%" height="15" fill="rgb(223,152,4)"/><text x="34.2060%" y="1007.50"></text></g><g><title>alloc::slice::hack::to_vec (52 samples, 0.91%)</title><rect x="33.9560%" y="981" width="0.9078%" height="15" fill="rgb(245,6,2)"/><text x="34.2060%" y="991.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (52 samples, 0.91%)</title><rect x="33.9560%" y="965" width="0.9078%" height="15" fill="rgb(249,150,24)"/><text x="34.2060%" y="975.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (9 samples, 0.16%)</title><rect x="34.7067%" y="949" width="0.1571%" height="15" fill="rgb(228,185,42)"/><text x="34.9567%" y="959.50"></text></g><g><title>[libc-2.31.so] (9 samples, 0.16%)</title><rect x="34.7067%" y="933" width="0.1571%" height="15" fill="rgb(226,39,33)"/><text x="34.9567%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="34.8638%" y="901" width="0.0175%" height="15" fill="rgb(221,166,19)"/><text x="35.1138%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="34.8638%" y="885" width="0.0175%" height="15" fill="rgb(209,109,2)"/><text x="35.1138%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="34.8638%" y="869" width="0.0175%" height="15" fill="rgb(252,216,26)"/><text x="35.1138%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="34.8638%" y="853" width="0.0175%" height="15" fill="rgb(227,173,36)"/><text x="35.1138%" y="863.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="34.8638%" y="837" width="0.0175%" height="15" fill="rgb(209,90,7)"/><text x="35.1138%" y="847.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="34.8638%" y="821" width="0.0175%" height="15" fill="rgb(250,194,11)"/><text x="35.1138%" y="831.50"></text></g><g><title>__rg_alloc (1 samples, 0.02%)</title><rect x="34.8638%" y="805" width="0.0175%" height="15" fill="rgb(220,72,50)"/><text x="35.1138%" y="815.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.02%)</title><rect x="34.8638%" y="789" width="0.0175%" height="15" fill="rgb(222,106,48)"/><text x="35.1138%" y="799.50"></text></g><g><title>mi_malloc (1 samples, 0.02%)</title><rect x="34.8638%" y="773" width="0.0175%" height="15" fill="rgb(216,220,45)"/><text x="35.1138%" y="783.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.02%)</title><rect x="34.8638%" y="757" width="0.0175%" height="15" fill="rgb(234,112,18)"/><text x="35.1138%" y="767.50"></text></g><g><title>mi_heap_malloc_small (1 samples, 0.02%)</title><rect x="34.8638%" y="741" width="0.0175%" height="15" fill="rgb(206,179,9)"/><text x="35.1138%" y="751.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.02%)</title><rect x="34.8638%" y="725" width="0.0175%" height="15" fill="rgb(215,115,40)"/><text x="35.1138%" y="735.50"></text></g><g><title>&lt;model::bitset::BitSet&lt;B&gt; as core::clone::Clone&gt;::clone (4 samples, 0.07%)</title><rect x="34.8638%" y="997" width="0.0698%" height="15" fill="rgb(222,69,34)"/><text x="35.1138%" y="1007.50"></text></g><g><title>&lt;bit_vec::BitVec&lt;B&gt; as core::clone::Clone&gt;::clone (4 samples, 0.07%)</title><rect x="34.8638%" y="981" width="0.0698%" height="15" fill="rgb(209,161,10)"/><text x="35.1138%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.07%)</title><rect x="34.8638%" y="965" width="0.0698%" height="15" fill="rgb(217,6,38)"/><text x="35.1138%" y="975.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.07%)</title><rect x="34.8638%" y="949" width="0.0698%" height="15" fill="rgb(229,229,48)"/><text x="35.1138%" y="959.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.07%)</title><rect x="34.8638%" y="933" width="0.0698%" height="15" fill="rgb(225,21,28)"/><text x="35.1138%" y="943.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.07%)</title><rect x="34.8638%" y="917" width="0.0698%" height="15" fill="rgb(206,33,13)"/><text x="35.1138%" y="927.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.05%)</title><rect x="34.8813%" y="901" width="0.0524%" height="15" fill="rgb(242,178,17)"/><text x="35.1313%" y="911.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.05%)</title><rect x="34.8813%" y="885" width="0.0524%" height="15" fill="rgb(220,162,5)"/><text x="35.1313%" y="895.50"></text></g><g><title>[libc-2.31.so] (2 samples, 0.03%)</title><rect x="34.8987%" y="869" width="0.0349%" height="15" fill="rgb(210,33,43)"/><text x="35.1487%" y="879.50"></text></g><g><title>&lt;model::rho_types::GUnforgeable as core::clone::Clone&gt;::clone (8 samples, 0.14%)</title><rect x="34.9686%" y="917" width="0.1397%" height="15" fill="rgb(216,116,54)"/><text x="35.2186%" y="927.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (7 samples, 0.12%)</title><rect x="34.9860%" y="901" width="0.1222%" height="15" fill="rgb(249,92,24)"/><text x="35.2360%" y="911.50"></text></g><g><title>&lt;model::rho_types::g_unforgeable::UnfInstance as core::clone::Clone&gt;::clone (7 samples, 0.12%)</title><rect x="34.9860%" y="885" width="0.1222%" height="15" fill="rgb(231,189,14)"/><text x="35.2360%" y="895.50"></text></g><g><title>&lt;model::rho_types::GPrivate as core::clone::Clone&gt;::clone (7 samples, 0.12%)</title><rect x="34.9860%" y="869" width="0.1222%" height="15" fill="rgb(230,8,41)"/><text x="35.2360%" y="879.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (7 samples, 0.12%)</title><rect x="34.9860%" y="853" width="0.1222%" height="15" fill="rgb(249,7,27)"/><text x="35.2360%" y="863.50"></text></g><g><title>bytes::bytes::shared_clone (7 samples, 0.12%)</title><rect x="34.9860%" y="837" width="0.1222%" height="15" fill="rgb(232,86,5)"/><text x="35.2360%" y="847.50"></text></g><g><title>bytes::bytes::shallow_clone_arc (7 samples, 0.12%)</title><rect x="34.9860%" y="821" width="0.1222%" height="15" fill="rgb(224,175,18)"/><text x="35.2360%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (7 samples, 0.12%)</title><rect x="34.9860%" y="805" width="0.1222%" height="15" fill="rgb(220,129,12)"/><text x="35.2360%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_add (7 samples, 0.12%)</title><rect x="34.9860%" y="789" width="0.1222%" height="15" fill="rgb(210,19,36)"/><text x="35.2360%" y="799.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.02%)</title><rect x="35.1257%" y="789" width="0.0175%" height="15" fill="rgb(219,96,14)"/><text x="35.3757%" y="799.50"></text></g><g><title>_mi_heap_delayed_free (1 samples, 0.02%)</title><rect x="35.1257%" y="773" width="0.0175%" height="15" fill="rgb(249,106,1)"/><text x="35.3757%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.12%)</title><rect x="35.1257%" y="869" width="0.1222%" height="15" fill="rgb(249,155,20)"/><text x="35.3757%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.12%)</title><rect x="35.1257%" y="853" width="0.1222%" height="15" fill="rgb(244,168,9)"/><text x="35.3757%" y="863.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.12%)</title><rect x="35.1257%" y="837" width="0.1222%" height="15" fill="rgb(216,23,50)"/><text x="35.3757%" y="847.50"></text></g><g><title>__rg_alloc (7 samples, 0.12%)</title><rect x="35.1257%" y="821" width="0.1222%" height="15" fill="rgb(224,219,20)"/><text x="35.3757%" y="831.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (7 samples, 0.12%)</title><rect x="35.1257%" y="805" width="0.1222%" height="15" fill="rgb(222,156,15)"/><text x="35.3757%" y="815.50"></text></g><g><title>mi_malloc (6 samples, 0.10%)</title><rect x="35.1432%" y="789" width="0.1047%" height="15" fill="rgb(231,97,17)"/><text x="35.3932%" y="799.50"></text></g><g><title>mi_heap_malloc (6 samples, 0.10%)</title><rect x="35.1432%" y="773" width="0.1047%" height="15" fill="rgb(218,70,48)"/><text x="35.3932%" y="783.50"></text></g><g><title>mi_heap_malloc_small (6 samples, 0.10%)</title><rect x="35.1432%" y="757" width="0.1047%" height="15" fill="rgb(212,196,52)"/><text x="35.3932%" y="767.50"></text></g><g><title>_mi_page_malloc (6 samples, 0.10%)</title><rect x="35.1432%" y="741" width="0.1047%" height="15" fill="rgb(243,203,18)"/><text x="35.3932%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity_from_bytes (1 samples, 0.02%)</title><rect x="35.2479%" y="869" width="0.0175%" height="15" fill="rgb(252,125,41)"/><text x="35.4979%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (12 samples, 0.21%)</title><rect x="35.1082%" y="917" width="0.2095%" height="15" fill="rgb(223,180,33)"/><text x="35.3582%" y="927.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (12 samples, 0.21%)</title><rect x="35.1082%" y="901" width="0.2095%" height="15" fill="rgb(254,159,46)"/><text x="35.3582%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (12 samples, 0.21%)</title><rect x="35.1082%" y="885" width="0.2095%" height="15" fill="rgb(254,38,10)"/><text x="35.3582%" y="895.50"></text></g><g><title>core::alloc::layout::Layout::array (3 samples, 0.05%)</title><rect x="35.2654%" y="869" width="0.0524%" height="15" fill="rgb(208,217,32)"/><text x="35.5154%" y="879.50"></text></g><g><title>core::alloc::layout::Layout::repeat (3 samples, 0.05%)</title><rect x="35.2654%" y="853" width="0.0524%" height="15" fill="rgb(221,120,13)"/><text x="35.5154%" y="863.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (1 samples, 0.02%)</title><rect x="35.3003%" y="837" width="0.0175%" height="15" fill="rgb(246,54,52)"/><text x="35.5503%" y="847.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (1 samples, 0.02%)</title><rect x="35.3003%" y="821" width="0.0175%" height="15" fill="rgb(242,34,25)"/><text x="35.5503%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (21 samples, 0.37%)</title><rect x="34.9686%" y="981" width="0.3666%" height="15" fill="rgb(247,209,9)"/><text x="35.2186%" y="991.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (21 samples, 0.37%)</title><rect x="34.9686%" y="965" width="0.3666%" height="15" fill="rgb(228,71,26)"/><text x="35.2186%" y="975.50"></text></g><g><title>alloc::slice::hack::to_vec (21 samples, 0.37%)</title><rect x="34.9686%" y="949" width="0.3666%" height="15" fill="rgb(222,145,49)"/><text x="35.2186%" y="959.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (21 samples, 0.37%)</title><rect x="34.9686%" y="933" width="0.3666%" height="15" fill="rgb(218,121,17)"/><text x="35.2186%" y="943.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (1 samples, 0.02%)</title><rect x="35.3177%" y="917" width="0.0175%" height="15" fill="rgb(244,50,7)"/><text x="35.5677%" y="927.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (24 samples, 0.42%)</title><rect x="34.9337%" y="997" width="0.4190%" height="15" fill="rgb(246,229,37)"/><text x="35.1837%" y="1007.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="35.3352%" y="981" width="0.0175%" height="15" fill="rgb(225,18,5)"/><text x="35.5852%" y="991.50"></text></g><g><title>&lt;model::bitset::BitSet&lt;B&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="35.3352%" y="965" width="0.0175%" height="15" fill="rgb(213,204,8)"/><text x="35.5852%" y="975.50"></text></g><g><title>&lt;bit_vec::BitVec&lt;B&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="35.3352%" y="949" width="0.0175%" height="15" fill="rgb(238,103,6)"/><text x="35.5852%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="35.3352%" y="933" width="0.0175%" height="15" fill="rgb(222,25,35)"/><text x="35.5852%" y="943.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.02%)</title><rect x="35.3352%" y="917" width="0.0175%" height="15" fill="rgb(213,203,35)"/><text x="35.5852%" y="927.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="35.3352%" y="901" width="0.0175%" height="15" fill="rgb(221,79,53)"/><text x="35.5852%" y="911.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.02%)</title><rect x="35.3352%" y="885" width="0.0175%" height="15" fill="rgb(243,200,35)"/><text x="35.5852%" y="895.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.02%)</title><rect x="35.3352%" y="869" width="0.0175%" height="15" fill="rgb(248,60,25)"/><text x="35.5852%" y="879.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="35.3352%" y="853" width="0.0175%" height="15" fill="rgb(227,53,46)"/><text x="35.5852%" y="863.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="35.3352%" y="837" width="0.0175%" height="15" fill="rgb(216,120,32)"/><text x="35.5852%" y="847.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (29 samples, 0.51%)</title><rect x="34.8638%" y="1013" width="0.5063%" height="15" fill="rgb(220,134,1)"/><text x="35.1138%" y="1023.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="35.3527%" y="997" width="0.0175%" height="15" fill="rgb(237,168,5)"/><text x="35.6027%" y="1007.50"></text></g><g><title>&lt;model::rho_types::Send as core::clone::Clone&gt;::clone (82 samples, 1.43%)</title><rect x="33.9560%" y="1029" width="1.4316%" height="15" fill="rgb(231,100,33)"/><text x="34.2060%" y="1039.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="35.3701%" y="1013" width="0.0175%" height="15" fill="rgb(236,177,47)"/><text x="35.6201%" y="1023.50"></text></g><g><title>_mi_malloc_generic (6 samples, 0.10%)</title><rect x="35.5098%" y="901" width="0.1047%" height="15" fill="rgb(235,7,49)"/><text x="35.7598%" y="911.50"></text></g><g><title>_mi_heap_delayed_free (6 samples, 0.10%)</title><rect x="35.5098%" y="885" width="0.1047%" height="15" fill="rgb(232,119,22)"/><text x="35.7598%" y="895.50"></text></g><g><title>_mi_free_delayed_block (3 samples, 0.05%)</title><rect x="35.5622%" y="869" width="0.0524%" height="15" fill="rgb(254,73,53)"/><text x="35.8122%" y="879.50"></text></g><g><title>_mi_page_free_collect (2 samples, 0.03%)</title><rect x="35.5796%" y="853" width="0.0349%" height="15" fill="rgb(251,35,20)"/><text x="35.8296%" y="863.50"></text></g><g><title>_mi_page_thread_free_collect (2 samples, 0.03%)</title><rect x="35.5796%" y="837" width="0.0349%" height="15" fill="rgb(241,119,20)"/><text x="35.8296%" y="847.50"></text></g><g><title>mi_block_next (2 samples, 0.03%)</title><rect x="35.5796%" y="821" width="0.0349%" height="15" fill="rgb(207,102,14)"/><text x="35.8296%" y="831.50"></text></g><g><title>mi_block_nextx (2 samples, 0.03%)</title><rect x="35.5796%" y="805" width="0.0349%" height="15" fill="rgb(248,201,50)"/><text x="35.8296%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.21%)</title><rect x="35.4225%" y="981" width="0.2095%" height="15" fill="rgb(222,185,44)"/><text x="35.6725%" y="991.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.21%)</title><rect x="35.4225%" y="965" width="0.2095%" height="15" fill="rgb(218,107,18)"/><text x="35.6725%" y="975.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.12%)</title><rect x="35.5098%" y="949" width="0.1222%" height="15" fill="rgb(237,177,39)"/><text x="35.7598%" y="959.50"></text></g><g><title>__rg_alloc (7 samples, 0.12%)</title><rect x="35.5098%" y="933" width="0.1222%" height="15" fill="rgb(246,69,6)"/><text x="35.7598%" y="943.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (7 samples, 0.12%)</title><rect x="35.5098%" y="917" width="0.1222%" height="15" fill="rgb(234,208,37)"/><text x="35.7598%" y="927.50"></text></g><g><title>mi_malloc (1 samples, 0.02%)</title><rect x="35.6145%" y="901" width="0.0175%" height="15" fill="rgb(225,4,6)"/><text x="35.8645%" y="911.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.02%)</title><rect x="35.6145%" y="885" width="0.0175%" height="15" fill="rgb(233,45,0)"/><text x="35.8645%" y="895.50"></text></g><g><title>mi_heap_malloc_small (1 samples, 0.02%)</title><rect x="35.6145%" y="869" width="0.0175%" height="15" fill="rgb(226,136,5)"/><text x="35.8645%" y="879.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.02%)</title><rect x="35.6145%" y="853" width="0.0175%" height="15" fill="rgb(211,91,47)"/><text x="35.8645%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity_from_bytes (1 samples, 0.02%)</title><rect x="35.6320%" y="981" width="0.0175%" height="15" fill="rgb(242,88,51)"/><text x="35.8820%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (16 samples, 0.28%)</title><rect x="35.3876%" y="1029" width="0.2793%" height="15" fill="rgb(230,91,28)"/><text x="35.6376%" y="1039.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16 samples, 0.28%)</title><rect x="35.3876%" y="1013" width="0.2793%" height="15" fill="rgb(254,186,29)"/><text x="35.6376%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (16 samples, 0.28%)</title><rect x="35.3876%" y="997" width="0.2793%" height="15" fill="rgb(238,6,4)"/><text x="35.6376%" y="1007.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.02%)</title><rect x="35.6494%" y="981" width="0.0175%" height="15" fill="rgb(221,151,16)"/><text x="35.8994%" y="991.50"></text></g><g><title>core::alloc::layout::Layout::repeat (1 samples, 0.02%)</title><rect x="35.6494%" y="965" width="0.0175%" height="15" fill="rgb(251,143,52)"/><text x="35.8994%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (123 samples, 2.15%)</title><rect x="33.7640%" y="1093" width="2.1473%" height="15" fill="rgb(206,90,15)"/><text x="34.0140%" y="1103.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (121 samples, 2.11%)</title><rect x="33.7989%" y="1077" width="2.1124%" height="15" fill="rgb(218,35,8)"/><text x="34.0489%" y="1087.50">a..</text></g><g><title>alloc::slice::hack::to_vec (121 samples, 2.11%)</title><rect x="33.7989%" y="1061" width="2.1124%" height="15" fill="rgb(239,215,6)"/><text x="34.0489%" y="1071.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (121 samples, 2.11%)</title><rect x="33.7989%" y="1045" width="2.1124%" height="15" fill="rgb(245,116,39)"/><text x="34.0489%" y="1055.50">&lt;..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (14 samples, 0.24%)</title><rect x="35.6669%" y="1029" width="0.2444%" height="15" fill="rgb(242,65,28)"/><text x="35.9169%" y="1039.50"></text></g><g><title>[libc-2.31.so] (4 samples, 0.07%)</title><rect x="35.8415%" y="1013" width="0.0698%" height="15" fill="rgb(252,132,53)"/><text x="36.0915%" y="1023.50"></text></g><g><title>mi_get_default_heap (1 samples, 0.02%)</title><rect x="35.9113%" y="837" width="0.0175%" height="15" fill="rgb(224,159,50)"/><text x="36.1613%" y="847.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="35.9113%" y="1093" width="0.0349%" height="15" fill="rgb(224,93,4)"/><text x="36.1613%" y="1103.50"></text></g><g><title>&lt;model::bitset::BitSet&lt;B&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="35.9113%" y="1077" width="0.0349%" height="15" fill="rgb(208,81,34)"/><text x="36.1613%" y="1087.50"></text></g><g><title>&lt;bit_vec::BitVec&lt;B&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="35.9113%" y="1061" width="0.0349%" height="15" fill="rgb(233,92,54)"/><text x="36.1613%" y="1071.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="35.9113%" y="1045" width="0.0349%" height="15" fill="rgb(237,21,14)"/><text x="36.1613%" y="1055.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.03%)</title><rect x="35.9113%" y="1029" width="0.0349%" height="15" fill="rgb(249,128,51)"/><text x="36.1613%" y="1039.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.03%)</title><rect x="35.9113%" y="1013" width="0.0349%" height="15" fill="rgb(223,129,24)"/><text x="36.1613%" y="1023.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.03%)</title><rect x="35.9113%" y="997" width="0.0349%" height="15" fill="rgb(231,168,25)"/><text x="36.1613%" y="1007.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.03%)</title><rect x="35.9113%" y="981" width="0.0349%" height="15" fill="rgb(224,39,20)"/><text x="36.1613%" y="991.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.03%)</title><rect x="35.9113%" y="965" width="0.0349%" height="15" fill="rgb(225,152,53)"/><text x="36.1613%" y="975.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.03%)</title><rect x="35.9113%" y="949" width="0.0349%" height="15" fill="rgb(252,17,24)"/><text x="36.1613%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.03%)</title><rect x="35.9113%" y="933" width="0.0349%" height="15" fill="rgb(250,114,30)"/><text x="36.1613%" y="943.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.03%)</title><rect x="35.9113%" y="917" width="0.0349%" height="15" fill="rgb(229,5,4)"/><text x="36.1613%" y="927.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.03%)</title><rect x="35.9113%" y="901" width="0.0349%" height="15" fill="rgb(225,176,49)"/><text x="36.1613%" y="911.50"></text></g><g><title>__rg_alloc (2 samples, 0.03%)</title><rect x="35.9113%" y="885" width="0.0349%" height="15" fill="rgb(224,221,49)"/><text x="36.1613%" y="895.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (2 samples, 0.03%)</title><rect x="35.9113%" y="869" width="0.0349%" height="15" fill="rgb(253,169,27)"/><text x="36.1613%" y="879.50"></text></g><g><title>mi_malloc (2 samples, 0.03%)</title><rect x="35.9113%" y="853" width="0.0349%" height="15" fill="rgb(211,206,16)"/><text x="36.1613%" y="863.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.02%)</title><rect x="35.9288%" y="837" width="0.0175%" height="15" fill="rgb(244,87,35)"/><text x="36.1788%" y="847.50"></text></g><g><title>mi_heap_malloc_small (1 samples, 0.02%)</title><rect x="35.9288%" y="821" width="0.0175%" height="15" fill="rgb(246,28,10)"/><text x="36.1788%" y="831.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.02%)</title><rect x="35.9288%" y="805" width="0.0175%" height="15" fill="rgb(229,12,44)"/><text x="36.1788%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (130 samples, 2.27%)</title><rect x="33.6941%" y="1205" width="2.2696%" height="15" fill="rgb(210,145,37)"/><text x="33.9441%" y="1215.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (130 samples, 2.27%)</title><rect x="33.6941%" y="1189" width="2.2696%" height="15" fill="rgb(227,112,52)"/><text x="33.9441%" y="1199.50">a..</text></g><g><title>alloc::slice::hack::to_vec (130 samples, 2.27%)</title><rect x="33.6941%" y="1173" width="2.2696%" height="15" fill="rgb(238,155,34)"/><text x="33.9441%" y="1183.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (130 samples, 2.27%)</title><rect x="33.6941%" y="1157" width="2.2696%" height="15" fill="rgb(239,226,36)"/><text x="33.9441%" y="1167.50">&lt;..</text></g><g><title>&lt;model::rho_types::MatchCase as core::clone::Clone&gt;::clone (130 samples, 2.27%)</title><rect x="33.6941%" y="1141" width="2.2696%" height="15" fill="rgb(230,16,23)"/><text x="33.9441%" y="1151.50">&lt;..</text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (130 samples, 2.27%)</title><rect x="33.6941%" y="1125" width="2.2696%" height="15" fill="rgb(236,171,36)"/><text x="33.9441%" y="1135.50">&lt;..</text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (130 samples, 2.27%)</title><rect x="33.6941%" y="1109" width="2.2696%" height="15" fill="rgb(221,22,14)"/><text x="33.9441%" y="1119.50">&lt;..</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="35.9462%" y="1093" width="0.0175%" height="15" fill="rgb(242,43,11)"/><text x="36.1962%" y="1103.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="35.9462%" y="1077" width="0.0175%" height="15" fill="rgb(232,69,23)"/><text x="36.1962%" y="1087.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="35.9462%" y="1061" width="0.0175%" height="15" fill="rgb(216,180,54)"/><text x="36.1962%" y="1071.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.02%)</title><rect x="35.9462%" y="1045" width="0.0175%" height="15" fill="rgb(216,5,24)"/><text x="36.1962%" y="1055.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.02%)</title><rect x="35.9462%" y="1029" width="0.0175%" height="15" fill="rgb(225,89,9)"/><text x="36.1962%" y="1039.50"></text></g><g><title>tick_sched_timer (1 samples, 0.02%)</title><rect x="35.9462%" y="1013" width="0.0175%" height="15" fill="rgb(243,75,33)"/><text x="36.1962%" y="1023.50"></text></g><g><title>tick_sched_handle.isra.0 (1 samples, 0.02%)</title><rect x="35.9462%" y="997" width="0.0175%" height="15" fill="rgb(247,141,45)"/><text x="36.1962%" y="1007.50"></text></g><g><title>update_process_times (1 samples, 0.02%)</title><rect x="35.9462%" y="981" width="0.0175%" height="15" fill="rgb(232,177,36)"/><text x="36.1962%" y="991.50"></text></g><g><title>scheduler_tick (1 samples, 0.02%)</title><rect x="35.9462%" y="965" width="0.0175%" height="15" fill="rgb(219,125,36)"/><text x="36.1962%" y="975.50"></text></g><g><title>arch_scale_freq_tick (1 samples, 0.02%)</title><rect x="35.9462%" y="949" width="0.0175%" height="15" fill="rgb(227,94,9)"/><text x="36.1962%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="36.1034%" y="1013" width="0.0175%" height="15" fill="rgb(240,34,52)"/><text x="36.3534%" y="1023.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.02%)</title><rect x="36.1034%" y="997" width="0.0175%" height="15" fill="rgb(216,45,12)"/><text x="36.3534%" y="1007.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="36.1034%" y="981" width="0.0175%" height="15" fill="rgb(246,21,19)"/><text x="36.3534%" y="991.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.02%)</title><rect x="36.1034%" y="965" width="0.0175%" height="15" fill="rgb(213,98,42)"/><text x="36.3534%" y="975.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="36.1034%" y="949" width="0.0175%" height="15" fill="rgb(250,136,47)"/><text x="36.3534%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="36.1034%" y="933" width="0.0175%" height="15" fill="rgb(251,124,27)"/><text x="36.3534%" y="943.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="36.1034%" y="917" width="0.0175%" height="15" fill="rgb(229,180,14)"/><text x="36.3534%" y="927.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity_from_bytes (1 samples, 0.02%)</title><rect x="36.1034%" y="901" width="0.0175%" height="15" fill="rgb(245,216,25)"/><text x="36.3534%" y="911.50"></text></g><g><title>&lt;model::rho_types::expr::ExprInstance as core::clone::Clone&gt;::clone (10 samples, 0.17%)</title><rect x="35.9811%" y="1077" width="0.1746%" height="15" fill="rgb(251,43,5)"/><text x="36.2311%" y="1087.50"></text></g><g><title>&lt;model::rho_types::ELt as core::clone::Clone&gt;::clone (10 samples, 0.17%)</title><rect x="35.9811%" y="1061" width="0.1746%" height="15" fill="rgb(250,128,24)"/><text x="36.2311%" y="1071.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (8 samples, 0.14%)</title><rect x="36.0161%" y="1045" width="0.1397%" height="15" fill="rgb(217,117,27)"/><text x="36.2661%" y="1055.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (3 samples, 0.05%)</title><rect x="36.1034%" y="1029" width="0.0524%" height="15" fill="rgb(245,147,4)"/><text x="36.3534%" y="1039.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="36.1208%" y="1013" width="0.0349%" height="15" fill="rgb(242,201,35)"/><text x="36.3708%" y="1023.50"></text></g><g><title>&lt;model::bitset::BitSet&lt;B&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="36.1208%" y="997" width="0.0349%" height="15" fill="rgb(218,181,1)"/><text x="36.3708%" y="1007.50"></text></g><g><title>&lt;bit_vec::BitVec&lt;B&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="36.1208%" y="981" width="0.0349%" height="15" fill="rgb(222,6,29)"/><text x="36.3708%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="36.1208%" y="965" width="0.0349%" height="15" fill="rgb(208,186,3)"/><text x="36.3708%" y="975.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.03%)</title><rect x="36.1208%" y="949" width="0.0349%" height="15" fill="rgb(216,36,26)"/><text x="36.3708%" y="959.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.03%)</title><rect x="36.1208%" y="933" width="0.0349%" height="15" fill="rgb(248,201,23)"/><text x="36.3708%" y="943.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.03%)</title><rect x="36.1208%" y="917" width="0.0349%" height="15" fill="rgb(251,170,31)"/><text x="36.3708%" y="927.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.03%)</title><rect x="36.1208%" y="901" width="0.0349%" height="15" fill="rgb(207,110,25)"/><text x="36.3708%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.03%)</title><rect x="36.1208%" y="885" width="0.0349%" height="15" fill="rgb(250,54,15)"/><text x="36.3708%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.03%)</title><rect x="36.1208%" y="869" width="0.0349%" height="15" fill="rgb(227,68,33)"/><text x="36.3708%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.03%)</title><rect x="36.1208%" y="853" width="0.0349%" height="15" fill="rgb(238,34,41)"/><text x="36.3708%" y="863.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.03%)</title><rect x="36.1208%" y="837" width="0.0349%" height="15" fill="rgb(220,11,15)"/><text x="36.3708%" y="847.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.03%)</title><rect x="36.1208%" y="821" width="0.0349%" height="15" fill="rgb(246,111,35)"/><text x="36.3708%" y="831.50"></text></g><g><title>__rg_alloc (2 samples, 0.03%)</title><rect x="36.1208%" y="805" width="0.0349%" height="15" fill="rgb(209,88,53)"/><text x="36.3708%" y="815.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (2 samples, 0.03%)</title><rect x="36.1208%" y="789" width="0.0349%" height="15" fill="rgb(231,185,47)"/><text x="36.3708%" y="799.50"></text></g><g><title>mi_malloc (1 samples, 0.02%)</title><rect x="36.1383%" y="773" width="0.0175%" height="15" fill="rgb(233,154,1)"/><text x="36.3883%" y="783.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.02%)</title><rect x="36.1383%" y="757" width="0.0175%" height="15" fill="rgb(225,15,46)"/><text x="36.3883%" y="767.50"></text></g><g><title>mi_heap_malloc_small (1 samples, 0.02%)</title><rect x="36.1383%" y="741" width="0.0175%" height="15" fill="rgb(211,135,41)"/><text x="36.3883%" y="751.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.02%)</title><rect x="36.1383%" y="725" width="0.0175%" height="15" fill="rgb(208,54,0)"/><text x="36.3883%" y="735.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (12 samples, 0.21%)</title><rect x="35.9637%" y="1093" width="0.2095%" height="15" fill="rgb(244,136,14)"/><text x="36.2137%" y="1103.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="36.1557%" y="1077" width="0.0175%" height="15" fill="rgb(241,56,14)"/><text x="36.4057%" y="1087.50"></text></g><g><title>&lt;model::rho_types::Expr as core::clone::Clone&gt;::clone (15 samples, 0.26%)</title><rect x="35.9637%" y="1109" width="0.2619%" height="15" fill="rgb(205,80,24)"/><text x="36.2137%" y="1119.50"></text></g><g><title>[libc-2.31.so] (3 samples, 0.05%)</title><rect x="36.1732%" y="1093" width="0.0524%" height="15" fill="rgb(220,57,4)"/><text x="36.4232%" y="1103.50"></text></g><g><title>_mi_page_use_delayed_free (2 samples, 0.03%)</title><rect x="36.2256%" y="933" width="0.0349%" height="15" fill="rgb(226,193,50)"/><text x="36.4756%" y="943.50"></text></g><g><title>_mi_malloc_generic (3 samples, 0.05%)</title><rect x="36.2256%" y="981" width="0.0524%" height="15" fill="rgb(231,168,22)"/><text x="36.4756%" y="991.50"></text></g><g><title>_mi_heap_delayed_free (3 samples, 0.05%)</title><rect x="36.2256%" y="965" width="0.0524%" height="15" fill="rgb(254,215,14)"/><text x="36.4756%" y="975.50"></text></g><g><title>_mi_free_delayed_block (3 samples, 0.05%)</title><rect x="36.2256%" y="949" width="0.0524%" height="15" fill="rgb(211,115,16)"/><text x="36.4756%" y="959.50"></text></g><g><title>_mi_segment_page_of (1 samples, 0.02%)</title><rect x="36.2605%" y="933" width="0.0175%" height="15" fill="rgb(236,210,16)"/><text x="36.5105%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.07%)</title><rect x="36.2256%" y="1109" width="0.0698%" height="15" fill="rgb(221,94,12)"/><text x="36.4756%" y="1119.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.07%)</title><rect x="36.2256%" y="1093" width="0.0698%" height="15" fill="rgb(235,218,49)"/><text x="36.4756%" y="1103.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.07%)</title><rect x="36.2256%" y="1077" width="0.0698%" height="15" fill="rgb(217,114,14)"/><text x="36.4756%" y="1087.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.07%)</title><rect x="36.2256%" y="1061" width="0.0698%" height="15" fill="rgb(216,145,22)"/><text x="36.4756%" y="1071.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.07%)</title><rect x="36.2256%" y="1045" width="0.0698%" height="15" fill="rgb(217,112,39)"/><text x="36.4756%" y="1055.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.07%)</title><rect x="36.2256%" y="1029" width="0.0698%" height="15" fill="rgb(225,85,32)"/><text x="36.4756%" y="1039.50"></text></g><g><title>__rg_alloc (4 samples, 0.07%)</title><rect x="36.2256%" y="1013" width="0.0698%" height="15" fill="rgb(245,209,47)"/><text x="36.4756%" y="1023.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (4 samples, 0.07%)</title><rect x="36.2256%" y="997" width="0.0698%" height="15" fill="rgb(218,220,15)"/><text x="36.4756%" y="1007.50"></text></g><g><title>mi_malloc (1 samples, 0.02%)</title><rect x="36.2779%" y="981" width="0.0175%" height="15" fill="rgb(222,202,31)"/><text x="36.5279%" y="991.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.02%)</title><rect x="36.2779%" y="965" width="0.0175%" height="15" fill="rgb(243,203,4)"/><text x="36.5279%" y="975.50"></text></g><g><title>mi_heap_malloc_small (1 samples, 0.02%)</title><rect x="36.2779%" y="949" width="0.0175%" height="15" fill="rgb(237,92,17)"/><text x="36.5279%" y="959.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.02%)</title><rect x="36.2779%" y="933" width="0.0175%" height="15" fill="rgb(231,119,7)"/><text x="36.5279%" y="943.50"></text></g><g><title>&lt;model::rho_types::Match as core::clone::Clone&gt;::clone (152 samples, 2.65%)</title><rect x="33.6941%" y="1221" width="2.6536%" height="15" fill="rgb(237,82,41)"/><text x="33.9441%" y="1231.50">&lt;m..</text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (22 samples, 0.38%)</title><rect x="35.9637%" y="1205" width="0.3841%" height="15" fill="rgb(226,81,48)"/><text x="36.2137%" y="1215.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (22 samples, 0.38%)</title><rect x="35.9637%" y="1189" width="0.3841%" height="15" fill="rgb(234,70,51)"/><text x="36.2137%" y="1199.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (22 samples, 0.38%)</title><rect x="35.9637%" y="1173" width="0.3841%" height="15" fill="rgb(251,86,4)"/><text x="36.2137%" y="1183.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (22 samples, 0.38%)</title><rect x="35.9637%" y="1157" width="0.3841%" height="15" fill="rgb(244,144,28)"/><text x="36.2137%" y="1167.50"></text></g><g><title>alloc::slice::hack::to_vec (22 samples, 0.38%)</title><rect x="35.9637%" y="1141" width="0.3841%" height="15" fill="rgb(232,161,39)"/><text x="36.2137%" y="1151.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (22 samples, 0.38%)</title><rect x="35.9637%" y="1125" width="0.3841%" height="15" fill="rgb(247,34,51)"/><text x="36.2137%" y="1135.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (3 samples, 0.05%)</title><rect x="36.2954%" y="1109" width="0.0524%" height="15" fill="rgb(225,132,2)"/><text x="36.5454%" y="1119.50"></text></g><g><title>[libc-2.31.so] (2 samples, 0.03%)</title><rect x="36.3128%" y="1093" width="0.0349%" height="15" fill="rgb(209,159,44)"/><text x="36.5628%" y="1103.50"></text></g><g><title>&lt;rho_runtime::storage::TaggedContinuation as core::clone::Clone&gt;::clone (154 samples, 2.69%)</title><rect x="33.6767%" y="1349" width="2.6885%" height="15" fill="rgb(251,214,1)"/><text x="33.9267%" y="1359.50">&lt;r..</text></g><g><title>&lt;model::rho_types::ParWithRandom as core::clone::Clone&gt;::clone (154 samples, 2.69%)</title><rect x="33.6767%" y="1333" width="2.6885%" height="15" fill="rgb(247,84,47)"/><text x="33.9267%" y="1343.50">&lt;m..</text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (153 samples, 2.67%)</title><rect x="33.6941%" y="1317" width="2.6711%" height="15" fill="rgb(240,111,43)"/><text x="33.9441%" y="1327.50">&lt;c..</text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (153 samples, 2.67%)</title><rect x="33.6941%" y="1301" width="2.6711%" height="15" fill="rgb(215,214,35)"/><text x="33.9441%" y="1311.50">&lt;m..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (153 samples, 2.67%)</title><rect x="33.6941%" y="1285" width="2.6711%" height="15" fill="rgb(248,207,23)"/><text x="33.9441%" y="1295.50">&lt;a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (153 samples, 2.67%)</title><rect x="33.6941%" y="1269" width="2.6711%" height="15" fill="rgb(214,186,4)"/><text x="33.9441%" y="1279.50">al..</text></g><g><title>alloc::slice::hack::to_vec (153 samples, 2.67%)</title><rect x="33.6941%" y="1253" width="2.6711%" height="15" fill="rgb(220,133,22)"/><text x="33.9441%" y="1263.50">al..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (153 samples, 2.67%)</title><rect x="33.6941%" y="1237" width="2.6711%" height="15" fill="rgb(239,134,19)"/><text x="33.9441%" y="1247.50">&lt;T..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="36.3478%" y="1221" width="0.0175%" height="15" fill="rgb(250,140,9)"/><text x="36.5978%" y="1231.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="36.3478%" y="1205" width="0.0175%" height="15" fill="rgb(225,59,14)"/><text x="36.5978%" y="1215.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="36.3478%" y="1189" width="0.0175%" height="15" fill="rgb(214,152,51)"/><text x="36.5978%" y="1199.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="36.3478%" y="1173" width="0.0175%" height="15" fill="rgb(251,227,43)"/><text x="36.5978%" y="1183.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="36.3478%" y="1157" width="0.0175%" height="15" fill="rgb(241,96,17)"/><text x="36.5978%" y="1167.50"></text></g><g><title>rho_runtime::storage::tuplecell::TuplespaceChannel::join (158 samples, 2.76%)</title><rect x="33.6592%" y="1365" width="2.7584%" height="15" fill="rgb(234,198,43)"/><text x="33.9092%" y="1375.50">rh..</text></g><g><title>rho_runtime::storage::tuplecell::TuplespaceChannel::match_one (3 samples, 0.05%)</title><rect x="36.3652%" y="1349" width="0.0524%" height="15" fill="rgb(220,108,29)"/><text x="36.6152%" y="1359.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (3 samples, 0.05%)</title><rect x="36.3652%" y="1333" width="0.0524%" height="15" fill="rgb(226,163,33)"/><text x="36.6152%" y="1343.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3 samples, 0.05%)</title><rect x="36.3652%" y="1317" width="0.0524%" height="15" fill="rgb(205,194,45)"/><text x="36.6152%" y="1327.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::{{closure}} (3 samples, 0.05%)</title><rect x="36.3652%" y="1301" width="0.0524%" height="15" fill="rgb(206,143,44)"/><text x="36.6152%" y="1311.50"></text></g><g><title>rho_runtime::storage::tuplecell::TuplespaceChannel::match_one::{{closure}} (3 samples, 0.05%)</title><rect x="36.3652%" y="1285" width="0.0524%" height="15" fill="rgb(236,136,36)"/><text x="36.6152%" y="1295.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (3 samples, 0.05%)</title><rect x="36.3652%" y="1269" width="0.0524%" height="15" fill="rgb(249,172,42)"/><text x="36.6152%" y="1279.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (3 samples, 0.05%)</title><rect x="36.3652%" y="1253" width="0.0524%" height="15" fill="rgb(216,139,23)"/><text x="36.6152%" y="1263.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (3 samples, 0.05%)</title><rect x="36.3652%" y="1237" width="0.0524%" height="15" fill="rgb(207,166,20)"/><text x="36.6152%" y="1247.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (3 samples, 0.05%)</title><rect x="36.3652%" y="1221" width="0.0524%" height="15" fill="rgb(210,209,22)"/><text x="36.6152%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (3 samples, 0.05%)</title><rect x="36.3652%" y="1205" width="0.0524%" height="15" fill="rgb(232,118,20)"/><text x="36.6152%" y="1215.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value::{{closure}} (3 samples, 0.05%)</title><rect x="36.3652%" y="1189" width="0.0524%" height="15" fill="rgb(238,113,42)"/><text x="36.6152%" y="1199.50"></text></g><g><title>&lt;blake3::Hash as core::cmp::PartialEq&gt;::eq (3 samples, 0.05%)</title><rect x="36.3652%" y="1173" width="0.0524%" height="15" fill="rgb(231,42,5)"/><text x="36.6152%" y="1183.50"></text></g><g><title>constant_time_eq::constant_time_eq_32 (3 samples, 0.05%)</title><rect x="36.3652%" y="1157" width="0.0524%" height="15" fill="rgb(243,166,24)"/><text x="36.6152%" y="1167.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::reserve (2 samples, 0.03%)</title><rect x="36.4176%" y="1365" width="0.0349%" height="15" fill="rgb(237,226,12)"/><text x="36.6676%" y="1375.50"></text></g><g><title>blake3::Hasher::final_output (1 samples, 0.02%)</title><rect x="36.4525%" y="613" width="0.0175%" height="15" fill="rgb(229,133,24)"/><text x="36.7025%" y="623.50"></text></g><g><title>blake3::ChunkState::output (1 samples, 0.02%)</title><rect x="36.4525%" y="597" width="0.0175%" height="15" fill="rgb(238,33,43)"/><text x="36.7025%" y="607.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::produce::{{closure}} (3 samples, 0.05%)</title><rect x="36.4525%" y="677" width="0.0524%" height="15" fill="rgb(227,59,38)"/><text x="36.7025%" y="687.50"></text></g><g><title>&lt;rho_runtime::storage::store::AsyncStore as rho_runtime::storage::Storage&gt;::produce (3 samples, 0.05%)</title><rect x="36.4525%" y="661" width="0.0524%" height="15" fill="rgb(230,97,0)"/><text x="36.7025%" y="671.50"></text></g><g><title>&lt;model::rho_types::Par as model::ordering::hash::Blake3Hashable&gt;::blake3_hash (3 samples, 0.05%)</title><rect x="36.4525%" y="645" width="0.0524%" height="15" fill="rgb(250,173,50)"/><text x="36.7025%" y="655.50"></text></g><g><title>blake3::Hasher::finalize (3 samples, 0.05%)</title><rect x="36.4525%" y="629" width="0.0524%" height="15" fill="rgb(240,15,50)"/><text x="36.7025%" y="639.50"></text></g><g><title>blake3::Output::root_hash (2 samples, 0.03%)</title><rect x="36.4700%" y="613" width="0.0349%" height="15" fill="rgb(221,93,22)"/><text x="36.7200%" y="623.50"></text></g><g><title>blake3::platform::Platform::compress_in_place (2 samples, 0.03%)</title><rect x="36.4700%" y="597" width="0.0349%" height="15" fill="rgb(245,180,53)"/><text x="36.7200%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="36.5223%" y="437" width="0.0175%" height="15" fill="rgb(231,88,51)"/><text x="36.7723%" y="447.50"></text></g><g><title>&lt;model::rho_types::MatchCase as core::clone::Clone&gt;::clone (11 samples, 0.19%)</title><rect x="36.5398%" y="437" width="0.1920%" height="15" fill="rgb(240,58,21)"/><text x="36.7898%" y="447.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (10 samples, 0.17%)</title><rect x="36.5573%" y="421" width="0.1746%" height="15" fill="rgb(237,21,10)"/><text x="36.8073%" y="431.50"></text></g><g><title>[libc-2.31.so] (9 samples, 0.16%)</title><rect x="36.5747%" y="405" width="0.1571%" height="15" fill="rgb(218,43,11)"/><text x="36.8247%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="36.7318%" y="437" width="0.0175%" height="15" fill="rgb(218,221,29)"/><text x="36.9818%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="36.7318%" y="421" width="0.0175%" height="15" fill="rgb(214,118,42)"/><text x="36.9818%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="36.7318%" y="405" width="0.0175%" height="15" fill="rgb(251,200,26)"/><text x="36.9818%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity_from_bytes (1 samples, 0.02%)</title><rect x="36.7318%" y="389" width="0.0175%" height="15" fill="rgb(237,101,39)"/><text x="36.9818%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (18 samples, 0.31%)</title><rect x="36.5049%" y="501" width="0.3142%" height="15" fill="rgb(251,117,11)"/><text x="36.7549%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (18 samples, 0.31%)</title><rect x="36.5049%" y="485" width="0.3142%" height="15" fill="rgb(216,223,23)"/><text x="36.7549%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (18 samples, 0.31%)</title><rect x="36.5049%" y="469" width="0.3142%" height="15" fill="rgb(251,54,12)"/><text x="36.7549%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (18 samples, 0.31%)</title><rect x="36.5049%" y="453" width="0.3142%" height="15" fill="rgb(254,176,54)"/><text x="36.7549%" y="463.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (4 samples, 0.07%)</title><rect x="36.7493%" y="437" width="0.0698%" height="15" fill="rgb(210,32,8)"/><text x="36.9993%" y="447.50"></text></g><g><title>[libc-2.31.so] (3 samples, 0.05%)</title><rect x="36.7668%" y="421" width="0.0524%" height="15" fill="rgb(235,52,38)"/><text x="37.0168%" y="431.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (23 samples, 0.40%)</title><rect x="36.4525%" y="1365" width="0.4015%" height="15" fill="rgb(231,4,44)"/><text x="36.7025%" y="1375.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (23 samples, 0.40%)</title><rect x="36.4525%" y="1349" width="0.4015%" height="15" fill="rgb(249,2,32)"/><text x="36.7025%" y="1359.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (23 samples, 0.40%)</title><rect x="36.4525%" y="1333" width="0.4015%" height="15" fill="rgb(224,65,26)"/><text x="36.7025%" y="1343.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (23 samples, 0.40%)</title><rect x="36.4525%" y="1317" width="0.4015%" height="15" fill="rgb(250,73,40)"/><text x="36.7025%" y="1327.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (23 samples, 0.40%)</title><rect x="36.4525%" y="1301" width="0.4015%" height="15" fill="rgb(253,177,16)"/><text x="36.7025%" y="1311.50"></text></g><g><title>tokio::runtime::task::raw::poll (23 samples, 0.40%)</title><rect x="36.4525%" y="1285" width="0.4015%" height="15" fill="rgb(217,32,34)"/><text x="36.7025%" y="1295.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (23 samples, 0.40%)</title><rect x="36.4525%" y="1269" width="0.4015%" height="15" fill="rgb(212,7,10)"/><text x="36.7025%" y="1279.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (23 samples, 0.40%)</title><rect x="36.4525%" y="1253" width="0.4015%" height="15" fill="rgb(245,89,8)"/><text x="36.7025%" y="1263.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (23 samples, 0.40%)</title><rect x="36.4525%" y="1237" width="0.4015%" height="15" fill="rgb(237,16,53)"/><text x="36.7025%" y="1247.50"></text></g><g><title>std::panic::catch_unwind (23 samples, 0.40%)</title><rect x="36.4525%" y="1221" width="0.4015%" height="15" fill="rgb(250,204,30)"/><text x="36.7025%" y="1231.50"></text></g><g><title>std::panicking::try (23 samples, 0.40%)</title><rect x="36.4525%" y="1205" width="0.4015%" height="15" fill="rgb(208,77,27)"/><text x="36.7025%" y="1215.50"></text></g><g><title>std::panicking::try::do_call (23 samples, 0.40%)</title><rect x="36.4525%" y="1189" width="0.4015%" height="15" fill="rgb(250,204,28)"/><text x="36.7025%" y="1199.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (23 samples, 0.40%)</title><rect x="36.4525%" y="1173" width="0.4015%" height="15" fill="rgb(244,63,21)"/><text x="36.7025%" y="1183.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (23 samples, 0.40%)</title><rect x="36.4525%" y="1157" width="0.4015%" height="15" fill="rgb(236,85,44)"/><text x="36.7025%" y="1167.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (23 samples, 0.40%)</title><rect x="36.4525%" y="1141" width="0.4015%" height="15" fill="rgb(215,98,4)"/><text x="36.7025%" y="1151.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (23 samples, 0.40%)</title><rect x="36.4525%" y="1125" width="0.4015%" height="15" fill="rgb(235,38,11)"/><text x="36.7025%" y="1135.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (23 samples, 0.40%)</title><rect x="36.4525%" y="1109" width="0.4015%" height="15" fill="rgb(254,186,25)"/><text x="36.7025%" y="1119.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (23 samples, 0.40%)</title><rect x="36.4525%" y="1093" width="0.4015%" height="15" fill="rgb(225,55,31)"/><text x="36.7025%" y="1103.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (23 samples, 0.40%)</title><rect x="36.4525%" y="1077" width="0.4015%" height="15" fill="rgb(211,15,21)"/><text x="36.7025%" y="1087.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (23 samples, 0.40%)</title><rect x="36.4525%" y="1061" width="0.4015%" height="15" fill="rgb(215,187,41)"/><text x="36.7025%" y="1071.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (23 samples, 0.40%)</title><rect x="36.4525%" y="1045" width="0.4015%" height="15" fill="rgb(248,69,32)"/><text x="36.7025%" y="1055.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (23 samples, 0.40%)</title><rect x="36.4525%" y="1029" width="0.4015%" height="15" fill="rgb(252,102,52)"/><text x="36.7025%" y="1039.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (23 samples, 0.40%)</title><rect x="36.4525%" y="1013" width="0.4015%" height="15" fill="rgb(253,140,32)"/><text x="36.7025%" y="1023.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (23 samples, 0.40%)</title><rect x="36.4525%" y="997" width="0.4015%" height="15" fill="rgb(216,56,42)"/><text x="36.7025%" y="1007.50"></text></g><g><title>tokio::coop::budget (23 samples, 0.40%)</title><rect x="36.4525%" y="981" width="0.4015%" height="15" fill="rgb(216,184,14)"/><text x="36.7025%" y="991.50"></text></g><g><title>tokio::coop::with_budget (23 samples, 0.40%)</title><rect x="36.4525%" y="965" width="0.4015%" height="15" fill="rgb(237,187,27)"/><text x="36.7025%" y="975.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (23 samples, 0.40%)</title><rect x="36.4525%" y="949" width="0.4015%" height="15" fill="rgb(219,65,3)"/><text x="36.7025%" y="959.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (23 samples, 0.40%)</title><rect x="36.4525%" y="933" width="0.4015%" height="15" fill="rgb(245,83,25)"/><text x="36.7025%" y="943.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (23 samples, 0.40%)</title><rect x="36.4525%" y="917" width="0.4015%" height="15" fill="rgb(214,205,45)"/><text x="36.7025%" y="927.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (23 samples, 0.40%)</title><rect x="36.4525%" y="901" width="0.4015%" height="15" fill="rgb(241,20,18)"/><text x="36.7025%" y="911.50"></text></g><g><title>tokio::runtime::task::raw::poll (23 samples, 0.40%)</title><rect x="36.4525%" y="885" width="0.4015%" height="15" fill="rgb(232,163,23)"/><text x="36.7025%" y="895.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (23 samples, 0.40%)</title><rect x="36.4525%" y="869" width="0.4015%" height="15" fill="rgb(214,5,46)"/><text x="36.7025%" y="879.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (23 samples, 0.40%)</title><rect x="36.4525%" y="853" width="0.4015%" height="15" fill="rgb(229,78,17)"/><text x="36.7025%" y="863.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (23 samples, 0.40%)</title><rect x="36.4525%" y="837" width="0.4015%" height="15" fill="rgb(248,89,10)"/><text x="36.7025%" y="847.50"></text></g><g><title>std::panic::catch_unwind (23 samples, 0.40%)</title><rect x="36.4525%" y="821" width="0.4015%" height="15" fill="rgb(248,54,15)"/><text x="36.7025%" y="831.50"></text></g><g><title>std::panicking::try (23 samples, 0.40%)</title><rect x="36.4525%" y="805" width="0.4015%" height="15" fill="rgb(223,116,6)"/><text x="36.7025%" y="815.50"></text></g><g><title>std::panicking::try::do_call (23 samples, 0.40%)</title><rect x="36.4525%" y="789" width="0.4015%" height="15" fill="rgb(205,125,38)"/><text x="36.7025%" y="799.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (23 samples, 0.40%)</title><rect x="36.4525%" y="773" width="0.4015%" height="15" fill="rgb(251,78,38)"/><text x="36.7025%" y="783.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (23 samples, 0.40%)</title><rect x="36.4525%" y="757" width="0.4015%" height="15" fill="rgb(253,78,28)"/><text x="36.7025%" y="767.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (23 samples, 0.40%)</title><rect x="36.4525%" y="741" width="0.4015%" height="15" fill="rgb(209,120,3)"/><text x="36.7025%" y="751.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (23 samples, 0.40%)</title><rect x="36.4525%" y="725" width="0.4015%" height="15" fill="rgb(238,229,9)"/><text x="36.7025%" y="735.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (23 samples, 0.40%)</title><rect x="36.4525%" y="709" width="0.4015%" height="15" fill="rgb(253,159,18)"/><text x="36.7025%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (23 samples, 0.40%)</title><rect x="36.4525%" y="693" width="0.4015%" height="15" fill="rgb(244,42,34)"/><text x="36.7025%" y="703.50"></text></g><g><title>rho_runtime::storage::coordinator::Coordinator::handle_join_double::{{closure}} (20 samples, 0.35%)</title><rect x="36.5049%" y="677" width="0.3492%" height="15" fill="rgb(224,8,7)"/><text x="36.7549%" y="687.50"></text></g><g><title>rho_runtime::storage::tuplecell::TuplespaceChannel::join (20 samples, 0.35%)</title><rect x="36.5049%" y="661" width="0.3492%" height="15" fill="rgb(210,201,45)"/><text x="36.7549%" y="671.50"></text></g><g><title>&lt;rho_runtime::storage::TaggedContinuation as core::clone::Clone&gt;::clone (20 samples, 0.35%)</title><rect x="36.5049%" y="645" width="0.3492%" height="15" fill="rgb(252,185,21)"/><text x="36.7549%" y="655.50"></text></g><g><title>&lt;model::rho_types::ParWithRandom as core::clone::Clone&gt;::clone (20 samples, 0.35%)</title><rect x="36.5049%" y="629" width="0.3492%" height="15" fill="rgb(223,131,1)"/><text x="36.7549%" y="639.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (20 samples, 0.35%)</title><rect x="36.5049%" y="613" width="0.3492%" height="15" fill="rgb(245,141,16)"/><text x="36.7549%" y="623.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (20 samples, 0.35%)</title><rect x="36.5049%" y="597" width="0.3492%" height="15" fill="rgb(229,55,45)"/><text x="36.7549%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (20 samples, 0.35%)</title><rect x="36.5049%" y="581" width="0.3492%" height="15" fill="rgb(208,92,15)"/><text x="36.7549%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (20 samples, 0.35%)</title><rect x="36.5049%" y="565" width="0.3492%" height="15" fill="rgb(234,185,47)"/><text x="36.7549%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (20 samples, 0.35%)</title><rect x="36.5049%" y="549" width="0.3492%" height="15" fill="rgb(253,104,50)"/><text x="36.7549%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (20 samples, 0.35%)</title><rect x="36.5049%" y="533" width="0.3492%" height="15" fill="rgb(205,70,7)"/><text x="36.7549%" y="543.50"></text></g><g><title>&lt;model::rho_types::Match as core::clone::Clone&gt;::clone (20 samples, 0.35%)</title><rect x="36.5049%" y="517" width="0.3492%" height="15" fill="rgb(240,178,43)"/><text x="36.7549%" y="527.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="36.8191%" y="501" width="0.0349%" height="15" fill="rgb(214,112,2)"/><text x="37.0691%" y="511.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="36.8191%" y="485" width="0.0349%" height="15" fill="rgb(206,46,17)"/><text x="37.0691%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="36.8366%" y="469" width="0.0175%" height="15" fill="rgb(225,220,16)"/><text x="37.0866%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.02%)</title><rect x="36.8366%" y="453" width="0.0175%" height="15" fill="rgb(238,65,40)"/><text x="37.0866%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="36.8366%" y="437" width="0.0175%" height="15" fill="rgb(230,151,21)"/><text x="37.0866%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.02%)</title><rect x="36.8366%" y="421" width="0.0175%" height="15" fill="rgb(218,58,49)"/><text x="37.0866%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="36.8366%" y="405" width="0.0175%" height="15" fill="rgb(219,179,14)"/><text x="37.0866%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="36.8366%" y="389" width="0.0175%" height="15" fill="rgb(223,72,1)"/><text x="37.0866%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="36.8366%" y="373" width="0.0175%" height="15" fill="rgb(238,126,10)"/><text x="37.0866%" y="383.50"></text></g><g><title>syscall (1 samples, 0.02%)</title><rect x="36.8541%" y="1365" width="0.0175%" height="15" fill="rgb(224,206,38)"/><text x="37.1041%" y="1375.50"></text></g><g><title>tokio::runtime::queue::Local&lt;T&gt;::pop (1 samples, 0.02%)</title><rect x="36.8715%" y="1365" width="0.0175%" height="15" fill="rgb(212,201,54)"/><text x="37.1215%" y="1375.50"></text></g><g><title>tokio::runtime::queue::Local&lt;T&gt;::push_back (1 samples, 0.02%)</title><rect x="36.8890%" y="1365" width="0.0175%" height="15" fill="rgb(218,154,48)"/><text x="37.1390%" y="1375.50"></text></g><g><title>tokio::runtime::task::harness::can_read_output (1 samples, 0.02%)</title><rect x="36.9064%" y="1365" width="0.0175%" height="15" fill="rgb(232,93,24)"/><text x="37.1564%" y="1375.50"></text></g><g><title>&lt;model::ordering::ScoreTreeIter as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.10%)</title><rect x="36.9588%" y="1125" width="0.1047%" height="15" fill="rgb(245,30,21)"/><text x="37.2088%" y="1135.50"></text></g><g><title>&lt;model::ordering::sort_unforgeable::UnforgeableScoreTreeIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.07%)</title><rect x="36.9937%" y="1109" width="0.0698%" height="15" fill="rgb(242,148,29)"/><text x="37.2437%" y="1119.50"></text></g><g><title>model::ordering::sort_unforgeable::UnforgeableScoreTreeIter::private_body_next (4 samples, 0.07%)</title><rect x="36.9937%" y="1093" width="0.0698%" height="15" fill="rgb(244,153,54)"/><text x="37.2437%" y="1103.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::deref::Deref&gt;::deref (3 samples, 0.05%)</title><rect x="37.0112%" y="1077" width="0.0524%" height="15" fill="rgb(252,87,22)"/><text x="37.2612%" y="1087.50"></text></g><g><title>bytes::bytes::Bytes::as_slice (3 samples, 0.05%)</title><rect x="37.0112%" y="1061" width="0.0524%" height="15" fill="rgb(210,51,29)"/><text x="37.2612%" y="1071.50"></text></g><g><title>blake3::ChunkState::len (1 samples, 0.02%)</title><rect x="37.0810%" y="1093" width="0.0175%" height="15" fill="rgb(242,136,47)"/><text x="37.3310%" y="1103.50"></text></g><g><title>core::cmp::min (1 samples, 0.02%)</title><rect x="37.1159%" y="1061" width="0.0175%" height="15" fill="rgb(238,68,4)"/><text x="37.3659%" y="1071.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.02%)</title><rect x="37.1159%" y="1045" width="0.0175%" height="15" fill="rgb(242,161,30)"/><text x="37.3659%" y="1055.50"></text></g><g><title>core::cmp::min_by (1 samples, 0.02%)</title><rect x="37.1159%" y="1029" width="0.0175%" height="15" fill="rgb(218,58,44)"/><text x="37.3659%" y="1039.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (3 samples, 0.05%)</title><rect x="37.1334%" y="1061" width="0.0524%" height="15" fill="rgb(252,125,32)"/><text x="37.3834%" y="1071.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.05%)</title><rect x="37.1334%" y="1045" width="0.0524%" height="15" fill="rgb(219,178,0)"/><text x="37.3834%" y="1055.50"></text></g><g><title>[libc-2.31.so] (3 samples, 0.05%)</title><rect x="37.1334%" y="1029" width="0.0524%" height="15" fill="rgb(213,152,7)"/><text x="37.3834%" y="1039.50"></text></g><g><title>&lt;model::rho_types::Par as model::ordering::hash::Blake3Hashable&gt;::blake3_hash::traverse (16 samples, 0.28%)</title><rect x="36.9239%" y="1141" width="0.2793%" height="15" fill="rgb(249,109,34)"/><text x="37.1739%" y="1151.50"></text></g><g><title>blake3::Hasher::update (8 samples, 0.14%)</title><rect x="37.0635%" y="1125" width="0.1397%" height="15" fill="rgb(232,96,21)"/><text x="37.3135%" y="1135.50"></text></g><g><title>blake3::Hasher::update_with_join (8 samples, 0.14%)</title><rect x="37.0635%" y="1109" width="0.1397%" height="15" fill="rgb(228,27,39)"/><text x="37.3135%" y="1119.50"></text></g><g><title>blake3::ChunkState::update (6 samples, 0.10%)</title><rect x="37.0985%" y="1093" width="0.1047%" height="15" fill="rgb(211,182,52)"/><text x="37.3485%" y="1103.50"></text></g><g><title>blake3::ChunkState::fill_buf (6 samples, 0.10%)</title><rect x="37.0985%" y="1077" width="0.1047%" height="15" fill="rgb(234,178,38)"/><text x="37.3485%" y="1087.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.02%)</title><rect x="37.1858%" y="1061" width="0.0175%" height="15" fill="rgb(221,111,3)"/><text x="37.4358%" y="1071.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="37.1858%" y="1045" width="0.0175%" height="15" fill="rgb(228,175,21)"/><text x="37.4358%" y="1055.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.02%)</title><rect x="37.1858%" y="1029" width="0.0175%" height="15" fill="rgb(228,174,43)"/><text x="37.4358%" y="1039.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.02%)</title><rect x="37.1858%" y="1013" width="0.0175%" height="15" fill="rgb(211,191,0)"/><text x="37.4358%" y="1023.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.02%)</title><rect x="37.1858%" y="997" width="0.0175%" height="15" fill="rgb(253,117,3)"/><text x="37.4358%" y="1007.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.02%)</title><rect x="37.1858%" y="981" width="0.0175%" height="15" fill="rgb(241,127,19)"/><text x="37.4358%" y="991.50"></text></g><g><title>core::array::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T: N]&gt;::index_mut (1 samples, 0.02%)</title><rect x="37.2556%" y="1077" width="0.0175%" height="15" fill="rgb(218,103,12)"/><text x="37.5056%" y="1087.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.02%)</title><rect x="37.2556%" y="1061" width="0.0175%" height="15" fill="rgb(236,214,43)"/><text x="37.5056%" y="1071.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.02%)</title><rect x="37.2556%" y="1045" width="0.0175%" height="15" fill="rgb(244,144,19)"/><text x="37.5056%" y="1055.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.02%)</title><rect x="37.2556%" y="1029" width="0.0175%" height="15" fill="rgb(246,188,10)"/><text x="37.5056%" y="1039.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.02%)</title><rect x="37.2556%" y="1013" width="0.0175%" height="15" fill="rgb(212,193,33)"/><text x="37.5056%" y="1023.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.02%)</title><rect x="37.2556%" y="997" width="0.0175%" height="15" fill="rgb(241,51,29)"/><text x="37.5056%" y="1007.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.02%)</title><rect x="37.2556%" y="981" width="0.0175%" height="15" fill="rgb(211,58,19)"/><text x="37.5056%" y="991.50"></text></g><g><title>core::cmp::min (1 samples, 0.02%)</title><rect x="37.2730%" y="1077" width="0.0175%" height="15" fill="rgb(229,111,26)"/><text x="37.5230%" y="1087.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.02%)</title><rect x="37.2730%" y="1061" width="0.0175%" height="15" fill="rgb(213,115,40)"/><text x="37.5230%" y="1071.50"></text></g><g><title>core::cmp::min_by (1 samples, 0.02%)</title><rect x="37.2730%" y="1045" width="0.0175%" height="15" fill="rgb(209,56,44)"/><text x="37.5230%" y="1055.50"></text></g><g><title>blake3::ChunkState::update (10 samples, 0.17%)</title><rect x="37.2207%" y="1109" width="0.1746%" height="15" fill="rgb(230,108,32)"/><text x="37.4707%" y="1119.50"></text></g><g><title>blake3::ChunkState::fill_buf (8 samples, 0.14%)</title><rect x="37.2556%" y="1093" width="0.1397%" height="15" fill="rgb(216,165,31)"/><text x="37.5056%" y="1103.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (6 samples, 0.10%)</title><rect x="37.2905%" y="1077" width="0.1047%" height="15" fill="rgb(218,122,21)"/><text x="37.5405%" y="1087.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.10%)</title><rect x="37.2905%" y="1061" width="0.1047%" height="15" fill="rgb(223,224,47)"/><text x="37.5405%" y="1071.50"></text></g><g><title>[libc-2.31.so] (4 samples, 0.07%)</title><rect x="37.3254%" y="1045" width="0.0698%" height="15" fill="rgb(238,102,44)"/><text x="37.5754%" y="1055.50"></text></g><g><title>blake3::Hasher::merge_cv_stack (1 samples, 0.02%)</title><rect x="37.3953%" y="1109" width="0.0175%" height="15" fill="rgb(236,46,40)"/><text x="37.6453%" y="1119.50"></text></g><g><title>&lt;rho_runtime::storage::store::AsyncStore as rho_runtime::storage::Storage&gt;::produce (29 samples, 0.51%)</title><rect x="36.9239%" y="1189" width="0.5063%" height="15" fill="rgb(247,202,50)"/><text x="37.1739%" y="1199.50"></text></g><g><title>&lt;model::rho_types::Par as model::ordering::hash::Blake3Hashable&gt;::blake3_hash (29 samples, 0.51%)</title><rect x="36.9239%" y="1173" width="0.5063%" height="15" fill="rgb(209,99,20)"/><text x="37.1739%" y="1183.50"></text></g><g><title>&lt;model::rho_types::Par as model::ordering::hash::Blake3Hashable&gt;::blake3_hash::traverse (29 samples, 0.51%)</title><rect x="36.9239%" y="1157" width="0.5063%" height="15" fill="rgb(252,27,34)"/><text x="37.1739%" y="1167.50"></text></g><g><title>blake3::Hasher::update (13 samples, 0.23%)</title><rect x="37.2032%" y="1141" width="0.2270%" height="15" fill="rgb(215,206,23)"/><text x="37.4532%" y="1151.50"></text></g><g><title>blake3::Hasher::update_with_join (13 samples, 0.23%)</title><rect x="37.2032%" y="1125" width="0.2270%" height="15" fill="rgb(212,135,36)"/><text x="37.4532%" y="1135.50"></text></g><g><title>core::cmp::min (1 samples, 0.02%)</title><rect x="37.4127%" y="1109" width="0.0175%" height="15" fill="rgb(240,189,1)"/><text x="37.6627%" y="1119.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.02%)</title><rect x="37.4127%" y="1093" width="0.0175%" height="15" fill="rgb(242,56,20)"/><text x="37.6627%" y="1103.50"></text></g><g><title>core::cmp::min_by (1 samples, 0.02%)</title><rect x="37.4127%" y="1077" width="0.0175%" height="15" fill="rgb(247,132,33)"/><text x="37.6627%" y="1087.50"></text></g><g><title>[libc-2.31.so] (6 samples, 0.10%)</title><rect x="37.4302%" y="1173" width="0.1047%" height="15" fill="rgb(208,149,11)"/><text x="37.6802%" y="1183.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.02%)</title><rect x="37.5349%" y="1173" width="0.0175%" height="15" fill="rgb(211,33,11)"/><text x="37.7849%" y="1183.50"></text></g><g><title>__rust_probestack (1 samples, 0.02%)</title><rect x="37.5349%" y="1157" width="0.0175%" height="15" fill="rgb(221,29,38)"/><text x="37.7849%" y="1167.50"></text></g><g><title>_mi_free_block_mt (12 samples, 0.21%)</title><rect x="37.5524%" y="1125" width="0.2095%" height="15" fill="rgb(206,182,49)"/><text x="37.8024%" y="1135.50"></text></g><g><title>_mi_page_retire (1 samples, 0.02%)</title><rect x="37.7619%" y="1125" width="0.0175%" height="15" fill="rgb(216,140,1)"/><text x="38.0119%" y="1135.50"></text></g><g><title>mi_page_queue_of (1 samples, 0.02%)</title><rect x="37.7619%" y="1109" width="0.0175%" height="15" fill="rgb(232,57,40)"/><text x="38.0119%" y="1119.50"></text></g><g><title>_mi_bin (1 samples, 0.02%)</title><rect x="37.7619%" y="1093" width="0.0175%" height="15" fill="rgb(224,186,18)"/><text x="38.0119%" y="1103.50"></text></g><g><title>mi_bsr (1 samples, 0.02%)</title><rect x="37.7619%" y="1077" width="0.0175%" height="15" fill="rgb(215,121,11)"/><text x="38.0119%" y="1087.50"></text></g><g><title>mi_clz (1 samples, 0.02%)</title><rect x="37.7619%" y="1061" width="0.0175%" height="15" fill="rgb(245,147,10)"/><text x="38.0119%" y="1071.50"></text></g><g><title>core::mem::drop (1 samples, 0.02%)</title><rect x="37.7793%" y="1109" width="0.0175%" height="15" fill="rgb(238,153,13)"/><text x="38.0293%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;tokio::sync::oneshot::Inner&lt;core::option::Option&lt;smallvec::SmallVec&lt;[(rho_runtime::storage::TaggedContinuation,smallvec::SmallVec&lt;[model::rho_types::ListParWithRandom: 3]&gt;): 3]&gt;&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="37.7793%" y="1093" width="0.0175%" height="15" fill="rgb(233,108,0)"/><text x="38.0293%" y="1103.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="37.7793%" y="1077" width="0.0175%" height="15" fill="rgb(212,157,17)"/><text x="38.0293%" y="1087.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.02%)</title><rect x="37.7793%" y="1061" width="0.0175%" height="15" fill="rgb(225,213,38)"/><text x="38.0293%" y="1071.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.02%)</title><rect x="37.7793%" y="1045" width="0.0175%" height="15" fill="rgb(248,16,11)"/><text x="38.0293%" y="1055.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.03%)</title><rect x="37.7793%" y="1125" width="0.0349%" height="15" fill="rgb(241,33,4)"/><text x="38.0293%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::oneshot::Inner&lt;core::option::Option&lt;smallvec::SmallVec&lt;[(rho_runtime::storage::TaggedContinuation,smallvec::SmallVec&lt;[model::rho_types::ListParWithRandom: 3]&gt;): 3]&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="37.7968%" y="1109" width="0.0175%" height="15" fill="rgb(222,26,43)"/><text x="38.0468%" y="1119.50"></text></g><g><title>&lt;tokio::sync::oneshot::Inner&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="37.7968%" y="1093" width="0.0175%" height="15" fill="rgb(243,29,36)"/><text x="38.0468%" y="1103.50"></text></g><g><title>mi_free (2 samples, 0.03%)</title><rect x="37.8142%" y="1125" width="0.0349%" height="15" fill="rgb(241,9,27)"/><text x="38.0642%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::sync::oneshot::Inner&lt;core::option::Option&lt;smallvec::SmallVec&lt;[(rho_runtime::storage::TaggedContinuation,smallvec::SmallVec&lt;[model::rho_types::ListParWithRandom: 3]&gt;): 3]&gt;&gt;&gt;&gt;&gt;&gt; (19 samples, 0.33%)</title><rect x="37.5524%" y="1173" width="0.3317%" height="15" fill="rgb(205,117,26)"/><text x="37.8024%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::sync::oneshot::Inner&lt;core::option::Option&lt;smallvec::SmallVec&lt;[(rho_runtime::storage::TaggedContinuation,smallvec::SmallVec&lt;[model::rho_types::ListParWithRandom: 3]&gt;): 3]&gt;&gt;&gt;&gt;&gt; (19 samples, 0.33%)</title><rect x="37.5524%" y="1157" width="0.3317%" height="15" fill="rgb(209,80,39)"/><text x="37.8024%" y="1167.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.33%)</title><rect x="37.5524%" y="1141" width="0.3317%" height="15" fill="rgb(239,155,6)"/><text x="37.8024%" y="1151.50"></text></g><g><title>mi_free_generic (2 samples, 0.03%)</title><rect x="37.8492%" y="1125" width="0.0349%" height="15" fill="rgb(212,104,12)"/><text x="38.0992%" y="1135.50"></text></g><g><title>[libc-2.31.so] (15 samples, 0.26%)</title><rect x="37.9190%" y="1157" width="0.2619%" height="15" fill="rgb(234,204,3)"/><text x="38.1690%" y="1167.50"></text></g><g><title>tokio::sync::oneshot::Inner&lt;T&gt;::consume_value (10 samples, 0.17%)</title><rect x="38.1809%" y="1157" width="0.1746%" height="15" fill="rgb(251,218,7)"/><text x="38.4309%" y="1167.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (10 samples, 0.17%)</title><rect x="38.1809%" y="1141" width="0.1746%" height="15" fill="rgb(221,81,32)"/><text x="38.4309%" y="1151.50"></text></g><g><title>tokio::sync::oneshot::Inner&lt;T&gt;::consume_value::{{closure}} (10 samples, 0.17%)</title><rect x="38.1809%" y="1125" width="0.1746%" height="15" fill="rgb(214,152,26)"/><text x="38.4309%" y="1135.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (10 samples, 0.17%)</title><rect x="38.1809%" y="1109" width="0.1746%" height="15" fill="rgb(223,22,3)"/><text x="38.4309%" y="1119.50"></text></g><g><title>core::mem::take (10 samples, 0.17%)</title><rect x="38.1809%" y="1093" width="0.1746%" height="15" fill="rgb(207,174,7)"/><text x="38.4309%" y="1103.50"></text></g><g><title>core::mem::replace (10 samples, 0.17%)</title><rect x="38.1809%" y="1077" width="0.1746%" height="15" fill="rgb(224,19,52)"/><text x="38.4309%" y="1087.50"></text></g><g><title>core::mem::swap (10 samples, 0.17%)</title><rect x="38.1809%" y="1061" width="0.1746%" height="15" fill="rgb(228,24,14)"/><text x="38.4309%" y="1071.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (10 samples, 0.17%)</title><rect x="38.1809%" y="1045" width="0.1746%" height="15" fill="rgb(230,153,43)"/><text x="38.4309%" y="1055.50"></text></g><g><title>core::ptr::swap_nonoverlapping (10 samples, 0.17%)</title><rect x="38.1809%" y="1029" width="0.1746%" height="15" fill="rgb(231,106,12)"/><text x="38.4309%" y="1039.50"></text></g><g><title>core::ptr::swap_nonoverlapping_bytes (10 samples, 0.17%)</title><rect x="38.1809%" y="1013" width="0.1746%" height="15" fill="rgb(215,92,2)"/><text x="38.4309%" y="1023.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.16%)</title><rect x="38.1983%" y="997" width="0.1571%" height="15" fill="rgb(249,143,25)"/><text x="38.4483%" y="1007.50"></text></g><g><title>tokio::sync::oneshot::State::is_complete (2 samples, 0.03%)</title><rect x="38.3554%" y="1157" width="0.0349%" height="15" fill="rgb(252,7,35)"/><text x="38.6054%" y="1167.50"></text></g><g><title>tokio::sync::oneshot::State::set_rx_task (1 samples, 0.02%)</title><rect x="38.3904%" y="1157" width="0.0175%" height="15" fill="rgb(216,69,40)"/><text x="38.6404%" y="1167.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (1 samples, 0.02%)</title><rect x="38.3904%" y="1141" width="0.0175%" height="15" fill="rgb(240,36,33)"/><text x="38.6404%" y="1151.50"></text></g><g><title>core::sync::atomic::atomic_or (1 samples, 0.02%)</title><rect x="38.3904%" y="1125" width="0.0175%" height="15" fill="rgb(231,128,14)"/><text x="38.6404%" y="1135.50"></text></g><g><title>&lt;tokio::sync::oneshot::Receiver&lt;T&gt; as core::future::future::Future&gt;::poll (57 samples, 1.00%)</title><rect x="37.4302%" y="1189" width="0.9951%" height="15" fill="rgb(245,143,14)"/><text x="37.6802%" y="1199.50"></text></g><g><title>tokio::sync::oneshot::Inner&lt;T&gt;::poll_recv (31 samples, 0.54%)</title><rect x="37.8841%" y="1173" width="0.5412%" height="15" fill="rgb(222,130,28)"/><text x="38.1341%" y="1183.50"></text></g><g><title>tokio::sync::oneshot::Task::set_task (1 samples, 0.02%)</title><rect x="38.4078%" y="1157" width="0.0175%" height="15" fill="rgb(212,10,48)"/><text x="38.6578%" y="1167.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1 samples, 0.02%)</title><rect x="38.4078%" y="1141" width="0.0175%" height="15" fill="rgb(254,118,45)"/><text x="38.6578%" y="1151.50"></text></g><g><title>tokio::sync::oneshot::Task::set_task::{{closure}} (1 samples, 0.02%)</title><rect x="38.4078%" y="1125" width="0.0175%" height="15" fill="rgb(228,6,45)"/><text x="38.6578%" y="1135.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="38.4078%" y="1109" width="0.0175%" height="15" fill="rgb(241,18,35)"/><text x="38.6578%" y="1119.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.02%)</title><rect x="38.4078%" y="1093" width="0.0175%" height="15" fill="rgb(227,214,53)"/><text x="38.6578%" y="1103.50"></text></g><g><title>tokio::runtime::task::state::State::ref_inc (1 samples, 0.02%)</title><rect x="38.4078%" y="1077" width="0.0175%" height="15" fill="rgb(224,107,51)"/><text x="38.6578%" y="1087.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.02%)</title><rect x="38.4078%" y="1061" width="0.0175%" height="15" fill="rgb(248,60,28)"/><text x="38.6578%" y="1071.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.02%)</title><rect x="38.4078%" y="1045" width="0.0175%" height="15" fill="rgb(249,101,23)"/><text x="38.6578%" y="1055.50"></text></g><g><title>&lt;smallvec::IntoIter&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="38.4602%" y="1173" width="0.0349%" height="15" fill="rgb(228,51,19)"/><text x="38.7102%" y="1183.50"></text></g><g><title>[libc-2.31.so] (2 samples, 0.03%)</title><rect x="38.4602%" y="1157" width="0.0349%" height="15" fill="rgb(213,20,6)"/><text x="38.7102%" y="1167.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (2 samples, 0.03%)</title><rect x="38.4951%" y="1173" width="0.0349%" height="15" fill="rgb(212,124,10)"/><text x="38.7451%" y="1183.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::len (1 samples, 0.02%)</title><rect x="38.5126%" y="1157" width="0.0175%" height="15" fill="rgb(248,3,40)"/><text x="38.7626%" y="1167.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple (1 samples, 0.02%)</title><rect x="38.5126%" y="1141" width="0.0175%" height="15" fill="rgb(223,178,23)"/><text x="38.7626%" y="1151.50"></text></g><g><title>[libc-2.31.so] (2 samples, 0.03%)</title><rect x="38.5300%" y="1173" width="0.0349%" height="15" fill="rgb(240,132,45)"/><text x="38.7800%" y="1183.50"></text></g><g><title>__rust_probestack (1 samples, 0.02%)</title><rect x="38.5649%" y="1173" width="0.0175%" height="15" fill="rgb(245,164,36)"/><text x="38.8149%" y="1183.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.10%)</title><rect x="38.6348%" y="1093" width="0.1047%" height="15" fill="rgb(231,188,53)"/><text x="38.8848%" y="1103.50"></text></g><g><title>core::ptr::read (5 samples, 0.09%)</title><rect x="38.6522%" y="1077" width="0.0873%" height="15" fill="rgb(237,198,39)"/><text x="38.9022%" y="1087.50"></text></g><g><title>[libc-2.31.so] (5 samples, 0.09%)</title><rect x="38.6522%" y="1061" width="0.0873%" height="15" fill="rgb(223,120,35)"/><text x="38.9022%" y="1071.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="38.7395%" y="1093" width="0.0349%" height="15" fill="rgb(253,107,49)"/><text x="38.9895%" y="1103.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (2 samples, 0.03%)</title><rect x="38.7395%" y="1077" width="0.0349%" height="15" fill="rgb(216,44,31)"/><text x="38.9895%" y="1087.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="38.7395%" y="1061" width="0.0349%" height="15" fill="rgb(253,87,21)"/><text x="38.9895%" y="1071.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.03%)</title><rect x="38.7395%" y="1045" width="0.0349%" height="15" fill="rgb(226,18,2)"/><text x="38.9895%" y="1055.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2 samples, 0.03%)</title><rect x="38.7395%" y="1029" width="0.0349%" height="15" fill="rgb(216,8,46)"/><text x="38.9895%" y="1039.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::handle_comm_events::{{closure}} (2 samples, 0.03%)</title><rect x="38.7395%" y="1013" width="0.0349%" height="15" fill="rgb(226,140,39)"/><text x="38.9895%" y="1023.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (2 samples, 0.03%)</title><rect x="38.7395%" y="997" width="0.0349%" height="15" fill="rgb(221,194,54)"/><text x="38.9895%" y="1007.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.03%)</title><rect x="38.7395%" y="981" width="0.0349%" height="15" fill="rgb(213,92,11)"/><text x="38.9895%" y="991.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.03%)</title><rect x="38.7395%" y="965" width="0.0349%" height="15" fill="rgb(229,162,46)"/><text x="38.9895%" y="975.50"></text></g><g><title>_mi_free_block_mt (10 samples, 0.17%)</title><rect x="38.7744%" y="917" width="0.1746%" height="15" fill="rgb(214,111,36)"/><text x="39.0244%" y="927.50"></text></g><g><title>mi_tf_set_delayed (1 samples, 0.02%)</title><rect x="38.9316%" y="901" width="0.0175%" height="15" fill="rgb(207,6,21)"/><text x="39.1816%" y="911.50"></text></g><g><title>mi_tf_block (1 samples, 0.02%)</title><rect x="38.9316%" y="885" width="0.0175%" height="15" fill="rgb(213,127,38)"/><text x="39.1816%" y="895.50"></text></g><g><title>mi_free (2 samples, 0.03%)</title><rect x="38.9490%" y="917" width="0.0349%" height="15" fill="rgb(238,118,32)"/><text x="39.1990%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;model::rho_types::Par,alloc::alloc::Global&gt;&gt; (13 samples, 0.23%)</title><rect x="38.7744%" y="1045" width="0.2270%" height="15" fill="rgb(240,139,39)"/><text x="39.0244%" y="1055.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.23%)</title><rect x="38.7744%" y="1029" width="0.2270%" height="15" fill="rgb(235,10,37)"/><text x="39.0244%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::Par&gt;&gt; (13 samples, 0.23%)</title><rect x="38.7744%" y="1013" width="0.2270%" height="15" fill="rgb(249,171,38)"/><text x="39.0244%" y="1023.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.23%)</title><rect x="38.7744%" y="997" width="0.2270%" height="15" fill="rgb(242,144,32)"/><text x="39.0244%" y="1007.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.23%)</title><rect x="38.7744%" y="981" width="0.2270%" height="15" fill="rgb(217,117,21)"/><text x="39.0244%" y="991.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.23%)</title><rect x="38.7744%" y="965" width="0.2270%" height="15" fill="rgb(249,87,1)"/><text x="39.0244%" y="975.50"></text></g><g><title>__rg_dealloc (13 samples, 0.23%)</title><rect x="38.7744%" y="949" width="0.2270%" height="15" fill="rgb(248,196,48)"/><text x="39.0244%" y="959.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (13 samples, 0.23%)</title><rect x="38.7744%" y="933" width="0.2270%" height="15" fill="rgb(251,206,33)"/><text x="39.0244%" y="943.50"></text></g><g><title>mi_free_generic (1 samples, 0.02%)</title><rect x="38.9839%" y="917" width="0.0175%" height="15" fill="rgb(232,141,28)"/><text x="39.2339%" y="927.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.40%)</title><rect x="38.6173%" y="1125" width="0.4015%" height="15" fill="rgb(209,167,14)"/><text x="38.8673%" y="1135.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.40%)</title><rect x="38.6173%" y="1109" width="0.4015%" height="15" fill="rgb(225,11,50)"/><text x="38.8673%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::into_iter::IntoIter&lt;model::rho_types::Par&gt;&gt;&gt; (14 samples, 0.24%)</title><rect x="38.7744%" y="1093" width="0.2444%" height="15" fill="rgb(209,50,20)"/><text x="39.0244%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;model::rho_types::Par&gt;&gt; (14 samples, 0.24%)</title><rect x="38.7744%" y="1077" width="0.2444%" height="15" fill="rgb(212,17,46)"/><text x="39.0244%" y="1087.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.24%)</title><rect x="38.7744%" y="1061" width="0.2444%" height="15" fill="rgb(216,101,39)"/><text x="39.0244%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;[model::rho_types::Par]&gt; (1 samples, 0.02%)</title><rect x="39.0014%" y="1045" width="0.0175%" height="15" fill="rgb(212,228,48)"/><text x="39.2514%" y="1055.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (26 samples, 0.45%)</title><rect x="38.5824%" y="1173" width="0.4539%" height="15" fill="rgb(250,6,50)"/><text x="38.8324%" y="1183.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::FromIterator&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::from_iter (26 samples, 0.45%)</title><rect x="38.5824%" y="1157" width="0.4539%" height="15" fill="rgb(250,160,48)"/><text x="38.8324%" y="1167.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (26 samples, 0.45%)</title><rect x="38.5824%" y="1141" width="0.4539%" height="15" fill="rgb(244,216,33)"/><text x="38.8324%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::FlatMap&lt;smallvec::IntoIter&lt;[model::rho_types::ListParWithRandom: 3]&gt;,alloc::vec::into_iter::IntoIter&lt;model::rho_types::Par&gt;,rho_runtime::interpreter::InterpreterContext&lt;rho_runtime::storage::store::AsyncStore&gt;::handle_comm_events::{{closure}}&gt;&gt; (1 samples, 0.02%)</title><rect x="39.0189%" y="1125" width="0.0175%" height="15" fill="rgb(207,157,5)"/><text x="39.2689%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::FlattenCompat&lt;core::iter::adapters::map::Map&lt;smallvec::IntoIter&lt;[model::rho_types::ListParWithRandom: 3]&gt;,rho_runtime::interpreter::InterpreterContext&lt;rho_runtime::storage::store::AsyncStore&gt;::handle_comm_events::{{closure}}&gt;,alloc::vec::into_iter::IntoIter&lt;model::rho_types::Par&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="39.0189%" y="1109" width="0.0175%" height="15" fill="rgb(228,199,8)"/><text x="39.2689%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::fuse::Fuse&lt;core::iter::adapters::map::Map&lt;smallvec::IntoIter&lt;[model::rho_types::ListParWithRandom: 3]&gt;,rho_runtime::interpreter::InterpreterContext&lt;rho_runtime::storage::store::AsyncStore&gt;::handle_comm_events::{{closure}}&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="39.0189%" y="1093" width="0.0175%" height="15" fill="rgb(227,80,20)"/><text x="39.2689%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::iter::adapters::map::Map&lt;smallvec::IntoIter&lt;[model::rho_types::ListParWithRandom: 3]&gt;,rho_runtime::interpreter::InterpreterContext&lt;rho_runtime::storage::store::AsyncStore&gt;::handle_comm_events::{{closure}}&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="39.0189%" y="1077" width="0.0175%" height="15" fill="rgb(222,9,33)"/><text x="39.2689%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;smallvec::IntoIter&lt;[model::rho_types::ListParWithRandom: 3]&gt;,rho_runtime::interpreter::InterpreterContext&lt;rho_runtime::storage::store::AsyncStore&gt;::handle_comm_events::{{closure}}&gt;&gt; (1 samples, 0.02%)</title><rect x="39.0189%" y="1061" width="0.0175%" height="15" fill="rgb(239,44,28)"/><text x="39.2689%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;smallvec::IntoIter&lt;[model::rho_types::ListParWithRandom: 3]&gt;&gt; (1 samples, 0.02%)</title><rect x="39.0189%" y="1045" width="0.0175%" height="15" fill="rgb(249,187,43)"/><text x="39.2689%" y="1055.50"></text></g><g><title>&lt;smallvec::IntoIter&lt;A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="39.0189%" y="1029" width="0.0175%" height="15" fill="rgb(216,141,28)"/><text x="39.2689%" y="1039.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="39.0189%" y="1013" width="0.0175%" height="15" fill="rgb(230,154,53)"/><text x="39.2689%" y="1023.50"></text></g><g><title>&lt;smallvec::IntoIter&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="39.0189%" y="997" width="0.0175%" height="15" fill="rgb(227,82,4)"/><text x="39.2689%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Bundle&gt;&gt; (1 samples, 0.02%)</title><rect x="39.0363%" y="1157" width="0.0175%" height="15" fill="rgb(220,107,16)"/><text x="39.2863%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::Bundle&gt;&gt; (1 samples, 0.02%)</title><rect x="39.0363%" y="1141" width="0.0175%" height="15" fill="rgb(207,187,2)"/><text x="39.2863%" y="1151.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="39.0363%" y="1125" width="0.0175%" height="15" fill="rgb(210,162,52)"/><text x="39.2863%" y="1135.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.02%)</title><rect x="39.0363%" y="1109" width="0.0175%" height="15" fill="rgb(217,216,49)"/><text x="39.2863%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Match&gt;&gt; (1 samples, 0.02%)</title><rect x="39.0538%" y="1157" width="0.0175%" height="15" fill="rgb(218,146,49)"/><text x="39.3038%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::Match&gt;&gt; (1 samples, 0.02%)</title><rect x="39.0538%" y="1141" width="0.0175%" height="15" fill="rgb(216,55,40)"/><text x="39.3038%" y="1151.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="39.0538%" y="1125" width="0.0175%" height="15" fill="rgb(208,196,21)"/><text x="39.3038%" y="1135.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="39.0538%" y="1109" width="0.0175%" height="15" fill="rgb(242,117,42)"/><text x="39.3038%" y="1119.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="39.0538%" y="1093" width="0.0175%" height="15" fill="rgb(210,11,23)"/><text x="39.3038%" y="1103.50"></text></g><g><title>__rg_dealloc (1 samples, 0.02%)</title><rect x="39.0538%" y="1077" width="0.0175%" height="15" fill="rgb(217,110,2)"/><text x="39.3038%" y="1087.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (1 samples, 0.02%)</title><rect x="39.0538%" y="1061" width="0.0175%" height="15" fill="rgb(229,77,54)"/><text x="39.3038%" y="1071.50"></text></g><g><title>_mi_page_retire (1 samples, 0.02%)</title><rect x="39.0538%" y="1045" width="0.0175%" height="15" fill="rgb(218,53,16)"/><text x="39.3038%" y="1055.50"></text></g><g><title>mi_page_queue_of (1 samples, 0.02%)</title><rect x="39.0538%" y="1029" width="0.0175%" height="15" fill="rgb(215,38,13)"/><text x="39.3038%" y="1039.50"></text></g><g><title>_mi_bin (1 samples, 0.02%)</title><rect x="39.0538%" y="1013" width="0.0175%" height="15" fill="rgb(235,42,18)"/><text x="39.3038%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Par&gt; (3 samples, 0.05%)</title><rect x="39.0363%" y="1173" width="0.0524%" height="15" fill="rgb(219,66,54)"/><text x="39.2863%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Receive&gt;&gt; (1 samples, 0.02%)</title><rect x="39.0712%" y="1157" width="0.0175%" height="15" fill="rgb(222,205,4)"/><text x="39.3212%" y="1167.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="39.0712%" y="1141" width="0.0175%" height="15" fill="rgb(227,213,46)"/><text x="39.3212%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;[model::rho_types::Receive]&gt; (1 samples, 0.02%)</title><rect x="39.0712%" y="1125" width="0.0175%" height="15" fill="rgb(250,145,42)"/><text x="39.3212%" y="1135.50"></text></g><g><title>_mi_free_block_mt (3 samples, 0.05%)</title><rect x="39.0887%" y="1109" width="0.0524%" height="15" fill="rgb(219,15,2)"/><text x="39.3387%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Bundle&gt;&gt; (1 samples, 0.02%)</title><rect x="39.1411%" y="1093" width="0.0175%" height="15" fill="rgb(231,181,52)"/><text x="39.3911%" y="1103.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="39.1411%" y="1077" width="0.0175%" height="15" fill="rgb(235,1,42)"/><text x="39.3911%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;[model::rho_types::Bundle]&gt; (1 samples, 0.02%)</title><rect x="39.1411%" y="1061" width="0.0175%" height="15" fill="rgb(249,88,27)"/><text x="39.3911%" y="1071.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="39.1585%" y="1077" width="0.0175%" height="15" fill="rgb(235,145,16)"/><text x="39.4085%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;[model::rho_types::Expr]&gt; (1 samples, 0.02%)</title><rect x="39.1585%" y="1061" width="0.0175%" height="15" fill="rgb(237,114,19)"/><text x="39.4085%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Expr&gt;&gt; (7 samples, 0.12%)</title><rect x="39.1585%" y="1093" width="0.1222%" height="15" fill="rgb(238,51,50)"/><text x="39.4085%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::Expr&gt;&gt; (6 samples, 0.10%)</title><rect x="39.1760%" y="1077" width="0.1047%" height="15" fill="rgb(205,194,25)"/><text x="39.4260%" y="1087.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.10%)</title><rect x="39.1760%" y="1061" width="0.1047%" height="15" fill="rgb(215,203,17)"/><text x="39.4260%" y="1071.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.10%)</title><rect x="39.1760%" y="1045" width="0.1047%" height="15" fill="rgb(233,112,49)"/><text x="39.4260%" y="1055.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.10%)</title><rect x="39.1760%" y="1029" width="0.1047%" height="15" fill="rgb(241,130,26)"/><text x="39.4260%" y="1039.50"></text></g><g><title>__rg_dealloc (6 samples, 0.10%)</title><rect x="39.1760%" y="1013" width="0.1047%" height="15" fill="rgb(252,223,19)"/><text x="39.4260%" y="1023.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (6 samples, 0.10%)</title><rect x="39.1760%" y="997" width="0.1047%" height="15" fill="rgb(211,95,25)"/><text x="39.4260%" y="1007.50"></text></g><g><title>_mi_free_block_mt (6 samples, 0.10%)</title><rect x="39.1760%" y="981" width="0.1047%" height="15" fill="rgb(251,182,27)"/><text x="39.4260%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;rho_runtime::interpreter::reduce::environment::Env&gt; (12 samples, 0.21%)</title><rect x="39.0887%" y="1173" width="0.2095%" height="15" fill="rgb(238,24,4)"/><text x="39.3387%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;smallvec::SmallVec&lt;[model::rho_types::Par: 6]&gt;&gt; (12 samples, 0.21%)</title><rect x="39.0887%" y="1157" width="0.2095%" height="15" fill="rgb(224,220,25)"/><text x="39.3387%" y="1167.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.21%)</title><rect x="39.0887%" y="1141" width="0.2095%" height="15" fill="rgb(239,133,26)"/><text x="39.3387%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;[model::rho_types::Par]&gt; (12 samples, 0.21%)</title><rect x="39.0887%" y="1125" width="0.2095%" height="15" fill="rgb(211,94,48)"/><text x="39.3387%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Par&gt; (9 samples, 0.16%)</title><rect x="39.1411%" y="1109" width="0.1571%" height="15" fill="rgb(239,87,6)"/><text x="39.3911%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::GUnforgeable&gt;&gt; (1 samples, 0.02%)</title><rect x="39.2807%" y="1093" width="0.0175%" height="15" fill="rgb(227,62,0)"/><text x="39.5307%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::GUnforgeable&gt;&gt; (1 samples, 0.02%)</title><rect x="39.2807%" y="1077" width="0.0175%" height="15" fill="rgb(211,226,4)"/><text x="39.5307%" y="1087.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="39.2807%" y="1061" width="0.0175%" height="15" fill="rgb(253,38,52)"/><text x="39.5307%" y="1071.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.02%)</title><rect x="39.2807%" y="1045" width="0.0175%" height="15" fill="rgb(229,126,40)"/><text x="39.5307%" y="1055.50"></text></g><g><title>mi_free (1 samples, 0.02%)</title><rect x="39.2982%" y="1173" width="0.0175%" height="15" fill="rgb(229,165,44)"/><text x="39.5482%" y="1183.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::produce::{{closure}} (138 samples, 2.41%)</title><rect x="36.9239%" y="1205" width="2.4092%" height="15" fill="rgb(247,95,47)"/><text x="37.1739%" y="1215.50">rh..</text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::handle_comm_events (52 samples, 0.91%)</title><rect x="38.4253%" y="1189" width="0.9078%" height="15" fill="rgb(216,140,30)"/><text x="38.6753%" y="1199.50"></text></g><g><title>rho_runtime::interpreter::reduce::environment::Env&lt;T&gt;::create (1 samples, 0.02%)</title><rect x="39.3156%" y="1173" width="0.0175%" height="15" fill="rgb(246,214,8)"/><text x="39.5656%" y="1183.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="39.3156%" y="1157" width="0.0175%" height="15" fill="rgb(227,224,15)"/><text x="39.5656%" y="1167.50"></text></g><g><title>&lt;smallvec::IntoIter&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.05%)</title><rect x="39.5077%" y="1157" width="0.0524%" height="15" fill="rgb(233,175,4)"/><text x="39.7577%" y="1167.50"></text></g><g><title>[libc-2.31.so] (3 samples, 0.05%)</title><rect x="39.5077%" y="1141" width="0.0524%" height="15" fill="rgb(221,66,45)"/><text x="39.7577%" y="1151.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.02%)</title><rect x="39.5601%" y="1157" width="0.0175%" height="15" fill="rgb(221,178,18)"/><text x="39.8101%" y="1167.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::len (1 samples, 0.02%)</title><rect x="39.5601%" y="1141" width="0.0175%" height="15" fill="rgb(213,81,29)"/><text x="39.8101%" y="1151.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple (1 samples, 0.02%)</title><rect x="39.5601%" y="1125" width="0.0175%" height="15" fill="rgb(220,89,49)"/><text x="39.8101%" y="1135.50"></text></g><g><title>[libc-2.31.so] (25 samples, 0.44%)</title><rect x="39.5775%" y="1157" width="0.4365%" height="15" fill="rgb(227,60,33)"/><text x="39.8275%" y="1167.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::spawn_evaluation::{{closure}} (41 samples, 0.72%)</title><rect x="39.3331%" y="1205" width="0.7158%" height="15" fill="rgb(205,113,12)"/><text x="39.5831%" y="1215.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_send::&lt;impl rho_runtime::interpreter::reduce::Evaluator&lt;S&gt; for model::rho_types::Send&gt;::evaluate (41 samples, 0.72%)</title><rect x="39.3331%" y="1189" width="0.7158%" height="15" fill="rgb(211,32,1)"/><text x="39.5831%" y="1199.50"></text></g><g><title>&lt;model::rho_types::Par as rho_runtime::interpreter::reduce::eval_expression::ParExpressionEvaluator&lt;S&gt;&gt;::evaluate_nested_expressions (41 samples, 0.72%)</title><rect x="39.3331%" y="1173" width="0.7158%" height="15" fill="rgb(246,2,12)"/><text x="39.5831%" y="1183.50"></text></g><g><title>__rust_probestack (2 samples, 0.03%)</title><rect x="40.0140%" y="1157" width="0.0349%" height="15" fill="rgb(243,37,27)"/><text x="40.2640%" y="1167.50"></text></g><g><title>&lt;rho_runtime::storage::TaggedContinuation as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="40.0489%" y="1173" width="0.0175%" height="15" fill="rgb(248,211,31)"/><text x="40.2989%" y="1183.50"></text></g><g><title>&lt;model::rho_types::ParWithRandom as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="40.0489%" y="1157" width="0.0175%" height="15" fill="rgb(242,146,47)"/><text x="40.2989%" y="1167.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="40.0489%" y="1141" width="0.0175%" height="15" fill="rgb(206,70,20)"/><text x="40.2989%" y="1151.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="40.0489%" y="1125" width="0.0175%" height="15" fill="rgb(215,10,51)"/><text x="40.2989%" y="1135.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="40.0489%" y="1109" width="0.0175%" height="15" fill="rgb(243,178,53)"/><text x="40.2989%" y="1119.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.02%)</title><rect x="40.0489%" y="1093" width="0.0175%" height="15" fill="rgb(233,221,20)"/><text x="40.2989%" y="1103.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="40.0489%" y="1077" width="0.0175%" height="15" fill="rgb(218,95,35)"/><text x="40.2989%" y="1087.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.02%)</title><rect x="40.0489%" y="1061" width="0.0175%" height="15" fill="rgb(229,13,5)"/><text x="40.2989%" y="1071.50"></text></g><g><title>&lt;model::rho_types::Match as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="40.0489%" y="1045" width="0.0175%" height="15" fill="rgb(252,164,30)"/><text x="40.2989%" y="1055.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="40.0489%" y="1029" width="0.0175%" height="15" fill="rgb(232,68,36)"/><text x="40.2989%" y="1039.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="40.0489%" y="1013" width="0.0175%" height="15" fill="rgb(219,59,54)"/><text x="40.2989%" y="1023.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="40.0489%" y="997" width="0.0175%" height="15" fill="rgb(250,92,33)"/><text x="40.2989%" y="1007.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.02%)</title><rect x="40.0489%" y="981" width="0.0175%" height="15" fill="rgb(229,162,54)"/><text x="40.2989%" y="991.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="40.0489%" y="965" width="0.0175%" height="15" fill="rgb(244,114,52)"/><text x="40.2989%" y="975.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.02%)</title><rect x="40.0489%" y="949" width="0.0175%" height="15" fill="rgb(212,211,43)"/><text x="40.2989%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="40.0489%" y="933" width="0.0175%" height="15" fill="rgb(226,147,8)"/><text x="40.2989%" y="943.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="40.0489%" y="917" width="0.0175%" height="15" fill="rgb(226,23,13)"/><text x="40.2989%" y="927.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="40.0489%" y="901" width="0.0175%" height="15" fill="rgb(240,63,4)"/><text x="40.2989%" y="911.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="40.0489%" y="885" width="0.0175%" height="15" fill="rgb(221,1,32)"/><text x="40.2989%" y="895.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="40.0489%" y="869" width="0.0175%" height="15" fill="rgb(242,117,10)"/><text x="40.2989%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::sync::oneshot::Inner&lt;core::option::Option&lt;smallvec::SmallVec&lt;[(rho_runtime::storage::TaggedContinuation,smallvec::SmallVec&lt;[model::rho_types::ListParWithRandom: 3]&gt;): 3]&gt;&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="40.0663%" y="1157" width="0.0175%" height="15" fill="rgb(249,172,44)"/><text x="40.3163%" y="1167.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="40.0663%" y="1141" width="0.0175%" height="15" fill="rgb(244,46,45)"/><text x="40.3163%" y="1151.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.02%)</title><rect x="40.0663%" y="1125" width="0.0175%" height="15" fill="rgb(206,43,17)"/><text x="40.3163%" y="1135.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.02%)</title><rect x="40.0663%" y="1109" width="0.0175%" height="15" fill="rgb(239,218,39)"/><text x="40.3163%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::oneshot::Sender&lt;core::option::Option&lt;smallvec::SmallVec&lt;[(rho_runtime::storage::TaggedContinuation,smallvec::SmallVec&lt;[model::rho_types::ListParWithRandom: 3]&gt;): 3]&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="40.0838%" y="1157" width="0.0175%" height="15" fill="rgb(208,169,54)"/><text x="40.3338%" y="1167.50"></text></g><g><title>&lt;tokio::sync::oneshot::Sender&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="40.0838%" y="1141" width="0.0175%" height="15" fill="rgb(247,25,42)"/><text x="40.3338%" y="1151.50"></text></g><g><title>[libc-2.31.so] (14 samples, 0.24%)</title><rect x="40.1013%" y="1125" width="0.2444%" height="15" fill="rgb(226,23,31)"/><text x="40.3513%" y="1135.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (15 samples, 0.26%)</title><rect x="40.1013%" y="1157" width="0.2619%" height="15" fill="rgb(247,16,28)"/><text x="40.3513%" y="1167.50"></text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send::{{closure}} (15 samples, 0.26%)</title><rect x="40.1013%" y="1141" width="0.2619%" height="15" fill="rgb(231,147,38)"/><text x="40.3513%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::option::Option&lt;smallvec::SmallVec&lt;[(rho_runtime::storage::TaggedContinuation,smallvec::SmallVec&lt;[model::rho_types::ListParWithRandom: 3]&gt;): 3]&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="40.3457%" y="1125" width="0.0175%" height="15" fill="rgb(253,81,48)"/><text x="40.5957%" y="1135.50"></text></g><g><title>tokio::sync::oneshot::State::set_complete (31 samples, 0.54%)</title><rect x="40.3631%" y="1141" width="0.5412%" height="15" fill="rgb(249,222,43)"/><text x="40.6131%" y="1151.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (31 samples, 0.54%)</title><rect x="40.3631%" y="1125" width="0.5412%" height="15" fill="rgb(221,3,27)"/><text x="40.6131%" y="1135.50"></text></g><g><title>core::sync::atomic::atomic_or (31 samples, 0.54%)</title><rect x="40.3631%" y="1109" width="0.5412%" height="15" fill="rgb(228,180,5)"/><text x="40.6131%" y="1119.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="40.8869%" y="1093" width="0.0175%" height="15" fill="rgb(227,131,42)"/><text x="41.1369%" y="1103.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="40.8869%" y="1077" width="0.0175%" height="15" fill="rgb(212,3,39)"/><text x="41.1369%" y="1087.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.02%)</title><rect x="40.8869%" y="1061" width="0.0175%" height="15" fill="rgb(226,45,5)"/><text x="41.1369%" y="1071.50"></text></g><g><title>do_softirq_own_stack (1 samples, 0.02%)</title><rect x="40.8869%" y="1045" width="0.0175%" height="15" fill="rgb(215,167,45)"/><text x="41.1369%" y="1055.50"></text></g><g><title>asm_call_sysvec_on_stack (1 samples, 0.02%)</title><rect x="40.8869%" y="1029" width="0.0175%" height="15" fill="rgb(250,218,53)"/><text x="41.1369%" y="1039.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="40.8869%" y="1013" width="0.0175%" height="15" fill="rgb(207,140,0)"/><text x="41.1369%" y="1023.50"></text></g><g><title>run_rebalance_domains (1 samples, 0.02%)</title><rect x="40.8869%" y="997" width="0.0175%" height="15" fill="rgb(238,133,51)"/><text x="41.1369%" y="1007.50"></text></g><g><title>update_blocked_averages (1 samples, 0.02%)</title><rect x="40.8869%" y="981" width="0.0175%" height="15" fill="rgb(218,203,53)"/><text x="41.1369%" y="991.50"></text></g><g><title>__update_load_avg_cfs_rq (1 samples, 0.02%)</title><rect x="40.8869%" y="965" width="0.0175%" height="15" fill="rgb(226,184,25)"/><text x="41.1369%" y="975.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (229 samples, 4.00%)</title><rect x="36.9239%" y="1365" width="3.9979%" height="15" fill="rgb(231,121,21)"/><text x="37.1739%" y="1375.50">toki..</text></g><g><title>std::panic::catch_unwind (229 samples, 4.00%)</title><rect x="36.9239%" y="1349" width="3.9979%" height="15" fill="rgb(251,14,34)"/><text x="37.1739%" y="1359.50">std:..</text></g><g><title>std::panicking::try (229 samples, 4.00%)</title><rect x="36.9239%" y="1333" width="3.9979%" height="15" fill="rgb(249,193,11)"/><text x="37.1739%" y="1343.50">std:..</text></g><g><title>std::panicking::try::do_call (229 samples, 4.00%)</title><rect x="36.9239%" y="1317" width="3.9979%" height="15" fill="rgb(220,172,37)"/><text x="37.1739%" y="1327.50">std:..</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (229 samples, 4.00%)</title><rect x="36.9239%" y="1301" width="3.9979%" height="15" fill="rgb(231,229,43)"/><text x="37.1739%" y="1311.50">&lt;std..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (229 samples, 4.00%)</title><rect x="36.9239%" y="1285" width="3.9979%" height="15" fill="rgb(250,161,5)"/><text x="37.1739%" y="1295.50">toki..</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (229 samples, 4.00%)</title><rect x="36.9239%" y="1269" width="3.9979%" height="15" fill="rgb(218,225,18)"/><text x="37.1739%" y="1279.50">toki..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (229 samples, 4.00%)</title><rect x="36.9239%" y="1253" width="3.9979%" height="15" fill="rgb(245,45,42)"/><text x="37.1739%" y="1263.50">toki..</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (229 samples, 4.00%)</title><rect x="36.9239%" y="1237" width="3.9979%" height="15" fill="rgb(211,115,1)"/><text x="37.1739%" y="1247.50">toki..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (229 samples, 4.00%)</title><rect x="36.9239%" y="1221" width="3.9979%" height="15" fill="rgb(248,133,52)"/><text x="37.1739%" y="1231.50">&lt;cor..</text></g><g><title>rho_runtime::storage::coordinator::Coordinator::handle_join_double::{{closure}} (50 samples, 0.87%)</title><rect x="40.0489%" y="1205" width="0.8729%" height="15" fill="rgb(238,100,21)"/><text x="40.2989%" y="1215.50"></text></g><g><title>rho_runtime::storage::tuplecell::TuplespaceChannel::join (50 samples, 0.87%)</title><rect x="40.0489%" y="1189" width="0.8729%" height="15" fill="rgb(247,144,11)"/><text x="40.2989%" y="1199.50"></text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send (49 samples, 0.86%)</title><rect x="40.0663%" y="1173" width="0.8554%" height="15" fill="rgb(206,164,16)"/><text x="40.3163%" y="1183.50"></text></g><g><title>tokio::sync::oneshot::Inner&lt;T&gt;::complete (32 samples, 0.56%)</title><rect x="40.3631%" y="1157" width="0.5587%" height="15" fill="rgb(222,34,3)"/><text x="40.6131%" y="1167.50"></text></g><g><title>tokio::sync::oneshot::Task::with_task (1 samples, 0.02%)</title><rect x="40.9043%" y="1141" width="0.0175%" height="15" fill="rgb(248,82,4)"/><text x="41.1543%" y="1151.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="40.9043%" y="1125" width="0.0175%" height="15" fill="rgb(228,81,46)"/><text x="41.1543%" y="1135.50"></text></g><g><title>tokio::sync::oneshot::Task::with_task::{{closure}} (1 samples, 0.02%)</title><rect x="40.9043%" y="1109" width="0.0175%" height="15" fill="rgb(227,67,47)"/><text x="41.1543%" y="1119.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.02%)</title><rect x="40.9043%" y="1093" width="0.0175%" height="15" fill="rgb(215,93,53)"/><text x="41.1543%" y="1103.50"></text></g><g><title>core::task::wake::Waker::wake_by_ref (1 samples, 0.02%)</title><rect x="40.9043%" y="1077" width="0.0175%" height="15" fill="rgb(248,194,39)"/><text x="41.1543%" y="1087.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (1 samples, 0.02%)</title><rect x="40.9043%" y="1061" width="0.0175%" height="15" fill="rgb(215,5,19)"/><text x="41.1543%" y="1071.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="40.9043%" y="1045" width="0.0175%" height="15" fill="rgb(226,215,51)"/><text x="41.1543%" y="1055.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule::{{closure}} (1 samples, 0.02%)</title><rect x="40.9043%" y="1029" width="0.0175%" height="15" fill="rgb(225,56,26)"/><text x="41.1543%" y="1039.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5 samples, 0.09%)</title><rect x="40.9218%" y="1173" width="0.0873%" height="15" fill="rgb(222,75,29)"/><text x="41.1718%" y="1183.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::produce::{{closure}} (5 samples, 0.09%)</title><rect x="40.9218%" y="1157" width="0.0873%" height="15" fill="rgb(236,139,6)"/><text x="41.1718%" y="1167.50"></text></g><g><title>&lt;rho_runtime::storage::store::AsyncStore as rho_runtime::storage::Storage&gt;::produce (5 samples, 0.09%)</title><rect x="40.9218%" y="1141" width="0.0873%" height="15" fill="rgb(223,137,36)"/><text x="41.1718%" y="1151.50"></text></g><g><title>&lt;model::rho_types::Par as model::ordering::hash::Blake3Hashable&gt;::blake3_hash (5 samples, 0.09%)</title><rect x="40.9218%" y="1125" width="0.0873%" height="15" fill="rgb(226,99,2)"/><text x="41.1718%" y="1135.50"></text></g><g><title>&lt;model::rho_types::Par as model::ordering::hash::Blake3Hashable&gt;::blake3_hash::traverse (5 samples, 0.09%)</title><rect x="40.9218%" y="1109" width="0.0873%" height="15" fill="rgb(206,133,23)"/><text x="41.1718%" y="1119.50"></text></g><g><title>&lt;model::ordering::ScoreTreeIter as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.09%)</title><rect x="40.9218%" y="1093" width="0.0873%" height="15" fill="rgb(243,173,15)"/><text x="41.1718%" y="1103.50"></text></g><g><title>&lt;model::ordering::sort_par::ParScoreTreeIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="40.9742%" y="1077" width="0.0349%" height="15" fill="rgb(228,69,28)"/><text x="41.2242%" y="1087.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::produce::{{closure}} (2 samples, 0.03%)</title><rect x="41.0091%" y="757" width="0.0349%" height="15" fill="rgb(212,51,22)"/><text x="41.2591%" y="767.50"></text></g><g><title>&lt;rho_runtime::storage::store::AsyncStore as rho_runtime::storage::Storage&gt;::produce (2 samples, 0.03%)</title><rect x="41.0091%" y="741" width="0.0349%" height="15" fill="rgb(227,113,0)"/><text x="41.2591%" y="751.50"></text></g><g><title>&lt;model::rho_types::Par as model::ordering::hash::Blake3Hashable&gt;::blake3_hash (2 samples, 0.03%)</title><rect x="41.0091%" y="725" width="0.0349%" height="15" fill="rgb(252,84,27)"/><text x="41.2591%" y="735.50"></text></g><g><title>&lt;model::rho_types::Par as model::ordering::hash::Blake3Hashable&gt;::blake3_hash::traverse (2 samples, 0.03%)</title><rect x="41.0091%" y="709" width="0.0349%" height="15" fill="rgb(223,145,39)"/><text x="41.2591%" y="719.50"></text></g><g><title>_mi_page_free_collect (5 samples, 0.09%)</title><rect x="41.0440%" y="341" width="0.0873%" height="15" fill="rgb(239,219,30)"/><text x="41.2940%" y="351.50"></text></g><g><title>_mi_page_thread_free_collect (5 samples, 0.09%)</title><rect x="41.0440%" y="325" width="0.0873%" height="15" fill="rgb(224,196,39)"/><text x="41.2940%" y="335.50"></text></g><g><title>mi_block_next (5 samples, 0.09%)</title><rect x="41.0440%" y="309" width="0.0873%" height="15" fill="rgb(205,35,43)"/><text x="41.2940%" y="319.50"></text></g><g><title>mi_block_nextx (3 samples, 0.05%)</title><rect x="41.0789%" y="293" width="0.0524%" height="15" fill="rgb(228,201,21)"/><text x="41.3289%" y="303.50"></text></g><g><title>tokio::runtime::task::raw::poll (13 samples, 0.23%)</title><rect x="40.9218%" y="1365" width="0.2270%" height="15" fill="rgb(237,118,16)"/><text x="41.1718%" y="1375.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (13 samples, 0.23%)</title><rect x="40.9218%" y="1349" width="0.2270%" height="15" fill="rgb(241,17,19)"/><text x="41.1718%" y="1359.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (13 samples, 0.23%)</title><rect x="40.9218%" y="1333" width="0.2270%" height="15" fill="rgb(214,10,25)"/><text x="41.1718%" y="1343.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (13 samples, 0.23%)</title><rect x="40.9218%" y="1317" width="0.2270%" height="15" fill="rgb(238,37,29)"/><text x="41.1718%" y="1327.50"></text></g><g><title>std::panic::catch_unwind (13 samples, 0.23%)</title><rect x="40.9218%" y="1301" width="0.2270%" height="15" fill="rgb(253,83,25)"/><text x="41.1718%" y="1311.50"></text></g><g><title>std::panicking::try (13 samples, 0.23%)</title><rect x="40.9218%" y="1285" width="0.2270%" height="15" fill="rgb(234,192,12)"/><text x="41.1718%" y="1295.50"></text></g><g><title>std::panicking::try::do_call (13 samples, 0.23%)</title><rect x="40.9218%" y="1269" width="0.2270%" height="15" fill="rgb(241,216,45)"/><text x="41.1718%" y="1279.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (13 samples, 0.23%)</title><rect x="40.9218%" y="1253" width="0.2270%" height="15" fill="rgb(242,22,33)"/><text x="41.1718%" y="1263.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (13 samples, 0.23%)</title><rect x="40.9218%" y="1237" width="0.2270%" height="15" fill="rgb(231,105,49)"/><text x="41.1718%" y="1247.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (13 samples, 0.23%)</title><rect x="40.9218%" y="1221" width="0.2270%" height="15" fill="rgb(218,204,15)"/><text x="41.1718%" y="1231.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (13 samples, 0.23%)</title><rect x="40.9218%" y="1205" width="0.2270%" height="15" fill="rgb(235,138,41)"/><text x="41.1718%" y="1215.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (13 samples, 0.23%)</title><rect x="40.9218%" y="1189" width="0.2270%" height="15" fill="rgb(246,0,9)"/><text x="41.1718%" y="1199.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (8 samples, 0.14%)</title><rect x="41.0091%" y="1173" width="0.1397%" height="15" fill="rgb(210,74,4)"/><text x="41.2591%" y="1183.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (8 samples, 0.14%)</title><rect x="41.0091%" y="1157" width="0.1397%" height="15" fill="rgb(250,60,41)"/><text x="41.2591%" y="1167.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (8 samples, 0.14%)</title><rect x="41.0091%" y="1141" width="0.1397%" height="15" fill="rgb(220,115,12)"/><text x="41.2591%" y="1151.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (8 samples, 0.14%)</title><rect x="41.0091%" y="1125" width="0.1397%" height="15" fill="rgb(237,100,13)"/><text x="41.2591%" y="1135.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (8 samples, 0.14%)</title><rect x="41.0091%" y="1109" width="0.1397%" height="15" fill="rgb(213,55,26)"/><text x="41.2591%" y="1119.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (8 samples, 0.14%)</title><rect x="41.0091%" y="1093" width="0.1397%" height="15" fill="rgb(216,17,4)"/><text x="41.2591%" y="1103.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (8 samples, 0.14%)</title><rect x="41.0091%" y="1077" width="0.1397%" height="15" fill="rgb(220,153,47)"/><text x="41.2591%" y="1087.50"></text></g><g><title>tokio::coop::budget (8 samples, 0.14%)</title><rect x="41.0091%" y="1061" width="0.1397%" height="15" fill="rgb(215,131,9)"/><text x="41.2591%" y="1071.50"></text></g><g><title>tokio::coop::with_budget (8 samples, 0.14%)</title><rect x="41.0091%" y="1045" width="0.1397%" height="15" fill="rgb(233,46,42)"/><text x="41.2591%" y="1055.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (8 samples, 0.14%)</title><rect x="41.0091%" y="1029" width="0.1397%" height="15" fill="rgb(226,86,7)"/><text x="41.2591%" y="1039.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (8 samples, 0.14%)</title><rect x="41.0091%" y="1013" width="0.1397%" height="15" fill="rgb(239,226,21)"/><text x="41.2591%" y="1023.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (8 samples, 0.14%)</title><rect x="41.0091%" y="997" width="0.1397%" height="15" fill="rgb(244,137,22)"/><text x="41.2591%" y="1007.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (8 samples, 0.14%)</title><rect x="41.0091%" y="981" width="0.1397%" height="15" fill="rgb(211,139,35)"/><text x="41.2591%" y="991.50"></text></g><g><title>tokio::runtime::task::raw::poll (8 samples, 0.14%)</title><rect x="41.0091%" y="965" width="0.1397%" height="15" fill="rgb(214,62,50)"/><text x="41.2591%" y="975.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (8 samples, 0.14%)</title><rect x="41.0091%" y="949" width="0.1397%" height="15" fill="rgb(212,113,44)"/><text x="41.2591%" y="959.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (8 samples, 0.14%)</title><rect x="41.0091%" y="933" width="0.1397%" height="15" fill="rgb(226,150,43)"/><text x="41.2591%" y="943.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (8 samples, 0.14%)</title><rect x="41.0091%" y="917" width="0.1397%" height="15" fill="rgb(250,71,37)"/><text x="41.2591%" y="927.50"></text></g><g><title>std::panic::catch_unwind (8 samples, 0.14%)</title><rect x="41.0091%" y="901" width="0.1397%" height="15" fill="rgb(219,76,19)"/><text x="41.2591%" y="911.50"></text></g><g><title>std::panicking::try (8 samples, 0.14%)</title><rect x="41.0091%" y="885" width="0.1397%" height="15" fill="rgb(250,39,11)"/><text x="41.2591%" y="895.50"></text></g><g><title>std::panicking::try::do_call (8 samples, 0.14%)</title><rect x="41.0091%" y="869" width="0.1397%" height="15" fill="rgb(230,64,31)"/><text x="41.2591%" y="879.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (8 samples, 0.14%)</title><rect x="41.0091%" y="853" width="0.1397%" height="15" fill="rgb(208,222,23)"/><text x="41.2591%" y="863.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (8 samples, 0.14%)</title><rect x="41.0091%" y="837" width="0.1397%" height="15" fill="rgb(227,125,18)"/><text x="41.2591%" y="847.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (8 samples, 0.14%)</title><rect x="41.0091%" y="821" width="0.1397%" height="15" fill="rgb(234,210,9)"/><text x="41.2591%" y="831.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (8 samples, 0.14%)</title><rect x="41.0091%" y="805" width="0.1397%" height="15" fill="rgb(217,127,24)"/><text x="41.2591%" y="815.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (8 samples, 0.14%)</title><rect x="41.0091%" y="789" width="0.1397%" height="15" fill="rgb(239,141,48)"/><text x="41.2591%" y="799.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8 samples, 0.14%)</title><rect x="41.0091%" y="773" width="0.1397%" height="15" fill="rgb(227,109,8)"/><text x="41.2591%" y="783.50"></text></g><g><title>rho_runtime::storage::coordinator::Coordinator::handle_join_double::{{closure}} (6 samples, 0.10%)</title><rect x="41.0440%" y="757" width="0.1047%" height="15" fill="rgb(235,184,23)"/><text x="41.2940%" y="767.50"></text></g><g><title>rho_runtime::storage::tuplecell::TuplespaceChannel::join (6 samples, 0.10%)</title><rect x="41.0440%" y="741" width="0.1047%" height="15" fill="rgb(227,226,48)"/><text x="41.2940%" y="751.50"></text></g><g><title>&lt;rho_runtime::storage::TaggedContinuation as core::clone::Clone&gt;::clone (6 samples, 0.10%)</title><rect x="41.0440%" y="725" width="0.1047%" height="15" fill="rgb(206,150,11)"/><text x="41.2940%" y="735.50"></text></g><g><title>&lt;model::rho_types::ParWithRandom as core::clone::Clone&gt;::clone (6 samples, 0.10%)</title><rect x="41.0440%" y="709" width="0.1047%" height="15" fill="rgb(254,2,33)"/><text x="41.2940%" y="719.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.10%)</title><rect x="41.0440%" y="693" width="0.1047%" height="15" fill="rgb(243,160,20)"/><text x="41.2940%" y="703.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (6 samples, 0.10%)</title><rect x="41.0440%" y="677" width="0.1047%" height="15" fill="rgb(218,208,30)"/><text x="41.2940%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.10%)</title><rect x="41.0440%" y="661" width="0.1047%" height="15" fill="rgb(224,120,49)"/><text x="41.2940%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6 samples, 0.10%)</title><rect x="41.0440%" y="645" width="0.1047%" height="15" fill="rgb(246,12,2)"/><text x="41.2940%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.10%)</title><rect x="41.0440%" y="629" width="0.1047%" height="15" fill="rgb(236,117,3)"/><text x="41.2940%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6 samples, 0.10%)</title><rect x="41.0440%" y="613" width="0.1047%" height="15" fill="rgb(216,128,52)"/><text x="41.2940%" y="623.50"></text></g><g><title>&lt;model::rho_types::Match as core::clone::Clone&gt;::clone (6 samples, 0.10%)</title><rect x="41.0440%" y="597" width="0.1047%" height="15" fill="rgb(246,145,19)"/><text x="41.2940%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.10%)</title><rect x="41.0440%" y="581" width="0.1047%" height="15" fill="rgb(222,11,46)"/><text x="41.2940%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6 samples, 0.10%)</title><rect x="41.0440%" y="565" width="0.1047%" height="15" fill="rgb(245,82,36)"/><text x="41.2940%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.10%)</title><rect x="41.0440%" y="549" width="0.1047%" height="15" fill="rgb(250,73,51)"/><text x="41.2940%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6 samples, 0.10%)</title><rect x="41.0440%" y="533" width="0.1047%" height="15" fill="rgb(221,189,23)"/><text x="41.2940%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6 samples, 0.10%)</title><rect x="41.0440%" y="517" width="0.1047%" height="15" fill="rgb(210,33,7)"/><text x="41.2940%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.10%)</title><rect x="41.0440%" y="501" width="0.1047%" height="15" fill="rgb(210,107,22)"/><text x="41.2940%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.10%)</title><rect x="41.0440%" y="485" width="0.1047%" height="15" fill="rgb(222,116,37)"/><text x="41.2940%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.10%)</title><rect x="41.0440%" y="469" width="0.1047%" height="15" fill="rgb(254,17,48)"/><text x="41.2940%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.10%)</title><rect x="41.0440%" y="453" width="0.1047%" height="15" fill="rgb(224,36,32)"/><text x="41.2940%" y="463.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.10%)</title><rect x="41.0440%" y="437" width="0.1047%" height="15" fill="rgb(232,90,46)"/><text x="41.2940%" y="447.50"></text></g><g><title>__rg_alloc (6 samples, 0.10%)</title><rect x="41.0440%" y="421" width="0.1047%" height="15" fill="rgb(241,66,40)"/><text x="41.2940%" y="431.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (6 samples, 0.10%)</title><rect x="41.0440%" y="405" width="0.1047%" height="15" fill="rgb(249,184,29)"/><text x="41.2940%" y="415.50"></text></g><g><title>_mi_malloc_generic (6 samples, 0.10%)</title><rect x="41.0440%" y="389" width="0.1047%" height="15" fill="rgb(231,181,1)"/><text x="41.2940%" y="399.50"></text></g><g><title>_mi_heap_delayed_free (6 samples, 0.10%)</title><rect x="41.0440%" y="373" width="0.1047%" height="15" fill="rgb(224,94,2)"/><text x="41.2940%" y="383.50"></text></g><g><title>_mi_free_delayed_block (6 samples, 0.10%)</title><rect x="41.0440%" y="357" width="0.1047%" height="15" fill="rgb(229,170,15)"/><text x="41.2940%" y="367.50"></text></g><g><title>_mi_page_use_delayed_free (1 samples, 0.02%)</title><rect x="41.1313%" y="341" width="0.0175%" height="15" fill="rgb(240,127,35)"/><text x="41.3813%" y="351.50"></text></g><g><title>tokio::runtime::task::raw::try_read_output (1 samples, 0.02%)</title><rect x="41.1487%" y="1365" width="0.0175%" height="15" fill="rgb(248,196,34)"/><text x="41.3987%" y="1375.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::release (1 samples, 0.02%)</title><rect x="41.1662%" y="1365" width="0.0175%" height="15" fill="rgb(236,137,7)"/><text x="41.4162%" y="1375.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (1 samples, 0.02%)</title><rect x="41.1837%" y="1365" width="0.0175%" height="15" fill="rgb(235,127,16)"/><text x="41.4337%" y="1375.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (7 samples, 0.12%)</title><rect x="41.2011%" y="1365" width="0.1222%" height="15" fill="rgb(250,192,54)"/><text x="41.4511%" y="1375.50"></text></g><g><title>tokio::coop::budget (5 samples, 0.09%)</title><rect x="41.2360%" y="1349" width="0.0873%" height="15" fill="rgb(218,98,20)"/><text x="41.4860%" y="1359.50"></text></g><g><title>tokio::coop::with_budget (5 samples, 0.09%)</title><rect x="41.2360%" y="1333" width="0.0873%" height="15" fill="rgb(230,176,47)"/><text x="41.4860%" y="1343.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (5 samples, 0.09%)</title><rect x="41.2360%" y="1317" width="0.0873%" height="15" fill="rgb(244,2,33)"/><text x="41.4860%" y="1327.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5 samples, 0.09%)</title><rect x="41.2360%" y="1301" width="0.0873%" height="15" fill="rgb(231,100,17)"/><text x="41.4860%" y="1311.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (5 samples, 0.09%)</title><rect x="41.2360%" y="1285" width="0.0873%" height="15" fill="rgb(245,23,12)"/><text x="41.4860%" y="1295.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (5 samples, 0.09%)</title><rect x="41.2360%" y="1269" width="0.0873%" height="15" fill="rgb(249,55,22)"/><text x="41.4860%" y="1279.50"></text></g><g><title>tokio::runtime::task::raw::poll (5 samples, 0.09%)</title><rect x="41.2360%" y="1253" width="0.0873%" height="15" fill="rgb(207,134,9)"/><text x="41.4860%" y="1263.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (5 samples, 0.09%)</title><rect x="41.2360%" y="1237" width="0.0873%" height="15" fill="rgb(218,134,0)"/><text x="41.4860%" y="1247.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (5 samples, 0.09%)</title><rect x="41.2360%" y="1221" width="0.0873%" height="15" fill="rgb(213,212,33)"/><text x="41.4860%" y="1231.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (5 samples, 0.09%)</title><rect x="41.2360%" y="1205" width="0.0873%" height="15" fill="rgb(252,106,18)"/><text x="41.4860%" y="1215.50"></text></g><g><title>std::panic::catch_unwind (5 samples, 0.09%)</title><rect x="41.2360%" y="1189" width="0.0873%" height="15" fill="rgb(208,126,42)"/><text x="41.4860%" y="1199.50"></text></g><g><title>std::panicking::try (5 samples, 0.09%)</title><rect x="41.2360%" y="1173" width="0.0873%" height="15" fill="rgb(246,175,29)"/><text x="41.4860%" y="1183.50"></text></g><g><title>std::panicking::try::do_call (5 samples, 0.09%)</title><rect x="41.2360%" y="1157" width="0.0873%" height="15" fill="rgb(215,13,50)"/><text x="41.4860%" y="1167.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (5 samples, 0.09%)</title><rect x="41.2360%" y="1141" width="0.0873%" height="15" fill="rgb(216,172,15)"/><text x="41.4860%" y="1151.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (5 samples, 0.09%)</title><rect x="41.2360%" y="1125" width="0.0873%" height="15" fill="rgb(212,103,13)"/><text x="41.4860%" y="1135.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (5 samples, 0.09%)</title><rect x="41.2360%" y="1109" width="0.0873%" height="15" fill="rgb(231,171,36)"/><text x="41.4860%" y="1119.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (5 samples, 0.09%)</title><rect x="41.2360%" y="1093" width="0.0873%" height="15" fill="rgb(250,123,20)"/><text x="41.4860%" y="1103.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (5 samples, 0.09%)</title><rect x="41.2360%" y="1077" width="0.0873%" height="15" fill="rgb(212,53,50)"/><text x="41.4860%" y="1087.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5 samples, 0.09%)</title><rect x="41.2360%" y="1061" width="0.0873%" height="15" fill="rgb(243,54,12)"/><text x="41.4860%" y="1071.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::produce::{{closure}} (5 samples, 0.09%)</title><rect x="41.2360%" y="1045" width="0.0873%" height="15" fill="rgb(234,101,34)"/><text x="41.4860%" y="1055.50"></text></g><g><title>&lt;rho_runtime::storage::store::AsyncStore as rho_runtime::storage::Storage&gt;::produce (5 samples, 0.09%)</title><rect x="41.2360%" y="1029" width="0.0873%" height="15" fill="rgb(254,67,22)"/><text x="41.4860%" y="1039.50"></text></g><g><title>&lt;model::rho_types::Par as model::ordering::hash::Blake3Hashable&gt;::blake3_hash (5 samples, 0.09%)</title><rect x="41.2360%" y="1013" width="0.0873%" height="15" fill="rgb(250,35,47)"/><text x="41.4860%" y="1023.50"></text></g><g><title>&lt;model::rho_types::Par as model::ordering::hash::Blake3Hashable&gt;::blake3_hash::traverse (5 samples, 0.09%)</title><rect x="41.2360%" y="997" width="0.0873%" height="15" fill="rgb(226,126,38)"/><text x="41.4860%" y="1007.50"></text></g><g><title>model::ordering::sort_par::ParScoreTreeIter::news_score (5 samples, 0.09%)</title><rect x="41.2360%" y="981" width="0.0873%" height="15" fill="rgb(216,138,53)"/><text x="41.4860%" y="991.50"></text></g><g><title>model::ordering::sort_par::ParScoreTreeIter::matches_score (5 samples, 0.09%)</title><rect x="41.2360%" y="965" width="0.0873%" height="15" fill="rgb(246,199,43)"/><text x="41.4860%" y="975.50"></text></g><g><title>model::ordering::sort_par::ParScoreTreeIter::bundles_score (5 samples, 0.09%)</title><rect x="41.2360%" y="949" width="0.0873%" height="15" fill="rgb(232,125,11)"/><text x="41.4860%" y="959.50"></text></g><g><title>model::ordering::sort_par::ParScoreTreeIter::connectives_score (5 samples, 0.09%)</title><rect x="41.2360%" y="933" width="0.0873%" height="15" fill="rgb(218,219,45)"/><text x="41.4860%" y="943.50"></text></g><g><title>model::ordering::sort_par::ParScoreTreeIter::unforgeables_score (5 samples, 0.09%)</title><rect x="41.2360%" y="917" width="0.0873%" height="15" fill="rgb(216,102,54)"/><text x="41.4860%" y="927.50"></text></g><g><title>model::ordering::sort_unforgeable::&lt;impl model::ordering::Scorable for &amp;model::rho_types::GUnforgeable&gt;::score_tree_iter (5 samples, 0.09%)</title><rect x="41.2360%" y="901" width="0.0873%" height="15" fill="rgb(250,228,7)"/><text x="41.4860%" y="911.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.02%)</title><rect x="41.3233%" y="1349" width="0.0175%" height="15" fill="rgb(226,125,25)"/><text x="41.5733%" y="1359.50"></text></g><g><title>core::mem::take (1 samples, 0.02%)</title><rect x="41.3233%" y="1333" width="0.0175%" height="15" fill="rgb(224,165,27)"/><text x="41.5733%" y="1343.50"></text></g><g><title>core::mem::replace (1 samples, 0.02%)</title><rect x="41.3233%" y="1317" width="0.0175%" height="15" fill="rgb(233,86,3)"/><text x="41.5733%" y="1327.50"></text></g><g><title>core::mem::swap (1 samples, 0.02%)</title><rect x="41.3233%" y="1301" width="0.0175%" height="15" fill="rgb(228,116,20)"/><text x="41.5733%" y="1311.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (1 samples, 0.02%)</title><rect x="41.3233%" y="1285" width="0.0175%" height="15" fill="rgb(209,192,17)"/><text x="41.5733%" y="1295.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="41.3233%" y="1269" width="0.0175%" height="15" fill="rgb(224,88,34)"/><text x="41.5733%" y="1279.50"></text></g><g><title>[unknown] (1,150 samples, 20.08%)</title><rect x="21.2814%" y="1381" width="20.0768%" height="15" fill="rgb(233,38,6)"/><text x="21.5314%" y="1391.50">[unknown]</text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send (2 samples, 0.03%)</title><rect x="41.3233%" y="1365" width="0.0349%" height="15" fill="rgb(212,59,30)"/><text x="41.5733%" y="1375.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1 samples, 0.02%)</title><rect x="41.3408%" y="1349" width="0.0175%" height="15" fill="rgb(213,80,3)"/><text x="41.5908%" y="1359.50"></text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send::{{closure}} (1 samples, 0.02%)</title><rect x="41.3408%" y="1333" width="0.0175%" height="15" fill="rgb(251,178,7)"/><text x="41.5908%" y="1343.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.02%)</title><rect x="41.3582%" y="1381" width="0.0175%" height="15" fill="rgb(213,154,26)"/><text x="41.6082%" y="1391.50"></text></g><g><title>blake3_compress_in_place_avx512 (13 samples, 0.23%)</title><rect x="41.3757%" y="1381" width="0.2270%" height="15" fill="rgb(238,165,49)"/><text x="41.6257%" y="1391.50"></text></g><g><title>__nptl_deallocate_tsd.part.0 (1 samples, 0.02%)</title><rect x="41.6027%" y="1349" width="0.0175%" height="15" fill="rgb(248,91,46)"/><text x="41.8527%" y="1359.50"></text></g><g><title>_mi_heap_done (1 samples, 0.02%)</title><rect x="41.6027%" y="1333" width="0.0175%" height="15" fill="rgb(244,21,52)"/><text x="41.8527%" y="1343.50"></text></g><g><title>_mi_os_free_ex (1 samples, 0.02%)</title><rect x="41.6027%" y="1317" width="0.0175%" height="15" fill="rgb(247,122,20)"/><text x="41.8527%" y="1327.50"></text></g><g><title>_mi_os_free_ex (1 samples, 0.02%)</title><rect x="41.6027%" y="1301" width="0.0175%" height="15" fill="rgb(218,27,9)"/><text x="41.8527%" y="1311.50"></text></g><g><title>mi_os_mem_free (1 samples, 0.02%)</title><rect x="41.6027%" y="1285" width="0.0175%" height="15" fill="rgb(246,7,6)"/><text x="41.8527%" y="1295.50"></text></g><g><title>__munmap (1 samples, 0.02%)</title><rect x="41.6027%" y="1269" width="0.0175%" height="15" fill="rgb(227,135,54)"/><text x="41.8527%" y="1279.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.02%)</title><rect x="41.6027%" y="1253" width="0.0175%" height="15" fill="rgb(247,14,11)"/><text x="41.8527%" y="1263.50"></text></g><g><title>do_syscall_64 (1 samples, 0.02%)</title><rect x="41.6027%" y="1237" width="0.0175%" height="15" fill="rgb(206,149,34)"/><text x="41.8527%" y="1247.50"></text></g><g><title>__x64_sys_munmap (1 samples, 0.02%)</title><rect x="41.6027%" y="1221" width="0.0175%" height="15" fill="rgb(227,228,4)"/><text x="41.8527%" y="1231.50"></text></g><g><title>__vm_munmap (1 samples, 0.02%)</title><rect x="41.6027%" y="1205" width="0.0175%" height="15" fill="rgb(238,218,28)"/><text x="41.8527%" y="1215.50"></text></g><g><title>down_write_killable (1 samples, 0.02%)</title><rect x="41.6027%" y="1189" width="0.0175%" height="15" fill="rgb(252,86,40)"/><text x="41.8527%" y="1199.50"></text></g><g><title>rwsem_down_write_slowpath (1 samples, 0.02%)</title><rect x="41.6027%" y="1173" width="0.0175%" height="15" fill="rgb(251,225,11)"/><text x="41.8527%" y="1183.50"></text></g><g><title>rwsem_optimistic_spin (1 samples, 0.02%)</title><rect x="41.6027%" y="1157" width="0.0175%" height="15" fill="rgb(206,46,49)"/><text x="41.8527%" y="1167.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.09%)</title><rect x="41.6201%" y="1349" width="0.0873%" height="15" fill="rgb(245,128,24)"/><text x="41.8701%" y="1359.50"></text></g><g><title>do_syscall_64 (5 samples, 0.09%)</title><rect x="41.6201%" y="1333" width="0.0873%" height="15" fill="rgb(219,177,34)"/><text x="41.8701%" y="1343.50"></text></g><g><title>__x64_sys_exit (5 samples, 0.09%)</title><rect x="41.6201%" y="1317" width="0.0873%" height="15" fill="rgb(218,60,48)"/><text x="41.8701%" y="1327.50"></text></g><g><title>do_exit (5 samples, 0.09%)</title><rect x="41.6201%" y="1301" width="0.0873%" height="15" fill="rgb(221,11,5)"/><text x="41.8701%" y="1311.50"></text></g><g><title>down_read (5 samples, 0.09%)</title><rect x="41.6201%" y="1285" width="0.0873%" height="15" fill="rgb(220,148,13)"/><text x="41.8701%" y="1295.50"></text></g><g><title>rwsem_down_read_slowpath (5 samples, 0.09%)</title><rect x="41.6201%" y="1269" width="0.0873%" height="15" fill="rgb(210,16,3)"/><text x="41.8701%" y="1279.50"></text></g><g><title>schedule (5 samples, 0.09%)</title><rect x="41.6201%" y="1253" width="0.0873%" height="15" fill="rgb(236,80,2)"/><text x="41.8701%" y="1263.50"></text></g><g><title>__sched_text_start (5 samples, 0.09%)</title><rect x="41.6201%" y="1237" width="0.0873%" height="15" fill="rgb(239,129,19)"/><text x="41.8701%" y="1247.50"></text></g><g><title>finish_task_switch (5 samples, 0.09%)</title><rect x="41.6201%" y="1221" width="0.0873%" height="15" fill="rgb(220,106,35)"/><text x="41.8701%" y="1231.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.09%)</title><rect x="41.6201%" y="1205" width="0.0873%" height="15" fill="rgb(252,139,45)"/><text x="41.8701%" y="1215.50"></text></g><g><title>perf_pmu_enable.part.0 (5 samples, 0.09%)</title><rect x="41.6201%" y="1189" width="0.0873%" height="15" fill="rgb(229,8,36)"/><text x="41.8701%" y="1199.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.09%)</title><rect x="41.6201%" y="1173" width="0.0873%" height="15" fill="rgb(230,126,33)"/><text x="41.8701%" y="1183.50"></text></g><g><title>intel_pmu_enable_all (5 samples, 0.09%)</title><rect x="41.6201%" y="1157" width="0.0873%" height="15" fill="rgb(239,140,21)"/><text x="41.8701%" y="1167.50"></text></g><g><title>native_write_msr (5 samples, 0.09%)</title><rect x="41.6201%" y="1141" width="0.0873%" height="15" fill="rgb(254,104,9)"/><text x="41.8701%" y="1151.50"></text></g><g><title>asm_sysvec_call_function (1 samples, 0.02%)</title><rect x="41.7074%" y="853" width="0.0175%" height="15" fill="rgb(239,52,14)"/><text x="41.9574%" y="863.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (10 samples, 0.17%)</title><rect x="41.7074%" y="1141" width="0.1746%" height="15" fill="rgb(208,227,44)"/><text x="41.9574%" y="1151.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (10 samples, 0.17%)</title><rect x="41.7074%" y="1125" width="0.1746%" height="15" fill="rgb(246,18,19)"/><text x="41.9574%" y="1135.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (10 samples, 0.17%)</title><rect x="41.7074%" y="1109" width="0.1746%" height="15" fill="rgb(235,228,25)"/><text x="41.9574%" y="1119.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (10 samples, 0.17%)</title><rect x="41.7074%" y="1093" width="0.1746%" height="15" fill="rgb(240,156,20)"/><text x="41.9574%" y="1103.50"></text></g><g><title>parking_lot_core::parking_lot::park (10 samples, 0.17%)</title><rect x="41.7074%" y="1077" width="0.1746%" height="15" fill="rgb(224,8,20)"/><text x="41.9574%" y="1087.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (10 samples, 0.17%)</title><rect x="41.7074%" y="1061" width="0.1746%" height="15" fill="rgb(214,12,52)"/><text x="41.9574%" y="1071.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (10 samples, 0.17%)</title><rect x="41.7074%" y="1045" width="0.1746%" height="15" fill="rgb(211,220,47)"/><text x="41.9574%" y="1055.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (10 samples, 0.17%)</title><rect x="41.7074%" y="1029" width="0.1746%" height="15" fill="rgb(250,173,5)"/><text x="41.9574%" y="1039.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (10 samples, 0.17%)</title><rect x="41.7074%" y="1013" width="0.1746%" height="15" fill="rgb(250,125,52)"/><text x="41.9574%" y="1023.50"></text></g><g><title>syscall (10 samples, 0.17%)</title><rect x="41.7074%" y="997" width="0.1746%" height="15" fill="rgb(209,133,18)"/><text x="41.9574%" y="1007.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (10 samples, 0.17%)</title><rect x="41.7074%" y="981" width="0.1746%" height="15" fill="rgb(216,173,22)"/><text x="41.9574%" y="991.50"></text></g><g><title>do_syscall_64 (10 samples, 0.17%)</title><rect x="41.7074%" y="965" width="0.1746%" height="15" fill="rgb(205,3,22)"/><text x="41.9574%" y="975.50"></text></g><g><title>__x64_sys_futex (10 samples, 0.17%)</title><rect x="41.7074%" y="949" width="0.1746%" height="15" fill="rgb(248,22,20)"/><text x="41.9574%" y="959.50"></text></g><g><title>do_futex (10 samples, 0.17%)</title><rect x="41.7074%" y="933" width="0.1746%" height="15" fill="rgb(233,6,29)"/><text x="41.9574%" y="943.50"></text></g><g><title>futex_wait (10 samples, 0.17%)</title><rect x="41.7074%" y="917" width="0.1746%" height="15" fill="rgb(240,22,54)"/><text x="41.9574%" y="927.50"></text></g><g><title>futex_wait_queue_me (10 samples, 0.17%)</title><rect x="41.7074%" y="901" width="0.1746%" height="15" fill="rgb(231,133,32)"/><text x="41.9574%" y="911.50"></text></g><g><title>schedule (10 samples, 0.17%)</title><rect x="41.7074%" y="885" width="0.1746%" height="15" fill="rgb(248,193,4)"/><text x="41.9574%" y="895.50"></text></g><g><title>__sched_text_start (10 samples, 0.17%)</title><rect x="41.7074%" y="869" width="0.1746%" height="15" fill="rgb(211,178,46)"/><text x="41.9574%" y="879.50"></text></g><g><title>finish_task_switch (9 samples, 0.16%)</title><rect x="41.7249%" y="853" width="0.1571%" height="15" fill="rgb(224,5,42)"/><text x="41.9749%" y="863.50"></text></g><g><title>__perf_event_task_sched_in (9 samples, 0.16%)</title><rect x="41.7249%" y="837" width="0.1571%" height="15" fill="rgb(239,176,25)"/><text x="41.9749%" y="847.50"></text></g><g><title>perf_pmu_enable.part.0 (9 samples, 0.16%)</title><rect x="41.7249%" y="821" width="0.1571%" height="15" fill="rgb(245,187,50)"/><text x="41.9749%" y="831.50"></text></g><g><title>x86_pmu_enable (9 samples, 0.16%)</title><rect x="41.7249%" y="805" width="0.1571%" height="15" fill="rgb(248,24,15)"/><text x="41.9749%" y="815.50"></text></g><g><title>intel_pmu_enable_all (9 samples, 0.16%)</title><rect x="41.7249%" y="789" width="0.1571%" height="15" fill="rgb(205,166,13)"/><text x="41.9749%" y="799.50"></text></g><g><title>native_write_msr (9 samples, 0.16%)</title><rect x="41.7249%" y="773" width="0.1571%" height="15" fill="rgb(208,114,23)"/><text x="41.9749%" y="783.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (1 samples, 0.02%)</title><rect x="41.9867%" y="805" width="0.0175%" height="15" fill="rgb(239,127,18)"/><text x="42.2367%" y="815.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park_timeout (1 samples, 0.02%)</title><rect x="41.9867%" y="789" width="0.0175%" height="15" fill="rgb(219,154,28)"/><text x="42.2367%" y="799.50"></text></g><g><title>tokio::util::try_lock::TryLock&lt;T&gt;::try_lock (1 samples, 0.02%)</title><rect x="41.9867%" y="773" width="0.0175%" height="15" fill="rgb(225,157,23)"/><text x="42.2367%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (1 samples, 0.02%)</title><rect x="41.9867%" y="757" width="0.0175%" height="15" fill="rgb(219,8,6)"/><text x="42.2367%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.02%)</title><rect x="41.9867%" y="741" width="0.0175%" height="15" fill="rgb(212,47,6)"/><text x="42.2367%" y="751.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::maintenance (3 samples, 0.05%)</title><rect x="41.9693%" y="821" width="0.0524%" height="15" fill="rgb(224,190,4)"/><text x="42.2193%" y="831.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::maintenance (1 samples, 0.02%)</title><rect x="42.0042%" y="805" width="0.0175%" height="15" fill="rgb(239,183,29)"/><text x="42.2542%" y="815.50"></text></g><g><title>tokio::runtime::queue::Inject&lt;T&gt;::is_closed (1 samples, 0.02%)</title><rect x="42.0042%" y="789" width="0.0175%" height="15" fill="rgb(213,57,7)"/><text x="42.2542%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::queue::Pointers&gt;&gt; (1 samples, 0.02%)</title><rect x="42.0042%" y="773" width="0.0175%" height="15" fill="rgb(216,148,1)"/><text x="42.2542%" y="783.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="42.0042%" y="757" width="0.0175%" height="15" fill="rgb(236,182,29)"/><text x="42.2542%" y="767.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (1 samples, 0.02%)</title><rect x="42.0042%" y="741" width="0.0175%" height="15" fill="rgb(244,120,48)"/><text x="42.2542%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (1 samples, 0.02%)</title><rect x="42.0042%" y="725" width="0.0175%" height="15" fill="rgb(206,71,34)"/><text x="42.2542%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.02%)</title><rect x="42.0042%" y="709" width="0.0175%" height="15" fill="rgb(242,32,6)"/><text x="42.2542%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (14 samples, 0.24%)</title><rect x="42.2835%" y="757" width="0.2444%" height="15" fill="rgb(241,35,3)"/><text x="42.5335%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (14 samples, 0.24%)</title><rect x="42.2835%" y="741" width="0.2444%" height="15" fill="rgb(222,62,19)"/><text x="42.5335%" y="751.50"></text></g><g><title>__switch_to (1 samples, 0.02%)</title><rect x="42.9295%" y="709" width="0.0175%" height="15" fill="rgb(223,110,41)"/><text x="43.1795%" y="719.50"></text></g><g><title>do_syscall_64 (2 samples, 0.03%)</title><rect x="42.9469%" y="709" width="0.0349%" height="15" fill="rgb(208,224,4)"/><text x="43.1969%" y="719.50"></text></g><g><title>entry_SYSCALL_64 (35 samples, 0.61%)</title><rect x="42.9818%" y="709" width="0.6110%" height="15" fill="rgb(241,137,19)"/><text x="43.2318%" y="719.50"></text></g><g><title>__syscall_return_slowpath (1 samples, 0.02%)</title><rect x="43.6802%" y="693" width="0.0175%" height="15" fill="rgb(244,24,17)"/><text x="43.9302%" y="703.50"></text></g><g><title>__x64_sys_sched_yield (1 samples, 0.02%)</title><rect x="43.6976%" y="693" width="0.0175%" height="15" fill="rgb(245,178,49)"/><text x="43.9476%" y="703.50"></text></g><g><title>__x86_indirect_thunk_rax (1 samples, 0.02%)</title><rect x="43.7151%" y="693" width="0.0175%" height="15" fill="rgb(219,160,38)"/><text x="43.9651%" y="703.50"></text></g><g><title>__prepare_exit_to_usermode (11 samples, 0.19%)</title><rect x="44.0119%" y="661" width="0.1920%" height="15" fill="rgb(228,137,14)"/><text x="44.2619%" y="671.50"></text></g><g><title>fpregs_assert_state_consistent (2 samples, 0.03%)</title><rect x="44.1690%" y="645" width="0.0349%" height="15" fill="rgb(237,134,11)"/><text x="44.4190%" y="655.50"></text></g><g><title>__syscall_return_slowpath (17 samples, 0.30%)</title><rect x="43.9246%" y="677" width="0.2968%" height="15" fill="rgb(211,126,44)"/><text x="44.1746%" y="687.50"></text></g><g><title>fpregs_assert_state_consistent (1 samples, 0.02%)</title><rect x="44.2039%" y="661" width="0.0175%" height="15" fill="rgb(226,171,33)"/><text x="44.4539%" y="671.50"></text></g><g><title>__x86_indirect_thunk_rax (3 samples, 0.05%)</title><rect x="44.2388%" y="661" width="0.0524%" height="15" fill="rgb(253,99,13)"/><text x="44.4888%" y="671.50"></text></g><g><title>_raw_spin_lock (18 samples, 0.31%)</title><rect x="44.2912%" y="661" width="0.3142%" height="15" fill="rgb(244,48,7)"/><text x="44.5412%" y="671.50"></text></g><g><title>check_cfs_rq_runtime (3 samples, 0.05%)</title><rect x="45.8450%" y="613" width="0.0524%" height="15" fill="rgb(244,217,54)"/><text x="46.0950%" y="623.50"></text></g><g><title>pick_next_entity (3 samples, 0.05%)</title><rect x="45.8973%" y="613" width="0.0524%" height="15" fill="rgb(224,15,18)"/><text x="46.1473%" y="623.50"></text></g><g><title>__calc_delta (3 samples, 0.05%)</title><rect x="46.2640%" y="597" width="0.0524%" height="15" fill="rgb(244,99,12)"/><text x="46.5140%" y="607.50"></text></g><g><title>__cgroup_account_cputime (2 samples, 0.03%)</title><rect x="46.3163%" y="597" width="0.0349%" height="15" fill="rgb(233,226,8)"/><text x="46.5663%" y="607.50"></text></g><g><title>clear_buddies (7 samples, 0.12%)</title><rect x="46.3513%" y="597" width="0.1222%" height="15" fill="rgb(229,211,3)"/><text x="46.6013%" y="607.50"></text></g><g><title>cpuacct_charge (2 samples, 0.03%)</title><rect x="46.4735%" y="597" width="0.0349%" height="15" fill="rgb(216,140,21)"/><text x="46.7235%" y="607.50"></text></g><g><title>pick_next_entity (18 samples, 0.31%)</title><rect x="46.5084%" y="597" width="0.3142%" height="15" fill="rgb(234,122,30)"/><text x="46.7584%" y="607.50"></text></g><g><title>clear_buddies (4 samples, 0.07%)</title><rect x="46.7528%" y="581" width="0.0698%" height="15" fill="rgb(236,25,46)"/><text x="47.0028%" y="591.50"></text></g><g><title>__calc_delta (13 samples, 0.23%)</title><rect x="47.4860%" y="581" width="0.2270%" height="15" fill="rgb(217,52,54)"/><text x="47.7360%" y="591.50"></text></g><g><title>__cgroup_account_cputime (6 samples, 0.10%)</title><rect x="47.7130%" y="581" width="0.1047%" height="15" fill="rgb(222,29,26)"/><text x="47.9630%" y="591.50"></text></g><g><title>cgroup_rstat_updated (2 samples, 0.03%)</title><rect x="47.7828%" y="565" width="0.0349%" height="15" fill="rgb(216,177,29)"/><text x="48.0328%" y="575.50"></text></g><g><title>cgroup_rstat_updated (1 samples, 0.02%)</title><rect x="47.8177%" y="581" width="0.0175%" height="15" fill="rgb(247,136,51)"/><text x="48.0677%" y="591.50"></text></g><g><title>cpuacct_charge (18 samples, 0.31%)</title><rect x="47.8352%" y="581" width="0.3142%" height="15" fill="rgb(231,47,47)"/><text x="48.0852%" y="591.50"></text></g><g><title>update_curr (92 samples, 1.61%)</title><rect x="46.8226%" y="597" width="1.6061%" height="15" fill="rgb(211,192,36)"/><text x="47.0726%" y="607.50"></text></g><g><title>update_min_vruntime (16 samples, 0.28%)</title><rect x="48.1494%" y="581" width="0.2793%" height="15" fill="rgb(229,156,32)"/><text x="48.3994%" y="591.50"></text></g><g><title>pick_next_task_fair (148 samples, 2.58%)</title><rect x="45.9497%" y="613" width="2.5838%" height="15" fill="rgb(248,213,20)"/><text x="46.1997%" y="623.50">pi..</text></g><g><title>update_min_vruntime (6 samples, 0.10%)</title><rect x="48.4288%" y="597" width="0.1047%" height="15" fill="rgb(217,64,7)"/><text x="48.6788%" y="607.50"></text></g><g><title>rcu_note_context_switch (5 samples, 0.09%)</title><rect x="48.5335%" y="613" width="0.0873%" height="15" fill="rgb(232,142,8)"/><text x="48.7835%" y="623.50"></text></g><g><title>rcu_qs (2 samples, 0.03%)</title><rect x="48.6208%" y="613" width="0.0349%" height="15" fill="rgb(224,92,44)"/><text x="48.8708%" y="623.50"></text></g><g><title>update_curr (1 samples, 0.02%)</title><rect x="48.6557%" y="613" width="0.0175%" height="15" fill="rgb(214,169,17)"/><text x="48.9057%" y="623.50"></text></g><g><title>sched_clock (1 samples, 0.02%)</title><rect x="48.8652%" y="597" width="0.0175%" height="15" fill="rgb(210,59,37)"/><text x="49.1152%" y="607.50"></text></g><g><title>__sched_text_start (257 samples, 4.49%)</title><rect x="44.8848%" y="629" width="4.4867%" height="15" fill="rgb(214,116,48)"/><text x="45.1348%" y="639.50">__sch..</text></g><g><title>update_rq_clock (40 samples, 0.70%)</title><rect x="48.6732%" y="613" width="0.6983%" height="15" fill="rgb(244,191,6)"/><text x="48.9232%" y="623.50"></text></g><g><title>sched_clock_cpu (28 samples, 0.49%)</title><rect x="48.8827%" y="597" width="0.4888%" height="15" fill="rgb(241,50,52)"/><text x="49.1327%" y="607.50"></text></g><g><title>native_sched_clock (24 samples, 0.42%)</title><rect x="48.9525%" y="581" width="0.4190%" height="15" fill="rgb(236,75,39)"/><text x="49.2025%" y="591.50"></text></g><g><title>_raw_spin_lock (11 samples, 0.19%)</title><rect x="49.3715%" y="629" width="0.1920%" height="15" fill="rgb(236,99,0)"/><text x="49.6215%" y="639.50"></text></g><g><title>pick_next_task_fair (1 samples, 0.02%)</title><rect x="49.5635%" y="629" width="0.0175%" height="15" fill="rgb(207,202,15)"/><text x="49.8135%" y="639.50"></text></g><g><title>rcu_note_context_switch (1 samples, 0.02%)</title><rect x="49.5810%" y="629" width="0.0175%" height="15" fill="rgb(233,207,14)"/><text x="49.8310%" y="639.50"></text></g><g><title>schedule (282 samples, 4.92%)</title><rect x="44.7451%" y="645" width="4.9232%" height="15" fill="rgb(226,27,51)"/><text x="44.9951%" y="655.50">schedu..</text></g><g><title>update_rq_clock (4 samples, 0.07%)</title><rect x="49.5985%" y="629" width="0.0698%" height="15" fill="rgb(206,104,42)"/><text x="49.8485%" y="639.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (351 samples, 6.13%)</title><rect x="43.5929%" y="709" width="6.1278%" height="15" fill="rgb(212,225,4)"/><text x="43.8429%" y="719.50">entry_SY..</text></g><g><title>do_syscall_64 (343 samples, 5.99%)</title><rect x="43.7325%" y="693" width="5.9881%" height="15" fill="rgb(233,96,42)"/><text x="43.9825%" y="703.50">do_sysca..</text></g><g><title>__x64_sys_sched_yield (315 samples, 5.50%)</title><rect x="44.2214%" y="677" width="5.4993%" height="15" fill="rgb(229,21,32)"/><text x="44.4714%" y="687.50">__x64_s..</text></g><g><title>do_sched_yield (293 samples, 5.12%)</title><rect x="44.6054%" y="661" width="5.1152%" height="15" fill="rgb(226,216,24)"/><text x="44.8554%" y="671.50">do_sch..</text></g><g><title>yield_task_fair (3 samples, 0.05%)</title><rect x="49.6683%" y="645" width="0.0524%" height="15" fill="rgb(221,163,17)"/><text x="49.9183%" y="655.50"></text></g><g><title>__sched_yield (417 samples, 7.28%)</title><rect x="42.5628%" y="725" width="7.2800%" height="15" fill="rgb(216,216,42)"/><text x="42.8128%" y="735.50">__sched_yi..</text></g><g><title>syscall_return_via_sysret (7 samples, 0.12%)</title><rect x="49.7207%" y="709" width="0.1222%" height="15" fill="rgb(240,118,7)"/><text x="49.9707%" y="719.50"></text></g><g><title>std::thread::yield_now (421 samples, 7.35%)</title><rect x="42.5279%" y="757" width="7.3499%" height="15" fill="rgb(221,67,37)"/><text x="42.7779%" y="767.50">std::threa..</text></g><g><title>std::sys::unix::thread::Thread::yield_now (421 samples, 7.35%)</title><rect x="42.5279%" y="741" width="7.3499%" height="15" fill="rgb(241,32,44)"/><text x="42.7779%" y="751.50">std::sys::..</text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (2 samples, 0.03%)</title><rect x="49.8429%" y="725" width="0.0349%" height="15" fill="rgb(235,204,43)"/><text x="50.0929%" y="735.50"></text></g><g><title>parking_lot_core::parking_lot::park (2 samples, 0.03%)</title><rect x="49.8429%" y="709" width="0.0349%" height="15" fill="rgb(213,116,10)"/><text x="50.0929%" y="719.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (2 samples, 0.03%)</title><rect x="49.8429%" y="693" width="0.0349%" height="15" fill="rgb(239,15,48)"/><text x="50.0929%" y="703.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (2 samples, 0.03%)</title><rect x="49.8429%" y="677" width="0.0349%" height="15" fill="rgb(207,123,36)"/><text x="50.0929%" y="687.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (2 samples, 0.03%)</title><rect x="49.8429%" y="661" width="0.0349%" height="15" fill="rgb(209,103,30)"/><text x="50.0929%" y="671.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (2 samples, 0.03%)</title><rect x="49.8429%" y="645" width="0.0349%" height="15" fill="rgb(238,100,19)"/><text x="50.0929%" y="655.50"></text></g><g><title>syscall (2 samples, 0.03%)</title><rect x="49.8429%" y="629" width="0.0349%" height="15" fill="rgb(244,30,14)"/><text x="50.0929%" y="639.50"></text></g><g><title>entry_SYSCALL_64 (2 samples, 0.03%)</title><rect x="49.8429%" y="613" width="0.0349%" height="15" fill="rgb(249,174,6)"/><text x="50.0929%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,()&gt;&gt; (8 samples, 0.14%)</title><rect x="49.8778%" y="741" width="0.1397%" height="15" fill="rgb(235,213,41)"/><text x="50.1278%" y="751.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.14%)</title><rect x="49.8778%" y="725" width="0.1397%" height="15" fill="rgb(213,118,6)"/><text x="50.1278%" y="735.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (8 samples, 0.14%)</title><rect x="49.8778%" y="709" width="0.1397%" height="15" fill="rgb(235,44,51)"/><text x="50.1278%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (7 samples, 0.12%)</title><rect x="49.8953%" y="693" width="0.1222%" height="15" fill="rgb(217,9,53)"/><text x="50.1453%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (7 samples, 0.12%)</title><rect x="49.8953%" y="677" width="0.1222%" height="15" fill="rgb(237,172,34)"/><text x="50.1453%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (34 samples, 0.59%)</title><rect x="50.0175%" y="741" width="0.5936%" height="15" fill="rgb(206,206,11)"/><text x="50.2675%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (34 samples, 0.59%)</title><rect x="50.0175%" y="725" width="0.5936%" height="15" fill="rgb(214,149,29)"/><text x="50.2675%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (1 samples, 0.02%)</title><rect x="50.6110%" y="741" width="0.0175%" height="15" fill="rgb(208,123,3)"/><text x="50.8610%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_swap (1 samples, 0.02%)</title><rect x="50.6110%" y="725" width="0.0175%" height="15" fill="rgb(229,126,4)"/><text x="50.8610%" y="735.50"></text></g><g><title>__sched_yield (3 samples, 0.05%)</title><rect x="50.6285%" y="709" width="0.0524%" height="15" fill="rgb(222,92,36)"/><text x="50.8785%" y="719.50"></text></g><g><title>entry_SYSCALL_64 (3 samples, 0.05%)</title><rect x="50.6285%" y="693" width="0.0524%" height="15" fill="rgb(216,39,41)"/><text x="50.8785%" y="703.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (5 samples, 0.09%)</title><rect x="50.6983%" y="693" width="0.0873%" height="15" fill="rgb(253,127,28)"/><text x="50.9483%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (5 samples, 0.09%)</title><rect x="50.6983%" y="677" width="0.0873%" height="15" fill="rgb(249,152,51)"/><text x="50.9483%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (5 samples, 0.09%)</title><rect x="50.6983%" y="661" width="0.0873%" height="15" fill="rgb(209,123,42)"/><text x="50.9483%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;parking_lot_core::parking_lot::ThreadData&gt;&gt; (1 samples, 0.02%)</title><rect x="50.7856%" y="661" width="0.0175%" height="15" fill="rgb(241,118,22)"/><text x="51.0356%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicI32::load (38 samples, 0.66%)</title><rect x="50.8554%" y="629" width="0.6634%" height="15" fill="rgb(208,25,7)"/><text x="51.1054%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_load (38 samples, 0.66%)</title><rect x="50.8554%" y="613" width="0.6634%" height="15" fill="rgb(243,144,39)"/><text x="51.1054%" y="623.50"></text></g><g><title>entry_SYSCALL_64 (8 samples, 0.14%)</title><rect x="51.8156%" y="597" width="0.1397%" height="15" fill="rgb(250,50,5)"/><text x="52.0656%" y="607.50"></text></g><g><title>__syscall_return_slowpath (1 samples, 0.02%)</title><rect x="52.1648%" y="581" width="0.0175%" height="15" fill="rgb(207,67,11)"/><text x="52.4148%" y="591.50"></text></g><g><title>fpregs_assert_state_consistent (1 samples, 0.02%)</title><rect x="52.4267%" y="533" width="0.0175%" height="15" fill="rgb(245,204,40)"/><text x="52.6767%" y="543.50"></text></g><g><title>__syscall_return_slowpath (19 samples, 0.33%)</title><rect x="52.3918%" y="565" width="0.3317%" height="15" fill="rgb(238,228,24)"/><text x="52.6418%" y="575.50"></text></g><g><title>__prepare_exit_to_usermode (19 samples, 0.33%)</title><rect x="52.3918%" y="549" width="0.3317%" height="15" fill="rgb(217,116,22)"/><text x="52.6418%" y="559.50"></text></g><g><title>switch_fpu_return (16 samples, 0.28%)</title><rect x="52.4441%" y="533" width="0.2793%" height="15" fill="rgb(234,98,12)"/><text x="52.6941%" y="543.50"></text></g><g><title>_raw_spin_lock (3 samples, 0.05%)</title><rect x="53.4392%" y="517" width="0.0524%" height="15" fill="rgb(242,170,50)"/><text x="53.6892%" y="527.50"></text></g><g><title>rcu_all_qs (1 samples, 0.02%)</title><rect x="53.8059%" y="501" width="0.0175%" height="15" fill="rgb(235,7,5)"/><text x="54.0559%" y="511.50"></text></g><g><title>__perf_event_task_sched_out (3 samples, 0.05%)</title><rect x="54.2598%" y="485" width="0.0524%" height="15" fill="rgb(241,114,28)"/><text x="54.5098%" y="495.50"></text></g><g><title>__x86_indirect_thunk_rax (2 samples, 0.03%)</title><rect x="55.0105%" y="421" width="0.0349%" height="15" fill="rgb(246,112,42)"/><text x="55.2605%" y="431.50"></text></g><g><title>__intel_pmu_disable_all (1 samples, 0.02%)</title><rect x="55.0454%" y="389" width="0.0175%" height="15" fill="rgb(248,228,14)"/><text x="55.2954%" y="399.50"></text></g><g><title>perf_pmu_disable.part.0 (3 samples, 0.05%)</title><rect x="55.0454%" y="421" width="0.0524%" height="15" fill="rgb(208,133,18)"/><text x="55.2954%" y="431.50"></text></g><g><title>x86_pmu_disable (3 samples, 0.05%)</title><rect x="55.0454%" y="405" width="0.0524%" height="15" fill="rgb(207,35,49)"/><text x="55.2954%" y="415.50"></text></g><g><title>intel_pmu_disable_all (2 samples, 0.03%)</title><rect x="55.0628%" y="389" width="0.0349%" height="15" fill="rgb(205,68,36)"/><text x="55.3128%" y="399.50"></text></g><g><title>native_write_msr (1 samples, 0.02%)</title><rect x="55.0803%" y="373" width="0.0175%" height="15" fill="rgb(245,62,40)"/><text x="55.3303%" y="383.50"></text></g><g><title>native_sched_clock (12 samples, 0.21%)</title><rect x="55.1152%" y="405" width="0.2095%" height="15" fill="rgb(228,27,24)"/><text x="55.3652%" y="415.50"></text></g><g><title>ctx_sched_out (24 samples, 0.42%)</title><rect x="54.9232%" y="437" width="0.4190%" height="15" fill="rgb(253,19,12)"/><text x="55.1732%" y="447.50"></text></g><g><title>sched_clock_cpu (14 samples, 0.24%)</title><rect x="55.0978%" y="421" width="0.2444%" height="15" fill="rgb(232,28,20)"/><text x="55.3478%" y="431.50"></text></g><g><title>sched_clock (1 samples, 0.02%)</title><rect x="55.3247%" y="405" width="0.0175%" height="15" fill="rgb(218,35,51)"/><text x="55.5747%" y="415.50"></text></g><g><title>perf_pmu_disable.part.0 (1 samples, 0.02%)</title><rect x="55.3422%" y="437" width="0.0175%" height="15" fill="rgb(212,90,40)"/><text x="55.5922%" y="447.50"></text></g><g><title>__perf_event_task_sched_out (27 samples, 0.47%)</title><rect x="54.9057%" y="469" width="0.4714%" height="15" fill="rgb(220,172,12)"/><text x="55.1557%" y="479.50"></text></g><g><title>task_ctx_sched_out (26 samples, 0.45%)</title><rect x="54.9232%" y="453" width="0.4539%" height="15" fill="rgb(226,159,20)"/><text x="55.1732%" y="463.50"></text></g><g><title>sched_clock_cpu (1 samples, 0.02%)</title><rect x="55.3596%" y="437" width="0.0175%" height="15" fill="rgb(234,205,16)"/><text x="55.6096%" y="447.50"></text></g><g><title>_raw_spin_lock (8 samples, 0.14%)</title><rect x="55.3771%" y="469" width="0.1397%" height="15" fill="rgb(207,9,39)"/><text x="55.6271%" y="479.50"></text></g><g><title>asm_sysvec_call_function_single (1 samples, 0.02%)</title><rect x="55.5168%" y="469" width="0.0175%" height="15" fill="rgb(249,143,15)"/><text x="55.7668%" y="479.50"></text></g><g><title>asm_sysvec_irq_work (1 samples, 0.02%)</title><rect x="55.5342%" y="469" width="0.0175%" height="15" fill="rgb(253,133,29)"/><text x="55.7842%" y="479.50"></text></g><g><title>dequeue_entity (3 samples, 0.05%)</title><rect x="55.5517%" y="469" width="0.0524%" height="15" fill="rgb(221,187,0)"/><text x="55.8017%" y="479.50"></text></g><g><title>account_entity_dequeue (2 samples, 0.03%)</title><rect x="55.8659%" y="453" width="0.0349%" height="15" fill="rgb(205,204,26)"/><text x="56.1159%" y="463.50"></text></g><g><title>clear_buddies (3 samples, 0.05%)</title><rect x="55.9008%" y="453" width="0.0524%" height="15" fill="rgb(224,68,54)"/><text x="56.1508%" y="463.50"></text></g><g><title>__update_load_avg_cfs_rq (2 samples, 0.03%)</title><rect x="56.0405%" y="437" width="0.0349%" height="15" fill="rgb(209,67,4)"/><text x="56.2905%" y="447.50"></text></g><g><title>clear_buddies (1 samples, 0.02%)</title><rect x="56.0754%" y="437" width="0.0175%" height="15" fill="rgb(228,229,18)"/><text x="56.3254%" y="447.50"></text></g><g><title>cpuacct_charge (1 samples, 0.02%)</title><rect x="56.0929%" y="437" width="0.0175%" height="15" fill="rgb(231,89,13)"/><text x="56.3429%" y="447.50"></text></g><g><title>update_cfs_group (11 samples, 0.19%)</title><rect x="56.1103%" y="437" width="0.1920%" height="15" fill="rgb(210,182,18)"/><text x="56.3603%" y="447.50"></text></g><g><title>reweight_entity (7 samples, 0.12%)</title><rect x="56.1802%" y="421" width="0.1222%" height="15" fill="rgb(240,105,2)"/><text x="56.4302%" y="431.50"></text></g><g><title>__calc_delta (3 samples, 0.05%)</title><rect x="56.5119%" y="421" width="0.0524%" height="15" fill="rgb(207,170,50)"/><text x="56.7619%" y="431.50"></text></g><g><title>__cgroup_account_cputime (3 samples, 0.05%)</title><rect x="56.5642%" y="421" width="0.0524%" height="15" fill="rgb(232,133,24)"/><text x="56.8142%" y="431.50"></text></g><g><title>cgroup_rstat_updated (2 samples, 0.03%)</title><rect x="56.5817%" y="405" width="0.0349%" height="15" fill="rgb(235,166,27)"/><text x="56.8317%" y="415.50"></text></g><g><title>cpuacct_charge (9 samples, 0.16%)</title><rect x="56.6166%" y="421" width="0.1571%" height="15" fill="rgb(209,19,13)"/><text x="56.8666%" y="431.50"></text></g><g><title>update_curr (29 samples, 0.51%)</title><rect x="56.3024%" y="437" width="0.5063%" height="15" fill="rgb(226,79,39)"/><text x="56.5524%" y="447.50"></text></g><g><title>update_min_vruntime (2 samples, 0.03%)</title><rect x="56.7737%" y="421" width="0.0349%" height="15" fill="rgb(222,163,10)"/><text x="57.0237%" y="431.50"></text></g><g><title>__update_load_avg_cfs_rq (8 samples, 0.14%)</title><rect x="57.0531%" y="421" width="0.1397%" height="15" fill="rgb(214,44,19)"/><text x="57.3031%" y="431.50"></text></g><g><title>update_load_avg (32 samples, 0.56%)</title><rect x="56.8087%" y="437" width="0.5587%" height="15" fill="rgb(210,217,13)"/><text x="57.0587%" y="447.50"></text></g><g><title>__update_load_avg_se (10 samples, 0.17%)</title><rect x="57.1927%" y="421" width="0.1746%" height="15" fill="rgb(237,61,54)"/><text x="57.4427%" y="431.50"></text></g><g><title>dequeue_entity (83 samples, 1.45%)</title><rect x="55.9532%" y="453" width="1.4490%" height="15" fill="rgb(226,184,24)"/><text x="56.2032%" y="463.50"></text></g><g><title>update_min_vruntime (2 samples, 0.03%)</title><rect x="57.3673%" y="437" width="0.0349%" height="15" fill="rgb(223,226,4)"/><text x="57.6173%" y="447.50"></text></g><g><title>update_cfs_group (1 samples, 0.02%)</title><rect x="57.4022%" y="453" width="0.0175%" height="15" fill="rgb(210,26,41)"/><text x="57.6522%" y="463.50"></text></g><g><title>dequeue_task_fair (105 samples, 1.83%)</title><rect x="55.6041%" y="469" width="1.8331%" height="15" fill="rgb(220,221,6)"/><text x="55.8541%" y="479.50">d..</text></g><g><title>update_curr (1 samples, 0.02%)</title><rect x="57.4197%" y="453" width="0.0175%" height="15" fill="rgb(225,89,49)"/><text x="57.6697%" y="463.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (1 samples, 0.02%)</title><rect x="58.2577%" y="389" width="0.0175%" height="15" fill="rgb(218,70,45)"/><text x="58.5077%" y="399.50"></text></g><g><title>__perf_event_task_sched_in (176 samples, 3.07%)</title><rect x="58.1180%" y="453" width="3.0726%" height="15" fill="rgb(238,166,21)"/><text x="58.3680%" y="463.50">__p..</text></g><g><title>perf_pmu_enable.part.0 (171 samples, 2.99%)</title><rect x="58.2053%" y="437" width="2.9853%" height="15" fill="rgb(224,141,44)"/><text x="58.4553%" y="447.50">per..</text></g><g><title>x86_pmu_enable (170 samples, 2.97%)</title><rect x="58.2228%" y="421" width="2.9679%" height="15" fill="rgb(230,12,49)"/><text x="58.4728%" y="431.50">x86..</text></g><g><title>intel_pmu_enable_all (169 samples, 2.95%)</title><rect x="58.2402%" y="405" width="2.9504%" height="15" fill="rgb(212,174,12)"/><text x="58.4902%" y="415.50">int..</text></g><g><title>native_write_msr (167 samples, 2.92%)</title><rect x="58.2751%" y="389" width="2.9155%" height="15" fill="rgb(246,67,9)"/><text x="58.5251%" y="399.50">na..</text></g><g><title>__remove_hrtimer (1 samples, 0.02%)</title><rect x="61.1906%" y="357" width="0.0175%" height="15" fill="rgb(239,35,23)"/><text x="61.4406%" y="367.50"></text></g><g><title>rb_next (1 samples, 0.02%)</title><rect x="61.1906%" y="341" width="0.0175%" height="15" fill="rgb(211,167,0)"/><text x="61.4406%" y="351.50"></text></g><g><title>asm_call_sysvec_on_stack (2 samples, 0.03%)</title><rect x="61.1906%" y="421" width="0.0349%" height="15" fill="rgb(225,119,45)"/><text x="61.4406%" y="431.50"></text></g><g><title>__sysvec_apic_timer_interrupt (2 samples, 0.03%)</title><rect x="61.1906%" y="405" width="0.0349%" height="15" fill="rgb(210,162,6)"/><text x="61.4406%" y="415.50"></text></g><g><title>hrtimer_interrupt (2 samples, 0.03%)</title><rect x="61.1906%" y="389" width="0.0349%" height="15" fill="rgb(208,118,35)"/><text x="61.4406%" y="399.50"></text></g><g><title>__hrtimer_run_queues (2 samples, 0.03%)</title><rect x="61.1906%" y="373" width="0.0349%" height="15" fill="rgb(239,4,53)"/><text x="61.4406%" y="383.50"></text></g><g><title>tick_sched_timer (1 samples, 0.02%)</title><rect x="61.2081%" y="357" width="0.0175%" height="15" fill="rgb(213,130,21)"/><text x="61.4581%" y="367.50"></text></g><g><title>tick_sched_handle.isra.0 (1 samples, 0.02%)</title><rect x="61.2081%" y="341" width="0.0175%" height="15" fill="rgb(235,148,0)"/><text x="61.4581%" y="351.50"></text></g><g><title>update_process_times (1 samples, 0.02%)</title><rect x="61.2081%" y="325" width="0.0175%" height="15" fill="rgb(244,224,18)"/><text x="61.4581%" y="335.50"></text></g><g><title>scheduler_tick (1 samples, 0.02%)</title><rect x="61.2081%" y="309" width="0.0175%" height="15" fill="rgb(211,214,4)"/><text x="61.4581%" y="319.50"></text></g><g><title>update_curr (1 samples, 0.02%)</title><rect x="61.2081%" y="293" width="0.0175%" height="15" fill="rgb(206,119,25)"/><text x="61.4581%" y="303.50"></text></g><g><title>__update_load_avg_cfs_rq (1 samples, 0.02%)</title><rect x="61.2256%" y="325" width="0.0175%" height="15" fill="rgb(243,93,47)"/><text x="61.4756%" y="335.50"></text></g><g><title>finish_task_switch (219 samples, 3.82%)</title><rect x="57.4372%" y="469" width="3.8233%" height="15" fill="rgb(224,194,6)"/><text x="57.6872%" y="479.50">fini..</text></g><g><title>asm_sysvec_apic_timer_interrupt (4 samples, 0.07%)</title><rect x="61.1906%" y="453" width="0.0698%" height="15" fill="rgb(243,229,6)"/><text x="61.4406%" y="463.50"></text></g><g><title>sysvec_apic_timer_interrupt (4 samples, 0.07%)</title><rect x="61.1906%" y="437" width="0.0698%" height="15" fill="rgb(207,23,50)"/><text x="61.4406%" y="447.50"></text></g><g><title>irq_exit_rcu (2 samples, 0.03%)</title><rect x="61.2256%" y="421" width="0.0349%" height="15" fill="rgb(253,192,32)"/><text x="61.4756%" y="431.50"></text></g><g><title>do_softirq_own_stack (2 samples, 0.03%)</title><rect x="61.2256%" y="405" width="0.0349%" height="15" fill="rgb(213,21,6)"/><text x="61.4756%" y="415.50"></text></g><g><title>asm_call_sysvec_on_stack (2 samples, 0.03%)</title><rect x="61.2256%" y="389" width="0.0349%" height="15" fill="rgb(243,151,13)"/><text x="61.4756%" y="399.50"></text></g><g><title>__softirqentry_text_start (2 samples, 0.03%)</title><rect x="61.2256%" y="373" width="0.0349%" height="15" fill="rgb(233,165,41)"/><text x="61.4756%" y="383.50"></text></g><g><title>run_rebalance_domains (2 samples, 0.03%)</title><rect x="61.2256%" y="357" width="0.0349%" height="15" fill="rgb(246,176,45)"/><text x="61.4756%" y="367.50"></text></g><g><title>update_blocked_averages (2 samples, 0.03%)</title><rect x="61.2256%" y="341" width="0.0349%" height="15" fill="rgb(217,170,52)"/><text x="61.4756%" y="351.50"></text></g><g><title>update_load_avg (1 samples, 0.02%)</title><rect x="61.2430%" y="325" width="0.0175%" height="15" fill="rgb(214,203,54)"/><text x="61.4930%" y="335.50"></text></g><g><title>__update_load_avg_se (1 samples, 0.02%)</title><rect x="61.2430%" y="309" width="0.0175%" height="15" fill="rgb(248,215,49)"/><text x="61.4930%" y="319.50"></text></g><g><title>hrtick_update (1 samples, 0.02%)</title><rect x="61.2605%" y="469" width="0.0175%" height="15" fill="rgb(208,46,10)"/><text x="61.5105%" y="479.50"></text></g><g><title>__msecs_to_jiffies (3 samples, 0.05%)</title><rect x="61.3478%" y="453" width="0.0524%" height="15" fill="rgb(254,5,31)"/><text x="61.5978%" y="463.50"></text></g><g><title>pick_next_task_fair (19 samples, 0.33%)</title><rect x="61.2779%" y="469" width="0.3317%" height="15" fill="rgb(222,104,33)"/><text x="61.5279%" y="479.50"></text></g><g><title>newidle_balance (12 samples, 0.21%)</title><rect x="61.4001%" y="453" width="0.2095%" height="15" fill="rgb(248,49,16)"/><text x="61.6501%" y="463.50"></text></g><g><title>__update_idle_core (4 samples, 0.07%)</title><rect x="61.6795%" y="437" width="0.0698%" height="15" fill="rgb(232,198,41)"/><text x="61.9295%" y="447.50"></text></g><g><title>pick_next_task_idle (9 samples, 0.16%)</title><rect x="61.6096%" y="469" width="0.1571%" height="15" fill="rgb(214,125,3)"/><text x="61.8596%" y="479.50"></text></g><g><title>set_next_task_idle (6 samples, 0.10%)</title><rect x="61.6620%" y="453" width="0.1047%" height="15" fill="rgb(229,220,28)"/><text x="61.9120%" y="463.50"></text></g><g><title>available_idle_cpu (1 samples, 0.02%)</title><rect x="61.7493%" y="437" width="0.0175%" height="15" fill="rgb(222,64,37)"/><text x="61.9993%" y="447.50"></text></g><g><title>psi_flags_change (1 samples, 0.02%)</title><rect x="61.7668%" y="469" width="0.0175%" height="15" fill="rgb(249,184,13)"/><text x="62.0168%" y="479.50"></text></g><g><title>psi_group_change (1 samples, 0.02%)</title><rect x="61.7842%" y="469" width="0.0175%" height="15" fill="rgb(252,176,6)"/><text x="62.0342%" y="479.50"></text></g><g><title>psi_flags_change (2 samples, 0.03%)</title><rect x="62.1334%" y="453" width="0.0349%" height="15" fill="rgb(228,153,7)"/><text x="62.3834%" y="463.50"></text></g><g><title>sched_clock (1 samples, 0.02%)</title><rect x="63.3205%" y="421" width="0.0175%" height="15" fill="rgb(242,193,5)"/><text x="63.5705%" y="431.50"></text></g><g><title>native_sched_clock (22 samples, 0.38%)</title><rect x="63.3554%" y="405" width="0.3841%" height="15" fill="rgb(232,140,9)"/><text x="63.6054%" y="415.50"></text></g><g><title>psi_group_change (91 samples, 1.59%)</title><rect x="62.1683%" y="453" width="1.5887%" height="15" fill="rgb(213,222,16)"/><text x="62.4183%" y="463.50"></text></g><g><title>record_times (32 samples, 0.56%)</title><rect x="63.1983%" y="437" width="0.5587%" height="15" fill="rgb(222,75,50)"/><text x="63.4483%" y="447.50"></text></g><g><title>sched_clock_cpu (24 samples, 0.42%)</title><rect x="63.3380%" y="421" width="0.4190%" height="15" fill="rgb(205,180,2)"/><text x="63.5880%" y="431.50"></text></g><g><title>sched_clock (1 samples, 0.02%)</title><rect x="63.7395%" y="405" width="0.0175%" height="15" fill="rgb(216,34,7)"/><text x="63.9895%" y="415.50"></text></g><g><title>psi_task_change (113 samples, 1.97%)</title><rect x="61.8017%" y="469" width="1.9728%" height="15" fill="rgb(253,16,32)"/><text x="62.0517%" y="479.50">p..</text></g><g><title>record_times (1 samples, 0.02%)</title><rect x="63.7570%" y="453" width="0.0175%" height="15" fill="rgb(208,97,28)"/><text x="64.0070%" y="463.50"></text></g><g><title>psi_task_switch (1 samples, 0.02%)</title><rect x="63.7744%" y="469" width="0.0175%" height="15" fill="rgb(225,92,11)"/><text x="64.0244%" y="479.50"></text></g><g><title>put_prev_task_fair (7 samples, 0.12%)</title><rect x="63.7919%" y="469" width="0.1222%" height="15" fill="rgb(243,38,12)"/><text x="64.0419%" y="479.50"></text></g><g><title>put_prev_entity (2 samples, 0.03%)</title><rect x="63.8792%" y="453" width="0.0349%" height="15" fill="rgb(208,139,16)"/><text x="64.1292%" y="463.50"></text></g><g><title>rcu_qs (1 samples, 0.02%)</title><rect x="63.9141%" y="469" width="0.0175%" height="15" fill="rgb(227,24,9)"/><text x="64.1641%" y="479.50"></text></g><g><title>task_ctx_sched_out (2 samples, 0.03%)</title><rect x="63.9316%" y="469" width="0.0349%" height="15" fill="rgb(206,62,11)"/><text x="64.1816%" y="479.50"></text></g><g><title>__sched_text_start (559 samples, 9.76%)</title><rect x="54.3122%" y="485" width="9.7591%" height="15" fill="rgb(228,134,27)"/><text x="54.5622%" y="495.50">__sched_text_s..</text></g><g><title>update_rq_clock (6 samples, 0.10%)</title><rect x="63.9665%" y="469" width="0.1047%" height="15" fill="rgb(205,55,33)"/><text x="64.2165%" y="479.50"></text></g><g><title>sched_clock_cpu (4 samples, 0.07%)</title><rect x="64.0014%" y="453" width="0.0698%" height="15" fill="rgb(243,75,43)"/><text x="64.2514%" y="463.50"></text></g><g><title>native_sched_clock (4 samples, 0.07%)</title><rect x="64.0014%" y="437" width="0.0698%" height="15" fill="rgb(223,27,42)"/><text x="64.2514%" y="447.50"></text></g><g><title>_raw_spin_lock (2 samples, 0.03%)</title><rect x="64.0712%" y="485" width="0.0349%" height="15" fill="rgb(232,189,33)"/><text x="64.3212%" y="495.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="64.1061%" y="485" width="0.0175%" height="15" fill="rgb(210,9,39)"/><text x="64.3561%" y="495.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="64.1061%" y="469" width="0.0175%" height="15" fill="rgb(242,85,26)"/><text x="64.3561%" y="479.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.02%)</title><rect x="64.1061%" y="453" width="0.0175%" height="15" fill="rgb(248,44,4)"/><text x="64.3561%" y="463.50"></text></g><g><title>do_softirq_own_stack (1 samples, 0.02%)</title><rect x="64.1061%" y="437" width="0.0175%" height="15" fill="rgb(250,96,46)"/><text x="64.3561%" y="447.50"></text></g><g><title>asm_call_sysvec_on_stack (1 samples, 0.02%)</title><rect x="64.1061%" y="421" width="0.0175%" height="15" fill="rgb(229,116,26)"/><text x="64.3561%" y="431.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="64.1061%" y="405" width="0.0175%" height="15" fill="rgb(246,94,34)"/><text x="64.3561%" y="415.50"></text></g><g><title>run_rebalance_domains (1 samples, 0.02%)</title><rect x="64.1061%" y="389" width="0.0175%" height="15" fill="rgb(251,73,21)"/><text x="64.3561%" y="399.50"></text></g><g><title>update_blocked_averages (1 samples, 0.02%)</title><rect x="64.1061%" y="373" width="0.0175%" height="15" fill="rgb(254,121,25)"/><text x="64.3561%" y="383.50"></text></g><g><title>update_load_avg (1 samples, 0.02%)</title><rect x="64.1061%" y="357" width="0.0175%" height="15" fill="rgb(215,161,49)"/><text x="64.3561%" y="367.50"></text></g><g><title>__update_load_avg_cfs_rq (1 samples, 0.02%)</title><rect x="64.1061%" y="341" width="0.0175%" height="15" fill="rgb(221,43,13)"/><text x="64.3561%" y="351.50"></text></g><g><title>dequeue_task_fair (1 samples, 0.02%)</title><rect x="64.1236%" y="485" width="0.0175%" height="15" fill="rgb(249,5,37)"/><text x="64.3736%" y="495.50"></text></g><g><title>futex_wait_queue_me (612 samples, 10.68%)</title><rect x="53.4916%" y="517" width="10.6844%" height="15" fill="rgb(226,25,44)"/><text x="53.7416%" y="527.50">futex_wait_queue..</text></g><g><title>schedule (593 samples, 10.35%)</title><rect x="53.8233%" y="501" width="10.3527%" height="15" fill="rgb(238,189,16)"/><text x="54.0733%" y="511.50">schedule</text></g><g><title>pick_next_task_idle (2 samples, 0.03%)</title><rect x="64.1411%" y="485" width="0.0349%" height="15" fill="rgb(251,186,8)"/><text x="64.3911%" y="495.50"></text></g><g><title>get_futex_key (2 samples, 0.03%)</title><rect x="64.8743%" y="501" width="0.0349%" height="15" fill="rgb(254,34,31)"/><text x="65.1243%" y="511.50"></text></g><g><title>futex_wait_setup (48 samples, 0.84%)</title><rect x="64.1760%" y="517" width="0.8380%" height="15" fill="rgb(225,215,27)"/><text x="64.4260%" y="527.50"></text></g><g><title>get_futex_value_locked (6 samples, 0.10%)</title><rect x="64.9092%" y="501" width="0.1047%" height="15" fill="rgb(221,192,48)"/><text x="65.1592%" y="511.50"></text></g><g><title>get_futex_key (1 samples, 0.02%)</title><rect x="65.0140%" y="517" width="0.0175%" height="15" fill="rgb(219,137,20)"/><text x="65.2640%" y="527.50"></text></g><g><title>get_futex_value_locked (1 samples, 0.02%)</title><rect x="65.0314%" y="517" width="0.0175%" height="15" fill="rgb(219,84,11)"/><text x="65.2814%" y="527.50"></text></g><g><title>hash_futex (14 samples, 0.24%)</title><rect x="65.0489%" y="517" width="0.2444%" height="15" fill="rgb(224,10,23)"/><text x="65.2989%" y="527.50"></text></g><g><title>futex_wait (702 samples, 12.26%)</title><rect x="53.0726%" y="533" width="12.2556%" height="15" fill="rgb(248,22,39)"/><text x="53.3226%" y="543.50">futex_wait</text></g><g><title>plist_add (2 samples, 0.03%)</title><rect x="65.2933%" y="517" width="0.0349%" height="15" fill="rgb(212,154,20)"/><text x="65.5433%" y="527.50"></text></g><g><title>futex_wait_queue_me (1 samples, 0.02%)</title><rect x="65.3282%" y="533" width="0.0175%" height="15" fill="rgb(236,199,50)"/><text x="65.5782%" y="543.50"></text></g><g><title>do_futex (714 samples, 12.47%)</title><rect x="52.8980%" y="549" width="12.4651%" height="15" fill="rgb(211,9,17)"/><text x="53.1480%" y="559.50">do_futex</text></g><g><title>futex_wait_setup (1 samples, 0.02%)</title><rect x="65.3457%" y="533" width="0.0175%" height="15" fill="rgb(243,216,36)"/><text x="65.5957%" y="543.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (769 samples, 13.43%)</title><rect x="51.9553%" y="597" width="13.4253%" height="15" fill="rgb(250,2,10)"/><text x="52.2053%" y="607.50">entry_SYSCALL_64_aft..</text></g><g><title>do_syscall_64 (756 samples, 13.20%)</title><rect x="52.1823%" y="581" width="13.1983%" height="15" fill="rgb(226,50,48)"/><text x="52.4323%" y="591.50">do_syscall_64</text></g><g><title>__x64_sys_futex (725 samples, 12.66%)</title><rect x="52.7235%" y="565" width="12.6571%" height="15" fill="rgb(243,81,16)"/><text x="52.9735%" y="575.50">__x64_sys_futex</text></g><g><title>futex_wait (1 samples, 0.02%)</title><rect x="65.3631%" y="549" width="0.0175%" height="15" fill="rgb(250,14,2)"/><text x="65.6131%" y="559.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (837 samples, 14.61%)</title><rect x="50.8380%" y="645" width="14.6124%" height="15" fill="rgb(233,135,29)"/><text x="51.0880%" y="655.50">&lt;parking_lot_core::thr..</text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (798 samples, 13.93%)</title><rect x="51.5189%" y="629" width="13.9316%" height="15" fill="rgb(224,64,43)"/><text x="51.7689%" y="639.50">parking_lot_core::thr..</text></g><g><title>syscall (797 samples, 13.91%)</title><rect x="51.5363%" y="613" width="13.9141%" height="15" fill="rgb(238,84,13)"/><text x="51.7863%" y="623.50">syscall</text></g><g><title>syscall_return_via_sysret (4 samples, 0.07%)</title><rect x="65.3806%" y="597" width="0.0698%" height="15" fill="rgb(253,48,26)"/><text x="65.6306%" y="607.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (9 samples, 0.16%)</title><rect x="65.4504%" y="613" width="0.1571%" height="15" fill="rgb(205,223,31)"/><text x="65.7004%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (9 samples, 0.16%)</title><rect x="65.4504%" y="597" width="0.1571%" height="15" fill="rgb(221,41,32)"/><text x="65.7004%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (9 samples, 0.16%)</title><rect x="65.4504%" y="581" width="0.1571%" height="15" fill="rgb(213,158,31)"/><text x="65.7004%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.02%)</title><rect x="65.6075%" y="613" width="0.0175%" height="15" fill="rgb(245,126,43)"/><text x="65.8575%" y="623.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (1 samples, 0.02%)</title><rect x="65.6075%" y="597" width="0.0175%" height="15" fill="rgb(227,7,22)"/><text x="65.8575%" y="607.50"></text></g><g><title>core::ops::function::FnOnce::call_once (12 samples, 0.21%)</title><rect x="65.4504%" y="645" width="0.2095%" height="15" fill="rgb(252,90,44)"/><text x="65.7004%" y="655.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal::{{closure}} (12 samples, 0.21%)</title><rect x="65.4504%" y="629" width="0.2095%" height="15" fill="rgb(253,91,0)"/><text x="65.7004%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (2 samples, 0.03%)</title><rect x="65.6250%" y="613" width="0.0349%" height="15" fill="rgb(252,175,49)"/><text x="65.8750%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.03%)</title><rect x="65.6250%" y="597" width="0.0349%" height="15" fill="rgb(246,150,1)"/><text x="65.8750%" y="607.50"></text></g><g><title>parking_lot_core::parking_lot::hash (1 samples, 0.02%)</title><rect x="65.6599%" y="629" width="0.0175%" height="15" fill="rgb(241,192,25)"/><text x="65.9099%" y="639.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket (7 samples, 0.12%)</title><rect x="65.6599%" y="645" width="0.1222%" height="15" fill="rgb(239,187,11)"/><text x="65.9099%" y="655.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (6 samples, 0.10%)</title><rect x="65.6774%" y="629" width="0.1047%" height="15" fill="rgb(218,202,51)"/><text x="65.9274%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (6 samples, 0.10%)</title><rect x="65.6774%" y="613" width="0.1047%" height="15" fill="rgb(225,176,8)"/><text x="65.9274%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (6 samples, 0.10%)</title><rect x="65.6774%" y="597" width="0.1047%" height="15" fill="rgb(219,122,41)"/><text x="65.9274%" y="607.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (879 samples, 15.35%)</title><rect x="50.6285%" y="741" width="15.3457%" height="15" fill="rgb(248,140,20)"/><text x="50.8785%" y="751.50">tokio::loom::std::parkin..</text></g><g><title>parking_lot::condvar::Condvar::wait (879 samples, 15.35%)</title><rect x="50.6285%" y="725" width="15.3457%" height="15" fill="rgb(245,41,37)"/><text x="50.8785%" y="735.50">parking_lot::condvar::Co..</text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (876 samples, 15.29%)</title><rect x="50.6809%" y="709" width="15.2933%" height="15" fill="rgb(235,82,39)"/><text x="50.9309%" y="719.50">parking_lot::condvar::C..</text></g><g><title>parking_lot_core::parking_lot::park (870 samples, 15.19%)</title><rect x="50.7856%" y="693" width="15.1885%" height="15" fill="rgb(230,108,42)"/><text x="51.0356%" y="703.50">parking_lot_core::parki..</text></g><g><title>parking_lot_core::parking_lot::with_thread_data (870 samples, 15.19%)</title><rect x="50.7856%" y="677" width="15.1885%" height="15" fill="rgb(215,150,50)"/><text x="51.0356%" y="687.50">parking_lot_core::parki..</text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (869 samples, 15.17%)</title><rect x="50.8031%" y="661" width="15.1711%" height="15" fill="rgb(233,212,5)"/><text x="51.0531%" y="671.50">parking_lot_core::parki..</text></g><g><title>parking_lot_core::word_lock::WordLock::unlock (11 samples, 0.19%)</title><rect x="65.7821%" y="645" width="0.1920%" height="15" fill="rgb(245,80,22)"/><text x="66.0321%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (11 samples, 0.19%)</title><rect x="65.7821%" y="629" width="0.1920%" height="15" fill="rgb(238,129,16)"/><text x="66.0321%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_sub (11 samples, 0.19%)</title><rect x="65.7821%" y="613" width="0.1920%" height="15" fill="rgb(240,19,0)"/><text x="66.0321%" y="623.50"></text></g><g><title>tokio::runtime::park::Inner::park_condvar (928 samples, 16.20%)</title><rect x="49.8778%" y="757" width="16.2011%" height="15" fill="rgb(232,42,35)"/><text x="50.1278%" y="767.50">tokio::runtime::park::Inn..</text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (6 samples, 0.10%)</title><rect x="65.9742%" y="741" width="0.1047%" height="15" fill="rgb(223,130,24)"/><text x="66.2242%" y="751.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (6 samples, 0.10%)</title><rect x="65.9742%" y="725" width="0.1047%" height="15" fill="rgb(237,16,22)"/><text x="66.2242%" y="735.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (6 samples, 0.10%)</title><rect x="65.9742%" y="709" width="0.1047%" height="15" fill="rgb(248,192,20)"/><text x="66.2242%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (6 samples, 0.10%)</title><rect x="65.9742%" y="693" width="0.1047%" height="15" fill="rgb(233,167,2)"/><text x="66.2242%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (6 samples, 0.10%)</title><rect x="65.9742%" y="677" width="0.1047%" height="15" fill="rgb(252,71,44)"/><text x="66.2242%" y="687.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (1,398 samples, 24.41%)</title><rect x="42.2661%" y="789" width="24.4064%" height="15" fill="rgb(238,37,47)"/><text x="42.5161%" y="799.50">&lt;tokio::runtime::park::Parker as tokio:..</text></g><g><title>tokio::runtime::park::Inner::park (1,398 samples, 24.41%)</title><rect x="42.2661%" y="773" width="24.4064%" height="15" fill="rgb(214,202,54)"/><text x="42.5161%" y="783.50">tokio::runtime::park::Inner::park</text></g><g><title>tokio::util::try_lock::TryLock&lt;T&gt;::try_lock (34 samples, 0.59%)</title><rect x="66.0789%" y="757" width="0.5936%" height="15" fill="rgb(254,165,40)"/><text x="66.3289%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (34 samples, 0.59%)</title><rect x="66.0789%" y="741" width="0.5936%" height="15" fill="rgb(246,173,38)"/><text x="66.3289%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (34 samples, 0.59%)</title><rect x="66.0789%" y="725" width="0.5936%" height="15" fill="rgb(215,3,27)"/><text x="66.3289%" y="735.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (4 samples, 0.07%)</title><rect x="66.6725%" y="789" width="0.0698%" height="15" fill="rgb(239,169,51)"/><text x="66.9225%" y="799.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (4 samples, 0.07%)</title><rect x="66.6725%" y="773" width="0.0698%" height="15" fill="rgb(212,5,25)"/><text x="66.9225%" y="783.50"></text></g><g><title>core::cell::BorrowRefMut::new (4 samples, 0.07%)</title><rect x="66.6725%" y="757" width="0.0698%" height="15" fill="rgb(243,45,17)"/><text x="66.9225%" y="767.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (4 samples, 0.07%)</title><rect x="66.6725%" y="741" width="0.0698%" height="15" fill="rgb(242,97,9)"/><text x="66.9225%" y="751.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (4 samples, 0.07%)</title><rect x="66.6725%" y="725" width="0.0698%" height="15" fill="rgb(228,71,31)"/><text x="66.9225%" y="735.50"></text></g><g><title>core::mem::replace (4 samples, 0.07%)</title><rect x="66.6725%" y="709" width="0.0698%" height="15" fill="rgb(252,184,16)"/><text x="66.9225%" y="719.50"></text></g><g><title>core::mem::swap (4 samples, 0.07%)</title><rect x="66.6725%" y="693" width="0.0698%" height="15" fill="rgb(236,169,46)"/><text x="66.9225%" y="703.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (4 samples, 0.07%)</title><rect x="66.6725%" y="677" width="0.0698%" height="15" fill="rgb(207,17,47)"/><text x="66.9225%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.07%)</title><rect x="66.6725%" y="661" width="0.0698%" height="15" fill="rgb(206,201,28)"/><text x="66.9225%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tokio::runtime::park::Parker&gt;&gt; (1 samples, 0.02%)</title><rect x="66.7423%" y="789" width="0.0175%" height="15" fill="rgb(224,184,23)"/><text x="66.9923%" y="799.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (1,406 samples, 24.55%)</title><rect x="42.2311%" y="805" width="24.5461%" height="15" fill="rgb(208,139,48)"/><text x="42.4811%" y="815.50">tokio::runtime::thread_pool::worker::Co..</text></g><g><title>tokio::runtime::queue::Local&lt;T&gt;::is_stealable (1 samples, 0.02%)</title><rect x="66.7598%" y="789" width="0.0175%" height="15" fill="rgb(208,130,10)"/><text x="67.0098%" y="799.50"></text></g><g><title>tokio::runtime::queue::Inner&lt;T&gt;::is_empty (1 samples, 0.02%)</title><rect x="66.7598%" y="773" width="0.0175%" height="15" fill="rgb(211,213,45)"/><text x="67.0098%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (1 samples, 0.02%)</title><rect x="66.7598%" y="757" width="0.0175%" height="15" fill="rgb(235,100,30)"/><text x="67.0098%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="66.7598%" y="741" width="0.0175%" height="15" fill="rgb(206,144,31)"/><text x="67.0098%" y="751.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (1 samples, 0.02%)</title><rect x="66.7772%" y="805" width="0.0175%" height="15" fill="rgb(224,200,26)"/><text x="67.0272%" y="815.50"></text></g><g><title>tokio::coop::budget (1 samples, 0.02%)</title><rect x="66.7772%" y="789" width="0.0175%" height="15" fill="rgb(247,104,53)"/><text x="67.0272%" y="799.50"></text></g><g><title>tokio::coop::with_budget (1 samples, 0.02%)</title><rect x="66.7772%" y="773" width="0.0175%" height="15" fill="rgb(220,14,17)"/><text x="67.0272%" y="783.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="66.7772%" y="757" width="0.0175%" height="15" fill="rgb(230,140,40)"/><text x="67.0272%" y="767.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.02%)</title><rect x="66.7772%" y="741" width="0.0175%" height="15" fill="rgb(229,2,41)"/><text x="67.0272%" y="751.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (1 samples, 0.02%)</title><rect x="66.7772%" y="725" width="0.0175%" height="15" fill="rgb(232,89,16)"/><text x="67.0272%" y="735.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (1 samples, 0.02%)</title><rect x="66.7772%" y="709" width="0.0175%" height="15" fill="rgb(247,59,52)"/><text x="67.0272%" y="719.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.02%)</title><rect x="66.7772%" y="693" width="0.0175%" height="15" fill="rgb(226,110,21)"/><text x="67.0272%" y="703.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (1 samples, 0.02%)</title><rect x="66.7772%" y="677" width="0.0175%" height="15" fill="rgb(224,176,43)"/><text x="67.0272%" y="687.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (1 samples, 0.02%)</title><rect x="66.7772%" y="661" width="0.0175%" height="15" fill="rgb(221,73,6)"/><text x="67.0272%" y="671.50"></text></g><g><title>syscall (1 samples, 0.02%)</title><rect x="66.7772%" y="645" width="0.0175%" height="15" fill="rgb(232,78,19)"/><text x="67.0272%" y="655.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.02%)</title><rect x="66.7772%" y="629" width="0.0175%" height="15" fill="rgb(233,112,48)"/><text x="67.0272%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::queue::Pointers&gt;&gt; (8 samples, 0.14%)</title><rect x="66.8296%" y="773" width="0.1397%" height="15" fill="rgb(243,131,47)"/><text x="67.0796%" y="783.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.14%)</title><rect x="66.8296%" y="757" width="0.1397%" height="15" fill="rgb(226,51,1)"/><text x="67.0796%" y="767.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (8 samples, 0.14%)</title><rect x="66.8296%" y="741" width="0.1397%" height="15" fill="rgb(247,58,7)"/><text x="67.0796%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (7 samples, 0.12%)</title><rect x="66.8471%" y="725" width="0.1222%" height="15" fill="rgb(209,7,32)"/><text x="67.0971%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (7 samples, 0.12%)</title><rect x="66.8471%" y="709" width="0.1222%" height="15" fill="rgb(209,39,41)"/><text x="67.0971%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (13 samples, 0.23%)</title><rect x="66.9693%" y="725" width="0.2270%" height="15" fill="rgb(226,182,46)"/><text x="67.2193%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (13 samples, 0.23%)</title><rect x="66.9693%" y="709" width="0.2270%" height="15" fill="rgb(230,219,10)"/><text x="67.2193%" y="719.50"></text></g><g><title>tokio::runtime::queue::Inject&lt;T&gt;::is_closed (24 samples, 0.42%)</title><rect x="66.7947%" y="789" width="0.4190%" height="15" fill="rgb(227,175,30)"/><text x="67.0447%" y="799.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (14 samples, 0.24%)</title><rect x="66.9693%" y="773" width="0.2444%" height="15" fill="rgb(217,2,50)"/><text x="67.2193%" y="783.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (14 samples, 0.24%)</title><rect x="66.9693%" y="757" width="0.2444%" height="15" fill="rgb(229,160,0)"/><text x="67.2193%" y="767.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (14 samples, 0.24%)</title><rect x="66.9693%" y="741" width="0.2444%" height="15" fill="rgb(207,78,37)"/><text x="67.2193%" y="751.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (1 samples, 0.02%)</title><rect x="67.1962%" y="725" width="0.0175%" height="15" fill="rgb(225,57,0)"/><text x="67.4462%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicU8::load (1 samples, 0.02%)</title><rect x="67.1962%" y="709" width="0.0175%" height="15" fill="rgb(232,154,2)"/><text x="67.4462%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="67.1962%" y="693" width="0.0175%" height="15" fill="rgb(241,212,25)"/><text x="67.4462%" y="703.50"></text></g><g><title>&lt;tokio::runtime::task::stack::TransferStack&lt;T&gt;::drain::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="67.2137%" y="773" width="0.0175%" height="15" fill="rgb(226,69,20)"/><text x="67.4637%" y="783.50"></text></g><g><title>mi_free (3 samples, 0.05%)</title><rect x="67.2486%" y="709" width="0.0524%" height="15" fill="rgb(247,184,54)"/><text x="67.4986%" y="719.50"></text></g><g><title>_mi_segment_page_of (1 samples, 0.02%)</title><rect x="67.2835%" y="693" width="0.0175%" height="15" fill="rgb(210,145,0)"/><text x="67.5335%" y="703.50"></text></g><g><title>_mi_segment_page_idx_of (1 samples, 0.02%)</title><rect x="67.2835%" y="677" width="0.0175%" height="15" fill="rgb(253,82,12)"/><text x="67.5335%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Core&lt;core::future::from_generator::GenFuture&lt;rho_runtime::interpreter::InterpreterContext&lt;rho_runtime::storage::store::AsyncStore&gt;::produce::{{closure}}&gt;,alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (5 samples, 0.09%)</title><rect x="67.3010%" y="629" width="0.0873%" height="15" fill="rgb(245,42,11)"/><text x="67.5510%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Scheduler&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (5 samples, 0.09%)</title><rect x="67.3010%" y="613" width="0.0873%" height="15" fill="rgb(219,147,32)"/><text x="67.5510%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::unsafe_cell::UnsafeCell&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt;&gt; (5 samples, 0.09%)</title><rect x="67.3010%" y="597" width="0.0873%" height="15" fill="rgb(246,12,7)"/><text x="67.5510%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt;&gt; (5 samples, 0.09%)</title><rect x="67.3010%" y="581" width="0.0873%" height="15" fill="rgb(243,50,9)"/><text x="67.5510%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (5 samples, 0.09%)</title><rect x="67.3010%" y="565" width="0.0873%" height="15" fill="rgb(219,149,6)"/><text x="67.5510%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt; (5 samples, 0.09%)</title><rect x="67.3010%" y="549" width="0.0873%" height="15" fill="rgb(241,51,42)"/><text x="67.5510%" y="559.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.09%)</title><rect x="67.3010%" y="533" width="0.0873%" height="15" fill="rgb(226,128,27)"/><text x="67.5510%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (5 samples, 0.09%)</title><rect x="67.3010%" y="517" width="0.0873%" height="15" fill="rgb(244,144,4)"/><text x="67.5510%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_sub (5 samples, 0.09%)</title><rect x="67.3010%" y="501" width="0.0873%" height="15" fill="rgb(221,4,13)"/><text x="67.5510%" y="511.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::dealloc (10 samples, 0.17%)</title><rect x="67.2311%" y="725" width="0.1746%" height="15" fill="rgb(208,170,28)"/><text x="67.4811%" y="735.50"></text></g><g><title>tokio::runtime::task::raw::dealloc (6 samples, 0.10%)</title><rect x="67.3010%" y="709" width="0.1047%" height="15" fill="rgb(226,131,13)"/><text x="67.5510%" y="719.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::dealloc (6 samples, 0.10%)</title><rect x="67.3010%" y="693" width="0.1047%" height="15" fill="rgb(215,72,41)"/><text x="67.5510%" y="703.50"></text></g><g><title>core::mem::drop (6 samples, 0.10%)</title><rect x="67.3010%" y="677" width="0.1047%" height="15" fill="rgb(243,108,20)"/><text x="67.5510%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;tokio::runtime::task::core::Cell&lt;core::future::from_generator::GenFuture&lt;rho_runtime::interpreter::InterpreterContext&lt;rho_runtime::storage::store::AsyncStore&gt;::produce::{{closure}}&gt;,alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt;&gt; (6 samples, 0.10%)</title><rect x="67.3010%" y="661" width="0.1047%" height="15" fill="rgb(230,189,17)"/><text x="67.5510%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Cell&lt;core::future::from_generator::GenFuture&lt;rho_runtime::interpreter::InterpreterContext&lt;rho_runtime::storage::store::AsyncStore&gt;::produce::{{closure}}&gt;,alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (6 samples, 0.10%)</title><rect x="67.3010%" y="645" width="0.1047%" height="15" fill="rgb(220,50,17)"/><text x="67.5510%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Trailer&gt; (1 samples, 0.02%)</title><rect x="67.3883%" y="629" width="0.0175%" height="15" fill="rgb(248,152,48)"/><text x="67.6383%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::unsafe_cell::UnsafeCell&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="67.3883%" y="613" width="0.0175%" height="15" fill="rgb(244,91,11)"/><text x="67.6383%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="67.3883%" y="597" width="0.0175%" height="15" fill="rgb(220,157,5)"/><text x="67.6383%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt; (1 samples, 0.02%)</title><rect x="67.3883%" y="581" width="0.0175%" height="15" fill="rgb(253,137,8)"/><text x="67.6383%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tokio::runtime::task::Task&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt;&gt; (15 samples, 0.26%)</title><rect x="67.2311%" y="773" width="0.2619%" height="15" fill="rgb(217,137,51)"/><text x="67.4811%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::Task&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (15 samples, 0.26%)</title><rect x="67.2311%" y="757" width="0.2619%" height="15" fill="rgb(218,209,53)"/><text x="67.4811%" y="767.50"></text></g><g><title>&lt;tokio::runtime::task::Task&lt;S&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.26%)</title><rect x="67.2311%" y="741" width="0.2619%" height="15" fill="rgb(249,137,25)"/><text x="67.4811%" y="751.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (5 samples, 0.09%)</title><rect x="67.4057%" y="725" width="0.0873%" height="15" fill="rgb(239,155,26)"/><text x="67.6557%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (5 samples, 0.09%)</title><rect x="67.4057%" y="709" width="0.0873%" height="15" fill="rgb(227,85,46)"/><text x="67.6557%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_sub (5 samples, 0.09%)</title><rect x="67.4057%" y="693" width="0.0873%" height="15" fill="rgb(251,107,43)"/><text x="67.6557%" y="703.50"></text></g><g><title>tokio::runtime::task::stack::TransferStack&lt;T&gt;::drain (35 samples, 0.61%)</title><rect x="67.4930%" y="773" width="0.6110%" height="15" fill="rgb(234,170,33)"/><text x="67.7430%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::swap (35 samples, 0.61%)</title><rect x="67.4930%" y="757" width="0.6110%" height="15" fill="rgb(206,29,35)"/><text x="67.7430%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_swap (35 samples, 0.61%)</title><rect x="67.4930%" y="741" width="0.6110%" height="15" fill="rgb(227,138,25)"/><text x="67.7430%" y="751.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Worker::remote (29 samples, 0.51%)</title><rect x="68.1041%" y="773" width="0.5063%" height="15" fill="rgb(249,131,35)"/><text x="68.3541%" y="783.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::maintenance (107 samples, 1.87%)</title><rect x="66.7947%" y="805" width="1.8680%" height="15" fill="rgb(239,6,40)"/><text x="67.0447%" y="815.50">t..</text></g><g><title>tokio::runtime::thread_pool::worker::Core::drain_pending_drop (83 samples, 1.45%)</title><rect x="67.2137%" y="789" width="1.4490%" height="15" fill="rgb(246,136,47)"/><text x="67.4637%" y="799.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (3 samples, 0.05%)</title><rect x="68.6103%" y="773" width="0.0524%" height="15" fill="rgb(253,58,26)"/><text x="68.8603%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="68.7151%" y="773" width="0.0175%" height="15" fill="rgb(237,141,10)"/><text x="68.9651%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,alloc::vec::Vec&lt;usize&gt;&gt;&gt; (3 samples, 0.05%)</title><rect x="68.7325%" y="773" width="0.0524%" height="15" fill="rgb(234,156,12)"/><text x="68.9825%" y="783.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.05%)</title><rect x="68.7325%" y="757" width="0.0524%" height="15" fill="rgb(243,224,36)"/><text x="68.9825%" y="767.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (3 samples, 0.05%)</title><rect x="68.7325%" y="741" width="0.0524%" height="15" fill="rgb(205,229,51)"/><text x="68.9825%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (3 samples, 0.05%)</title><rect x="68.7325%" y="725" width="0.0524%" height="15" fill="rgb(223,189,4)"/><text x="68.9825%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (3 samples, 0.05%)</title><rect x="68.7325%" y="709" width="0.0524%" height="15" fill="rgb(249,167,54)"/><text x="68.9825%" y="719.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::transition_from_parked (12 samples, 0.21%)</title><rect x="68.6627%" y="805" width="0.2095%" height="15" fill="rgb(218,34,28)"/><text x="68.9127%" y="815.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::is_parked (9 samples, 0.16%)</title><rect x="68.7151%" y="789" width="0.1571%" height="15" fill="rgb(232,109,42)"/><text x="68.9651%" y="799.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (5 samples, 0.09%)</title><rect x="68.7849%" y="773" width="0.0873%" height="15" fill="rgb(248,214,46)"/><text x="69.0349%" y="783.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (5 samples, 0.09%)</title><rect x="68.7849%" y="757" width="0.0873%" height="15" fill="rgb(244,216,40)"/><text x="69.0349%" y="767.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (5 samples, 0.09%)</title><rect x="68.7849%" y="741" width="0.0873%" height="15" fill="rgb(231,226,31)"/><text x="69.0349%" y="751.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (2 samples, 0.03%)</title><rect x="68.8373%" y="725" width="0.0349%" height="15" fill="rgb(238,38,43)"/><text x="69.0873%" y="735.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (2 samples, 0.03%)</title><rect x="68.8373%" y="709" width="0.0349%" height="15" fill="rgb(208,88,43)"/><text x="69.0873%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6 samples, 0.10%)</title><rect x="68.9071%" y="773" width="0.1047%" height="15" fill="rgb(205,136,37)"/><text x="69.1571%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.02%)</title><rect x="68.9944%" y="757" width="0.0175%" height="15" fill="rgb(237,34,14)"/><text x="69.2444%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,alloc::vec::Vec&lt;usize&gt;&gt;&gt; (17 samples, 0.30%)</title><rect x="69.0119%" y="773" width="0.2968%" height="15" fill="rgb(236,193,44)"/><text x="69.2619%" y="783.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.30%)</title><rect x="69.0119%" y="757" width="0.2968%" height="15" fill="rgb(231,48,10)"/><text x="69.2619%" y="767.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (17 samples, 0.30%)</title><rect x="69.0119%" y="741" width="0.2968%" height="15" fill="rgb(213,141,34)"/><text x="69.2619%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (17 samples, 0.30%)</title><rect x="69.0119%" y="725" width="0.2968%" height="15" fill="rgb(249,130,34)"/><text x="69.2619%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (17 samples, 0.30%)</title><rect x="69.0119%" y="709" width="0.2968%" height="15" fill="rgb(219,42,41)"/><text x="69.2619%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (5 samples, 0.09%)</title><rect x="69.3261%" y="725" width="0.0873%" height="15" fill="rgb(224,100,54)"/><text x="69.5761%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (5 samples, 0.09%)</title><rect x="69.3261%" y="709" width="0.0873%" height="15" fill="rgb(229,200,27)"/><text x="69.5761%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicU8::load (2 samples, 0.03%)</title><rect x="69.4134%" y="709" width="0.0349%" height="15" fill="rgb(217,118,10)"/><text x="69.6634%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.03%)</title><rect x="69.4134%" y="693" width="0.0349%" height="15" fill="rgb(206,22,3)"/><text x="69.6634%" y="703.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (11 samples, 0.19%)</title><rect x="69.3087%" y="773" width="0.1920%" height="15" fill="rgb(232,163,46)"/><text x="69.5587%" y="783.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (11 samples, 0.19%)</title><rect x="69.3087%" y="757" width="0.1920%" height="15" fill="rgb(206,95,13)"/><text x="69.5587%" y="767.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (11 samples, 0.19%)</title><rect x="69.3087%" y="741" width="0.1920%" height="15" fill="rgb(253,154,18)"/><text x="69.5587%" y="751.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (5 samples, 0.09%)</title><rect x="69.4134%" y="725" width="0.0873%" height="15" fill="rgb(219,32,23)"/><text x="69.6634%" y="735.50"></text></g><g><title>parking_lot_core::spinwait::SpinWait::spin (3 samples, 0.05%)</title><rect x="69.4483%" y="709" width="0.0524%" height="15" fill="rgb(230,191,45)"/><text x="69.6983%" y="719.50"></text></g><g><title>parking_lot_core::spinwait::cpu_relax (3 samples, 0.05%)</title><rect x="69.4483%" y="693" width="0.0524%" height="15" fill="rgb(229,64,36)"/><text x="69.6983%" y="703.50"></text></g><g><title>core::sync::atomic::spin_loop_hint (3 samples, 0.05%)</title><rect x="69.4483%" y="677" width="0.0524%" height="15" fill="rgb(205,129,25)"/><text x="69.6983%" y="687.50"></text></g><g><title>core::hint::spin_loop (3 samples, 0.05%)</title><rect x="69.4483%" y="661" width="0.0524%" height="15" fill="rgb(254,112,7)"/><text x="69.6983%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (3 samples, 0.05%)</title><rect x="69.4483%" y="645" width="0.0524%" height="15" fill="rgb(226,53,48)"/><text x="69.6983%" y="655.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::transition_worker_to_parked (39 samples, 0.68%)</title><rect x="68.9071%" y="789" width="0.6809%" height="15" fill="rgb(214,153,38)"/><text x="69.1571%" y="799.50"></text></g><g><title>tokio::runtime::thread_pool::idle::State::dec_num_unparked (5 samples, 0.09%)</title><rect x="69.5007%" y="773" width="0.0873%" height="15" fill="rgb(243,101,7)"/><text x="69.7507%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (4 samples, 0.07%)</title><rect x="69.5182%" y="757" width="0.0698%" height="15" fill="rgb(240,140,22)"/><text x="69.7682%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_sub (4 samples, 0.07%)</title><rect x="69.5182%" y="741" width="0.0698%" height="15" fill="rgb(235,114,2)"/><text x="69.7682%" y="751.50"></text></g><g><title>tokio::runtime::queue::Inject&lt;T&gt;::is_empty (1 samples, 0.02%)</title><rect x="69.6753%" y="773" width="0.0175%" height="15" fill="rgb(242,59,12)"/><text x="69.9253%" y="783.50"></text></g><g><title>tokio::runtime::queue::Inject&lt;T&gt;::len (1 samples, 0.02%)</title><rect x="69.6753%" y="757" width="0.0175%" height="15" fill="rgb(252,134,9)"/><text x="69.9253%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.02%)</title><rect x="69.6753%" y="741" width="0.0175%" height="15" fill="rgb(236,4,44)"/><text x="69.9253%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="69.6753%" y="725" width="0.0175%" height="15" fill="rgb(254,172,41)"/><text x="69.9253%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicU16::load (2 samples, 0.03%)</title><rect x="69.6927%" y="741" width="0.0349%" height="15" fill="rgb(244,63,20)"/><text x="69.9427%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.03%)</title><rect x="69.6927%" y="725" width="0.0349%" height="15" fill="rgb(250,73,31)"/><text x="69.9427%" y="735.50"></text></g><g><title>tokio::runtime::queue::Steal&lt;T&gt;::is_empty (3 samples, 0.05%)</title><rect x="69.6927%" y="773" width="0.0524%" height="15" fill="rgb(241,38,36)"/><text x="69.9427%" y="783.50"></text></g><g><title>tokio::runtime::queue::Inner&lt;T&gt;::is_empty (3 samples, 0.05%)</title><rect x="69.6927%" y="757" width="0.0524%" height="15" fill="rgb(245,211,2)"/><text x="69.9427%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (1 samples, 0.02%)</title><rect x="69.7277%" y="741" width="0.0175%" height="15" fill="rgb(206,120,28)"/><text x="69.9777%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="69.7277%" y="725" width="0.0175%" height="15" fill="rgb(211,59,34)"/><text x="69.9777%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (1 samples, 0.02%)</title><rect x="69.7451%" y="693" width="0.0175%" height="15" fill="rgb(233,168,5)"/><text x="69.9951%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (1 samples, 0.02%)</title><rect x="69.7451%" y="677" width="0.0175%" height="15" fill="rgb(234,33,13)"/><text x="69.9951%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicU8::load (1 samples, 0.02%)</title><rect x="69.7626%" y="677" width="0.0175%" height="15" fill="rgb(231,150,26)"/><text x="70.0126%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="69.7626%" y="661" width="0.0175%" height="15" fill="rgb(217,191,4)"/><text x="70.0126%" y="671.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (1,592 samples, 27.79%)</title><rect x="42.0216%" y="821" width="27.7933%" height="15" fill="rgb(246,198,38)"/><text x="42.2716%" y="831.50">tokio::runtime::thread_pool::worker::Context:..</text></g><g><title>tokio::runtime::thread_pool::worker::Core::transition_to_parked (54 samples, 0.94%)</title><rect x="68.8722%" y="805" width="0.9427%" height="15" fill="rgb(245,64,37)"/><text x="69.1222%" y="815.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::notify_if_work_pending (13 samples, 0.23%)</title><rect x="69.5880%" y="789" width="0.2270%" height="15" fill="rgb(250,30,36)"/><text x="69.8380%" y="799.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::notify_parked (4 samples, 0.07%)</title><rect x="69.7451%" y="773" width="0.0698%" height="15" fill="rgb(217,86,53)"/><text x="69.9951%" y="783.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::worker_to_notify (4 samples, 0.07%)</title><rect x="69.7451%" y="757" width="0.0698%" height="15" fill="rgb(228,157,16)"/><text x="69.9951%" y="767.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (4 samples, 0.07%)</title><rect x="69.7451%" y="741" width="0.0698%" height="15" fill="rgb(217,59,31)"/><text x="69.9951%" y="751.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (4 samples, 0.07%)</title><rect x="69.7451%" y="725" width="0.0698%" height="15" fill="rgb(237,138,41)"/><text x="69.9951%" y="735.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (4 samples, 0.07%)</title><rect x="69.7451%" y="709" width="0.0698%" height="15" fill="rgb(227,91,49)"/><text x="69.9951%" y="719.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (3 samples, 0.05%)</title><rect x="69.7626%" y="693" width="0.0524%" height="15" fill="rgb(247,21,44)"/><text x="70.0126%" y="703.50"></text></g><g><title>parking_lot_core::spinwait::SpinWait::spin (2 samples, 0.03%)</title><rect x="69.7800%" y="677" width="0.0349%" height="15" fill="rgb(219,210,51)"/><text x="70.0300%" y="687.50"></text></g><g><title>parking_lot_core::spinwait::cpu_relax (2 samples, 0.03%)</title><rect x="69.7800%" y="661" width="0.0349%" height="15" fill="rgb(209,140,6)"/><text x="70.0300%" y="671.50"></text></g><g><title>core::sync::atomic::spin_loop_hint (2 samples, 0.03%)</title><rect x="69.7800%" y="645" width="0.0349%" height="15" fill="rgb(221,188,24)"/><text x="70.0300%" y="655.50"></text></g><g><title>core::hint::spin_loop (2 samples, 0.03%)</title><rect x="69.7800%" y="629" width="0.0349%" height="15" fill="rgb(232,154,20)"/><text x="70.0300%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (2 samples, 0.03%)</title><rect x="69.7800%" y="613" width="0.0349%" height="15" fill="rgb(244,137,50)"/><text x="70.0300%" y="623.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (6 samples, 0.10%)</title><rect x="69.8499%" y="805" width="0.1047%" height="15" fill="rgb(225,185,43)"/><text x="70.0999%" y="815.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (6 samples, 0.10%)</title><rect x="69.8499%" y="789" width="0.1047%" height="15" fill="rgb(213,205,38)"/><text x="70.0999%" y="799.50"></text></g><g><title>core::cell::BorrowRefMut::new (6 samples, 0.10%)</title><rect x="69.8499%" y="773" width="0.1047%" height="15" fill="rgb(236,73,12)"/><text x="70.0999%" y="783.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (2 samples, 0.03%)</title><rect x="69.9197%" y="757" width="0.0349%" height="15" fill="rgb(235,219,13)"/><text x="70.1697%" y="767.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (2 samples, 0.03%)</title><rect x="69.9197%" y="741" width="0.0349%" height="15" fill="rgb(218,59,36)"/><text x="70.1697%" y="751.50"></text></g><g><title>core::mem::replace (2 samples, 0.03%)</title><rect x="69.9197%" y="725" width="0.0349%" height="15" fill="rgb(205,110,39)"/><text x="70.1697%" y="735.50"></text></g><g><title>core::mem::swap (2 samples, 0.03%)</title><rect x="69.9197%" y="709" width="0.0349%" height="15" fill="rgb(218,206,42)"/><text x="70.1697%" y="719.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (2 samples, 0.03%)</title><rect x="69.9197%" y="693" width="0.0349%" height="15" fill="rgb(248,125,24)"/><text x="70.1697%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.03%)</title><rect x="69.9197%" y="677" width="0.0349%" height="15" fill="rgb(242,28,27)"/><text x="70.1697%" y="687.50"></text></g><g><title>tokio::coop::CURRENT::__getit (1 samples, 0.02%)</title><rect x="69.9546%" y="741" width="0.0175%" height="15" fill="rgb(216,228,15)"/><text x="70.2046%" y="751.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (1 samples, 0.02%)</title><rect x="69.9546%" y="725" width="0.0175%" height="15" fill="rgb(235,116,46)"/><text x="70.2046%" y="735.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (1 samples, 0.02%)</title><rect x="69.9546%" y="709" width="0.0175%" height="15" fill="rgb(224,18,32)"/><text x="70.2046%" y="719.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.02%)</title><rect x="69.9546%" y="693" width="0.0175%" height="15" fill="rgb(252,5,12)"/><text x="70.2046%" y="703.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (2 samples, 0.03%)</title><rect x="69.9895%" y="725" width="0.0349%" height="15" fill="rgb(251,36,5)"/><text x="70.2395%" y="735.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (2 samples, 0.03%)</title><rect x="69.9895%" y="709" width="0.0349%" height="15" fill="rgb(217,53,14)"/><text x="70.2395%" y="719.50"></text></g><g><title>core::mem::replace (2 samples, 0.03%)</title><rect x="69.9895%" y="693" width="0.0349%" height="15" fill="rgb(215,86,45)"/><text x="70.2395%" y="703.50"></text></g><g><title>core::mem::swap (2 samples, 0.03%)</title><rect x="69.9895%" y="677" width="0.0349%" height="15" fill="rgb(242,169,11)"/><text x="70.2395%" y="687.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (2 samples, 0.03%)</title><rect x="69.9895%" y="661" width="0.0349%" height="15" fill="rgb(211,213,45)"/><text x="70.2395%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.03%)</title><rect x="69.9895%" y="645" width="0.0349%" height="15" fill="rgb(205,88,11)"/><text x="70.2395%" y="655.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (2 samples, 0.03%)</title><rect x="70.0419%" y="709" width="0.0349%" height="15" fill="rgb(252,69,26)"/><text x="70.2919%" y="719.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (2 samples, 0.03%)</title><rect x="70.0419%" y="693" width="0.0349%" height="15" fill="rgb(246,123,37)"/><text x="70.2919%" y="703.50"></text></g><g><title>core::cell::BorrowRefMut::new (2 samples, 0.03%)</title><rect x="70.0419%" y="677" width="0.0349%" height="15" fill="rgb(212,205,5)"/><text x="70.2919%" y="687.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.02%)</title><rect x="70.0768%" y="709" width="0.0175%" height="15" fill="rgb(253,148,0)"/><text x="70.3268%" y="719.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (1 samples, 0.02%)</title><rect x="70.0768%" y="693" width="0.0175%" height="15" fill="rgb(239,22,4)"/><text x="70.3268%" y="703.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (1 samples, 0.02%)</title><rect x="70.0768%" y="677" width="0.0175%" height="15" fill="rgb(226,26,53)"/><text x="70.3268%" y="687.50"></text></g><g><title>syscall (1 samples, 0.02%)</title><rect x="70.0768%" y="661" width="0.0175%" height="15" fill="rgb(225,229,45)"/><text x="70.3268%" y="671.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.02%)</title><rect x="70.0768%" y="645" width="0.0175%" height="15" fill="rgb(220,60,37)"/><text x="70.3268%" y="655.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (8 samples, 0.14%)</title><rect x="70.0943%" y="709" width="0.1397%" height="15" fill="rgb(217,180,35)"/><text x="70.3443%" y="719.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (8 samples, 0.14%)</title><rect x="70.0943%" y="693" width="0.1397%" height="15" fill="rgb(229,7,53)"/><text x="70.3443%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;(),tokio::runtime::task::error::JoinError&gt;&gt; (1 samples, 0.02%)</title><rect x="70.4085%" y="661" width="0.0175%" height="15" fill="rgb(254,137,3)"/><text x="70.6585%" y="671.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::store_output (2 samples, 0.03%)</title><rect x="70.4260%" y="661" width="0.0349%" height="15" fill="rgb(215,140,41)"/><text x="70.6760%" y="671.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::set_stage (2 samples, 0.03%)</title><rect x="70.4260%" y="645" width="0.0349%" height="15" fill="rgb(250,80,15)"/><text x="70.6760%" y="655.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (2 samples, 0.03%)</title><rect x="70.4260%" y="629" width="0.0349%" height="15" fill="rgb(252,191,6)"/><text x="70.6760%" y="639.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::set_stage::{{closure}} (2 samples, 0.03%)</title><rect x="70.4260%" y="613" width="0.0349%" height="15" fill="rgb(246,217,18)"/><text x="70.6760%" y="623.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.02%)</title><rect x="70.4609%" y="613" width="0.0175%" height="15" fill="rgb(223,93,7)"/><text x="70.7109%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="70.4609%" y="597" width="0.0175%" height="15" fill="rgb(225,55,52)"/><text x="70.7109%" y="607.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="70.4609%" y="581" width="0.0175%" height="15" fill="rgb(240,31,24)"/><text x="70.7109%" y="591.50"></text></g><g><title>__rg_dealloc (1 samples, 0.02%)</title><rect x="70.4609%" y="565" width="0.0175%" height="15" fill="rgb(205,56,52)"/><text x="70.7109%" y="575.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (1 samples, 0.02%)</title><rect x="70.4609%" y="549" width="0.0175%" height="15" fill="rgb(246,146,12)"/><text x="70.7109%" y="559.50"></text></g><g><title>_mi_page_retire (1 samples, 0.02%)</title><rect x="70.4609%" y="533" width="0.0175%" height="15" fill="rgb(239,84,36)"/><text x="70.7109%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;tokio::runtime::task::core::Cell&lt;core::future::from_generator::GenFuture&lt;rho_runtime::interpreter::InterpreterContext&lt;rho_runtime::storage::store::AsyncStore&gt;::produce::{{closure}}&gt;,alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt;&gt; (2 samples, 0.03%)</title><rect x="70.4609%" y="629" width="0.0349%" height="15" fill="rgb(207,41,40)"/><text x="70.7109%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Cell&lt;core::future::from_generator::GenFuture&lt;rho_runtime::interpreter::InterpreterContext&lt;rho_runtime::storage::store::AsyncStore&gt;::produce::{{closure}}&gt;,alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="70.4784%" y="613" width="0.0175%" height="15" fill="rgb(241,179,25)"/><text x="70.7284%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Core&lt;core::future::from_generator::GenFuture&lt;rho_runtime::interpreter::InterpreterContext&lt;rho_runtime::storage::store::AsyncStore&gt;::produce::{{closure}}&gt;,alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="70.4784%" y="597" width="0.0175%" height="15" fill="rgb(210,0,34)"/><text x="70.7284%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Scheduler&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="70.4784%" y="581" width="0.0175%" height="15" fill="rgb(225,217,29)"/><text x="70.7284%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::unsafe_cell::UnsafeCell&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="70.4784%" y="565" width="0.0175%" height="15" fill="rgb(216,191,38)"/><text x="70.7284%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="70.4784%" y="549" width="0.0175%" height="15" fill="rgb(232,140,52)"/><text x="70.7284%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="70.4784%" y="533" width="0.0175%" height="15" fill="rgb(223,158,51)"/><text x="70.7284%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt; (1 samples, 0.02%)</title><rect x="70.4784%" y="517" width="0.0175%" height="15" fill="rgb(235,29,51)"/><text x="70.7284%" y="527.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="70.4784%" y="501" width="0.0175%" height="15" fill="rgb(215,181,18)"/><text x="70.7284%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.02%)</title><rect x="70.4784%" y="485" width="0.0175%" height="15" fill="rgb(227,125,34)"/><text x="70.7284%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.02%)</title><rect x="70.4784%" y="469" width="0.0175%" height="15" fill="rgb(230,197,49)"/><text x="70.7284%" y="479.50"></text></g><g><title>_mi_free_block_mt (4 samples, 0.07%)</title><rect x="70.4958%" y="533" width="0.0698%" height="15" fill="rgb(239,141,16)"/><text x="70.7458%" y="543.50"></text></g><g><title>mi_free (2 samples, 0.03%)</title><rect x="70.5656%" y="533" width="0.0349%" height="15" fill="rgb(225,105,43)"/><text x="70.8156%" y="543.50"></text></g><g><title>_mi_segment_page_of (2 samples, 0.03%)</title><rect x="70.5656%" y="517" width="0.0349%" height="15" fill="rgb(214,131,14)"/><text x="70.8156%" y="527.50"></text></g><g><title>_mi_segment_page_idx_of (2 samples, 0.03%)</title><rect x="70.5656%" y="501" width="0.0349%" height="15" fill="rgb(229,177,11)"/><text x="70.8156%" y="511.50"></text></g><g><title>alloc::alloc::box_free (7 samples, 0.12%)</title><rect x="70.4958%" y="613" width="0.1222%" height="15" fill="rgb(231,180,14)"/><text x="70.7458%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.12%)</title><rect x="70.4958%" y="597" width="0.1222%" height="15" fill="rgb(232,88,2)"/><text x="70.7458%" y="607.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.12%)</title><rect x="70.4958%" y="581" width="0.1222%" height="15" fill="rgb(205,220,8)"/><text x="70.7458%" y="591.50"></text></g><g><title>__rg_dealloc (7 samples, 0.12%)</title><rect x="70.4958%" y="565" width="0.1222%" height="15" fill="rgb(225,23,53)"/><text x="70.7458%" y="575.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (7 samples, 0.12%)</title><rect x="70.4958%" y="549" width="0.1222%" height="15" fill="rgb(213,62,29)"/><text x="70.7458%" y="559.50"></text></g><g><title>mi_free_generic (1 samples, 0.02%)</title><rect x="70.6006%" y="533" width="0.0175%" height="15" fill="rgb(227,75,7)"/><text x="70.8506%" y="543.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::dealloc (11 samples, 0.19%)</title><rect x="70.4609%" y="661" width="0.1920%" height="15" fill="rgb(207,105,14)"/><text x="70.7109%" y="671.50"></text></g><g><title>core::mem::drop (11 samples, 0.19%)</title><rect x="70.4609%" y="645" width="0.1920%" height="15" fill="rgb(245,62,29)"/><text x="70.7109%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;tokio::runtime::task::core::Cell&lt;core::future::from_generator::GenFuture&lt;rho_runtime::interpreter::InterpreterContext&lt;rho_runtime::storage::store::AsyncStore&gt;::spawn_evaluation&lt;model::rho_types::Send&gt;::{{closure}}&gt;,alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt;&gt; (9 samples, 0.16%)</title><rect x="70.4958%" y="629" width="0.1571%" height="15" fill="rgb(236,202,4)"/><text x="70.7458%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Cell&lt;core::future::from_generator::GenFuture&lt;rho_runtime::interpreter::InterpreterContext&lt;rho_runtime::storage::store::AsyncStore&gt;::spawn_evaluation&lt;model::rho_types::Send&gt;::{{closure}}&gt;,alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (2 samples, 0.03%)</title><rect x="70.6180%" y="613" width="0.0349%" height="15" fill="rgb(250,67,1)"/><text x="70.8680%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Core&lt;core::future::from_generator::GenFuture&lt;rho_runtime::interpreter::InterpreterContext&lt;rho_runtime::storage::store::AsyncStore&gt;::spawn_evaluation&lt;model::rho_types::Send&gt;::{{closure}}&gt;,alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (2 samples, 0.03%)</title><rect x="70.6180%" y="597" width="0.0349%" height="15" fill="rgb(253,115,44)"/><text x="70.8680%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Scheduler&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (2 samples, 0.03%)</title><rect x="70.6180%" y="581" width="0.0349%" height="15" fill="rgb(251,139,18)"/><text x="70.8680%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::unsafe_cell::UnsafeCell&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt;&gt; (2 samples, 0.03%)</title><rect x="70.6180%" y="565" width="0.0349%" height="15" fill="rgb(218,22,32)"/><text x="70.8680%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt;&gt; (2 samples, 0.03%)</title><rect x="70.6180%" y="549" width="0.0349%" height="15" fill="rgb(243,53,5)"/><text x="70.8680%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (2 samples, 0.03%)</title><rect x="70.6180%" y="533" width="0.0349%" height="15" fill="rgb(227,56,16)"/><text x="70.8680%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt; (2 samples, 0.03%)</title><rect x="70.6180%" y="517" width="0.0349%" height="15" fill="rgb(245,53,0)"/><text x="70.8680%" y="527.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="70.6180%" y="501" width="0.0349%" height="15" fill="rgb(216,170,35)"/><text x="70.8680%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.03%)</title><rect x="70.6180%" y="485" width="0.0349%" height="15" fill="rgb(211,200,8)"/><text x="70.8680%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.03%)</title><rect x="70.6180%" y="469" width="0.0349%" height="15" fill="rgb(228,204,44)"/><text x="70.8680%" y="479.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::is_bound (2 samples, 0.03%)</title><rect x="70.7053%" y="645" width="0.0349%" height="15" fill="rgb(214,121,17)"/><text x="70.9553%" y="655.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (2 samples, 0.03%)</title><rect x="70.7053%" y="629" width="0.0349%" height="15" fill="rgb(233,64,38)"/><text x="70.9553%" y="639.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::is_bound::{{closure}} (2 samples, 0.03%)</title><rect x="70.7053%" y="613" width="0.0349%" height="15" fill="rgb(253,54,19)"/><text x="70.9553%" y="623.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (2 samples, 0.03%)</title><rect x="70.7053%" y="597" width="0.0349%" height="15" fill="rgb(253,94,18)"/><text x="70.9553%" y="607.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Worker::eq (1 samples, 0.02%)</title><rect x="70.7402%" y="549" width="0.0175%" height="15" fill="rgb(227,57,52)"/><text x="70.9902%" y="559.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (3 samples, 0.05%)</title><rect x="70.7402%" y="581" width="0.0524%" height="15" fill="rgb(230,228,50)"/><text x="70.9902%" y="591.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::release::{{closure}} (3 samples, 0.05%)</title><rect x="70.7402%" y="565" width="0.0524%" height="15" fill="rgb(217,205,27)"/><text x="70.9902%" y="575.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (2 samples, 0.03%)</title><rect x="70.7577%" y="549" width="0.0349%" height="15" fill="rgb(252,71,50)"/><text x="71.0077%" y="559.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::ne (2 samples, 0.03%)</title><rect x="70.7577%" y="533" width="0.0349%" height="15" fill="rgb(209,86,4)"/><text x="71.0077%" y="543.50"></text></g><g><title>tokio::runtime::queue::Inject&lt;T&gt;::is_closed (1 samples, 0.02%)</title><rect x="70.7926%" y="581" width="0.0175%" height="15" fill="rgb(229,94,0)"/><text x="71.0426%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::queue::Pointers&gt;&gt; (1 samples, 0.02%)</title><rect x="70.7926%" y="565" width="0.0175%" height="15" fill="rgb(252,223,21)"/><text x="71.0426%" y="575.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="70.7926%" y="549" width="0.0175%" height="15" fill="rgb(230,210,4)"/><text x="71.0426%" y="559.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (1 samples, 0.02%)</title><rect x="70.7926%" y="533" width="0.0175%" height="15" fill="rgb(240,149,38)"/><text x="71.0426%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (1 samples, 0.02%)</title><rect x="70.7926%" y="517" width="0.0175%" height="15" fill="rgb(254,105,20)"/><text x="71.0426%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.02%)</title><rect x="70.7926%" y="501" width="0.0175%" height="15" fill="rgb(253,87,46)"/><text x="71.0426%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::compare_exchange (5 samples, 0.09%)</title><rect x="70.8101%" y="565" width="0.0873%" height="15" fill="rgb(253,116,33)"/><text x="71.0601%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (5 samples, 0.09%)</title><rect x="70.8101%" y="549" width="0.0873%" height="15" fill="rgb(229,198,5)"/><text x="71.0601%" y="559.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::release (12 samples, 0.21%)</title><rect x="70.7402%" y="645" width="0.2095%" height="15" fill="rgb(242,38,37)"/><text x="70.9902%" y="655.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (12 samples, 0.21%)</title><rect x="70.7402%" y="629" width="0.2095%" height="15" fill="rgb(242,69,53)"/><text x="70.9902%" y="639.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::release::{{closure}} (12 samples, 0.21%)</title><rect x="70.7402%" y="613" width="0.2095%" height="15" fill="rgb(249,80,16)"/><text x="70.9902%" y="623.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::release (12 samples, 0.21%)</title><rect x="70.7402%" y="597" width="0.2095%" height="15" fill="rgb(206,128,11)"/><text x="70.9902%" y="607.50"></text></g><g><title>tokio::runtime::task::stack::TransferStack&lt;T&gt;::push (8 samples, 0.14%)</title><rect x="70.8101%" y="581" width="0.1397%" height="15" fill="rgb(212,35,20)"/><text x="71.0601%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (3 samples, 0.05%)</title><rect x="70.8973%" y="565" width="0.0524%" height="15" fill="rgb(236,79,13)"/><text x="71.1473%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_load (3 samples, 0.05%)</title><rect x="70.8973%" y="549" width="0.0524%" height="15" fill="rgb(233,123,3)"/><text x="71.1473%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (9 samples, 0.16%)</title><rect x="70.9672%" y="613" width="0.1571%" height="15" fill="rgb(214,93,52)"/><text x="71.2172%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (9 samples, 0.16%)</title><rect x="70.9672%" y="597" width="0.1571%" height="15" fill="rgb(251,37,40)"/><text x="71.2172%" y="607.50"></text></g><g><title>tokio::runtime::task::harness::SchedulerView&lt;S&gt;::transition_to_terminal (30 samples, 0.52%)</title><rect x="70.6529%" y="661" width="0.5237%" height="15" fill="rgb(227,80,54)"/><text x="70.9029%" y="671.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_terminal (13 samples, 0.23%)</title><rect x="70.9497%" y="645" width="0.2270%" height="15" fill="rgb(254,48,11)"/><text x="71.1997%" y="655.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update (13 samples, 0.23%)</title><rect x="70.9497%" y="629" width="0.2270%" height="15" fill="rgb(235,193,26)"/><text x="71.1997%" y="639.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_terminal::{{closure}} (3 samples, 0.05%)</title><rect x="71.1243%" y="613" width="0.0524%" height="15" fill="rgb(229,99,21)"/><text x="71.3743%" y="623.50"></text></g><g><title>tokio::runtime::task::state::Snapshot::ref_dec (3 samples, 0.05%)</title><rect x="71.1243%" y="597" width="0.0524%" height="15" fill="rgb(211,140,41)"/><text x="71.3743%" y="607.50"></text></g><g><title>tokio::runtime::task::core::Trailer::wake_join (1 samples, 0.02%)</title><rect x="71.1767%" y="645" width="0.0175%" height="15" fill="rgb(240,227,30)"/><text x="71.4267%" y="655.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="71.1767%" y="629" width="0.0175%" height="15" fill="rgb(215,224,45)"/><text x="71.4267%" y="639.50"></text></g><g><title>tokio::runtime::task::core::Trailer::wake_join::{{closure}} (1 samples, 0.02%)</title><rect x="71.1767%" y="613" width="0.0175%" height="15" fill="rgb(206,123,31)"/><text x="71.4267%" y="623.50"></text></g><g><title>core::task::wake::Waker::wake_by_ref (1 samples, 0.02%)</title><rect x="71.1767%" y="597" width="0.0175%" height="15" fill="rgb(210,138,16)"/><text x="71.4267%" y="607.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (1 samples, 0.02%)</title><rect x="71.1767%" y="581" width="0.0175%" height="15" fill="rgb(228,57,28)"/><text x="71.4267%" y="591.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="71.1767%" y="565" width="0.0175%" height="15" fill="rgb(242,170,10)"/><text x="71.4267%" y="575.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule::{{closure}} (1 samples, 0.02%)</title><rect x="71.1767%" y="549" width="0.0175%" height="15" fill="rgb(228,214,39)"/><text x="71.4267%" y="559.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule_local (1 samples, 0.02%)</title><rect x="71.1767%" y="533" width="0.0175%" height="15" fill="rgb(218,179,33)"/><text x="71.4267%" y="543.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::notify_parked (1 samples, 0.02%)</title><rect x="71.1767%" y="517" width="0.0175%" height="15" fill="rgb(235,193,39)"/><text x="71.4267%" y="527.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::worker_to_notify (1 samples, 0.02%)</title><rect x="71.1767%" y="501" width="0.0175%" height="15" fill="rgb(219,221,36)"/><text x="71.4267%" y="511.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::notify_should_wakeup (1 samples, 0.02%)</title><rect x="71.1767%" y="485" width="0.0175%" height="15" fill="rgb(248,218,19)"/><text x="71.4267%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.02%)</title><rect x="71.1767%" y="469" width="0.0175%" height="15" fill="rgb(205,50,9)"/><text x="71.4267%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.02%)</title><rect x="71.1767%" y="453" width="0.0175%" height="15" fill="rgb(238,81,28)"/><text x="71.4267%" y="463.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (50 samples, 0.87%)</title><rect x="70.3736%" y="677" width="0.8729%" height="15" fill="rgb(235,110,19)"/><text x="70.6236%" y="687.50"></text></g><g><title>tokio::runtime::task::harness::transition_to_complete (4 samples, 0.07%)</title><rect x="71.1767%" y="661" width="0.0698%" height="15" fill="rgb(214,7,14)"/><text x="71.4267%" y="671.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_complete (3 samples, 0.05%)</title><rect x="71.1941%" y="645" width="0.0524%" height="15" fill="rgb(211,77,3)"/><text x="71.4441%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_xor (3 samples, 0.05%)</title><rect x="71.1941%" y="629" width="0.0524%" height="15" fill="rgb(229,5,9)"/><text x="71.4441%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_xor (3 samples, 0.05%)</title><rect x="71.1941%" y="613" width="0.0524%" height="15" fill="rgb(225,90,11)"/><text x="71.4441%" y="623.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::scheduler_view (1 samples, 0.02%)</title><rect x="71.2640%" y="661" width="0.0175%" height="15" fill="rgb(242,56,8)"/><text x="71.5140%" y="671.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::core (1 samples, 0.02%)</title><rect x="71.2640%" y="645" width="0.0175%" height="15" fill="rgb(249,212,39)"/><text x="71.5140%" y="655.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (19 samples, 0.33%)</title><rect x="71.3163%" y="581" width="0.3317%" height="15" fill="rgb(236,90,9)"/><text x="71.5663%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (18 samples, 0.31%)</title><rect x="71.3338%" y="565" width="0.3142%" height="15" fill="rgb(206,88,35)"/><text x="71.5838%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_add (18 samples, 0.31%)</title><rect x="71.3338%" y="549" width="0.3142%" height="15" fill="rgb(205,126,30)"/><text x="71.5838%" y="559.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.02%)</title><rect x="71.6480%" y="581" width="0.0175%" height="15" fill="rgb(230,176,12)"/><text x="71.8980%" y="591.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.02%)</title><rect x="71.6480%" y="565" width="0.0175%" height="15" fill="rgb(243,19,9)"/><text x="71.8980%" y="575.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.02%)</title><rect x="71.6480%" y="549" width="0.0175%" height="15" fill="rgb(245,171,17)"/><text x="71.8980%" y="559.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::bind_scheduler (24 samples, 0.42%)</title><rect x="71.2814%" y="645" width="0.4190%" height="15" fill="rgb(227,52,21)"/><text x="71.5314%" y="655.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::bind (24 samples, 0.42%)</title><rect x="71.2814%" y="629" width="0.4190%" height="15" fill="rgb(238,69,14)"/><text x="71.5314%" y="639.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (23 samples, 0.40%)</title><rect x="71.2989%" y="613" width="0.4015%" height="15" fill="rgb(241,156,39)"/><text x="71.5489%" y="623.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::bind::{{closure}} (23 samples, 0.40%)</title><rect x="71.2989%" y="597" width="0.4015%" height="15" fill="rgb(212,227,28)"/><text x="71.5489%" y="607.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (2 samples, 0.03%)</title><rect x="71.6655%" y="581" width="0.0349%" height="15" fill="rgb(209,118,27)"/><text x="71.9155%" y="591.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="71.6830%" y="565" width="0.0175%" height="15" fill="rgb(226,102,5)"/><text x="71.9330%" y="575.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::is_bound (1 samples, 0.02%)</title><rect x="71.7004%" y="645" width="0.0175%" height="15" fill="rgb(223,34,3)"/><text x="71.9504%" y="655.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="71.7004%" y="629" width="0.0175%" height="15" fill="rgb(221,81,38)"/><text x="71.9504%" y="639.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::is_bound::{{closure}} (1 samples, 0.02%)</title><rect x="71.7004%" y="613" width="0.0175%" height="15" fill="rgb(236,219,28)"/><text x="71.9504%" y="623.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (1 samples, 0.02%)</title><rect x="71.7004%" y="597" width="0.0175%" height="15" fill="rgb(213,200,14)"/><text x="71.9504%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (8 samples, 0.14%)</title><rect x="71.7179%" y="613" width="0.1397%" height="15" fill="rgb(240,33,19)"/><text x="71.9679%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (8 samples, 0.14%)</title><rect x="71.7179%" y="597" width="0.1397%" height="15" fill="rgb(233,113,27)"/><text x="71.9679%" y="607.50"></text></g><g><title>tokio::runtime::task::state::Snapshot::is_notified (1 samples, 0.02%)</title><rect x="71.8750%" y="597" width="0.0175%" height="15" fill="rgb(220,221,18)"/><text x="72.1250%" y="607.50"></text></g><g><title>tokio::runtime::task::harness::SchedulerView&lt;S&gt;::transition_to_running (37 samples, 0.65%)</title><rect x="71.2814%" y="661" width="0.6459%" height="15" fill="rgb(238,92,8)"/><text x="71.5314%" y="671.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_running (12 samples, 0.21%)</title><rect x="71.7179%" y="645" width="0.2095%" height="15" fill="rgb(222,164,16)"/><text x="71.9679%" y="655.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update (12 samples, 0.21%)</title><rect x="71.7179%" y="629" width="0.2095%" height="15" fill="rgb(241,119,3)"/><text x="71.9679%" y="639.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_running::{{closure}} (4 samples, 0.07%)</title><rect x="71.8575%" y="613" width="0.0698%" height="15" fill="rgb(241,44,8)"/><text x="72.1075%" y="623.50"></text></g><g><title>tokio::runtime::task::state::Snapshot::unset_notified (2 samples, 0.03%)</title><rect x="71.8925%" y="597" width="0.0349%" height="15" fill="rgb(230,36,40)"/><text x="72.1425%" y="607.50"></text></g><g><title>__rust_probestack (1 samples, 0.02%)</title><rect x="71.9623%" y="645" width="0.0175%" height="15" fill="rgb(243,16,36)"/><text x="72.2123%" y="655.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.02%)</title><rect x="71.9797%" y="645" width="0.0175%" height="15" fill="rgb(231,4,26)"/><text x="72.2297%" y="655.50"></text></g><g><title>exc_page_fault (1 samples, 0.02%)</title><rect x="71.9797%" y="629" width="0.0175%" height="15" fill="rgb(240,9,31)"/><text x="72.2297%" y="639.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.02%)</title><rect x="71.9797%" y="613" width="0.0175%" height="15" fill="rgb(207,173,15)"/><text x="72.2297%" y="623.50"></text></g><g><title>handle_mm_fault (1 samples, 0.02%)</title><rect x="71.9797%" y="597" width="0.0175%" height="15" fill="rgb(224,192,53)"/><text x="72.2297%" y="607.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.02%)</title><rect x="71.9797%" y="581" width="0.0175%" height="15" fill="rgb(223,67,28)"/><text x="72.2297%" y="591.50"></text></g><g><title>do_fault (1 samples, 0.02%)</title><rect x="71.9797%" y="565" width="0.0175%" height="15" fill="rgb(211,20,47)"/><text x="72.2297%" y="575.50"></text></g><g><title>__do_fault (1 samples, 0.02%)</title><rect x="71.9797%" y="549" width="0.0175%" height="15" fill="rgb(240,228,2)"/><text x="72.2297%" y="559.50"></text></g><g><title>filemap_fault (1 samples, 0.02%)</title><rect x="71.9797%" y="533" width="0.0175%" height="15" fill="rgb(248,151,12)"/><text x="72.2297%" y="543.50"></text></g><g><title>__do_page_cache_readahead (1 samples, 0.02%)</title><rect x="71.9797%" y="517" width="0.0175%" height="15" fill="rgb(244,8,39)"/><text x="72.2297%" y="527.50"></text></g><g><title>page_cache_readahead_unbounded (1 samples, 0.02%)</title><rect x="71.9797%" y="501" width="0.0175%" height="15" fill="rgb(222,26,8)"/><text x="72.2297%" y="511.50"></text></g><g><title>add_to_page_cache_lru (1 samples, 0.02%)</title><rect x="71.9797%" y="485" width="0.0175%" height="15" fill="rgb(213,106,44)"/><text x="72.2297%" y="495.50"></text></g><g><title>__add_to_page_cache_locked (1 samples, 0.02%)</title><rect x="71.9797%" y="469" width="0.0175%" height="15" fill="rgb(214,129,20)"/><text x="72.2297%" y="479.50"></text></g><g><title>mem_cgroup_charge (1 samples, 0.02%)</title><rect x="71.9797%" y="453" width="0.0175%" height="15" fill="rgb(212,32,13)"/><text x="72.2297%" y="463.50"></text></g><g><title>try_charge (1 samples, 0.02%)</title><rect x="71.9797%" y="437" width="0.0175%" height="15" fill="rgb(208,168,33)"/><text x="72.2297%" y="447.50"></text></g><g><title>[libc-2.31.so] (3 samples, 0.05%)</title><rect x="72.2067%" y="469" width="0.0524%" height="15" fill="rgb(231,207,8)"/><text x="72.4567%" y="479.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="72.2591%" y="453" width="0.0175%" height="15" fill="rgb(235,219,23)"/><text x="72.5091%" y="463.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (4 samples, 0.07%)</title><rect x="72.2765%" y="437" width="0.0698%" height="15" fill="rgb(226,216,26)"/><text x="72.5265%" y="447.50"></text></g><g><title>core::ptr::write (4 samples, 0.07%)</title><rect x="72.2765%" y="421" width="0.0698%" height="15" fill="rgb(239,137,16)"/><text x="72.5265%" y="431.50"></text></g><g><title>[libc-2.31.so] (4 samples, 0.07%)</title><rect x="72.2765%" y="405" width="0.0698%" height="15" fill="rgb(207,12,36)"/><text x="72.5265%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (5 samples, 0.09%)</title><rect x="72.3464%" y="437" width="0.0873%" height="15" fill="rgb(210,214,24)"/><text x="72.5964%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (5 samples, 0.09%)</title><rect x="72.3464%" y="421" width="0.0873%" height="15" fill="rgb(206,56,30)"/><text x="72.5964%" y="431.50"></text></g><g><title>crossbeam_queue::array_queue::ArrayQueue&lt;T&gt;::push (21 samples, 0.37%)</title><rect x="72.2765%" y="453" width="0.3666%" height="15" fill="rgb(228,143,26)"/><text x="72.5265%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (12 samples, 0.21%)</title><rect x="72.4337%" y="437" width="0.2095%" height="15" fill="rgb(216,218,46)"/><text x="72.6837%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (12 samples, 0.21%)</title><rect x="72.4337%" y="421" width="0.2095%" height="15" fill="rgb(206,6,19)"/><text x="72.6837%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (4 samples, 0.07%)</title><rect x="72.6432%" y="437" width="0.0698%" height="15" fill="rgb(239,177,51)"/><text x="72.8932%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (4 samples, 0.07%)</title><rect x="72.6432%" y="421" width="0.0698%" height="15" fill="rgb(216,55,25)"/><text x="72.8932%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::park::thread::Inner&gt;&gt; (5 samples, 0.09%)</title><rect x="72.7304%" y="405" width="0.0873%" height="15" fill="rgb(231,163,29)"/><text x="72.9804%" y="415.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.09%)</title><rect x="72.7304%" y="389" width="0.0873%" height="15" fill="rgb(232,149,50)"/><text x="72.9804%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (5 samples, 0.09%)</title><rect x="72.7304%" y="373" width="0.0873%" height="15" fill="rgb(223,142,48)"/><text x="72.9804%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_sub (5 samples, 0.09%)</title><rect x="72.7304%" y="357" width="0.0873%" height="15" fill="rgb(245,83,23)"/><text x="72.9804%" y="367.50"></text></g><g><title>core::mem::drop (1 samples, 0.02%)</title><rect x="72.8177%" y="389" width="0.0175%" height="15" fill="rgb(224,63,2)"/><text x="73.0677%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,()&gt;&gt; (1 samples, 0.02%)</title><rect x="72.8177%" y="373" width="0.0175%" height="15" fill="rgb(218,65,53)"/><text x="73.0677%" y="383.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="72.8177%" y="357" width="0.0175%" height="15" fill="rgb(221,84,29)"/><text x="73.0677%" y="367.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (1 samples, 0.02%)</title><rect x="72.8177%" y="341" width="0.0175%" height="15" fill="rgb(234,0,32)"/><text x="73.0677%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (1 samples, 0.02%)</title><rect x="72.8177%" y="325" width="0.0175%" height="15" fill="rgb(206,20,16)"/><text x="73.0677%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.02%)</title><rect x="72.8177%" y="309" width="0.0175%" height="15" fill="rgb(244,172,18)"/><text x="73.0677%" y="319.50"></text></g><g><title>do_syscall_64 (3 samples, 0.05%)</title><rect x="72.8876%" y="293" width="0.0524%" height="15" fill="rgb(254,133,1)"/><text x="73.1376%" y="303.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.02%)</title><rect x="72.9399%" y="293" width="0.0175%" height="15" fill="rgb(222,206,41)"/><text x="73.1899%" y="303.50"></text></g><g><title>__syscall_return_slowpath (1 samples, 0.02%)</title><rect x="72.9749%" y="277" width="0.0175%" height="15" fill="rgb(212,3,42)"/><text x="73.2249%" y="287.50"></text></g><g><title>__syscall_return_slowpath (2 samples, 0.03%)</title><rect x="73.0447%" y="261" width="0.0349%" height="15" fill="rgb(241,11,4)"/><text x="73.2947%" y="271.50"></text></g><g><title>__prepare_exit_to_usermode (1 samples, 0.02%)</title><rect x="73.0622%" y="245" width="0.0175%" height="15" fill="rgb(205,19,26)"/><text x="73.3122%" y="255.50"></text></g><g><title>_raw_spin_lock (5 samples, 0.09%)</title><rect x="73.0971%" y="229" width="0.0873%" height="15" fill="rgb(210,179,32)"/><text x="73.3471%" y="239.50"></text></g><g><title>__unqueue_futex (8 samples, 0.14%)</title><rect x="73.4288%" y="197" width="0.1397%" height="15" fill="rgb(227,116,49)"/><text x="73.6788%" y="207.50"></text></g><g><title>mark_wake_futex (17 samples, 0.30%)</title><rect x="73.2891%" y="213" width="0.2968%" height="15" fill="rgb(211,146,6)"/><text x="73.5391%" y="223.50"></text></g><g><title>plist_del (1 samples, 0.02%)</title><rect x="73.5684%" y="197" width="0.0175%" height="15" fill="rgb(219,44,39)"/><text x="73.8184%" y="207.50"></text></g><g><title>wake_q_add_safe (1 samples, 0.02%)</title><rect x="73.5859%" y="213" width="0.0175%" height="15" fill="rgb(234,128,11)"/><text x="73.8359%" y="223.50"></text></g><g><title>__lock_text_start (1 samples, 0.02%)</title><rect x="73.6557%" y="197" width="0.0175%" height="15" fill="rgb(220,183,53)"/><text x="73.9057%" y="207.50"></text></g><g><title>_raw_spin_lock (2 samples, 0.03%)</title><rect x="73.6732%" y="197" width="0.0349%" height="15" fill="rgb(213,219,32)"/><text x="73.9232%" y="207.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.02%)</title><rect x="73.7081%" y="197" width="0.0175%" height="15" fill="rgb(232,156,16)"/><text x="73.9581%" y="207.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.02%)</title><rect x="73.7605%" y="181" width="0.0175%" height="15" fill="rgb(246,135,34)"/><text x="74.0105%" y="191.50"></text></g><g><title>native_queued_spin_lock_slowpath (1 samples, 0.02%)</title><rect x="73.7605%" y="165" width="0.0175%" height="15" fill="rgb(241,99,0)"/><text x="74.0105%" y="175.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.02%)</title><rect x="73.7779%" y="181" width="0.0175%" height="15" fill="rgb(222,103,45)"/><text x="74.0279%" y="191.50"></text></g><g><title>available_idle_cpu (1 samples, 0.02%)</title><rect x="73.7954%" y="181" width="0.0175%" height="15" fill="rgb(212,57,4)"/><text x="74.0454%" y="191.50"></text></g><g><title>available_idle_cpu (2 samples, 0.03%)</title><rect x="73.9176%" y="165" width="0.0349%" height="15" fill="rgb(215,68,47)"/><text x="74.1676%" y="175.50"></text></g><g><title>select_task_rq_fair (9 samples, 0.16%)</title><rect x="73.8128%" y="181" width="0.1571%" height="15" fill="rgb(230,84,2)"/><text x="74.0628%" y="191.50"></text></g><g><title>select_idle_sibling (1 samples, 0.02%)</title><rect x="73.9525%" y="165" width="0.0175%" height="15" fill="rgb(220,102,14)"/><text x="74.2025%" y="175.50"></text></g><g><title>__enqueue_entity (1 samples, 0.02%)</title><rect x="74.0573%" y="149" width="0.0175%" height="15" fill="rgb(240,10,32)"/><text x="74.3073%" y="159.50"></text></g><g><title>place_entity (4 samples, 0.07%)</title><rect x="74.1969%" y="133" width="0.0698%" height="15" fill="rgb(215,47,27)"/><text x="74.4469%" y="143.50"></text></g><g><title>update_cfs_group (2 samples, 0.03%)</title><rect x="74.2668%" y="133" width="0.0349%" height="15" fill="rgb(233,188,43)"/><text x="74.5168%" y="143.50"></text></g><g><title>reweight_entity (1 samples, 0.02%)</title><rect x="74.2842%" y="117" width="0.0175%" height="15" fill="rgb(253,190,1)"/><text x="74.5342%" y="127.50"></text></g><g><title>__update_load_avg_cfs_rq (3 samples, 0.05%)</title><rect x="74.3366%" y="117" width="0.0524%" height="15" fill="rgb(206,114,52)"/><text x="74.5866%" y="127.50"></text></g><g><title>enqueue_task_fair (27 samples, 0.47%)</title><rect x="73.9700%" y="165" width="0.4714%" height="15" fill="rgb(233,120,37)"/><text x="74.2200%" y="175.50"></text></g><g><title>enqueue_entity (21 samples, 0.37%)</title><rect x="74.0747%" y="149" width="0.3666%" height="15" fill="rgb(214,52,39)"/><text x="74.3247%" y="159.50"></text></g><g><title>update_load_avg (8 samples, 0.14%)</title><rect x="74.3017%" y="133" width="0.1397%" height="15" fill="rgb(223,80,29)"/><text x="74.5517%" y="143.50"></text></g><g><title>__update_load_avg_se (3 samples, 0.05%)</title><rect x="74.3890%" y="117" width="0.0524%" height="15" fill="rgb(230,101,40)"/><text x="74.6390%" y="127.50"></text></g><g><title>psi_task_change (24 samples, 0.42%)</title><rect x="74.4413%" y="165" width="0.4190%" height="15" fill="rgb(219,211,8)"/><text x="74.6913%" y="175.50"></text></g><g><title>psi_group_change (17 samples, 0.30%)</title><rect x="74.5635%" y="149" width="0.2968%" height="15" fill="rgb(252,126,28)"/><text x="74.8135%" y="159.50"></text></g><g><title>record_times (3 samples, 0.05%)</title><rect x="74.8080%" y="133" width="0.0524%" height="15" fill="rgb(215,56,38)"/><text x="75.0580%" y="143.50"></text></g><g><title>sched_clock_cpu (3 samples, 0.05%)</title><rect x="74.8080%" y="117" width="0.0524%" height="15" fill="rgb(249,55,44)"/><text x="75.0580%" y="127.50"></text></g><g><title>native_sched_clock (3 samples, 0.05%)</title><rect x="74.8080%" y="101" width="0.0524%" height="15" fill="rgb(220,221,32)"/><text x="75.0580%" y="111.50"></text></g><g><title>ttwu_do_activate (67 samples, 1.17%)</title><rect x="73.9700%" y="181" width="1.1697%" height="15" fill="rgb(212,216,41)"/><text x="74.2200%" y="191.50"></text></g><g><title>ttwu_do_wakeup (16 samples, 0.28%)</title><rect x="74.8603%" y="165" width="0.2793%" height="15" fill="rgb(228,213,43)"/><text x="75.1103%" y="175.50"></text></g><g><title>check_preempt_curr (16 samples, 0.28%)</title><rect x="74.8603%" y="149" width="0.2793%" height="15" fill="rgb(211,31,26)"/><text x="75.1103%" y="159.50"></text></g><g><title>resched_curr (14 samples, 0.24%)</title><rect x="74.8953%" y="133" width="0.2444%" height="15" fill="rgb(229,202,19)"/><text x="75.1453%" y="143.50"></text></g><g><title>ttwu_queue_wakelist (2 samples, 0.03%)</title><rect x="75.1397%" y="181" width="0.0349%" height="15" fill="rgb(229,105,46)"/><text x="75.3897%" y="191.50"></text></g><g><title>llist_add_batch (1 samples, 0.02%)</title><rect x="75.1571%" y="165" width="0.0175%" height="15" fill="rgb(235,108,1)"/><text x="75.4071%" y="175.50"></text></g><g><title>update_cfs_rq_h_load (7 samples, 0.12%)</title><rect x="75.1746%" y="181" width="0.1222%" height="15" fill="rgb(245,111,35)"/><text x="75.4246%" y="191.50"></text></g><g><title>futex_wake (124 samples, 2.16%)</title><rect x="73.1844%" y="229" width="2.1648%" height="15" fill="rgb(219,185,31)"/><text x="73.4344%" y="239.50">f..</text></g><g><title>wake_up_q (100 samples, 1.75%)</title><rect x="73.6034%" y="213" width="1.7458%" height="15" fill="rgb(214,4,43)"/><text x="73.8534%" y="223.50"></text></g><g><title>try_to_wake_up (93 samples, 1.62%)</title><rect x="73.7256%" y="197" width="1.6236%" height="15" fill="rgb(235,227,40)"/><text x="73.9756%" y="207.50"></text></g><g><title>update_rq_clock (3 samples, 0.05%)</title><rect x="75.2968%" y="181" width="0.0524%" height="15" fill="rgb(230,88,30)"/><text x="75.5468%" y="191.50"></text></g><g><title>sched_clock_cpu (1 samples, 0.02%)</title><rect x="75.3317%" y="165" width="0.0175%" height="15" fill="rgb(216,217,1)"/><text x="75.5817%" y="175.50"></text></g><g><title>native_sched_clock (1 samples, 0.02%)</title><rect x="75.3317%" y="149" width="0.0175%" height="15" fill="rgb(248,139,50)"/><text x="75.5817%" y="159.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (145 samples, 2.53%)</title><rect x="72.8352%" y="325" width="2.5314%" height="15" fill="rgb(233,1,21)"/><text x="73.0852%" y="335.50">&lt;p..</text></g><g><title>syscall (145 samples, 2.53%)</title><rect x="72.8352%" y="309" width="2.5314%" height="15" fill="rgb(215,183,12)"/><text x="73.0852%" y="319.50">sy..</text></g><g><title>entry_SYSCALL_64_after_hwframe (138 samples, 2.41%)</title><rect x="72.9574%" y="293" width="2.4092%" height="15" fill="rgb(229,104,42)"/><text x="73.2074%" y="303.50">en..</text></g><g><title>do_syscall_64 (136 samples, 2.37%)</title><rect x="72.9923%" y="277" width="2.3743%" height="15" fill="rgb(243,34,48)"/><text x="73.2423%" y="287.50">do..</text></g><g><title>__x64_sys_futex (131 samples, 2.29%)</title><rect x="73.0796%" y="261" width="2.2870%" height="15" fill="rgb(239,11,44)"/><text x="73.3296%" y="271.50">_..</text></g><g><title>do_futex (130 samples, 2.27%)</title><rect x="73.0971%" y="245" width="2.2696%" height="15" fill="rgb(231,98,35)"/><text x="73.3471%" y="255.50">d..</text></g><g><title>hash_futex (1 samples, 0.02%)</title><rect x="75.3492%" y="229" width="0.0175%" height="15" fill="rgb(233,28,25)"/><text x="75.5992%" y="239.50"></text></g><g><title>&lt;core::cmp::Ordering as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="75.3666%" y="293" width="0.0175%" height="15" fill="rgb(234,123,11)"/><text x="75.6166%" y="303.50"></text></g><g><title>&lt;std::time::Instant as core::cmp::PartialOrd&gt;::gt (2 samples, 0.03%)</title><rect x="75.3666%" y="309" width="0.0349%" height="15" fill="rgb(220,69,3)"/><text x="75.6166%" y="319.50"></text></g><g><title>&lt;std::sys::unix::time::inner::Instant as core::cmp::PartialOrd&gt;::partial_cmp (1 samples, 0.02%)</title><rect x="75.3841%" y="293" width="0.0175%" height="15" fill="rgb(214,64,36)"/><text x="75.6341%" y="303.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (1 samples, 0.02%)</title><rect x="75.3841%" y="277" width="0.0175%" height="15" fill="rgb(211,138,32)"/><text x="75.6341%" y="287.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (1 samples, 0.02%)</title><rect x="75.3841%" y="261" width="0.0175%" height="15" fill="rgb(213,118,47)"/><text x="75.6341%" y="271.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (1 samples, 0.02%)</title><rect x="75.3841%" y="245" width="0.0175%" height="15" fill="rgb(243,124,49)"/><text x="75.6341%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (1 samples, 0.02%)</title><rect x="75.3841%" y="229" width="0.0175%" height="15" fill="rgb(221,30,28)"/><text x="75.6341%" y="239.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::should_timeout (7 samples, 0.12%)</title><rect x="75.3666%" y="325" width="0.1222%" height="15" fill="rgb(246,37,13)"/><text x="75.6166%" y="335.50"></text></g><g><title>std::time::Instant::now (5 samples, 0.09%)</title><rect x="75.4015%" y="309" width="0.0873%" height="15" fill="rgb(249,66,14)"/><text x="75.6515%" y="319.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (5 samples, 0.09%)</title><rect x="75.4015%" y="293" width="0.0873%" height="15" fill="rgb(213,166,5)"/><text x="75.6515%" y="303.50"></text></g><g><title>std::sys::unix::time::inner::now (5 samples, 0.09%)</title><rect x="75.4015%" y="277" width="0.0873%" height="15" fill="rgb(221,66,24)"/><text x="75.6515%" y="287.50"></text></g><g><title>__clock_gettime (5 samples, 0.09%)</title><rect x="75.4015%" y="261" width="0.0873%" height="15" fill="rgb(210,132,17)"/><text x="75.6515%" y="271.50"></text></g><g><title>__vdso_clock_gettime (4 samples, 0.07%)</title><rect x="75.4190%" y="245" width="0.0698%" height="15" fill="rgb(243,202,5)"/><text x="75.6690%" y="255.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (5 samples, 0.09%)</title><rect x="75.4888%" y="325" width="0.0873%" height="15" fill="rgb(233,70,48)"/><text x="75.7388%" y="335.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (5 samples, 0.09%)</title><rect x="75.4888%" y="309" width="0.0873%" height="15" fill="rgb(238,41,26)"/><text x="75.7388%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (5 samples, 0.09%)</title><rect x="75.4888%" y="293" width="0.0873%" height="15" fill="rgb(241,19,31)"/><text x="75.7388%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (5 samples, 0.09%)</title><rect x="75.4888%" y="277" width="0.0873%" height="15" fill="rgb(214,76,10)"/><text x="75.7388%" y="287.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::notify_one (162 samples, 2.83%)</title><rect x="72.8352%" y="389" width="2.8282%" height="15" fill="rgb(254,202,22)"/><text x="73.0852%" y="399.50">to..</text></g><g><title>parking_lot::condvar::Condvar::notify_one (162 samples, 2.83%)</title><rect x="72.8352%" y="373" width="2.8282%" height="15" fill="rgb(214,72,24)"/><text x="73.0852%" y="383.50">pa..</text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (162 samples, 2.83%)</title><rect x="72.8352%" y="357" width="2.8282%" height="15" fill="rgb(221,92,46)"/><text x="73.0852%" y="367.50">pa..</text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (162 samples, 2.83%)</title><rect x="72.8352%" y="341" width="2.8282%" height="15" fill="rgb(246,13,50)"/><text x="73.0852%" y="351.50">pa..</text></g><g><title>parking_lot_core::parking_lot::unlock_bucket_pair (5 samples, 0.09%)</title><rect x="75.5761%" y="325" width="0.0873%" height="15" fill="rgb(240,165,38)"/><text x="75.8261%" y="335.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::unlock (5 samples, 0.09%)</title><rect x="75.5761%" y="309" width="0.0873%" height="15" fill="rgb(241,24,51)"/><text x="75.8261%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (5 samples, 0.09%)</title><rect x="75.5761%" y="293" width="0.0873%" height="15" fill="rgb(227,51,44)"/><text x="75.8261%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_sub (5 samples, 0.09%)</title><rect x="75.5761%" y="277" width="0.0873%" height="15" fill="rgb(231,121,3)"/><text x="75.8261%" y="287.50"></text></g><g><title>core::task::wake::Waker::wake (171 samples, 2.99%)</title><rect x="72.7130%" y="437" width="2.9853%" height="15" fill="rgb(245,3,41)"/><text x="72.9630%" y="447.50">cor..</text></g><g><title>tokio::park::thread::wake (171 samples, 2.99%)</title><rect x="72.7130%" y="421" width="2.9853%" height="15" fill="rgb(214,13,26)"/><text x="72.9630%" y="431.50">tok..</text></g><g><title>tokio::park::thread::Inner::unpark (165 samples, 2.88%)</title><rect x="72.8177%" y="405" width="2.8806%" height="15" fill="rgb(252,75,11)"/><text x="73.0677%" y="415.50">to..</text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (2 samples, 0.03%)</title><rect x="75.6634%" y="389" width="0.0349%" height="15" fill="rgb(218,226,17)"/><text x="75.9134%" y="399.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (2 samples, 0.03%)</title><rect x="75.6634%" y="373" width="0.0349%" height="15" fill="rgb(248,89,38)"/><text x="75.9134%" y="383.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (2 samples, 0.03%)</title><rect x="75.6634%" y="357" width="0.0349%" height="15" fill="rgb(237,73,46)"/><text x="75.9134%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (2 samples, 0.03%)</title><rect x="75.6634%" y="341" width="0.0349%" height="15" fill="rgb(242,78,33)"/><text x="75.9134%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (2 samples, 0.03%)</title><rect x="75.6634%" y="325" width="0.0349%" height="15" fill="rgb(235,60,3)"/><text x="75.9134%" y="335.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (7 samples, 0.12%)</title><rect x="75.6983%" y="437" width="0.1222%" height="15" fill="rgb(216,172,19)"/><text x="75.9483%" y="447.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (7 samples, 0.12%)</title><rect x="75.6983%" y="421" width="0.1222%" height="15" fill="rgb(227,6,42)"/><text x="75.9483%" y="431.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (7 samples, 0.12%)</title><rect x="75.6983%" y="405" width="0.1222%" height="15" fill="rgb(223,207,42)"/><text x="75.9483%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (7 samples, 0.12%)</title><rect x="75.6983%" y="389" width="0.1222%" height="15" fill="rgb(246,138,30)"/><text x="75.9483%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (7 samples, 0.12%)</title><rect x="75.6983%" y="373" width="0.1222%" height="15" fill="rgb(251,199,47)"/><text x="75.9483%" y="383.50"></text></g><g><title>rho_runtime::storage::coordinator::ThreadSafeQueue::push (210 samples, 3.67%)</title><rect x="72.2591%" y="469" width="3.6662%" height="15" fill="rgb(228,218,44)"/><text x="72.5091%" y="479.50">rho_..</text></g><g><title>tokio::sync::notify::Notify::notify_one (188 samples, 3.28%)</title><rect x="72.6432%" y="453" width="3.2821%" height="15" fill="rgb(220,68,6)"/><text x="72.8932%" y="463.50">tok..</text></g><g><title>tokio::sync::notify::notify_locked (6 samples, 0.10%)</title><rect x="75.8205%" y="437" width="0.1047%" height="15" fill="rgb(240,60,26)"/><text x="76.0705%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (6 samples, 0.10%)</title><rect x="75.8205%" y="421" width="0.1047%" height="15" fill="rgb(211,200,19)"/><text x="76.0705%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_store (6 samples, 0.10%)</title><rect x="75.8205%" y="405" width="0.1047%" height="15" fill="rgb(242,145,30)"/><text x="76.0705%" y="415.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (18 samples, 0.31%)</title><rect x="75.9253%" y="453" width="0.3142%" height="15" fill="rgb(225,64,13)"/><text x="76.1753%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (17 samples, 0.30%)</title><rect x="75.9427%" y="437" width="0.2968%" height="15" fill="rgb(218,103,35)"/><text x="76.1927%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_add (17 samples, 0.30%)</title><rect x="75.9427%" y="421" width="0.2968%" height="15" fill="rgb(216,93,46)"/><text x="76.1927%" y="431.50"></text></g><g><title>[libc-2.31.so] (4 samples, 0.07%)</title><rect x="76.2570%" y="437" width="0.0698%" height="15" fill="rgb(225,159,27)"/><text x="76.5070%" y="447.50"></text></g><g><title>_mi_deferred_free (1 samples, 0.02%)</title><rect x="76.3268%" y="325" width="0.0175%" height="15" fill="rgb(225,204,11)"/><text x="76.5768%" y="335.50"></text></g><g><title>_mi_free_block (2 samples, 0.03%)</title><rect x="76.5189%" y="293" width="0.0349%" height="15" fill="rgb(205,56,4)"/><text x="76.7689%" y="303.50"></text></g><g><title>_mi_page_retire (2 samples, 0.03%)</title><rect x="76.5189%" y="277" width="0.0349%" height="15" fill="rgb(206,6,35)"/><text x="76.7689%" y="287.50"></text></g><g><title>mi_page_queue_of (2 samples, 0.03%)</title><rect x="76.5189%" y="261" width="0.0349%" height="15" fill="rgb(247,73,52)"/><text x="76.7689%" y="271.50"></text></g><g><title>_mi_bin (2 samples, 0.03%)</title><rect x="76.5189%" y="245" width="0.0349%" height="15" fill="rgb(246,97,4)"/><text x="76.7689%" y="255.50"></text></g><g><title>_mi_page_thread_free_collect (8 samples, 0.14%)</title><rect x="76.5712%" y="277" width="0.1397%" height="15" fill="rgb(212,37,15)"/><text x="76.8212%" y="287.50"></text></g><g><title>mi_block_next (6 samples, 0.10%)</title><rect x="76.6061%" y="261" width="0.1047%" height="15" fill="rgb(208,130,40)"/><text x="76.8561%" y="271.50"></text></g><g><title>mi_block_nextx (5 samples, 0.09%)</title><rect x="76.6236%" y="245" width="0.0873%" height="15" fill="rgb(236,55,29)"/><text x="76.8736%" y="255.50"></text></g><g><title>_mi_page_free_collect (11 samples, 0.19%)</title><rect x="76.5538%" y="293" width="0.1920%" height="15" fill="rgb(209,156,45)"/><text x="76.8038%" y="303.50"></text></g><g><title>mi_page_thread_free (2 samples, 0.03%)</title><rect x="76.7109%" y="277" width="0.0349%" height="15" fill="rgb(249,107,4)"/><text x="76.9609%" y="287.50"></text></g><g><title>_mi_heap_delayed_free (32 samples, 0.56%)</title><rect x="76.3443%" y="325" width="0.5587%" height="15" fill="rgb(227,7,13)"/><text x="76.5943%" y="335.50"></text></g><g><title>_mi_free_delayed_block (22 samples, 0.38%)</title><rect x="76.5189%" y="309" width="0.3841%" height="15" fill="rgb(250,129,14)"/><text x="76.7689%" y="319.50"></text></g><g><title>_mi_page_use_delayed_free (9 samples, 0.16%)</title><rect x="76.7458%" y="293" width="0.1571%" height="15" fill="rgb(229,92,13)"/><text x="76.9958%" y="303.50"></text></g><g><title>_mi_page_malloc (4 samples, 0.07%)</title><rect x="76.9029%" y="325" width="0.0698%" height="15" fill="rgb(245,98,39)"/><text x="77.1529%" y="335.50"></text></g><g><title>&lt;rho_runtime::storage::store::AsyncStore as rho_runtime::storage::Storage&gt;::produce (274 samples, 4.78%)</title><rect x="72.2067%" y="485" width="4.7835%" height="15" fill="rgb(234,135,48)"/><text x="72.4567%" y="495.50">&lt;rho_r..</text></g><g><title>tokio::sync::oneshot::channel (61 samples, 1.06%)</title><rect x="75.9253%" y="469" width="1.0649%" height="15" fill="rgb(230,98,28)"/><text x="76.1753%" y="479.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (43 samples, 0.75%)</title><rect x="76.2395%" y="453" width="0.7507%" height="15" fill="rgb(223,121,0)"/><text x="76.4895%" y="463.50"></text></g><g><title>alloc::alloc::exchange_malloc (38 samples, 0.66%)</title><rect x="76.3268%" y="437" width="0.6634%" height="15" fill="rgb(234,173,33)"/><text x="76.5768%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (38 samples, 0.66%)</title><rect x="76.3268%" y="421" width="0.6634%" height="15" fill="rgb(245,47,8)"/><text x="76.5768%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (38 samples, 0.66%)</title><rect x="76.3268%" y="405" width="0.6634%" height="15" fill="rgb(205,17,20)"/><text x="76.5768%" y="415.50"></text></g><g><title>alloc::alloc::alloc (38 samples, 0.66%)</title><rect x="76.3268%" y="389" width="0.6634%" height="15" fill="rgb(232,151,16)"/><text x="76.5768%" y="399.50"></text></g><g><title>__rg_alloc (38 samples, 0.66%)</title><rect x="76.3268%" y="373" width="0.6634%" height="15" fill="rgb(208,30,32)"/><text x="76.5768%" y="383.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (38 samples, 0.66%)</title><rect x="76.3268%" y="357" width="0.6634%" height="15" fill="rgb(254,26,3)"/><text x="76.5768%" y="367.50"></text></g><g><title>_mi_malloc_generic (38 samples, 0.66%)</title><rect x="76.3268%" y="341" width="0.6634%" height="15" fill="rgb(240,177,30)"/><text x="76.5768%" y="351.50"></text></g><g><title>mi_find_page (1 samples, 0.02%)</title><rect x="76.9728%" y="325" width="0.0175%" height="15" fill="rgb(248,76,44)"/><text x="77.2228%" y="335.50"></text></g><g><title>mi_find_free_page (1 samples, 0.02%)</title><rect x="76.9728%" y="309" width="0.0175%" height="15" fill="rgb(241,186,54)"/><text x="77.2228%" y="319.50"></text></g><g><title>&lt;tokio::sync::oneshot::Receiver&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="76.9902%" y="485" width="0.0175%" height="15" fill="rgb(249,171,29)"/><text x="77.2402%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.02%)</title><rect x="76.9902%" y="469" width="0.0175%" height="15" fill="rgb(237,151,44)"/><text x="77.2402%" y="479.50"></text></g><g><title>__rust_probestack (1 samples, 0.02%)</title><rect x="76.9902%" y="453" width="0.0175%" height="15" fill="rgb(228,174,30)"/><text x="77.2402%" y="463.50"></text></g><g><title>[libc-2.31.so] (23 samples, 0.40%)</title><rect x="77.0077%" y="485" width="0.4015%" height="15" fill="rgb(252,14,37)"/><text x="77.2577%" y="495.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::produce::{{closure}} (317 samples, 5.53%)</title><rect x="72.0147%" y="501" width="5.5342%" height="15" fill="rgb(207,111,40)"/><text x="72.2647%" y="511.50">rho_run..</text></g><g><title>rho_runtime::interpreter::AsynWaitGroup::release (8 samples, 0.14%)</title><rect x="77.4092%" y="485" width="0.1397%" height="15" fill="rgb(248,171,54)"/><text x="77.6592%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicI32::fetch_sub (8 samples, 0.14%)</title><rect x="77.4092%" y="469" width="0.1397%" height="15" fill="rgb(211,127,2)"/><text x="77.6592%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_sub (8 samples, 0.14%)</title><rect x="77.4092%" y="453" width="0.1397%" height="15" fill="rgb(236,87,47)"/><text x="77.6592%" y="463.50"></text></g><g><title>[libc-2.31.so] (3 samples, 0.05%)</title><rect x="77.6187%" y="485" width="0.0524%" height="15" fill="rgb(223,190,45)"/><text x="77.8687%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;rho_runtime::interpreter::InterpreterContext&lt;rho_runtime::storage::store::AsyncStore&gt;&gt;&gt; (3 samples, 0.05%)</title><rect x="77.6711%" y="485" width="0.0524%" height="15" fill="rgb(215,5,16)"/><text x="77.9211%" y="495.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.05%)</title><rect x="77.6711%" y="469" width="0.0524%" height="15" fill="rgb(252,82,33)"/><text x="77.9211%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.05%)</title><rect x="77.6711%" y="453" width="0.0524%" height="15" fill="rgb(247,213,44)"/><text x="77.9211%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.05%)</title><rect x="77.6711%" y="437" width="0.0524%" height="15" fill="rgb(205,196,44)"/><text x="77.9211%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="77.7235%" y="453" width="0.0175%" height="15" fill="rgb(237,96,54)"/><text x="77.9735%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;[model::rho_types::Par]&gt; (1 samples, 0.02%)</title><rect x="77.7235%" y="437" width="0.0175%" height="15" fill="rgb(230,113,34)"/><text x="77.9735%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Par&gt;&gt; (6 samples, 0.10%)</title><rect x="77.7235%" y="469" width="0.1047%" height="15" fill="rgb(221,224,12)"/><text x="77.9735%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::Par&gt;&gt; (5 samples, 0.09%)</title><rect x="77.7409%" y="453" width="0.0873%" height="15" fill="rgb(219,112,44)"/><text x="77.9909%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.09%)</title><rect x="77.7409%" y="437" width="0.0873%" height="15" fill="rgb(210,31,13)"/><text x="77.9909%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.09%)</title><rect x="77.7409%" y="421" width="0.0873%" height="15" fill="rgb(230,25,16)"/><text x="77.9909%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.09%)</title><rect x="77.7409%" y="405" width="0.0873%" height="15" fill="rgb(246,108,53)"/><text x="77.9909%" y="415.50"></text></g><g><title>__rg_dealloc (5 samples, 0.09%)</title><rect x="77.7409%" y="389" width="0.0873%" height="15" fill="rgb(241,172,50)"/><text x="77.9909%" y="399.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (5 samples, 0.09%)</title><rect x="77.7409%" y="373" width="0.0873%" height="15" fill="rgb(235,141,10)"/><text x="77.9909%" y="383.50"></text></g><g><title>_mi_free_block_mt (5 samples, 0.09%)</title><rect x="77.7409%" y="357" width="0.0873%" height="15" fill="rgb(220,174,43)"/><text x="77.9909%" y="367.50"></text></g><g><title>_mi_free_block_mt (2 samples, 0.03%)</title><rect x="77.8282%" y="309" width="0.0349%" height="15" fill="rgb(215,181,40)"/><text x="78.0782%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Send&gt; (9 samples, 0.16%)</title><rect x="77.7235%" y="485" width="0.1571%" height="15" fill="rgb(230,97,2)"/><text x="77.9735%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;model::bitset::BitSet&gt;&gt; (3 samples, 0.05%)</title><rect x="77.8282%" y="469" width="0.0524%" height="15" fill="rgb(211,25,27)"/><text x="78.0782%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::bitset::BitSet&gt; (3 samples, 0.05%)</title><rect x="77.8282%" y="453" width="0.0524%" height="15" fill="rgb(230,87,26)"/><text x="78.0782%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;bit_vec::BitVec&gt; (3 samples, 0.05%)</title><rect x="77.8282%" y="437" width="0.0524%" height="15" fill="rgb(227,160,17)"/><text x="78.0782%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u32&gt;&gt; (3 samples, 0.05%)</title><rect x="77.8282%" y="421" width="0.0524%" height="15" fill="rgb(244,85,34)"/><text x="78.0782%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u32&gt;&gt; (3 samples, 0.05%)</title><rect x="77.8282%" y="405" width="0.0524%" height="15" fill="rgb(207,70,0)"/><text x="78.0782%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.05%)</title><rect x="77.8282%" y="389" width="0.0524%" height="15" fill="rgb(223,129,7)"/><text x="78.0782%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.05%)</title><rect x="77.8282%" y="373" width="0.0524%" height="15" fill="rgb(246,105,7)"/><text x="78.0782%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.05%)</title><rect x="77.8282%" y="357" width="0.0524%" height="15" fill="rgb(215,154,42)"/><text x="78.0782%" y="367.50"></text></g><g><title>__rg_dealloc (3 samples, 0.05%)</title><rect x="77.8282%" y="341" width="0.0524%" height="15" fill="rgb(220,215,30)"/><text x="78.0782%" y="351.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (3 samples, 0.05%)</title><rect x="77.8282%" y="325" width="0.0524%" height="15" fill="rgb(228,81,51)"/><text x="78.0782%" y="335.50"></text></g><g><title>mi_free (1 samples, 0.02%)</title><rect x="77.8631%" y="309" width="0.0175%" height="15" fill="rgb(247,71,54)"/><text x="78.1131%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="77.8806%" y="389" width="0.0349%" height="15" fill="rgb(234,176,34)"/><text x="78.1306%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;[model::rho_types::Expr]&gt; (2 samples, 0.03%)</title><rect x="77.8806%" y="373" width="0.0349%" height="15" fill="rgb(241,103,54)"/><text x="78.1306%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Expr&gt; (1 samples, 0.02%)</title><rect x="77.8980%" y="357" width="0.0175%" height="15" fill="rgb(228,22,34)"/><text x="78.1480%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;model::rho_types::expr::ExprInstance&gt;&gt; (1 samples, 0.02%)</title><rect x="77.8980%" y="341" width="0.0175%" height="15" fill="rgb(241,179,48)"/><text x="78.1480%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::expr::ExprInstance&gt; (1 samples, 0.02%)</title><rect x="77.8980%" y="325" width="0.0175%" height="15" fill="rgb(235,167,37)"/><text x="78.1480%" y="335.50"></text></g><g><title>_mi_free_block_mt (8 samples, 0.14%)</title><rect x="77.9155%" y="293" width="0.1397%" height="15" fill="rgb(213,109,30)"/><text x="78.1655%" y="303.50"></text></g><g><title>mi_free (1 samples, 0.02%)</title><rect x="78.0552%" y="293" width="0.0175%" height="15" fill="rgb(222,172,16)"/><text x="78.3052%" y="303.50"></text></g><g><title>_mi_free_block (2 samples, 0.03%)</title><rect x="78.0901%" y="277" width="0.0349%" height="15" fill="rgb(233,192,5)"/><text x="78.3401%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Expr&gt;&gt; (16 samples, 0.28%)</title><rect x="77.8806%" y="405" width="0.2793%" height="15" fill="rgb(247,189,41)"/><text x="78.1306%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::Expr&gt;&gt; (14 samples, 0.24%)</title><rect x="77.9155%" y="389" width="0.2444%" height="15" fill="rgb(218,134,47)"/><text x="78.1655%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.24%)</title><rect x="77.9155%" y="373" width="0.2444%" height="15" fill="rgb(216,29,3)"/><text x="78.1655%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.24%)</title><rect x="77.9155%" y="357" width="0.2444%" height="15" fill="rgb(246,140,12)"/><text x="78.1655%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.24%)</title><rect x="77.9155%" y="341" width="0.2444%" height="15" fill="rgb(230,136,11)"/><text x="78.1655%" y="351.50"></text></g><g><title>__rg_dealloc (14 samples, 0.24%)</title><rect x="77.9155%" y="325" width="0.2444%" height="15" fill="rgb(247,22,47)"/><text x="78.1655%" y="335.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (14 samples, 0.24%)</title><rect x="77.9155%" y="309" width="0.2444%" height="15" fill="rgb(218,84,22)"/><text x="78.1655%" y="319.50"></text></g><g><title>mi_free_generic (5 samples, 0.09%)</title><rect x="78.0726%" y="293" width="0.0873%" height="15" fill="rgb(216,87,39)"/><text x="78.3226%" y="303.50"></text></g><g><title>_mi_segment_page_of (2 samples, 0.03%)</title><rect x="78.1250%" y="277" width="0.0349%" height="15" fill="rgb(221,178,8)"/><text x="78.3750%" y="287.50"></text></g><g><title>_mi_segment_page_idx_of (2 samples, 0.03%)</title><rect x="78.1250%" y="261" width="0.0349%" height="15" fill="rgb(230,42,11)"/><text x="78.3750%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;rho_runtime::interpreter::reduce::environment::Env&gt; (17 samples, 0.30%)</title><rect x="77.8806%" y="485" width="0.2968%" height="15" fill="rgb(237,229,4)"/><text x="78.1306%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;smallvec::SmallVec&lt;[model::rho_types::Par: 6]&gt;&gt; (17 samples, 0.30%)</title><rect x="77.8806%" y="469" width="0.2968%" height="15" fill="rgb(222,31,33)"/><text x="78.1306%" y="479.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.30%)</title><rect x="77.8806%" y="453" width="0.2968%" height="15" fill="rgb(210,17,39)"/><text x="78.1306%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;[model::rho_types::Par]&gt; (17 samples, 0.30%)</title><rect x="77.8806%" y="437" width="0.2968%" height="15" fill="rgb(244,93,20)"/><text x="78.1306%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Par&gt; (17 samples, 0.30%)</title><rect x="77.8806%" y="421" width="0.2968%" height="15" fill="rgb(210,40,47)"/><text x="78.1306%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Send&gt;&gt; (1 samples, 0.02%)</title><rect x="78.1599%" y="405" width="0.0175%" height="15" fill="rgb(239,211,47)"/><text x="78.4099%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="78.1599%" y="389" width="0.0175%" height="15" fill="rgb(251,223,49)"/><text x="78.4099%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;[model::rho_types::Send]&gt; (1 samples, 0.02%)</title><rect x="78.1599%" y="373" width="0.0175%" height="15" fill="rgb(221,149,5)"/><text x="78.4099%" y="383.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1 samples, 0.02%)</title><rect x="78.2123%" y="469" width="0.0175%" height="15" fill="rgb(219,224,51)"/><text x="78.4623%" y="479.50"></text></g><g><title>&lt;model::rho_types::Par as rho_runtime::interpreter::reduce::eval_expression::ParExpressionEvaluator&lt;S&gt;&gt;::evaluate_nested_expressions (1 samples, 0.02%)</title><rect x="78.2297%" y="469" width="0.0175%" height="15" fill="rgb(223,7,8)"/><text x="78.4797%" y="479.50"></text></g><g><title>__rust_probestack (1 samples, 0.02%)</title><rect x="78.2297%" y="453" width="0.0175%" height="15" fill="rgb(241,217,22)"/><text x="78.4797%" y="463.50"></text></g><g><title>[libc-2.31.so] (3 samples, 0.05%)</title><rect x="78.2472%" y="469" width="0.0524%" height="15" fill="rgb(248,209,0)"/><text x="78.4972%" y="479.50"></text></g><g><title>_mi_page_thread_free_collect (6 samples, 0.10%)</title><rect x="78.3869%" y="293" width="0.1047%" height="15" fill="rgb(217,205,4)"/><text x="78.6369%" y="303.50"></text></g><g><title>mi_block_next (5 samples, 0.09%)</title><rect x="78.4043%" y="277" width="0.0873%" height="15" fill="rgb(228,124,39)"/><text x="78.6543%" y="287.50"></text></g><g><title>mi_block_nextx (3 samples, 0.05%)</title><rect x="78.4392%" y="261" width="0.0524%" height="15" fill="rgb(250,116,42)"/><text x="78.6892%" y="271.50"></text></g><g><title>_mi_page_free_collect (7 samples, 0.12%)</title><rect x="78.3869%" y="309" width="0.1222%" height="15" fill="rgb(223,202,9)"/><text x="78.6369%" y="319.50"></text></g><g><title>mi_page_thread_free (1 samples, 0.02%)</title><rect x="78.4916%" y="293" width="0.0175%" height="15" fill="rgb(242,222,40)"/><text x="78.7416%" y="303.50"></text></g><g><title>_mi_heap_delayed_free (11 samples, 0.19%)</title><rect x="78.3345%" y="341" width="0.1920%" height="15" fill="rgb(229,99,46)"/><text x="78.5845%" y="351.50"></text></g><g><title>_mi_free_delayed_block (8 samples, 0.14%)</title><rect x="78.3869%" y="325" width="0.1397%" height="15" fill="rgb(225,56,46)"/><text x="78.6369%" y="335.50"></text></g><g><title>_mi_page_use_delayed_free (1 samples, 0.02%)</title><rect x="78.5091%" y="309" width="0.0175%" height="15" fill="rgb(227,94,5)"/><text x="78.7591%" y="319.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.02%)</title><rect x="78.5265%" y="341" width="0.0175%" height="15" fill="rgb(205,112,38)"/><text x="78.7765%" y="351.50"></text></g><g><title>_mi_malloc_generic (14 samples, 0.24%)</title><rect x="78.3170%" y="357" width="0.2444%" height="15" fill="rgb(231,133,46)"/><text x="78.5670%" y="367.50"></text></g><g><title>mi_find_page (1 samples, 0.02%)</title><rect x="78.5440%" y="341" width="0.0175%" height="15" fill="rgb(217,16,9)"/><text x="78.7940%" y="351.50"></text></g><g><title>mi_find_free_page (1 samples, 0.02%)</title><rect x="78.5440%" y="325" width="0.0175%" height="15" fill="rgb(249,173,9)"/><text x="78.7940%" y="335.50"></text></g><g><title>_mi_page_free_collect (1 samples, 0.02%)</title><rect x="78.5440%" y="309" width="0.0175%" height="15" fill="rgb(205,163,53)"/><text x="78.7940%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (17 samples, 0.30%)</title><rect x="78.2996%" y="437" width="0.2968%" height="15" fill="rgb(217,54,41)"/><text x="78.5496%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (17 samples, 0.30%)</title><rect x="78.2996%" y="421" width="0.2968%" height="15" fill="rgb(228,216,12)"/><text x="78.5496%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (17 samples, 0.30%)</title><rect x="78.2996%" y="405" width="0.2968%" height="15" fill="rgb(244,228,15)"/><text x="78.5496%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (16 samples, 0.28%)</title><rect x="78.3170%" y="389" width="0.2793%" height="15" fill="rgb(221,176,53)"/><text x="78.5670%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (16 samples, 0.28%)</title><rect x="78.3170%" y="373" width="0.2793%" height="15" fill="rgb(205,94,34)"/><text x="78.5670%" y="383.50"></text></g><g><title>mi_malloc (2 samples, 0.03%)</title><rect x="78.5615%" y="357" width="0.0349%" height="15" fill="rgb(213,110,48)"/><text x="78.8115%" y="367.50"></text></g><g><title>mi_heap_malloc (2 samples, 0.03%)</title><rect x="78.5615%" y="341" width="0.0349%" height="15" fill="rgb(236,142,28)"/><text x="78.8115%" y="351.50"></text></g><g><title>mi_heap_malloc_small (2 samples, 0.03%)</title><rect x="78.5615%" y="325" width="0.0349%" height="15" fill="rgb(225,135,29)"/><text x="78.8115%" y="335.50"></text></g><g><title>_mi_page_malloc (2 samples, 0.03%)</title><rect x="78.5615%" y="309" width="0.0349%" height="15" fill="rgb(252,45,31)"/><text x="78.8115%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (19 samples, 0.33%)</title><rect x="78.2996%" y="469" width="0.3317%" height="15" fill="rgb(211,187,50)"/><text x="78.5496%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (19 samples, 0.33%)</title><rect x="78.2996%" y="453" width="0.3317%" height="15" fill="rgb(229,109,7)"/><text x="78.5496%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.03%)</title><rect x="78.5964%" y="437" width="0.0349%" height="15" fill="rgb(251,131,51)"/><text x="78.8464%" y="447.50"></text></g><g><title>[libc-2.31.so] (2 samples, 0.03%)</title><rect x="78.5964%" y="421" width="0.0349%" height="15" fill="rgb(251,180,35)"/><text x="78.8464%" y="431.50"></text></g><g><title>model::rho_types::Par::single_bundle (1 samples, 0.02%)</title><rect x="78.6313%" y="469" width="0.0175%" height="15" fill="rgb(211,46,32)"/><text x="78.8813%" y="479.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.10%)</title><rect x="78.6487%" y="453" width="0.1047%" height="15" fill="rgb(248,123,17)"/><text x="78.8987%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (6 samples, 0.10%)</title><rect x="78.6487%" y="437" width="0.1047%" height="15" fill="rgb(227,141,18)"/><text x="78.8987%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_add (6 samples, 0.10%)</title><rect x="78.6487%" y="421" width="0.1047%" height="15" fill="rgb(216,102,9)"/><text x="78.8987%" y="431.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="78.7535%" y="453" width="0.0175%" height="15" fill="rgb(253,47,13)"/><text x="79.0035%" y="463.50"></text></g><g><title>rho_runtime::interpreter::AsynWaitGroup::acquire (4 samples, 0.07%)</title><rect x="78.7709%" y="453" width="0.0698%" height="15" fill="rgb(226,93,23)"/><text x="79.0209%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicI32::fetch_add (4 samples, 0.07%)</title><rect x="78.7709%" y="437" width="0.0698%" height="15" fill="rgb(247,104,17)"/><text x="79.0209%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_add (4 samples, 0.07%)</title><rect x="78.7709%" y="421" width="0.0698%" height="15" fill="rgb(233,203,26)"/><text x="79.0209%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::spawner::Spawner&gt; (11 samples, 0.19%)</title><rect x="78.8408%" y="437" width="0.1920%" height="15" fill="rgb(244,98,49)"/><text x="79.0908%" y="447.50"></text></g><g><title>tokio::runtime::context::spawn_handle (7 samples, 0.12%)</title><rect x="79.0328%" y="437" width="0.1222%" height="15" fill="rgb(235,134,22)"/><text x="79.2828%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (7 samples, 0.12%)</title><rect x="79.0328%" y="421" width="0.1222%" height="15" fill="rgb(221,70,32)"/><text x="79.2828%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (7 samples, 0.12%)</title><rect x="79.0328%" y="405" width="0.1222%" height="15" fill="rgb(238,15,50)"/><text x="79.2828%" y="415.50"></text></g><g><title>tokio::runtime::context::spawn_handle::{{closure}} (7 samples, 0.12%)</title><rect x="79.0328%" y="389" width="0.1222%" height="15" fill="rgb(215,221,48)"/><text x="79.2828%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (7 samples, 0.12%)</title><rect x="79.0328%" y="373" width="0.1222%" height="15" fill="rgb(236,73,3)"/><text x="79.2828%" y="383.50"></text></g><g><title>tokio::runtime::context::spawn_handle::{{closure}}::{{closure}} (7 samples, 0.12%)</title><rect x="79.0328%" y="357" width="0.1222%" height="15" fill="rgb(250,107,11)"/><text x="79.2828%" y="367.50"></text></g><g><title>&lt;tokio::runtime::spawner::Spawner as core::clone::Clone&gt;::clone (7 samples, 0.12%)</title><rect x="79.0328%" y="341" width="0.1222%" height="15" fill="rgb(242,39,14)"/><text x="79.2828%" y="351.50"></text></g><g><title>_mi_page_thread_free_collect (1 samples, 0.02%)</title><rect x="79.2249%" y="325" width="0.0175%" height="15" fill="rgb(248,164,37)"/><text x="79.4749%" y="335.50"></text></g><g><title>_mi_page_free_collect (3 samples, 0.05%)</title><rect x="79.2249%" y="341" width="0.0524%" height="15" fill="rgb(217,60,12)"/><text x="79.4749%" y="351.50"></text></g><g><title>mi_page_thread_free (2 samples, 0.03%)</title><rect x="79.2423%" y="325" width="0.0349%" height="15" fill="rgb(240,125,29)"/><text x="79.4923%" y="335.50"></text></g><g><title>__rg_alloc (8 samples, 0.14%)</title><rect x="79.1550%" y="421" width="0.1397%" height="15" fill="rgb(208,207,28)"/><text x="79.4050%" y="431.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (8 samples, 0.14%)</title><rect x="79.1550%" y="405" width="0.1397%" height="15" fill="rgb(209,159,27)"/><text x="79.4050%" y="415.50"></text></g><g><title>_mi_malloc_generic (8 samples, 0.14%)</title><rect x="79.1550%" y="389" width="0.1397%" height="15" fill="rgb(251,176,53)"/><text x="79.4050%" y="399.50"></text></g><g><title>_mi_heap_delayed_free (8 samples, 0.14%)</title><rect x="79.1550%" y="373" width="0.1397%" height="15" fill="rgb(211,85,7)"/><text x="79.4050%" y="383.50"></text></g><g><title>_mi_free_delayed_block (4 samples, 0.07%)</title><rect x="79.2249%" y="357" width="0.0698%" height="15" fill="rgb(216,64,54)"/><text x="79.4749%" y="367.50"></text></g><g><title>_mi_page_use_delayed_free (1 samples, 0.02%)</title><rect x="79.2772%" y="341" width="0.0175%" height="15" fill="rgb(217,54,24)"/><text x="79.5272%" y="351.50"></text></g><g><title>tokio::runtime::task::joinable (3 samples, 0.05%)</title><rect x="79.2947%" y="405" width="0.0524%" height="15" fill="rgb(208,206,53)"/><text x="79.5447%" y="415.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::new (3 samples, 0.05%)</title><rect x="79.2947%" y="389" width="0.0524%" height="15" fill="rgb(251,74,39)"/><text x="79.5447%" y="399.50"></text></g><g><title>tokio::runtime::task::core::Cell&lt;T,S&gt;::new (3 samples, 0.05%)</title><rect x="79.2947%" y="373" width="0.0524%" height="15" fill="rgb(226,47,5)"/><text x="79.5447%" y="383.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (3 samples, 0.05%)</title><rect x="79.2947%" y="357" width="0.0524%" height="15" fill="rgb(234,111,33)"/><text x="79.5447%" y="367.50"></text></g><g><title>[libc-2.31.so] (3 samples, 0.05%)</title><rect x="79.2947%" y="341" width="0.0524%" height="15" fill="rgb(251,14,10)"/><text x="79.5447%" y="351.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::produce (42 samples, 0.73%)</title><rect x="78.6487%" y="469" width="0.7332%" height="15" fill="rgb(232,43,0)"/><text x="78.8987%" y="479.50"></text></g><g><title>tokio::task::spawn::spawn (31 samples, 0.54%)</title><rect x="78.8408%" y="453" width="0.5412%" height="15" fill="rgb(222,68,43)"/><text x="79.0908%" y="463.50"></text></g><g><title>tokio::runtime::spawner::Spawner::spawn (13 samples, 0.23%)</title><rect x="79.1550%" y="437" width="0.2270%" height="15" fill="rgb(217,24,23)"/><text x="79.4050%" y="447.50"></text></g><g><title>tokio::runtime::thread_pool::Spawner::spawn (5 samples, 0.09%)</title><rect x="79.2947%" y="421" width="0.0873%" height="15" fill="rgb(229,209,14)"/><text x="79.5447%" y="431.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (2 samples, 0.03%)</title><rect x="79.3471%" y="405" width="0.0349%" height="15" fill="rgb(250,149,48)"/><text x="79.5971%" y="415.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (2 samples, 0.03%)</title><rect x="79.3471%" y="389" width="0.0349%" height="15" fill="rgb(210,120,37)"/><text x="79.5971%" y="399.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule::{{closure}} (2 samples, 0.03%)</title><rect x="79.3471%" y="373" width="0.0349%" height="15" fill="rgb(210,21,8)"/><text x="79.5971%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.02%)</title><rect x="79.3994%" y="437" width="0.0175%" height="15" fill="rgb(243,145,7)"/><text x="79.6494%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.02%)</title><rect x="79.3994%" y="421" width="0.0175%" height="15" fill="rgb(238,178,32)"/><text x="79.6494%" y="431.50"></text></g><g><title>model::ordering::sort_par::&lt;impl model::ordering::Sortable for model::rho_types::Par&gt;::sort (3 samples, 0.05%)</title><rect x="79.3820%" y="453" width="0.0524%" height="15" fill="rgb(222,4,10)"/><text x="79.6320%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by (1 samples, 0.02%)</title><rect x="79.4169%" y="437" width="0.0175%" height="15" fill="rgb(239,7,37)"/><text x="79.6669%" y="447.50"></text></g><g><title>alloc::slice::merge_sort (1 samples, 0.02%)</title><rect x="79.4169%" y="421" width="0.0175%" height="15" fill="rgb(215,31,37)"/><text x="79.6669%" y="431.50"></text></g><g><title>&lt;&amp;mut alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (7 samples, 0.12%)</title><rect x="79.4518%" y="437" width="0.1222%" height="15" fill="rgb(224,83,33)"/><text x="79.7018%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (7 samples, 0.12%)</title><rect x="79.4518%" y="421" width="0.1222%" height="15" fill="rgb(239,55,3)"/><text x="79.7018%" y="431.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1 samples, 0.02%)</title><rect x="79.5740%" y="437" width="0.0175%" height="15" fill="rgb(247,92,11)"/><text x="79.8240%" y="447.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.12%)</title><rect x="79.5915%" y="421" width="0.1222%" height="15" fill="rgb(239,200,7)"/><text x="79.8415%" y="431.50"></text></g><g><title>core::ptr::read (7 samples, 0.12%)</title><rect x="79.5915%" y="405" width="0.1222%" height="15" fill="rgb(227,115,8)"/><text x="79.8415%" y="415.50"></text></g><g><title>[libc-2.31.so] (7 samples, 0.12%)</title><rect x="79.5915%" y="389" width="0.1222%" height="15" fill="rgb(215,189,27)"/><text x="79.8415%" y="399.50"></text></g><g><title>[libc-2.31.so] (2 samples, 0.03%)</title><rect x="79.7137%" y="421" width="0.0349%" height="15" fill="rgb(251,216,39)"/><text x="79.9637%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (3 samples, 0.05%)</title><rect x="79.7486%" y="421" width="0.0524%" height="15" fill="rgb(207,29,47)"/><text x="79.9986%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3 samples, 0.05%)</title><rect x="79.7486%" y="405" width="0.0524%" height="15" fill="rgb(210,71,34)"/><text x="79.9986%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.05%)</title><rect x="79.7486%" y="389" width="0.0524%" height="15" fill="rgb(253,217,51)"/><text x="79.9986%" y="399.50"></text></g><g><title>[libc-2.31.so] (3 samples, 0.05%)</title><rect x="79.7486%" y="373" width="0.0524%" height="15" fill="rgb(222,117,46)"/><text x="79.9986%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.05%)</title><rect x="79.8010%" y="421" width="0.0524%" height="15" fill="rgb(226,132,6)"/><text x="80.0510%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.05%)</title><rect x="79.8010%" y="405" width="0.0524%" height="15" fill="rgb(254,145,51)"/><text x="80.0510%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.05%)</title><rect x="79.8010%" y="389" width="0.0524%" height="15" fill="rgb(231,199,27)"/><text x="80.0510%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.05%)</title><rect x="79.8010%" y="373" width="0.0524%" height="15" fill="rgb(245,158,14)"/><text x="80.0510%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.05%)</title><rect x="79.8010%" y="357" width="0.0524%" height="15" fill="rgb(240,113,14)"/><text x="80.0510%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.05%)</title><rect x="79.8010%" y="341" width="0.0524%" height="15" fill="rgb(210,20,13)"/><text x="80.0510%" y="351.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.03%)</title><rect x="79.8184%" y="325" width="0.0349%" height="15" fill="rgb(241,144,13)"/><text x="80.0684%" y="335.50"></text></g><g><title>__rg_alloc (2 samples, 0.03%)</title><rect x="79.8184%" y="309" width="0.0349%" height="15" fill="rgb(235,43,34)"/><text x="80.0684%" y="319.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (2 samples, 0.03%)</title><rect x="79.8184%" y="293" width="0.0349%" height="15" fill="rgb(208,36,20)"/><text x="80.0684%" y="303.50"></text></g><g><title>_mi_malloc_generic (2 samples, 0.03%)</title><rect x="79.8184%" y="277" width="0.0349%" height="15" fill="rgb(239,204,10)"/><text x="80.0684%" y="287.50"></text></g><g><title>_mi_heap_delayed_free (2 samples, 0.03%)</title><rect x="79.8184%" y="261" width="0.0349%" height="15" fill="rgb(217,84,43)"/><text x="80.0684%" y="271.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="79.8534%" y="405" width="0.0175%" height="15" fill="rgb(241,170,50)"/><text x="80.1034%" y="415.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::spawn_evaluation::{{closure}} (137 samples, 2.39%)</title><rect x="77.5489%" y="501" width="2.3918%" height="15" fill="rgb(226,205,29)"/><text x="77.7989%" y="511.50">rh..</text></g><g><title>rho_runtime::interpreter::reduce::eval_send::&lt;impl rho_runtime::interpreter::reduce::Evaluator&lt;S&gt; for model::rho_types::Send&gt;::evaluate (101 samples, 1.76%)</title><rect x="78.1774%" y="485" width="1.7633%" height="15" fill="rgb(233,113,1)"/><text x="78.4274%" y="495.50"></text></g><g><title>rho_runtime::interpreter::reduce::substitute::sub_par::&lt;impl rho_runtime::interpreter::reduce::substitute::Substitutable&lt;S&gt; for model::rho_types::Par&gt;::substitute (32 samples, 0.56%)</title><rect x="79.3820%" y="469" width="0.5587%" height="15" fill="rgb(253,98,13)"/><text x="79.6320%" y="479.50"></text></g><g><title>rho_runtime::interpreter::reduce::substitute::sub_par::&lt;impl rho_runtime::interpreter::reduce::substitute::Substitutable&lt;S&gt; for model::rho_types::Par&gt;::substitute_no_sort (29 samples, 0.51%)</title><rect x="79.4344%" y="453" width="0.5063%" height="15" fill="rgb(211,115,12)"/><text x="79.6844%" y="463.50"></text></g><g><title>rho_runtime::interpreter::reduce::substitute::sub_par::substitute_expressions_in_par (20 samples, 0.35%)</title><rect x="79.5915%" y="437" width="0.3492%" height="15" fill="rgb(208,12,16)"/><text x="79.8415%" y="447.50"></text></g><g><title>model::rho_types::Par::append_expr (5 samples, 0.09%)</title><rect x="79.8534%" y="421" width="0.0873%" height="15" fill="rgb(237,193,54)"/><text x="80.1034%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.07%)</title><rect x="79.8708%" y="405" width="0.0698%" height="15" fill="rgb(243,22,42)"/><text x="80.1208%" y="415.50"></text></g><g><title>core::ptr::write (4 samples, 0.07%)</title><rect x="79.8708%" y="389" width="0.0698%" height="15" fill="rgb(233,151,36)"/><text x="80.1208%" y="399.50"></text></g><g><title>[libc-2.31.so] (4 samples, 0.07%)</title><rect x="79.8708%" y="373" width="0.0698%" height="15" fill="rgb(237,57,45)"/><text x="80.1208%" y="383.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::take_output (3 samples, 0.05%)</title><rect x="80.2549%" y="357" width="0.0524%" height="15" fill="rgb(221,88,17)"/><text x="80.5049%" y="367.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (3 samples, 0.05%)</title><rect x="80.2549%" y="341" width="0.0524%" height="15" fill="rgb(230,79,15)"/><text x="80.5049%" y="351.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::take_output::{{closure}} (3 samples, 0.05%)</title><rect x="80.2549%" y="325" width="0.0524%" height="15" fill="rgb(213,57,13)"/><text x="80.5049%" y="335.50"></text></g><g><title>core::mem::replace (3 samples, 0.05%)</title><rect x="80.2549%" y="309" width="0.0524%" height="15" fill="rgb(222,116,39)"/><text x="80.5049%" y="319.50"></text></g><g><title>core::mem::swap (3 samples, 0.05%)</title><rect x="80.2549%" y="293" width="0.0524%" height="15" fill="rgb(245,107,2)"/><text x="80.5049%" y="303.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (3 samples, 0.05%)</title><rect x="80.2549%" y="277" width="0.0524%" height="15" fill="rgb(238,1,10)"/><text x="80.5049%" y="287.50"></text></g><g><title>core::ptr::swap_nonoverlapping (3 samples, 0.05%)</title><rect x="80.2549%" y="261" width="0.0524%" height="15" fill="rgb(249,4,48)"/><text x="80.5049%" y="271.50"></text></g><g><title>core::ptr::swap_nonoverlapping_bytes (3 samples, 0.05%)</title><rect x="80.2549%" y="245" width="0.0524%" height="15" fill="rgb(223,151,18)"/><text x="80.5049%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.05%)</title><rect x="80.2549%" y="229" width="0.0524%" height="15" fill="rgb(227,65,43)"/><text x="80.5049%" y="239.50"></text></g><g><title>tokio::runtime::task::harness::set_join_waker (2 samples, 0.03%)</title><rect x="80.3247%" y="341" width="0.0349%" height="15" fill="rgb(218,40,45)"/><text x="80.5747%" y="351.50"></text></g><g><title>tokio::runtime::task::state::State::set_join_waker (2 samples, 0.03%)</title><rect x="80.3247%" y="325" width="0.0349%" height="15" fill="rgb(252,121,31)"/><text x="80.5747%" y="335.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update (2 samples, 0.03%)</title><rect x="80.3247%" y="309" width="0.0349%" height="15" fill="rgb(219,158,43)"/><text x="80.5747%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (2 samples, 0.03%)</title><rect x="80.3247%" y="293" width="0.0349%" height="15" fill="rgb(231,162,42)"/><text x="80.5747%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2 samples, 0.03%)</title><rect x="80.3247%" y="277" width="0.0349%" height="15" fill="rgb(217,179,25)"/><text x="80.5747%" y="287.50"></text></g><g><title>tokio::runtime::task::state::State::load (1 samples, 0.02%)</title><rect x="80.3596%" y="341" width="0.0175%" height="15" fill="rgb(206,212,31)"/><text x="80.6096%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.02%)</title><rect x="80.3596%" y="325" width="0.0175%" height="15" fill="rgb(235,144,12)"/><text x="80.6096%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="80.3596%" y="309" width="0.0175%" height="15" fill="rgb(213,51,10)"/><text x="80.6096%" y="319.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (11 samples, 0.19%)</title><rect x="80.2025%" y="421" width="0.1920%" height="15" fill="rgb(231,145,14)"/><text x="80.4525%" y="431.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::try_read_output (11 samples, 0.19%)</title><rect x="80.2025%" y="405" width="0.1920%" height="15" fill="rgb(235,15,28)"/><text x="80.4525%" y="415.50"></text></g><g><title>tokio::runtime::task::raw::try_read_output (9 samples, 0.16%)</title><rect x="80.2374%" y="389" width="0.1571%" height="15" fill="rgb(237,206,10)"/><text x="80.4874%" y="399.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::try_read_output (9 samples, 0.16%)</title><rect x="80.2374%" y="373" width="0.1571%" height="15" fill="rgb(236,227,27)"/><text x="80.4874%" y="383.50"></text></g><g><title>tokio::runtime::task::harness::can_read_output (5 samples, 0.09%)</title><rect x="80.3073%" y="357" width="0.0873%" height="15" fill="rgb(246,83,35)"/><text x="80.5573%" y="367.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.02%)</title><rect x="80.3771%" y="341" width="0.0175%" height="15" fill="rgb(220,136,24)"/><text x="80.6271%" y="351.50"></text></g><g><title>tokio::runtime::task::state::State::ref_inc (1 samples, 0.02%)</title><rect x="80.3771%" y="325" width="0.0175%" height="15" fill="rgb(217,3,25)"/><text x="80.6271%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.02%)</title><rect x="80.3771%" y="309" width="0.0175%" height="15" fill="rgb(239,24,14)"/><text x="80.6271%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.02%)</title><rect x="80.3771%" y="293" width="0.0175%" height="15" fill="rgb(244,16,53)"/><text x="80.6271%" y="303.50"></text></g><g><title>_mi_free_block_mt (2 samples, 0.03%)</title><rect x="80.3946%" y="357" width="0.0349%" height="15" fill="rgb(208,175,44)"/><text x="80.6446%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::sync::oneshot::Inner&lt;core::cell::RefCell&lt;alloc::boxed::Box&lt;rho_runtime::storage::tuplecell::TuplespaceChannel&gt;&gt;&gt;&gt;&gt;&gt; (6 samples, 0.10%)</title><rect x="80.3946%" y="405" width="0.1047%" height="15" fill="rgb(252,18,48)"/><text x="80.6446%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::sync::oneshot::Inner&lt;core::cell::RefCell&lt;alloc::boxed::Box&lt;rho_runtime::storage::tuplecell::TuplespaceChannel&gt;&gt;&gt;&gt;&gt; (6 samples, 0.10%)</title><rect x="80.3946%" y="389" width="0.1047%" height="15" fill="rgb(234,199,32)"/><text x="80.6446%" y="399.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.10%)</title><rect x="80.3946%" y="373" width="0.1047%" height="15" fill="rgb(225,77,54)"/><text x="80.6446%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (4 samples, 0.07%)</title><rect x="80.4295%" y="357" width="0.0698%" height="15" fill="rgb(225,42,25)"/><text x="80.6795%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_sub (4 samples, 0.07%)</title><rect x="80.4295%" y="341" width="0.0698%" height="15" fill="rgb(242,227,46)"/><text x="80.6795%" y="351.50"></text></g><g><title>&lt;rho_runtime::storage::signal::CompletionSignal as core::future::future::Future&gt;::poll (20 samples, 0.35%)</title><rect x="80.2025%" y="437" width="0.3492%" height="15" fill="rgb(246,197,35)"/><text x="80.4525%" y="447.50"></text></g><g><title>&lt;tokio::sync::oneshot::Receiver&lt;T&gt; as core::future::future::Future&gt;::poll (9 samples, 0.16%)</title><rect x="80.3946%" y="421" width="0.1571%" height="15" fill="rgb(215,159,26)"/><text x="80.6446%" y="431.50"></text></g><g><title>tokio::sync::oneshot::Inner&lt;T&gt;::poll_recv (3 samples, 0.05%)</title><rect x="80.4993%" y="405" width="0.0524%" height="15" fill="rgb(212,194,50)"/><text x="80.7493%" y="415.50"></text></g><g><title>tokio::sync::oneshot::State::set_rx_task (2 samples, 0.03%)</title><rect x="80.5168%" y="389" width="0.0349%" height="15" fill="rgb(246,132,1)"/><text x="80.7668%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (2 samples, 0.03%)</title><rect x="80.5168%" y="373" width="0.0349%" height="15" fill="rgb(217,71,7)"/><text x="80.7668%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_or (2 samples, 0.03%)</title><rect x="80.5168%" y="357" width="0.0349%" height="15" fill="rgb(252,59,32)"/><text x="80.7668%" y="367.50"></text></g><g><title>_mi_free_block_mt (11 samples, 0.19%)</title><rect x="80.5691%" y="421" width="0.1920%" height="15" fill="rgb(253,204,25)"/><text x="80.8191%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::future::maybe_done::MaybeDone&lt;rho_runtime::storage::signal::CompletionSignal&gt;&gt; (4 samples, 0.07%)</title><rect x="80.7612%" y="421" width="0.0698%" height="15" fill="rgb(232,21,16)"/><text x="81.0112%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;rho_runtime::storage::signal::CompletionSignal&gt; (4 samples, 0.07%)</title><rect x="80.7612%" y="405" width="0.0698%" height="15" fill="rgb(248,90,29)"/><text x="81.0112%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::join::JoinHandle&lt;core::cell::RefCell&lt;alloc::boxed::Box&lt;rho_runtime::storage::tuplecell::TuplespaceChannel&gt;&gt;&gt;&gt; (4 samples, 0.07%)</title><rect x="80.7612%" y="389" width="0.0698%" height="15" fill="rgb(249,223,7)"/><text x="81.0112%" y="399.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.07%)</title><rect x="80.7612%" y="373" width="0.0698%" height="15" fill="rgb(231,119,42)"/><text x="81.0112%" y="383.50"></text></g><g><title>tokio::runtime::task::state::State::drop_join_handle_fast (3 samples, 0.05%)</title><rect x="80.7786%" y="357" width="0.0524%" height="15" fill="rgb(215,41,35)"/><text x="81.0286%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (3 samples, 0.05%)</title><rect x="80.7786%" y="341" width="0.0524%" height="15" fill="rgb(220,44,45)"/><text x="81.0286%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (3 samples, 0.05%)</title><rect x="80.7786%" y="325" width="0.0524%" height="15" fill="rgb(253,197,36)"/><text x="81.0286%" y="335.50"></text></g><g><title>_mi_free_block (1 samples, 0.02%)</title><rect x="80.8485%" y="405" width="0.0175%" height="15" fill="rgb(245,225,54)"/><text x="81.0985%" y="415.50"></text></g><g><title>mi_free_generic (3 samples, 0.05%)</title><rect x="80.8310%" y="421" width="0.0524%" height="15" fill="rgb(239,94,37)"/><text x="81.0810%" y="431.50"></text></g><g><title>_mi_segment_page_of (1 samples, 0.02%)</title><rect x="80.8659%" y="405" width="0.0175%" height="15" fill="rgb(242,217,10)"/><text x="81.1159%" y="415.50"></text></g><g><title>_mi_segment_page_idx_of (1 samples, 0.02%)</title><rect x="80.8659%" y="389" width="0.0175%" height="15" fill="rgb(250,193,7)"/><text x="81.1159%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;tokio::runtime::task::core::Cell&lt;core::future::from_generator::GenFuture&lt;rho_runtime::storage::coordinator::Coordinator::handle_join_double::{{closure}}&gt;,alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt;&gt; (2 samples, 0.03%)</title><rect x="80.8834%" y="341" width="0.0349%" height="15" fill="rgb(230,104,19)"/><text x="81.1334%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Cell&lt;core::future::from_generator::GenFuture&lt;rho_runtime::storage::coordinator::Coordinator::handle_join_double::{{closure}}&gt;,alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (2 samples, 0.03%)</title><rect x="80.8834%" y="325" width="0.0349%" height="15" fill="rgb(230,181,4)"/><text x="81.1334%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Core&lt;core::future::from_generator::GenFuture&lt;rho_runtime::storage::coordinator::Coordinator::handle_join_double::{{closure}}&gt;,alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (2 samples, 0.03%)</title><rect x="80.8834%" y="309" width="0.0349%" height="15" fill="rgb(216,219,49)"/><text x="81.1334%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Scheduler&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (2 samples, 0.03%)</title><rect x="80.8834%" y="293" width="0.0349%" height="15" fill="rgb(254,144,0)"/><text x="81.1334%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::unsafe_cell::UnsafeCell&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt;&gt; (2 samples, 0.03%)</title><rect x="80.8834%" y="277" width="0.0349%" height="15" fill="rgb(205,209,38)"/><text x="81.1334%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt;&gt; (2 samples, 0.03%)</title><rect x="80.8834%" y="261" width="0.0349%" height="15" fill="rgb(240,21,42)"/><text x="81.1334%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (2 samples, 0.03%)</title><rect x="80.8834%" y="245" width="0.0349%" height="15" fill="rgb(241,132,3)"/><text x="81.1334%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt; (2 samples, 0.03%)</title><rect x="80.8834%" y="229" width="0.0349%" height="15" fill="rgb(225,14,2)"/><text x="81.1334%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="80.8834%" y="213" width="0.0349%" height="15" fill="rgb(210,141,35)"/><text x="81.1334%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.03%)</title><rect x="80.8834%" y="197" width="0.0349%" height="15" fill="rgb(251,14,44)"/><text x="81.1334%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.03%)</title><rect x="80.8834%" y="181" width="0.0349%" height="15" fill="rgb(247,48,18)"/><text x="81.1334%" y="191.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::dealloc (4 samples, 0.07%)</title><rect x="80.8834%" y="373" width="0.0698%" height="15" fill="rgb(225,0,40)"/><text x="81.1334%" y="383.50"></text></g><g><title>core::mem::drop (4 samples, 0.07%)</title><rect x="80.8834%" y="357" width="0.0698%" height="15" fill="rgb(221,31,33)"/><text x="81.1334%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;tokio::runtime::task::core::Cell&lt;core::future::from_generator::GenFuture&lt;rho_runtime::storage::coordinator::Coordinator::handle_produce::{{closure}}&gt;,alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt;&gt; (2 samples, 0.03%)</title><rect x="80.9183%" y="341" width="0.0349%" height="15" fill="rgb(237,42,40)"/><text x="81.1683%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Cell&lt;core::future::from_generator::GenFuture&lt;rho_runtime::storage::coordinator::Coordinator::handle_produce::{{closure}}&gt;,alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (2 samples, 0.03%)</title><rect x="80.9183%" y="325" width="0.0349%" height="15" fill="rgb(233,51,29)"/><text x="81.1683%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Core&lt;core::future::from_generator::GenFuture&lt;rho_runtime::storage::coordinator::Coordinator::handle_produce::{{closure}}&gt;,alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (2 samples, 0.03%)</title><rect x="80.9183%" y="309" width="0.0349%" height="15" fill="rgb(226,58,20)"/><text x="81.1683%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Scheduler&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (2 samples, 0.03%)</title><rect x="80.9183%" y="293" width="0.0349%" height="15" fill="rgb(208,98,7)"/><text x="81.1683%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::unsafe_cell::UnsafeCell&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt;&gt; (2 samples, 0.03%)</title><rect x="80.9183%" y="277" width="0.0349%" height="15" fill="rgb(228,143,44)"/><text x="81.1683%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt;&gt; (2 samples, 0.03%)</title><rect x="80.9183%" y="261" width="0.0349%" height="15" fill="rgb(246,55,38)"/><text x="81.1683%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (2 samples, 0.03%)</title><rect x="80.9183%" y="245" width="0.0349%" height="15" fill="rgb(247,87,16)"/><text x="81.1683%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt; (2 samples, 0.03%)</title><rect x="80.9183%" y="229" width="0.0349%" height="15" fill="rgb(234,129,42)"/><text x="81.1683%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="80.9183%" y="213" width="0.0349%" height="15" fill="rgb(220,82,16)"/><text x="81.1683%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.03%)</title><rect x="80.9183%" y="197" width="0.0349%" height="15" fill="rgb(211,88,4)"/><text x="81.1683%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.03%)</title><rect x="80.9183%" y="181" width="0.0349%" height="15" fill="rgb(248,151,21)"/><text x="81.1683%" y="191.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_reference (8 samples, 0.14%)</title><rect x="80.8834%" y="389" width="0.1397%" height="15" fill="rgb(238,163,6)"/><text x="81.1334%" y="399.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (4 samples, 0.07%)</title><rect x="80.9532%" y="373" width="0.0698%" height="15" fill="rgb(209,183,11)"/><text x="81.2032%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (4 samples, 0.07%)</title><rect x="80.9532%" y="357" width="0.0698%" height="15" fill="rgb(219,37,20)"/><text x="81.2032%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_sub (4 samples, 0.07%)</title><rect x="80.9532%" y="341" width="0.0698%" height="15" fill="rgb(210,158,4)"/><text x="81.2032%" y="351.50"></text></g><g><title>&lt;tokio::future::maybe_done::MaybeDone&lt;Fut&gt; as core::future::future::Future&gt;::poll (62 samples, 1.08%)</title><rect x="79.9930%" y="453" width="1.0824%" height="15" fill="rgb(221,167,53)"/><text x="80.2430%" y="463.50"></text></g><g><title>core::pin::Pin&lt;P&gt;::set (30 samples, 0.52%)</title><rect x="80.5517%" y="437" width="0.5237%" height="15" fill="rgb(237,151,45)"/><text x="80.8017%" y="447.50"></text></g><g><title>tokio::runtime::task::raw::drop_join_handle_slow (11 samples, 0.19%)</title><rect x="80.8834%" y="421" width="0.1920%" height="15" fill="rgb(231,39,3)"/><text x="81.1334%" y="431.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (11 samples, 0.19%)</title><rect x="80.8834%" y="405" width="0.1920%" height="15" fill="rgb(212,167,28)"/><text x="81.1334%" y="415.50"></text></g><g><title>tokio::runtime::task::state::State::unset_join_interested (3 samples, 0.05%)</title><rect x="81.0230%" y="389" width="0.0524%" height="15" fill="rgb(232,178,8)"/><text x="81.2730%" y="399.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update (3 samples, 0.05%)</title><rect x="81.0230%" y="373" width="0.0524%" height="15" fill="rgb(225,151,20)"/><text x="81.2730%" y="383.50"></text></g><g><title>tokio::runtime::task::state::State::load (3 samples, 0.05%)</title><rect x="81.0230%" y="357" width="0.0524%" height="15" fill="rgb(238,3,37)"/><text x="81.2730%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (3 samples, 0.05%)</title><rect x="81.0230%" y="341" width="0.0524%" height="15" fill="rgb(251,147,42)"/><text x="81.2730%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_load (3 samples, 0.05%)</title><rect x="81.0230%" y="325" width="0.0524%" height="15" fill="rgb(208,173,10)"/><text x="81.2730%" y="335.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (64 samples, 1.12%)</title><rect x="79.9930%" y="485" width="1.1173%" height="15" fill="rgb(246,225,4)"/><text x="80.2430%" y="495.50"></text></g><g><title>rho_runtime::storage::coordinator::Coordinator::handle_join_double::{{closure}}::{{closure}} (64 samples, 1.12%)</title><rect x="79.9930%" y="469" width="1.1173%" height="15" fill="rgb(248,102,6)"/><text x="80.2430%" y="479.50"></text></g><g><title>tokio::future::maybe_done::MaybeDone&lt;Fut&gt;::take_output (2 samples, 0.03%)</title><rect x="81.0754%" y="453" width="0.0349%" height="15" fill="rgb(232,6,21)"/><text x="81.3254%" y="463.50"></text></g><g><title>core::mem::replace (1 samples, 0.02%)</title><rect x="81.0929%" y="437" width="0.0175%" height="15" fill="rgb(221,179,22)"/><text x="81.3429%" y="447.50"></text></g><g><title>core::mem::swap (1 samples, 0.02%)</title><rect x="81.0929%" y="421" width="0.0175%" height="15" fill="rgb(252,50,20)"/><text x="81.3429%" y="431.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (1 samples, 0.02%)</title><rect x="81.0929%" y="405" width="0.0175%" height="15" fill="rgb(222,56,38)"/><text x="81.3429%" y="415.50"></text></g><g><title>core::ptr::swap_nonoverlapping (1 samples, 0.02%)</title><rect x="81.0929%" y="389" width="0.0175%" height="15" fill="rgb(206,193,29)"/><text x="81.3429%" y="399.50"></text></g><g><title>core::ptr::swap_nonoverlapping_bytes (1 samples, 0.02%)</title><rect x="81.0929%" y="373" width="0.0175%" height="15" fill="rgb(239,192,45)"/><text x="81.3429%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="81.0929%" y="357" width="0.0175%" height="15" fill="rgb(254,18,36)"/><text x="81.3429%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.02%)</title><rect x="81.1103%" y="485" width="0.0175%" height="15" fill="rgb(221,127,11)"/><text x="81.3603%" y="495.50"></text></g><g><title>&lt;model::bitset::BitSet&lt;B&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="81.1976%" y="309" width="0.0175%" height="15" fill="rgb(234,146,35)"/><text x="81.4476%" y="319.50"></text></g><g><title>&lt;bit_vec::BitVec&lt;B&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="81.1976%" y="293" width="0.0175%" height="15" fill="rgb(254,201,37)"/><text x="81.4476%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="81.1976%" y="277" width="0.0175%" height="15" fill="rgb(211,202,23)"/><text x="81.4476%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.02%)</title><rect x="81.1976%" y="261" width="0.0175%" height="15" fill="rgb(237,91,2)"/><text x="81.4476%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="81.1976%" y="245" width="0.0175%" height="15" fill="rgb(226,228,36)"/><text x="81.4476%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.02%)</title><rect x="81.1976%" y="229" width="0.0175%" height="15" fill="rgb(213,63,50)"/><text x="81.4476%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="81.1976%" y="213" width="0.0175%" height="15" fill="rgb(235,194,19)"/><text x="81.4476%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="81.1976%" y="197" width="0.0175%" height="15" fill="rgb(207,204,18)"/><text x="81.4476%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="81.1976%" y="181" width="0.0175%" height="15" fill="rgb(248,8,7)"/><text x="81.4476%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="81.1976%" y="165" width="0.0175%" height="15" fill="rgb(223,145,47)"/><text x="81.4476%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="81.1976%" y="149" width="0.0175%" height="15" fill="rgb(228,84,11)"/><text x="81.4476%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="81.1976%" y="133" width="0.0175%" height="15" fill="rgb(218,76,45)"/><text x="81.4476%" y="143.50"></text></g><g><title>__rg_alloc (1 samples, 0.02%)</title><rect x="81.1976%" y="117" width="0.0175%" height="15" fill="rgb(223,80,15)"/><text x="81.4476%" y="127.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.02%)</title><rect x="81.1976%" y="101" width="0.0175%" height="15" fill="rgb(219,218,33)"/><text x="81.4476%" y="111.50"></text></g><g><title>mi_malloc (1 samples, 0.02%)</title><rect x="81.1976%" y="85" width="0.0175%" height="15" fill="rgb(208,51,11)"/><text x="81.4476%" y="95.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.02%)</title><rect x="81.1976%" y="69" width="0.0175%" height="15" fill="rgb(229,165,39)"/><text x="81.4476%" y="79.50"></text></g><g><title>mi_heap_malloc_small (1 samples, 0.02%)</title><rect x="81.1976%" y="53" width="0.0175%" height="15" fill="rgb(241,100,24)"/><text x="81.4476%" y="63.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.02%)</title><rect x="81.1976%" y="37" width="0.0175%" height="15" fill="rgb(228,14,23)"/><text x="81.4476%" y="47.50"></text></g><g><title>&lt;model::rho_types::Match as core::clone::Clone&gt;::clone (6 samples, 0.10%)</title><rect x="81.1976%" y="341" width="0.1047%" height="15" fill="rgb(247,116,52)"/><text x="81.4476%" y="351.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.10%)</title><rect x="81.1976%" y="325" width="0.1047%" height="15" fill="rgb(216,149,33)"/><text x="81.4476%" y="335.50"></text></g><g><title>[libc-2.31.so] (5 samples, 0.09%)</title><rect x="81.2151%" y="309" width="0.0873%" height="15" fill="rgb(238,142,29)"/><text x="81.4651%" y="319.50"></text></g><g><title>_mi_free_block (1 samples, 0.02%)</title><rect x="81.3024%" y="165" width="0.0175%" height="15" fill="rgb(224,83,40)"/><text x="81.5524%" y="175.50"></text></g><g><title>_mi_page_retire (1 samples, 0.02%)</title><rect x="81.3024%" y="149" width="0.0175%" height="15" fill="rgb(234,165,11)"/><text x="81.5524%" y="159.50"></text></g><g><title>mi_page_queue_of (1 samples, 0.02%)</title><rect x="81.3024%" y="133" width="0.0175%" height="15" fill="rgb(215,96,23)"/><text x="81.5524%" y="143.50"></text></g><g><title>_mi_bin (1 samples, 0.02%)</title><rect x="81.3024%" y="117" width="0.0175%" height="15" fill="rgb(233,179,26)"/><text x="81.5524%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.03%)</title><rect x="81.3024%" y="293" width="0.0349%" height="15" fill="rgb(225,129,33)"/><text x="81.5524%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.03%)</title><rect x="81.3024%" y="277" width="0.0349%" height="15" fill="rgb(237,49,13)"/><text x="81.5524%" y="287.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.03%)</title><rect x="81.3024%" y="261" width="0.0349%" height="15" fill="rgb(211,3,31)"/><text x="81.5524%" y="271.50"></text></g><g><title>__rg_alloc (2 samples, 0.03%)</title><rect x="81.3024%" y="245" width="0.0349%" height="15" fill="rgb(216,152,19)"/><text x="81.5524%" y="255.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (2 samples, 0.03%)</title><rect x="81.3024%" y="229" width="0.0349%" height="15" fill="rgb(251,121,35)"/><text x="81.5524%" y="239.50"></text></g><g><title>_mi_malloc_generic (2 samples, 0.03%)</title><rect x="81.3024%" y="213" width="0.0349%" height="15" fill="rgb(210,217,47)"/><text x="81.5524%" y="223.50"></text></g><g><title>_mi_heap_delayed_free (2 samples, 0.03%)</title><rect x="81.3024%" y="197" width="0.0349%" height="15" fill="rgb(244,116,22)"/><text x="81.5524%" y="207.50"></text></g><g><title>_mi_free_delayed_block (2 samples, 0.03%)</title><rect x="81.3024%" y="181" width="0.0349%" height="15" fill="rgb(228,17,21)"/><text x="81.5524%" y="191.50"></text></g><g><title>_mi_page_free_collect (1 samples, 0.02%)</title><rect x="81.3198%" y="165" width="0.0175%" height="15" fill="rgb(240,149,34)"/><text x="81.5698%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.05%)</title><rect x="81.3024%" y="341" width="0.0524%" height="15" fill="rgb(208,125,47)"/><text x="81.5524%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.05%)</title><rect x="81.3024%" y="325" width="0.0524%" height="15" fill="rgb(249,186,39)"/><text x="81.5524%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.05%)</title><rect x="81.3024%" y="309" width="0.0524%" height="15" fill="rgb(240,220,33)"/><text x="81.5524%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity_from_bytes (1 samples, 0.02%)</title><rect x="81.3373%" y="293" width="0.0175%" height="15" fill="rgb(243,110,23)"/><text x="81.5873%" y="303.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (14 samples, 0.24%)</title><rect x="81.1627%" y="437" width="0.2444%" height="15" fill="rgb(219,163,46)"/><text x="81.4127%" y="447.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (13 samples, 0.23%)</title><rect x="81.1802%" y="421" width="0.2270%" height="15" fill="rgb(216,126,30)"/><text x="81.4302%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (12 samples, 0.21%)</title><rect x="81.1976%" y="405" width="0.2095%" height="15" fill="rgb(208,139,11)"/><text x="81.4476%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (12 samples, 0.21%)</title><rect x="81.1976%" y="389" width="0.2095%" height="15" fill="rgb(213,118,36)"/><text x="81.4476%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (12 samples, 0.21%)</title><rect x="81.1976%" y="373" width="0.2095%" height="15" fill="rgb(226,43,17)"/><text x="81.4476%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (12 samples, 0.21%)</title><rect x="81.1976%" y="357" width="0.2095%" height="15" fill="rgb(254,217,4)"/><text x="81.4476%" y="367.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (3 samples, 0.05%)</title><rect x="81.3547%" y="341" width="0.0524%" height="15" fill="rgb(210,134,47)"/><text x="81.6047%" y="351.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="81.3897%" y="325" width="0.0175%" height="15" fill="rgb(237,24,49)"/><text x="81.6397%" y="335.50"></text></g><g><title>&lt;model::rho_types::ParWithRandom as core::clone::Clone&gt;::clone (17 samples, 0.30%)</title><rect x="81.1627%" y="453" width="0.2968%" height="15" fill="rgb(251,39,46)"/><text x="81.4127%" y="463.50"></text></g><g><title>[libc-2.31.so] (3 samples, 0.05%)</title><rect x="81.4071%" y="437" width="0.0524%" height="15" fill="rgb(251,220,3)"/><text x="81.6571%" y="447.50"></text></g><g><title>&lt;rho_runtime::storage::TaggedContinuation as core::clone::Clone&gt;::clone (19 samples, 0.33%)</title><rect x="81.1627%" y="469" width="0.3317%" height="15" fill="rgb(228,105,12)"/><text x="81.4127%" y="479.50"></text></g><g><title>[libc-2.31.so] (2 samples, 0.03%)</title><rect x="81.4595%" y="453" width="0.0349%" height="15" fill="rgb(215,196,1)"/><text x="81.7095%" y="463.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.02%)</title><rect x="81.4944%" y="469" width="0.0175%" height="15" fill="rgb(214,33,39)"/><text x="81.7444%" y="479.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.03%)</title><rect x="81.5119%" y="469" width="0.0349%" height="15" fill="rgb(220,19,52)"/><text x="81.7619%" y="479.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple_mut (1 samples, 0.02%)</title><rect x="81.5293%" y="453" width="0.0175%" height="15" fill="rgb(221,78,38)"/><text x="81.7793%" y="463.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::spilled (1 samples, 0.02%)</title><rect x="81.5293%" y="437" width="0.0175%" height="15" fill="rgb(253,30,16)"/><text x="81.7793%" y="447.50"></text></g><g><title>[libc-2.31.so] (3 samples, 0.05%)</title><rect x="81.5468%" y="469" width="0.0524%" height="15" fill="rgb(242,65,0)"/><text x="81.7968%" y="479.50"></text></g><g><title>__rust_probestack (2 samples, 0.03%)</title><rect x="81.5992%" y="469" width="0.0349%" height="15" fill="rgb(235,201,12)"/><text x="81.8492%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by (1 samples, 0.02%)</title><rect x="81.6341%" y="469" width="0.0175%" height="15" fill="rgb(233,161,9)"/><text x="81.8841%" y="479.50"></text></g><g><title>alloc::slice::merge_sort (1 samples, 0.02%)</title><rect x="81.6341%" y="453" width="0.0175%" height="15" fill="rgb(241,207,41)"/><text x="81.8841%" y="463.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.02%)</title><rect x="81.6341%" y="437" width="0.0175%" height="15" fill="rgb(212,69,46)"/><text x="81.8841%" y="447.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.02%)</title><rect x="81.6341%" y="421" width="0.0175%" height="15" fill="rgb(239,69,45)"/><text x="81.8841%" y="431.50"></text></g><g><title>&lt;smallvec::IntoIter&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="81.6515%" y="405" width="0.0175%" height="15" fill="rgb(242,117,48)"/><text x="81.9015%" y="415.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::as_ptr (1 samples, 0.02%)</title><rect x="81.6515%" y="389" width="0.0175%" height="15" fill="rgb(228,41,36)"/><text x="81.9015%" y="399.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple (1 samples, 0.02%)</title><rect x="81.6515%" y="373" width="0.0175%" height="15" fill="rgb(212,3,32)"/><text x="81.9015%" y="383.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.03%)</title><rect x="81.7214%" y="309" width="0.0349%" height="15" fill="rgb(233,41,49)"/><text x="81.9714%" y="319.50"></text></g><g><title>&lt;blake3::Hash as core::hash::Hash&gt;::hash (2 samples, 0.03%)</title><rect x="81.7214%" y="293" width="0.0349%" height="15" fill="rgb(252,170,49)"/><text x="81.9714%" y="303.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.03%)</title><rect x="81.7214%" y="277" width="0.0349%" height="15" fill="rgb(229,53,26)"/><text x="81.9714%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.03%)</title><rect x="81.7214%" y="261" width="0.0349%" height="15" fill="rgb(217,157,12)"/><text x="81.9714%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (2 samples, 0.03%)</title><rect x="81.7214%" y="245" width="0.0349%" height="15" fill="rgb(227,17,9)"/><text x="81.9714%" y="255.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write (2 samples, 0.03%)</title><rect x="81.7214%" y="229" width="0.0349%" height="15" fill="rgb(218,84,12)"/><text x="81.9714%" y="239.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (2 samples, 0.03%)</title><rect x="81.7214%" y="213" width="0.0349%" height="15" fill="rgb(212,79,24)"/><text x="81.9714%" y="223.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (2 samples, 0.03%)</title><rect x="81.7214%" y="197" width="0.0349%" height="15" fill="rgb(217,222,37)"/><text x="81.9714%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value::{{closure}} (1 samples, 0.02%)</title><rect x="81.7563%" y="293" width="0.0175%" height="15" fill="rgb(246,208,8)"/><text x="82.0063%" y="303.50"></text></g><g><title>&lt;blake3::Hash as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="81.7563%" y="277" width="0.0175%" height="15" fill="rgb(244,133,10)"/><text x="82.0063%" y="287.50"></text></g><g><title>constant_time_eq::constant_time_eq_32 (1 samples, 0.02%)</title><rect x="81.7563%" y="261" width="0.0175%" height="15" fill="rgb(209,219,41)"/><text x="82.0063%" y="271.50"></text></g><g><title>constant_time_eq::constant_time_ne_32 (1 samples, 0.02%)</title><rect x="81.7563%" y="245" width="0.0175%" height="15" fill="rgb(253,175,45)"/><text x="82.0063%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.14%)</title><rect x="81.6515%" y="421" width="0.1397%" height="15" fill="rgb(235,100,37)"/><text x="81.9015%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (7 samples, 0.12%)</title><rect x="81.6690%" y="405" width="0.1222%" height="15" fill="rgb(225,87,19)"/><text x="81.9190%" y="415.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (6 samples, 0.10%)</title><rect x="81.6865%" y="389" width="0.1047%" height="15" fill="rgb(217,152,17)"/><text x="81.9365%" y="399.50"></text></g><g><title>rho_runtime::storage::tuplecell::TuplespaceChannel::join::{{closure}} (6 samples, 0.10%)</title><rect x="81.6865%" y="373" width="0.1047%" height="15" fill="rgb(235,72,13)"/><text x="81.9365%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (4 samples, 0.07%)</title><rect x="81.7214%" y="357" width="0.0698%" height="15" fill="rgb(233,140,18)"/><text x="81.9714%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (4 samples, 0.07%)</title><rect x="81.7214%" y="341" width="0.0698%" height="15" fill="rgb(207,212,28)"/><text x="81.9714%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (4 samples, 0.07%)</title><rect x="81.7214%" y="325" width="0.0698%" height="15" fill="rgb(220,130,25)"/><text x="81.9714%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (2 samples, 0.03%)</title><rect x="81.7563%" y="309" width="0.0349%" height="15" fill="rgb(205,55,34)"/><text x="82.0063%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::iter_hash (1 samples, 0.02%)</title><rect x="81.7737%" y="293" width="0.0175%" height="15" fill="rgb(237,54,35)"/><text x="82.0237%" y="303.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="81.7737%" y="277" width="0.0175%" height="15" fill="rgb(208,67,23)"/><text x="82.0237%" y="287.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.02%)</title><rect x="81.7737%" y="261" width="0.0175%" height="15" fill="rgb(206,207,50)"/><text x="82.0237%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;smallvec::IntoIter&lt;[(usize,model::rho_types::ListParWithRandom): 3]&gt;,rho_runtime::storage::tuplecell::TuplespaceChannel::join::{{closure}}&gt;&gt; (1 samples, 0.02%)</title><rect x="81.7912%" y="421" width="0.0175%" height="15" fill="rgb(213,211,42)"/><text x="82.0412%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;smallvec::IntoIter&lt;[(usize,model::rho_types::ListParWithRandom): 3]&gt;&gt; (1 samples, 0.02%)</title><rect x="81.7912%" y="405" width="0.0175%" height="15" fill="rgb(252,197,50)"/><text x="82.0412%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;smallvec::SmallVec&lt;[(usize,model::rho_types::ListParWithRandom): 3]&gt;&gt; (1 samples, 0.02%)</title><rect x="81.7912%" y="389" width="0.0175%" height="15" fill="rgb(251,211,41)"/><text x="82.0412%" y="399.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="81.7912%" y="373" width="0.0175%" height="15" fill="rgb(229,211,5)"/><text x="82.0412%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(usize,model::rho_types::ListParWithRandom)]&gt; (1 samples, 0.02%)</title><rect x="81.7912%" y="357" width="0.0175%" height="15" fill="rgb(239,36,31)"/><text x="82.0412%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (13 samples, 0.23%)</title><rect x="81.6515%" y="469" width="0.2270%" height="15" fill="rgb(248,67,31)"/><text x="81.9015%" y="479.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::FromIterator&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::from_iter (13 samples, 0.23%)</title><rect x="81.6515%" y="453" width="0.2270%" height="15" fill="rgb(249,55,44)"/><text x="81.9015%" y="463.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (13 samples, 0.23%)</title><rect x="81.6515%" y="437" width="0.2270%" height="15" fill="rgb(216,82,12)"/><text x="81.9015%" y="447.50"></text></g><g><title>core::ptr::write (4 samples, 0.07%)</title><rect x="81.8087%" y="421" width="0.0698%" height="15" fill="rgb(242,174,1)"/><text x="82.0587%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;rho_runtime::storage::tuplecell::SharedJoinedConsumer&gt;&gt; (2 samples, 0.03%)</title><rect x="81.8785%" y="469" width="0.0349%" height="15" fill="rgb(208,120,29)"/><text x="82.1285%" y="479.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="81.8785%" y="453" width="0.0349%" height="15" fill="rgb(221,105,43)"/><text x="82.1285%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.03%)</title><rect x="81.8785%" y="437" width="0.0349%" height="15" fill="rgb(234,124,22)"/><text x="82.1285%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.03%)</title><rect x="81.8785%" y="421" width="0.0349%" height="15" fill="rgb(212,23,30)"/><text x="82.1285%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;(),core::option::Option&lt;smallvec::SmallVec&lt;[(rho_runtime::storage::TaggedContinuation,smallvec::SmallVec&lt;[model::rho_types::ListParWithRandom: 3]&gt;): 3]&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="81.9134%" y="469" width="0.0175%" height="15" fill="rgb(219,122,53)"/><text x="82.1634%" y="479.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="81.9832%" y="453" width="0.0175%" height="15" fill="rgb(248,84,24)"/><text x="82.2332%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.02%)</title><rect x="81.9832%" y="437" width="0.0175%" height="15" fill="rgb(245,115,18)"/><text x="82.2332%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.02%)</title><rect x="81.9832%" y="421" width="0.0175%" height="15" fill="rgb(227,176,51)"/><text x="82.2332%" y="431.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (3 samples, 0.05%)</title><rect x="82.0007%" y="453" width="0.0524%" height="15" fill="rgb(229,63,42)"/><text x="82.2507%" y="463.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (3 samples, 0.05%)</title><rect x="82.0007%" y="437" width="0.0524%" height="15" fill="rgb(247,202,24)"/><text x="82.2507%" y="447.50"></text></g><g><title>core::cell::BorrowRef::new (3 samples, 0.05%)</title><rect x="82.0007%" y="421" width="0.0524%" height="15" fill="rgb(244,173,20)"/><text x="82.2507%" y="431.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (3 samples, 0.05%)</title><rect x="82.0531%" y="453" width="0.0524%" height="15" fill="rgb(242,81,47)"/><text x="82.3031%" y="463.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (3 samples, 0.05%)</title><rect x="82.0531%" y="437" width="0.0524%" height="15" fill="rgb(231,185,54)"/><text x="82.3031%" y="447.50"></text></g><g><title>core::cell::BorrowRefMut::new (3 samples, 0.05%)</title><rect x="82.0531%" y="421" width="0.0524%" height="15" fill="rgb(243,55,32)"/><text x="82.3031%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="82.1054%" y="421" width="0.0349%" height="15" fill="rgb(208,167,19)"/><text x="82.3554%" y="431.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="82.1054%" y="405" width="0.0349%" height="15" fill="rgb(231,72,35)"/><text x="82.3554%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="82.1054%" y="389" width="0.0349%" height="15" fill="rgb(250,173,51)"/><text x="82.3554%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="82.1229%" y="373" width="0.0175%" height="15" fill="rgb(209,5,22)"/><text x="82.3729%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="82.1578%" y="309" width="0.0175%" height="15" fill="rgb(250,174,19)"/><text x="82.4078%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::bucket (1 samples, 0.02%)</title><rect x="82.1578%" y="293" width="0.0175%" height="15" fill="rgb(217,3,49)"/><text x="82.4078%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.02%)</title><rect x="82.1578%" y="277" width="0.0175%" height="15" fill="rgb(218,225,5)"/><text x="82.4078%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.02%)</title><rect x="82.1578%" y="261" width="0.0175%" height="15" fill="rgb(236,89,11)"/><text x="82.4078%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.02%)</title><rect x="82.1578%" y="245" width="0.0175%" height="15" fill="rgb(206,33,28)"/><text x="82.4078%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value::{{closure}} (3 samples, 0.05%)</title><rect x="82.1753%" y="309" width="0.0524%" height="15" fill="rgb(241,56,42)"/><text x="82.4253%" y="319.50"></text></g><g><title>&lt;blake3::Hash as core::cmp::PartialEq&gt;::eq (3 samples, 0.05%)</title><rect x="82.1753%" y="293" width="0.0524%" height="15" fill="rgb(222,44,11)"/><text x="82.4253%" y="303.50"></text></g><g><title>constant_time_eq::constant_time_eq_32 (3 samples, 0.05%)</title><rect x="82.1753%" y="277" width="0.0524%" height="15" fill="rgb(234,111,20)"/><text x="82.4253%" y="287.50"></text></g><g><title>constant_time_eq::constant_time_ne_32 (2 samples, 0.03%)</title><rect x="82.1927%" y="261" width="0.0349%" height="15" fill="rgb(237,77,6)"/><text x="82.4427%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 0.02%)</title><rect x="82.2277%" y="309" width="0.0175%" height="15" fill="rgb(235,111,23)"/><text x="82.4777%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.02%)</title><rect x="82.2277%" y="293" width="0.0175%" height="15" fill="rgb(251,135,29)"/><text x="82.4777%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.02%)</title><rect x="82.2277%" y="277" width="0.0175%" height="15" fill="rgb(217,57,1)"/><text x="82.4777%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.02%)</title><rect x="82.2277%" y="261" width="0.0175%" height="15" fill="rgb(249,119,31)"/><text x="82.4777%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (9 samples, 0.16%)</title><rect x="82.1054%" y="453" width="0.1571%" height="15" fill="rgb(233,164,33)"/><text x="82.3554%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (9 samples, 0.16%)</title><rect x="82.1054%" y="437" width="0.1571%" height="15" fill="rgb(250,217,43)"/><text x="82.3554%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::{{closure}} (7 samples, 0.12%)</title><rect x="82.1404%" y="421" width="0.1222%" height="15" fill="rgb(232,154,50)"/><text x="82.3904%" y="431.50"></text></g><g><title>rho_runtime::storage::tuplecell::TuplespaceChannel::match_one::{{closure}} (7 samples, 0.12%)</title><rect x="82.1404%" y="405" width="0.1222%" height="15" fill="rgb(227,190,8)"/><text x="82.3904%" y="415.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (7 samples, 0.12%)</title><rect x="82.1404%" y="389" width="0.1222%" height="15" fill="rgb(209,217,32)"/><text x="82.3904%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (7 samples, 0.12%)</title><rect x="82.1404%" y="373" width="0.1222%" height="15" fill="rgb(243,203,50)"/><text x="82.3904%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (7 samples, 0.12%)</title><rect x="82.1404%" y="357" width="0.1222%" height="15" fill="rgb(232,152,27)"/><text x="82.3904%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (7 samples, 0.12%)</title><rect x="82.1404%" y="341" width="0.1222%" height="15" fill="rgb(240,34,29)"/><text x="82.3904%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (7 samples, 0.12%)</title><rect x="82.1404%" y="325" width="0.1222%" height="15" fill="rgb(215,185,52)"/><text x="82.3904%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::iter_hash (1 samples, 0.02%)</title><rect x="82.2451%" y="309" width="0.0175%" height="15" fill="rgb(240,89,49)"/><text x="82.4951%" y="319.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="82.2451%" y="293" width="0.0175%" height="15" fill="rgb(225,12,52)"/><text x="82.4951%" y="303.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.02%)</title><rect x="82.2451%" y="277" width="0.0175%" height="15" fill="rgb(239,128,45)"/><text x="82.4951%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;*const rho_runtime::storage::tuplecell::SharedJoinedConsumer,smallvec::SmallVec&lt;[[usize: 2]: 3]&gt;,core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;&gt; (2 samples, 0.03%)</title><rect x="82.2626%" y="453" width="0.0349%" height="15" fill="rgb(211,78,47)"/><text x="82.5126%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;*const rho_runtime::storage::tuplecell::SharedJoinedConsumer,smallvec::SmallVec&lt;[[usize: 2]: 3]&gt;,core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;&gt; (2 samples, 0.03%)</title><rect x="82.2626%" y="437" width="0.0349%" height="15" fill="rgb(232,31,21)"/><text x="82.5126%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(*const rho_runtime::storage::tuplecell::SharedJoinedConsumer,smallvec::SmallVec&lt;[[usize: 2]: 3]&gt;)&gt;&gt; (2 samples, 0.03%)</title><rect x="82.2626%" y="421" width="0.0349%" height="15" fill="rgb(222,168,14)"/><text x="82.5126%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="82.2626%" y="405" width="0.0349%" height="15" fill="rgb(209,128,24)"/><text x="82.5126%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::free_buckets (2 samples, 0.03%)</title><rect x="82.2626%" y="389" width="0.0349%" height="15" fill="rgb(249,35,13)"/><text x="82.5126%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.03%)</title><rect x="82.2626%" y="373" width="0.0349%" height="15" fill="rgb(218,7,2)"/><text x="82.5126%" y="383.50"></text></g><g><title>__rg_dealloc (2 samples, 0.03%)</title><rect x="82.2626%" y="357" width="0.0349%" height="15" fill="rgb(238,107,27)"/><text x="82.5126%" y="367.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (2 samples, 0.03%)</title><rect x="82.2626%" y="341" width="0.0349%" height="15" fill="rgb(217,88,38)"/><text x="82.5126%" y="351.50"></text></g><g><title>_mi_page_retire (2 samples, 0.03%)</title><rect x="82.2626%" y="325" width="0.0349%" height="15" fill="rgb(230,207,0)"/><text x="82.5126%" y="335.50"></text></g><g><title>mi_page_queue_of (1 samples, 0.02%)</title><rect x="82.2800%" y="309" width="0.0175%" height="15" fill="rgb(249,64,54)"/><text x="82.5300%" y="319.50"></text></g><g><title>_mi_bin (1 samples, 0.02%)</title><rect x="82.2800%" y="293" width="0.0175%" height="15" fill="rgb(231,7,11)"/><text x="82.5300%" y="303.50"></text></g><g><title>mi_bsr (1 samples, 0.02%)</title><rect x="82.2800%" y="277" width="0.0175%" height="15" fill="rgb(205,149,21)"/><text x="82.5300%" y="287.50"></text></g><g><title>mi_clz (1 samples, 0.02%)</title><rect x="82.2800%" y="261" width="0.0175%" height="15" fill="rgb(215,126,34)"/><text x="82.5300%" y="271.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::push (1 samples, 0.02%)</title><rect x="82.2975%" y="453" width="0.0175%" height="15" fill="rgb(241,132,45)"/><text x="82.5475%" y="463.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.02%)</title><rect x="82.3149%" y="373" width="0.0175%" height="15" fill="rgb(252,69,32)"/><text x="82.5649%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.02%)</title><rect x="82.3149%" y="357" width="0.0175%" height="15" fill="rgb(232,204,19)"/><text x="82.5649%" y="367.50"></text></g><g><title>_mi_free_block (1 samples, 0.02%)</title><rect x="82.3673%" y="229" width="0.0175%" height="15" fill="rgb(249,15,47)"/><text x="82.6173%" y="239.50"></text></g><g><title>_mi_page_retire (1 samples, 0.02%)</title><rect x="82.3673%" y="213" width="0.0175%" height="15" fill="rgb(209,227,23)"/><text x="82.6173%" y="223.50"></text></g><g><title>_mi_heap_delayed_free (7 samples, 0.12%)</title><rect x="82.3324%" y="261" width="0.1222%" height="15" fill="rgb(248,92,24)"/><text x="82.5824%" y="271.50"></text></g><g><title>_mi_free_delayed_block (5 samples, 0.09%)</title><rect x="82.3673%" y="245" width="0.0873%" height="15" fill="rgb(247,59,2)"/><text x="82.6173%" y="255.50"></text></g><g><title>_mi_page_free_collect (4 samples, 0.07%)</title><rect x="82.3848%" y="229" width="0.0698%" height="15" fill="rgb(221,30,5)"/><text x="82.6348%" y="239.50"></text></g><g><title>_mi_page_thread_free_collect (4 samples, 0.07%)</title><rect x="82.3848%" y="213" width="0.0698%" height="15" fill="rgb(208,108,53)"/><text x="82.6348%" y="223.50"></text></g><g><title>mi_block_next (4 samples, 0.07%)</title><rect x="82.3848%" y="197" width="0.0698%" height="15" fill="rgb(211,183,26)"/><text x="82.6348%" y="207.50"></text></g><g><title>mi_block_nextx (3 samples, 0.05%)</title><rect x="82.4022%" y="181" width="0.0524%" height="15" fill="rgb(232,132,4)"/><text x="82.6522%" y="191.50"></text></g><g><title>_mi_malloc_generic (8 samples, 0.14%)</title><rect x="82.3324%" y="277" width="0.1397%" height="15" fill="rgb(253,128,37)"/><text x="82.5824%" y="287.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.02%)</title><rect x="82.4546%" y="261" width="0.0175%" height="15" fill="rgb(221,58,24)"/><text x="82.7046%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::reserve (10 samples, 0.17%)</title><rect x="82.3149%" y="421" width="0.1746%" height="15" fill="rgb(230,54,45)"/><text x="82.5649%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve (10 samples, 0.17%)</title><rect x="82.3149%" y="405" width="0.1746%" height="15" fill="rgb(254,21,18)"/><text x="82.5649%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (10 samples, 0.17%)</title><rect x="82.3149%" y="389" width="0.1746%" height="15" fill="rgb(221,108,0)"/><text x="82.5649%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::resize (9 samples, 0.16%)</title><rect x="82.3324%" y="373" width="0.1571%" height="15" fill="rgb(206,95,1)"/><text x="82.5824%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (9 samples, 0.16%)</title><rect x="82.3324%" y="357" width="0.1571%" height="15" fill="rgb(237,52,5)"/><text x="82.5824%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::new_uninitialized (9 samples, 0.16%)</title><rect x="82.3324%" y="341" width="0.1571%" height="15" fill="rgb(218,150,34)"/><text x="82.5824%" y="351.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.16%)</title><rect x="82.3324%" y="325" width="0.1571%" height="15" fill="rgb(235,194,28)"/><text x="82.5824%" y="335.50"></text></g><g><title>__rg_alloc (9 samples, 0.16%)</title><rect x="82.3324%" y="309" width="0.1571%" height="15" fill="rgb(245,92,18)"/><text x="82.5824%" y="319.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (9 samples, 0.16%)</title><rect x="82.3324%" y="293" width="0.1571%" height="15" fill="rgb(253,203,53)"/><text x="82.5824%" y="303.50"></text></g><g><title>mi_malloc (1 samples, 0.02%)</title><rect x="82.4721%" y="277" width="0.0175%" height="15" fill="rgb(249,185,47)"/><text x="82.7221%" y="287.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.02%)</title><rect x="82.4721%" y="261" width="0.0175%" height="15" fill="rgb(252,194,52)"/><text x="82.7221%" y="271.50"></text></g><g><title>mi_heap_malloc_small (1 samples, 0.02%)</title><rect x="82.4721%" y="245" width="0.0175%" height="15" fill="rgb(210,53,36)"/><text x="82.7221%" y="255.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.02%)</title><rect x="82.4721%" y="229" width="0.0175%" height="15" fill="rgb(237,37,25)"/><text x="82.7221%" y="239.50"></text></g><g><title>rho_runtime::storage::tuplecell::TuplespaceChannel::match_one (33 samples, 0.58%)</title><rect x="81.9309%" y="469" width="0.5761%" height="15" fill="rgb(242,116,27)"/><text x="82.1809%" y="479.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (11 samples, 0.19%)</title><rect x="82.3149%" y="453" width="0.1920%" height="15" fill="rgb(213,185,26)"/><text x="82.5649%" y="463.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry (11 samples, 0.19%)</title><rect x="82.3149%" y="437" width="0.1920%" height="15" fill="rgb(225,204,8)"/><text x="82.5649%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (1 samples, 0.02%)</title><rect x="82.4895%" y="421" width="0.0175%" height="15" fill="rgb(254,111,37)"/><text x="82.7395%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="82.4895%" y="405" width="0.0175%" height="15" fill="rgb(242,35,9)"/><text x="82.7395%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="82.4895%" y="389" width="0.0175%" height="15" fill="rgb(232,138,49)"/><text x="82.7395%" y="399.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.02%)</title><rect x="82.4895%" y="373" width="0.0175%" height="15" fill="rgb(247,56,4)"/><text x="82.7395%" y="383.50"></text></g><g><title>rho_runtime::storage::tuplecell::TuplespaceChannel::join (80 samples, 1.40%)</title><rect x="81.1278%" y="485" width="1.3966%" height="15" fill="rgb(226,179,17)"/><text x="81.3778%" y="495.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::push (1 samples, 0.02%)</title><rect x="82.5070%" y="469" width="0.0175%" height="15" fill="rgb(216,163,45)"/><text x="82.7570%" y="479.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="82.5070%" y="453" width="0.0175%" height="15" fill="rgb(211,157,3)"/><text x="82.7570%" y="463.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.02%)</title><rect x="82.5070%" y="437" width="0.0175%" height="15" fill="rgb(234,44,20)"/><text x="82.7570%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::sync::oneshot::Inner&lt;core::cell::RefCell&lt;alloc::boxed::Box&lt;rho_runtime::storage::tuplecell::TuplespaceChannel&gt;&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="82.5244%" y="469" width="0.0175%" height="15" fill="rgb(254,138,23)"/><text x="82.7744%" y="479.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="82.5244%" y="453" width="0.0175%" height="15" fill="rgb(206,119,39)"/><text x="82.7744%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.02%)</title><rect x="82.5244%" y="437" width="0.0175%" height="15" fill="rgb(231,105,52)"/><text x="82.7744%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.02%)</title><rect x="82.5244%" y="421" width="0.0175%" height="15" fill="rgb(250,20,5)"/><text x="82.7744%" y="431.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1 samples, 0.02%)</title><rect x="82.5419%" y="469" width="0.0175%" height="15" fill="rgb(215,198,30)"/><text x="82.7919%" y="479.50"></text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send::{{closure}} (1 samples, 0.02%)</title><rect x="82.5419%" y="453" width="0.0175%" height="15" fill="rgb(246,142,8)"/><text x="82.7919%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::cell::RefCell&lt;alloc::boxed::Box&lt;rho_runtime::storage::tuplecell::TuplespaceChannel&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="82.5419%" y="437" width="0.0175%" height="15" fill="rgb(243,26,38)"/><text x="82.7919%" y="447.50"></text></g><g><title>tokio::sync::oneshot::State::set_complete (10 samples, 0.17%)</title><rect x="82.5594%" y="453" width="0.1746%" height="15" fill="rgb(205,133,28)"/><text x="82.8094%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (10 samples, 0.17%)</title><rect x="82.5594%" y="437" width="0.1746%" height="15" fill="rgb(212,34,0)"/><text x="82.8094%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_or (10 samples, 0.17%)</title><rect x="82.5594%" y="421" width="0.1746%" height="15" fill="rgb(251,226,22)"/><text x="82.8094%" y="431.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (4 samples, 0.07%)</title><rect x="82.7339%" y="373" width="0.0698%" height="15" fill="rgb(252,119,9)"/><text x="82.9839%" y="383.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_ref (4 samples, 0.07%)</title><rect x="82.7339%" y="357" width="0.0698%" height="15" fill="rgb(213,150,50)"/><text x="82.9839%" y="367.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified (4 samples, 0.07%)</title><rect x="82.7339%" y="341" width="0.0698%" height="15" fill="rgb(212,24,39)"/><text x="82.9839%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (4 samples, 0.07%)</title><rect x="82.7339%" y="325" width="0.0698%" height="15" fill="rgb(213,46,39)"/><text x="82.9839%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_or (4 samples, 0.07%)</title><rect x="82.7339%" y="309" width="0.0698%" height="15" fill="rgb(239,106,12)"/><text x="82.9839%" y="319.50"></text></g><g><title>ttwu_do_activate (1 samples, 0.02%)</title><rect x="82.8038%" y="133" width="0.0175%" height="15" fill="rgb(249,229,21)"/><text x="83.0538%" y="143.50"></text></g><g><title>enqueue_task_fair (1 samples, 0.02%)</title><rect x="82.8038%" y="117" width="0.0175%" height="15" fill="rgb(212,158,3)"/><text x="83.0538%" y="127.50"></text></g><g><title>enqueue_entity (1 samples, 0.02%)</title><rect x="82.8038%" y="101" width="0.0175%" height="15" fill="rgb(253,26,48)"/><text x="83.0538%" y="111.50"></text></g><g><title>update_load_avg (1 samples, 0.02%)</title><rect x="82.8038%" y="85" width="0.0175%" height="15" fill="rgb(238,178,20)"/><text x="83.0538%" y="95.50"></text></g><g><title>__update_load_avg_se (1 samples, 0.02%)</title><rect x="82.8038%" y="69" width="0.0175%" height="15" fill="rgb(208,86,15)"/><text x="83.0538%" y="79.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (3 samples, 0.05%)</title><rect x="82.8038%" y="277" width="0.0524%" height="15" fill="rgb(239,42,53)"/><text x="83.0538%" y="287.50"></text></g><g><title>syscall (3 samples, 0.05%)</title><rect x="82.8038%" y="261" width="0.0524%" height="15" fill="rgb(245,226,8)"/><text x="83.0538%" y="271.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (3 samples, 0.05%)</title><rect x="82.8038%" y="245" width="0.0524%" height="15" fill="rgb(216,176,32)"/><text x="83.0538%" y="255.50"></text></g><g><title>do_syscall_64 (3 samples, 0.05%)</title><rect x="82.8038%" y="229" width="0.0524%" height="15" fill="rgb(231,186,21)"/><text x="83.0538%" y="239.50"></text></g><g><title>__x64_sys_futex (3 samples, 0.05%)</title><rect x="82.8038%" y="213" width="0.0524%" height="15" fill="rgb(205,95,49)"/><text x="83.0538%" y="223.50"></text></g><g><title>do_futex (3 samples, 0.05%)</title><rect x="82.8038%" y="197" width="0.0524%" height="15" fill="rgb(217,145,8)"/><text x="83.0538%" y="207.50"></text></g><g><title>futex_wake (3 samples, 0.05%)</title><rect x="82.8038%" y="181" width="0.0524%" height="15" fill="rgb(239,144,48)"/><text x="83.0538%" y="191.50"></text></g><g><title>wake_up_q (3 samples, 0.05%)</title><rect x="82.8038%" y="165" width="0.0524%" height="15" fill="rgb(214,189,23)"/><text x="83.0538%" y="175.50"></text></g><g><title>try_to_wake_up (3 samples, 0.05%)</title><rect x="82.8038%" y="149" width="0.0524%" height="15" fill="rgb(229,157,17)"/><text x="83.0538%" y="159.50"></text></g><g><title>ttwu_queue_wakelist (2 samples, 0.03%)</title><rect x="82.8212%" y="133" width="0.0349%" height="15" fill="rgb(230,5,48)"/><text x="83.0712%" y="143.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (4 samples, 0.07%)</title><rect x="82.8038%" y="309" width="0.0698%" height="15" fill="rgb(224,156,48)"/><text x="83.0538%" y="319.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (4 samples, 0.07%)</title><rect x="82.8038%" y="293" width="0.0698%" height="15" fill="rgb(223,14,29)"/><text x="83.0538%" y="303.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.02%)</title><rect x="82.8561%" y="277" width="0.0175%" height="15" fill="rgb(229,96,36)"/><text x="83.1061%" y="287.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow::{{closure}} (1 samples, 0.02%)</title><rect x="82.8561%" y="261" width="0.0175%" height="15" fill="rgb(231,102,53)"/><text x="83.1061%" y="271.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::mark_parked_if_locked (1 samples, 0.02%)</title><rect x="82.8561%" y="245" width="0.0175%" height="15" fill="rgb(210,77,38)"/><text x="83.1061%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicU8::load (1 samples, 0.02%)</title><rect x="82.8561%" y="229" width="0.0175%" height="15" fill="rgb(235,131,6)"/><text x="83.1061%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="82.8561%" y="213" width="0.0175%" height="15" fill="rgb(252,55,38)"/><text x="83.1061%" y="223.50"></text></g><g><title>rho_runtime::storage::coordinator::Coordinator::handle_join_double::{{closure}} (173 samples, 3.02%)</title><rect x="79.9406%" y="501" width="3.0203%" height="15" fill="rgb(246,38,14)"/><text x="80.1906%" y="511.50">rho..</text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send (25 samples, 0.44%)</title><rect x="82.5244%" y="485" width="0.4365%" height="15" fill="rgb(242,27,5)"/><text x="82.7744%" y="495.50"></text></g><g><title>tokio::sync::oneshot::Inner&lt;T&gt;::complete (23 samples, 0.40%)</title><rect x="82.5594%" y="469" width="0.4015%" height="15" fill="rgb(228,65,35)"/><text x="82.8094%" y="479.50"></text></g><g><title>tokio::sync::oneshot::Task::with_task (13 samples, 0.23%)</title><rect x="82.7339%" y="453" width="0.2270%" height="15" fill="rgb(245,93,11)"/><text x="82.9839%" y="463.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (13 samples, 0.23%)</title><rect x="82.7339%" y="437" width="0.2270%" height="15" fill="rgb(213,1,31)"/><text x="82.9839%" y="447.50"></text></g><g><title>tokio::sync::oneshot::Task::with_task::{{closure}} (13 samples, 0.23%)</title><rect x="82.7339%" y="421" width="0.2270%" height="15" fill="rgb(237,205,14)"/><text x="82.9839%" y="431.50"></text></g><g><title>core::ops::function::FnOnce::call_once (13 samples, 0.23%)</title><rect x="82.7339%" y="405" width="0.2270%" height="15" fill="rgb(232,118,45)"/><text x="82.9839%" y="415.50"></text></g><g><title>core::task::wake::Waker::wake_by_ref (13 samples, 0.23%)</title><rect x="82.7339%" y="389" width="0.2270%" height="15" fill="rgb(218,5,6)"/><text x="82.9839%" y="399.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (9 samples, 0.16%)</title><rect x="82.8038%" y="373" width="0.1571%" height="15" fill="rgb(251,87,51)"/><text x="83.0538%" y="383.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (9 samples, 0.16%)</title><rect x="82.8038%" y="357" width="0.1571%" height="15" fill="rgb(207,225,20)"/><text x="83.0538%" y="367.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule::{{closure}} (9 samples, 0.16%)</title><rect x="82.8038%" y="341" width="0.1571%" height="15" fill="rgb(222,78,54)"/><text x="83.0538%" y="351.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule_local (9 samples, 0.16%)</title><rect x="82.8038%" y="325" width="0.1571%" height="15" fill="rgb(232,85,16)"/><text x="83.0538%" y="335.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::notify_parked (5 samples, 0.09%)</title><rect x="82.8736%" y="309" width="0.0873%" height="15" fill="rgb(244,25,33)"/><text x="83.1236%" y="319.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::worker_to_notify (5 samples, 0.09%)</title><rect x="82.8736%" y="293" width="0.0873%" height="15" fill="rgb(233,24,36)"/><text x="83.1236%" y="303.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::notify_should_wakeup (5 samples, 0.09%)</title><rect x="82.8736%" y="277" width="0.0873%" height="15" fill="rgb(253,49,54)"/><text x="83.1236%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (5 samples, 0.09%)</title><rect x="82.8736%" y="261" width="0.0873%" height="15" fill="rgb(245,12,22)"/><text x="83.1236%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_add (5 samples, 0.09%)</title><rect x="82.8736%" y="245" width="0.0873%" height="15" fill="rgb(253,141,28)"/><text x="83.1236%" y="255.50"></text></g><g><title>_mi_free_block_mt (4 samples, 0.07%)</title><rect x="83.0307%" y="405" width="0.0698%" height="15" fill="rgb(225,207,27)"/><text x="83.2807%" y="415.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.02%)</title><rect x="83.1006%" y="405" width="0.0175%" height="15" fill="rgb(220,84,2)"/><text x="83.3506%" y="415.50"></text></g><g><title>core::mem::drop (1 samples, 0.02%)</title><rect x="83.1006%" y="389" width="0.0175%" height="15" fill="rgb(224,37,37)"/><text x="83.3506%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;tokio::sync::oneshot::Inner&lt;core::cell::RefCell&lt;alloc::boxed::Box&lt;rho_runtime::storage::tuplecell::TuplespaceChannel&gt;&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="83.1006%" y="373" width="0.0175%" height="15" fill="rgb(220,143,18)"/><text x="83.3506%" y="383.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="83.1006%" y="357" width="0.0175%" height="15" fill="rgb(210,88,33)"/><text x="83.3506%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.02%)</title><rect x="83.1006%" y="341" width="0.0175%" height="15" fill="rgb(219,87,51)"/><text x="83.3506%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.02%)</title><rect x="83.1006%" y="325" width="0.0175%" height="15" fill="rgb(211,7,35)"/><text x="83.3506%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.03%)</title><rect x="83.1180%" y="405" width="0.0349%" height="15" fill="rgb(232,77,2)"/><text x="83.3680%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.03%)</title><rect x="83.1180%" y="389" width="0.0349%" height="15" fill="rgb(249,94,25)"/><text x="83.3680%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::sync::oneshot::Inner&lt;core::cell::RefCell&lt;alloc::boxed::Box&lt;rho_runtime::storage::tuplecell::TuplespaceChannel&gt;&gt;&gt;&gt;&gt;&gt; (8 samples, 0.14%)</title><rect x="83.0307%" y="453" width="0.1397%" height="15" fill="rgb(215,112,2)"/><text x="83.2807%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::sync::oneshot::Inner&lt;core::cell::RefCell&lt;alloc::boxed::Box&lt;rho_runtime::storage::tuplecell::TuplespaceChannel&gt;&gt;&gt;&gt;&gt; (8 samples, 0.14%)</title><rect x="83.0307%" y="437" width="0.1397%" height="15" fill="rgb(226,115,48)"/><text x="83.2807%" y="447.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.14%)</title><rect x="83.0307%" y="421" width="0.1397%" height="15" fill="rgb(249,196,10)"/><text x="83.2807%" y="431.50"></text></g><g><title>mi_free (1 samples, 0.02%)</title><rect x="83.1529%" y="405" width="0.0175%" height="15" fill="rgb(237,109,14)"/><text x="83.4029%" y="415.50"></text></g><g><title>_mi_segment_page_of (1 samples, 0.02%)</title><rect x="83.1529%" y="389" width="0.0175%" height="15" fill="rgb(217,103,53)"/><text x="83.4029%" y="399.50"></text></g><g><title>_mi_segment_page_idx_of (1 samples, 0.02%)</title><rect x="83.1529%" y="373" width="0.0175%" height="15" fill="rgb(244,137,9)"/><text x="83.4029%" y="383.50"></text></g><g><title>&lt;rho_runtime::storage::signal::CompletionSignal as core::future::future::Future&gt;::poll (9 samples, 0.16%)</title><rect x="83.0307%" y="485" width="0.1571%" height="15" fill="rgb(227,201,3)"/><text x="83.2807%" y="495.50"></text></g><g><title>&lt;tokio::sync::oneshot::Receiver&lt;T&gt; as core::future::future::Future&gt;::poll (9 samples, 0.16%)</title><rect x="83.0307%" y="469" width="0.1571%" height="15" fill="rgb(243,94,6)"/><text x="83.2807%" y="479.50"></text></g><g><title>tokio::sync::oneshot::Inner&lt;T&gt;::poll_recv (1 samples, 0.02%)</title><rect x="83.1704%" y="453" width="0.0175%" height="15" fill="rgb(235,118,5)"/><text x="83.4204%" y="463.50"></text></g><g><title>[libc-2.31.so] (6 samples, 0.10%)</title><rect x="83.1878%" y="485" width="0.1047%" height="15" fill="rgb(247,10,30)"/><text x="83.4378%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;rho_runtime::storage::coordinator::ThreadSafeQueue&gt;&gt; (1 samples, 0.02%)</title><rect x="83.2926%" y="485" width="0.0175%" height="15" fill="rgb(205,26,28)"/><text x="83.5426%" y="495.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="83.2926%" y="469" width="0.0175%" height="15" fill="rgb(206,99,35)"/><text x="83.5426%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.02%)</title><rect x="83.2926%" y="453" width="0.0175%" height="15" fill="rgb(238,130,40)"/><text x="83.5426%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.02%)</title><rect x="83.2926%" y="437" width="0.0175%" height="15" fill="rgb(224,126,31)"/><text x="83.5426%" y="447.50"></text></g><g><title>_mi_free_block_mt (2 samples, 0.03%)</title><rect x="83.3101%" y="421" width="0.0349%" height="15" fill="rgb(254,105,17)"/><text x="83.5601%" y="431.50"></text></g><g><title>mi_free (1 samples, 0.02%)</title><rect x="83.3450%" y="421" width="0.0175%" height="15" fill="rgb(216,87,36)"/><text x="83.5950%" y="431.50"></text></g><g><title>_mi_segment_page_of (1 samples, 0.02%)</title><rect x="83.3450%" y="405" width="0.0175%" height="15" fill="rgb(240,21,12)"/><text x="83.5950%" y="415.50"></text></g><g><title>_mi_segment_page_idx_of (1 samples, 0.02%)</title><rect x="83.3450%" y="389" width="0.0175%" height="15" fill="rgb(245,192,34)"/><text x="83.5950%" y="399.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::drop_join_handle_slow (4 samples, 0.07%)</title><rect x="83.3101%" y="437" width="0.0698%" height="15" fill="rgb(226,100,49)"/><text x="83.5601%" y="447.50"></text></g><g><title>tokio::runtime::task::raw::drop_join_handle_slow (1 samples, 0.02%)</title><rect x="83.3624%" y="421" width="0.0175%" height="15" fill="rgb(245,188,27)"/><text x="83.6124%" y="431.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (1 samples, 0.02%)</title><rect x="83.3624%" y="405" width="0.0175%" height="15" fill="rgb(212,170,8)"/><text x="83.6124%" y="415.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_reference (1 samples, 0.02%)</title><rect x="83.3624%" y="389" width="0.0175%" height="15" fill="rgb(217,113,29)"/><text x="83.6124%" y="399.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::dealloc (1 samples, 0.02%)</title><rect x="83.3624%" y="373" width="0.0175%" height="15" fill="rgb(237,30,3)"/><text x="83.6124%" y="383.50"></text></g><g><title>core::mem::drop (1 samples, 0.02%)</title><rect x="83.3624%" y="357" width="0.0175%" height="15" fill="rgb(227,19,28)"/><text x="83.6124%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;tokio::runtime::task::core::Cell&lt;core::future::from_generator::GenFuture&lt;rho_runtime::storage::coordinator::Coordinator::handle_join_double::{{closure}}&gt;,alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="83.3624%" y="341" width="0.0175%" height="15" fill="rgb(239,172,45)"/><text x="83.6124%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Cell&lt;core::future::from_generator::GenFuture&lt;rho_runtime::storage::coordinator::Coordinator::handle_join_double::{{closure}}&gt;,alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="83.3624%" y="325" width="0.0175%" height="15" fill="rgb(254,55,39)"/><text x="83.6124%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Core&lt;core::future::from_generator::GenFuture&lt;rho_runtime::storage::coordinator::Coordinator::handle_join_double::{{closure}}&gt;,alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="83.3624%" y="309" width="0.0175%" height="15" fill="rgb(249,208,12)"/><text x="83.6124%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Scheduler&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="83.3624%" y="293" width="0.0175%" height="15" fill="rgb(240,52,13)"/><text x="83.6124%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::unsafe_cell::UnsafeCell&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="83.3624%" y="277" width="0.0175%" height="15" fill="rgb(252,149,13)"/><text x="83.6124%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="83.3624%" y="261" width="0.0175%" height="15" fill="rgb(232,81,48)"/><text x="83.6124%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="83.3624%" y="245" width="0.0175%" height="15" fill="rgb(222,144,2)"/><text x="83.6124%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt; (1 samples, 0.02%)</title><rect x="83.3624%" y="229" width="0.0175%" height="15" fill="rgb(216,81,32)"/><text x="83.6124%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="83.3624%" y="213" width="0.0175%" height="15" fill="rgb(244,78,51)"/><text x="83.6124%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.02%)</title><rect x="83.3624%" y="197" width="0.0175%" height="15" fill="rgb(217,66,21)"/><text x="83.6124%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.02%)</title><rect x="83.3624%" y="181" width="0.0175%" height="15" fill="rgb(247,101,42)"/><text x="83.6124%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;rho_runtime::storage::signal::CompletionSignal&gt; (9 samples, 0.16%)</title><rect x="83.3101%" y="485" width="0.1571%" height="15" fill="rgb(227,81,39)"/><text x="83.5601%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::join::JoinHandle&lt;core::cell::RefCell&lt;alloc::boxed::Box&lt;rho_runtime::storage::tuplecell::TuplespaceChannel&gt;&gt;&gt;&gt; (9 samples, 0.16%)</title><rect x="83.3101%" y="469" width="0.1571%" height="15" fill="rgb(220,223,44)"/><text x="83.5601%" y="479.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.16%)</title><rect x="83.3101%" y="453" width="0.1571%" height="15" fill="rgb(205,218,2)"/><text x="83.5601%" y="463.50"></text></g><g><title>tokio::runtime::task::state::State::drop_join_handle_fast (5 samples, 0.09%)</title><rect x="83.3799%" y="437" width="0.0873%" height="15" fill="rgb(212,207,28)"/><text x="83.6299%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (5 samples, 0.09%)</title><rect x="83.3799%" y="421" width="0.0873%" height="15" fill="rgb(224,12,41)"/><text x="83.6299%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (5 samples, 0.09%)</title><rect x="83.3799%" y="405" width="0.0873%" height="15" fill="rgb(216,118,12)"/><text x="83.6299%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (2 samples, 0.03%)</title><rect x="83.4672%" y="469" width="0.0349%" height="15" fill="rgb(252,97,46)"/><text x="83.7172%" y="479.50"></text></g><g><title>core::ptr::write (2 samples, 0.03%)</title><rect x="83.4672%" y="453" width="0.0349%" height="15" fill="rgb(244,206,19)"/><text x="83.7172%" y="463.50"></text></g><g><title>[libc-2.31.so] (2 samples, 0.03%)</title><rect x="83.4672%" y="437" width="0.0349%" height="15" fill="rgb(231,84,31)"/><text x="83.7172%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (4 samples, 0.07%)</title><rect x="83.5021%" y="469" width="0.0698%" height="15" fill="rgb(244,133,0)"/><text x="83.7521%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (4 samples, 0.07%)</title><rect x="83.5021%" y="453" width="0.0698%" height="15" fill="rgb(223,15,50)"/><text x="83.7521%" y="463.50"></text></g><g><title>crossbeam_queue::array_queue::ArrayQueue&lt;T&gt;::push (8 samples, 0.14%)</title><rect x="83.4672%" y="485" width="0.1397%" height="15" fill="rgb(250,118,49)"/><text x="83.7172%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.03%)</title><rect x="83.5719%" y="469" width="0.0349%" height="15" fill="rgb(248,25,38)"/><text x="83.8219%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.03%)</title><rect x="83.5719%" y="453" width="0.0349%" height="15" fill="rgb(215,70,14)"/><text x="83.8219%" y="463.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (7 samples, 0.12%)</title><rect x="83.6068%" y="469" width="0.1222%" height="15" fill="rgb(215,28,15)"/><text x="83.8568%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (7 samples, 0.12%)</title><rect x="83.6068%" y="453" width="0.1222%" height="15" fill="rgb(243,6,28)"/><text x="83.8568%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_add (7 samples, 0.12%)</title><rect x="83.6068%" y="437" width="0.1222%" height="15" fill="rgb(222,130,1)"/><text x="83.8568%" y="447.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="83.7291%" y="469" width="0.0175%" height="15" fill="rgb(236,166,44)"/><text x="83.9791%" y="479.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple (1 samples, 0.02%)</title><rect x="83.7291%" y="453" width="0.0175%" height="15" fill="rgb(221,108,14)"/><text x="83.9791%" y="463.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.02%)</title><rect x="83.7465%" y="469" width="0.0175%" height="15" fill="rgb(252,3,45)"/><text x="83.9965%" y="479.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.02%)</title><rect x="83.7465%" y="453" width="0.0175%" height="15" fill="rgb(237,68,30)"/><text x="83.9965%" y="463.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.02%)</title><rect x="83.7465%" y="437" width="0.0175%" height="15" fill="rgb(211,79,22)"/><text x="83.9965%" y="447.50"></text></g><g><title>_mi_free_block_mt (4 samples, 0.07%)</title><rect x="83.7640%" y="453" width="0.0698%" height="15" fill="rgb(252,185,21)"/><text x="84.0140%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Expr&gt;&gt; (1 samples, 0.02%)</title><rect x="83.8338%" y="437" width="0.0175%" height="15" fill="rgb(225,189,26)"/><text x="84.0838%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::Expr&gt;&gt; (1 samples, 0.02%)</title><rect x="83.8338%" y="421" width="0.0175%" height="15" fill="rgb(241,30,40)"/><text x="84.0838%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="83.8338%" y="405" width="0.0175%" height="15" fill="rgb(235,215,44)"/><text x="84.0838%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.02%)</title><rect x="83.8338%" y="389" width="0.0175%" height="15" fill="rgb(205,8,29)"/><text x="84.0838%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.07%)</title><rect x="83.8513%" y="421" width="0.0698%" height="15" fill="rgb(241,137,42)"/><text x="84.1013%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;[model::rho_types::GUnforgeable]&gt; (4 samples, 0.07%)</title><rect x="83.8513%" y="405" width="0.0698%" height="15" fill="rgb(237,155,2)"/><text x="84.1013%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::GUnforgeable&gt; (3 samples, 0.05%)</title><rect x="83.8687%" y="389" width="0.0524%" height="15" fill="rgb(245,29,42)"/><text x="84.1187%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;model::rho_types::g_unforgeable::UnfInstance&gt;&gt; (3 samples, 0.05%)</title><rect x="83.8687%" y="373" width="0.0524%" height="15" fill="rgb(234,101,35)"/><text x="84.1187%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::g_unforgeable::UnfInstance&gt; (2 samples, 0.03%)</title><rect x="83.8862%" y="357" width="0.0349%" height="15" fill="rgb(228,64,37)"/><text x="84.1362%" y="367.50"></text></g><g><title>bytes::bytes::shared_drop (2 samples, 0.03%)</title><rect x="83.8862%" y="341" width="0.0349%" height="15" fill="rgb(217,214,36)"/><text x="84.1362%" y="351.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (2 samples, 0.03%)</title><rect x="83.8862%" y="325" width="0.0349%" height="15" fill="rgb(243,70,3)"/><text x="84.1362%" y="335.50"></text></g><g><title>bytes::bytes::shared_drop::{{closure}} (2 samples, 0.03%)</title><rect x="83.8862%" y="309" width="0.0349%" height="15" fill="rgb(253,158,52)"/><text x="84.1362%" y="319.50"></text></g><g><title>bytes::bytes::release_shared (2 samples, 0.03%)</title><rect x="83.8862%" y="293" width="0.0349%" height="15" fill="rgb(234,111,54)"/><text x="84.1362%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.03%)</title><rect x="83.8862%" y="277" width="0.0349%" height="15" fill="rgb(217,70,32)"/><text x="84.1362%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.03%)</title><rect x="83.8862%" y="261" width="0.0349%" height="15" fill="rgb(234,18,33)"/><text x="84.1362%" y="271.50"></text></g><g><title>_mi_free_block_mt (8 samples, 0.14%)</title><rect x="83.9211%" y="325" width="0.1397%" height="15" fill="rgb(234,12,49)"/><text x="84.1711%" y="335.50"></text></g><g><title>mi_tf_set_block (1 samples, 0.02%)</title><rect x="84.0433%" y="309" width="0.0175%" height="15" fill="rgb(236,10,21)"/><text x="84.2933%" y="319.50"></text></g><g><title>mi_tf_make (1 samples, 0.02%)</title><rect x="84.0433%" y="293" width="0.0175%" height="15" fill="rgb(248,182,45)"/><text x="84.2933%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::GUnforgeable&gt;&gt; (13 samples, 0.23%)</title><rect x="83.8513%" y="437" width="0.2270%" height="15" fill="rgb(217,95,36)"/><text x="84.1013%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::GUnforgeable&gt;&gt; (9 samples, 0.16%)</title><rect x="83.9211%" y="421" width="0.1571%" height="15" fill="rgb(212,110,31)"/><text x="84.1711%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.16%)</title><rect x="83.9211%" y="405" width="0.1571%" height="15" fill="rgb(206,32,53)"/><text x="84.1711%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9 samples, 0.16%)</title><rect x="83.9211%" y="389" width="0.1571%" height="15" fill="rgb(246,141,37)"/><text x="84.1711%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (9 samples, 0.16%)</title><rect x="83.9211%" y="373" width="0.1571%" height="15" fill="rgb(219,16,7)"/><text x="84.1711%" y="383.50"></text></g><g><title>__rg_dealloc (9 samples, 0.16%)</title><rect x="83.9211%" y="357" width="0.1571%" height="15" fill="rgb(230,205,45)"/><text x="84.1711%" y="367.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (9 samples, 0.16%)</title><rect x="83.9211%" y="341" width="0.1571%" height="15" fill="rgb(231,43,49)"/><text x="84.1711%" y="351.50"></text></g><g><title>_mi_page_retire (1 samples, 0.02%)</title><rect x="84.0608%" y="325" width="0.0175%" height="15" fill="rgb(212,106,34)"/><text x="84.3108%" y="335.50"></text></g><g><title>mi_page_set_has_aligned (1 samples, 0.02%)</title><rect x="84.0608%" y="309" width="0.0175%" height="15" fill="rgb(206,83,17)"/><text x="84.3108%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Par&gt; (15 samples, 0.26%)</title><rect x="83.8338%" y="453" width="0.2619%" height="15" fill="rgb(244,154,49)"/><text x="84.0838%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Send&gt;&gt; (1 samples, 0.02%)</title><rect x="84.0782%" y="437" width="0.0175%" height="15" fill="rgb(244,149,49)"/><text x="84.3282%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="84.0782%" y="421" width="0.0175%" height="15" fill="rgb(227,134,18)"/><text x="84.3282%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;[model::rho_types::Send]&gt; (1 samples, 0.02%)</title><rect x="84.0782%" y="405" width="0.0175%" height="15" fill="rgb(237,116,36)"/><text x="84.3282%" y="415.50"></text></g><g><title>mi_free (1 samples, 0.02%)</title><rect x="84.0957%" y="453" width="0.0175%" height="15" fill="rgb(205,129,40)"/><text x="84.3457%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;(blake3::Hash,model::rho_types::Par)&gt; (22 samples, 0.38%)</title><rect x="83.7640%" y="469" width="0.3841%" height="15" fill="rgb(236,178,4)"/><text x="84.0140%" y="479.50"></text></g><g><title>mi_free_generic (2 samples, 0.03%)</title><rect x="84.1131%" y="453" width="0.0349%" height="15" fill="rgb(251,76,53)"/><text x="84.3631%" y="463.50"></text></g><g><title>rho_runtime::storage::tuplecell::TuplespaceChannel::produce (33 samples, 0.58%)</title><rect x="83.6068%" y="485" width="0.5761%" height="15" fill="rgb(242,92,40)"/><text x="83.8568%" y="495.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::push (2 samples, 0.03%)</title><rect x="84.1480%" y="469" width="0.0349%" height="15" fill="rgb(209,45,30)"/><text x="84.3980%" y="479.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="84.1655%" y="453" width="0.0175%" height="15" fill="rgb(218,157,36)"/><text x="84.4155%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (5 samples, 0.09%)</title><rect x="84.2179%" y="469" width="0.0873%" height="15" fill="rgb(222,186,16)"/><text x="84.4679%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (5 samples, 0.09%)</title><rect x="84.2179%" y="453" width="0.0873%" height="15" fill="rgb(254,72,35)"/><text x="84.4679%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.02%)</title><rect x="84.3052%" y="469" width="0.0175%" height="15" fill="rgb(224,25,35)"/><text x="84.5552%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="84.3052%" y="453" width="0.0175%" height="15" fill="rgb(206,135,52)"/><text x="84.5552%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::park::thread::Inner&gt;&gt; (6 samples, 0.10%)</title><rect x="84.3401%" y="437" width="0.1047%" height="15" fill="rgb(229,174,47)"/><text x="84.5901%" y="447.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.10%)</title><rect x="84.3401%" y="421" width="0.1047%" height="15" fill="rgb(242,184,21)"/><text x="84.5901%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (5 samples, 0.09%)</title><rect x="84.3575%" y="405" width="0.0873%" height="15" fill="rgb(213,22,45)"/><text x="84.6075%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_sub (5 samples, 0.09%)</title><rect x="84.3575%" y="389" width="0.0873%" height="15" fill="rgb(237,81,54)"/><text x="84.6075%" y="399.50"></text></g><g><title>entry_SYSCALL_64 (2 samples, 0.03%)</title><rect x="84.5496%" y="325" width="0.0349%" height="15" fill="rgb(248,177,18)"/><text x="84.7996%" y="335.50"></text></g><g><title>_raw_spin_lock (7 samples, 0.12%)</title><rect x="84.6718%" y="261" width="0.1222%" height="15" fill="rgb(254,31,16)"/><text x="84.9218%" y="271.50"></text></g><g><title>get_futex_key (1 samples, 0.02%)</title><rect x="84.9162%" y="245" width="0.0175%" height="15" fill="rgb(235,20,31)"/><text x="85.1662%" y="255.50"></text></g><g><title>__unqueue_futex (2 samples, 0.03%)</title><rect x="85.0035%" y="229" width="0.0349%" height="15" fill="rgb(240,56,43)"/><text x="85.2535%" y="239.50"></text></g><g><title>mark_wake_futex (7 samples, 0.12%)</title><rect x="84.9337%" y="245" width="0.1222%" height="15" fill="rgb(237,197,51)"/><text x="85.1837%" y="255.50"></text></g><g><title>plist_del (1 samples, 0.02%)</title><rect x="85.0384%" y="229" width="0.0175%" height="15" fill="rgb(241,162,44)"/><text x="85.2884%" y="239.50"></text></g><g><title>wake_q_add_safe (1 samples, 0.02%)</title><rect x="85.0559%" y="245" width="0.0175%" height="15" fill="rgb(224,23,20)"/><text x="85.3059%" y="255.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.02%)</title><rect x="85.1082%" y="229" width="0.0175%" height="15" fill="rgb(250,109,34)"/><text x="85.3582%" y="239.50"></text></g><g><title>__lock_text_start (2 samples, 0.03%)</title><rect x="85.1781%" y="213" width="0.0349%" height="15" fill="rgb(214,175,50)"/><text x="85.4281%" y="223.50"></text></g><g><title>select_task_rq_fair (5 samples, 0.09%)</title><rect x="85.2130%" y="213" width="0.0873%" height="15" fill="rgb(213,182,5)"/><text x="85.4630%" y="223.50"></text></g><g><title>check_preempt_curr (1 samples, 0.02%)</title><rect x="85.3177%" y="197" width="0.0175%" height="15" fill="rgb(209,199,19)"/><text x="85.5677%" y="207.50"></text></g><g><title>__enqueue_entity (1 samples, 0.02%)</title><rect x="85.4749%" y="165" width="0.0175%" height="15" fill="rgb(236,224,42)"/><text x="85.7249%" y="175.50"></text></g><g><title>__update_load_avg_cfs_rq (1 samples, 0.02%)</title><rect x="85.4923%" y="165" width="0.0175%" height="15" fill="rgb(246,226,29)"/><text x="85.7423%" y="175.50"></text></g><g><title>account_entity_enqueue (1 samples, 0.02%)</title><rect x="85.5098%" y="165" width="0.0175%" height="15" fill="rgb(227,223,11)"/><text x="85.7598%" y="175.50"></text></g><g><title>place_entity (1 samples, 0.02%)</title><rect x="85.5272%" y="165" width="0.0175%" height="15" fill="rgb(219,7,51)"/><text x="85.7772%" y="175.50"></text></g><g><title>update_cfs_group (1 samples, 0.02%)</title><rect x="85.5447%" y="165" width="0.0175%" height="15" fill="rgb(245,167,10)"/><text x="85.7947%" y="175.50"></text></g><g><title>__update_load_avg_cfs_rq (3 samples, 0.05%)</title><rect x="85.5971%" y="149" width="0.0524%" height="15" fill="rgb(237,224,16)"/><text x="85.8471%" y="159.50"></text></g><g><title>enqueue_task_fair (19 samples, 0.33%)</title><rect x="85.3352%" y="197" width="0.3317%" height="15" fill="rgb(226,132,13)"/><text x="85.5852%" y="207.50"></text></g><g><title>enqueue_entity (16 samples, 0.28%)</title><rect x="85.3876%" y="181" width="0.2793%" height="15" fill="rgb(214,140,3)"/><text x="85.6376%" y="191.50"></text></g><g><title>update_load_avg (6 samples, 0.10%)</title><rect x="85.5622%" y="165" width="0.1047%" height="15" fill="rgb(221,177,4)"/><text x="85.8122%" y="175.50"></text></g><g><title>__update_load_avg_se (1 samples, 0.02%)</title><rect x="85.6494%" y="149" width="0.0175%" height="15" fill="rgb(238,139,3)"/><text x="85.8994%" y="159.50"></text></g><g><title>psi_group_change (1 samples, 0.02%)</title><rect x="85.6669%" y="197" width="0.0175%" height="15" fill="rgb(216,17,39)"/><text x="85.9169%" y="207.50"></text></g><g><title>psi_flags_change (1 samples, 0.02%)</title><rect x="85.7193%" y="181" width="0.0175%" height="15" fill="rgb(238,120,9)"/><text x="85.9693%" y="191.50"></text></g><g><title>record_times (1 samples, 0.02%)</title><rect x="85.9462%" y="165" width="0.0175%" height="15" fill="rgb(244,92,53)"/><text x="86.1962%" y="175.50"></text></g><g><title>sched_clock_cpu (1 samples, 0.02%)</title><rect x="85.9462%" y="149" width="0.0175%" height="15" fill="rgb(224,148,33)"/><text x="86.1962%" y="159.50"></text></g><g><title>psi_group_change (14 samples, 0.24%)</title><rect x="85.7367%" y="181" width="0.2444%" height="15" fill="rgb(243,6,36)"/><text x="85.9867%" y="191.50"></text></g><g><title>sched_clock_cpu (1 samples, 0.02%)</title><rect x="85.9637%" y="165" width="0.0175%" height="15" fill="rgb(230,102,11)"/><text x="86.2137%" y="175.50"></text></g><g><title>psi_task_change (19 samples, 0.33%)</title><rect x="85.6844%" y="197" width="0.3317%" height="15" fill="rgb(234,148,36)"/><text x="85.9344%" y="207.50"></text></g><g><title>record_times (2 samples, 0.03%)</title><rect x="85.9811%" y="181" width="0.0349%" height="15" fill="rgb(251,153,25)"/><text x="86.2311%" y="191.50"></text></g><g><title>ttwu_do_activate (52 samples, 0.91%)</title><rect x="85.3003%" y="213" width="0.9078%" height="15" fill="rgb(215,129,8)"/><text x="85.5503%" y="223.50"></text></g><g><title>ttwu_do_wakeup (11 samples, 0.19%)</title><rect x="86.0161%" y="197" width="0.1920%" height="15" fill="rgb(224,128,35)"/><text x="86.2661%" y="207.50"></text></g><g><title>check_preempt_curr (10 samples, 0.17%)</title><rect x="86.0335%" y="181" width="0.1746%" height="15" fill="rgb(237,56,52)"/><text x="86.2835%" y="191.50"></text></g><g><title>resched_curr (9 samples, 0.16%)</title><rect x="86.0510%" y="165" width="0.1571%" height="15" fill="rgb(234,213,19)"/><text x="86.3010%" y="175.50"></text></g><g><title>__x2apic_send_IPI_dest (1 samples, 0.02%)</title><rect x="86.2256%" y="149" width="0.0175%" height="15" fill="rgb(252,82,23)"/><text x="86.4756%" y="159.50"></text></g><g><title>__smp_call_single_queue (3 samples, 0.05%)</title><rect x="86.2081%" y="197" width="0.0524%" height="15" fill="rgb(254,201,21)"/><text x="86.4581%" y="207.50"></text></g><g><title>send_call_function_single_ipi (3 samples, 0.05%)</title><rect x="86.2081%" y="181" width="0.0524%" height="15" fill="rgb(250,186,11)"/><text x="86.4581%" y="191.50"></text></g><g><title>native_send_call_func_single_ipi (2 samples, 0.03%)</title><rect x="86.2256%" y="165" width="0.0349%" height="15" fill="rgb(211,174,5)"/><text x="86.4756%" y="175.50"></text></g><g><title>x2apic_send_IPI (1 samples, 0.02%)</title><rect x="86.2430%" y="149" width="0.0175%" height="15" fill="rgb(214,121,10)"/><text x="86.4930%" y="159.50"></text></g><g><title>native_write_msr (1 samples, 0.02%)</title><rect x="86.2430%" y="133" width="0.0175%" height="15" fill="rgb(241,66,2)"/><text x="86.4930%" y="143.50"></text></g><g><title>ttwu_queue_wakelist (4 samples, 0.07%)</title><rect x="86.2081%" y="213" width="0.0698%" height="15" fill="rgb(220,167,19)"/><text x="86.4581%" y="223.50"></text></g><g><title>llist_add_batch (1 samples, 0.02%)</title><rect x="86.2605%" y="197" width="0.0175%" height="15" fill="rgb(231,54,50)"/><text x="86.5105%" y="207.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (101 samples, 1.76%)</title><rect x="84.5845%" y="325" width="1.7633%" height="15" fill="rgb(239,217,53)"/><text x="84.8345%" y="335.50"></text></g><g><title>do_syscall_64 (99 samples, 1.73%)</title><rect x="84.6194%" y="309" width="1.7284%" height="15" fill="rgb(248,8,0)"/><text x="84.8694%" y="319.50"></text></g><g><title>__x64_sys_futex (98 samples, 1.71%)</title><rect x="84.6369%" y="293" width="1.7109%" height="15" fill="rgb(229,118,37)"/><text x="84.8869%" y="303.50"></text></g><g><title>do_futex (98 samples, 1.71%)</title><rect x="84.6369%" y="277" width="1.7109%" height="15" fill="rgb(253,223,43)"/><text x="84.8869%" y="287.50"></text></g><g><title>futex_wake (89 samples, 1.55%)</title><rect x="84.7940%" y="261" width="1.5538%" height="15" fill="rgb(211,77,36)"/><text x="85.0440%" y="271.50"></text></g><g><title>wake_up_q (73 samples, 1.27%)</title><rect x="85.0733%" y="245" width="1.2744%" height="15" fill="rgb(219,3,53)"/><text x="85.3233%" y="255.50"></text></g><g><title>try_to_wake_up (70 samples, 1.22%)</title><rect x="85.1257%" y="229" width="1.2221%" height="15" fill="rgb(244,45,42)"/><text x="85.3757%" y="239.50"></text></g><g><title>update_rq_clock (4 samples, 0.07%)</title><rect x="86.2779%" y="213" width="0.0698%" height="15" fill="rgb(225,95,27)"/><text x="86.5279%" y="223.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (111 samples, 1.94%)</title><rect x="84.4448%" y="357" width="1.9378%" height="15" fill="rgb(207,74,8)"/><text x="84.6948%" y="367.50">&lt;..</text></g><g><title>syscall (110 samples, 1.92%)</title><rect x="84.4623%" y="341" width="1.9204%" height="15" fill="rgb(243,63,36)"/><text x="84.7123%" y="351.50">s..</text></g><g><title>syscall_return_via_sysret (2 samples, 0.03%)</title><rect x="86.3478%" y="325" width="0.0349%" height="15" fill="rgb(211,180,12)"/><text x="86.5978%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.03%)</title><rect x="86.3827%" y="357" width="0.0349%" height="15" fill="rgb(254,166,49)"/><text x="86.6327%" y="367.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow::{{closure}} (2 samples, 0.03%)</title><rect x="86.3827%" y="341" width="0.0349%" height="15" fill="rgb(205,19,0)"/><text x="86.6327%" y="351.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::mark_parked_if_locked (1 samples, 0.02%)</title><rect x="86.4001%" y="325" width="0.0175%" height="15" fill="rgb(224,172,32)"/><text x="86.6501%" y="335.50"></text></g><g><title>parking_lot_core::parking_lot::hash (1 samples, 0.02%)</title><rect x="86.4176%" y="341" width="0.0175%" height="15" fill="rgb(254,136,30)"/><text x="86.6676%" y="351.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (2 samples, 0.03%)</title><rect x="86.4176%" y="357" width="0.0349%" height="15" fill="rgb(246,19,35)"/><text x="86.6676%" y="367.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (1 samples, 0.02%)</title><rect x="86.4351%" y="341" width="0.0175%" height="15" fill="rgb(219,24,36)"/><text x="86.6851%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (1 samples, 0.02%)</title><rect x="86.4351%" y="325" width="0.0175%" height="15" fill="rgb(251,55,1)"/><text x="86.6851%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (1 samples, 0.02%)</title><rect x="86.4351%" y="309" width="0.0175%" height="15" fill="rgb(218,117,39)"/><text x="86.6851%" y="319.50"></text></g><g><title>core::task::wake::Waker::wake (125 samples, 2.18%)</title><rect x="84.3226%" y="469" width="2.1823%" height="15" fill="rgb(248,169,11)"/><text x="84.5726%" y="479.50">c..</text></g><g><title>tokio::park::thread::wake (125 samples, 2.18%)</title><rect x="84.3226%" y="453" width="2.1823%" height="15" fill="rgb(244,40,44)"/><text x="84.5726%" y="463.50">t..</text></g><g><title>tokio::park::thread::Inner::unpark (118 samples, 2.06%)</title><rect x="84.4448%" y="437" width="2.0601%" height="15" fill="rgb(234,62,37)"/><text x="84.6948%" y="447.50">t..</text></g><g><title>tokio::loom::std::parking_lot::Condvar::notify_one (118 samples, 2.06%)</title><rect x="84.4448%" y="421" width="2.0601%" height="15" fill="rgb(207,117,42)"/><text x="84.6948%" y="431.50">t..</text></g><g><title>parking_lot::condvar::Condvar::notify_one (118 samples, 2.06%)</title><rect x="84.4448%" y="405" width="2.0601%" height="15" fill="rgb(213,43,2)"/><text x="84.6948%" y="415.50">p..</text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (118 samples, 2.06%)</title><rect x="84.4448%" y="389" width="2.0601%" height="15" fill="rgb(244,202,51)"/><text x="84.6948%" y="399.50">p..</text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (118 samples, 2.06%)</title><rect x="84.4448%" y="373" width="2.0601%" height="15" fill="rgb(253,174,46)"/><text x="84.6948%" y="383.50">p..</text></g><g><title>parking_lot_core::parking_lot::unlock_bucket_pair (3 samples, 0.05%)</title><rect x="86.4525%" y="357" width="0.0524%" height="15" fill="rgb(251,23,1)"/><text x="86.7025%" y="367.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::unlock (3 samples, 0.05%)</title><rect x="86.4525%" y="341" width="0.0524%" height="15" fill="rgb(253,26,1)"/><text x="86.7025%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.05%)</title><rect x="86.4525%" y="325" width="0.0524%" height="15" fill="rgb(216,89,31)"/><text x="86.7025%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.05%)</title><rect x="86.4525%" y="309" width="0.0524%" height="15" fill="rgb(209,109,5)"/><text x="86.7025%" y="319.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (11 samples, 0.19%)</title><rect x="86.5049%" y="469" width="0.1920%" height="15" fill="rgb(229,63,13)"/><text x="86.7549%" y="479.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (11 samples, 0.19%)</title><rect x="86.5049%" y="453" width="0.1920%" height="15" fill="rgb(238,137,54)"/><text x="86.7549%" y="463.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (11 samples, 0.19%)</title><rect x="86.5049%" y="437" width="0.1920%" height="15" fill="rgb(228,1,9)"/><text x="86.7549%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (11 samples, 0.19%)</title><rect x="86.5049%" y="421" width="0.1920%" height="15" fill="rgb(249,120,48)"/><text x="86.7549%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (11 samples, 0.19%)</title><rect x="86.5049%" y="405" width="0.1920%" height="15" fill="rgb(209,72,36)"/><text x="86.7549%" y="415.50"></text></g><g><title>std::panic::catch_unwind (847 samples, 14.79%)</title><rect x="71.9972%" y="645" width="14.7870%" height="15" fill="rgb(247,98,49)"/><text x="72.2472%" y="655.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (847 samples, 14.79%)</title><rect x="71.9972%" y="629" width="14.7870%" height="15" fill="rgb(233,75,36)"/><text x="72.2472%" y="639.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (847 samples, 14.79%)</title><rect x="71.9972%" y="613" width="14.7870%" height="15" fill="rgb(225,14,24)"/><text x="72.2472%" y="623.50">std::panicking::try::do..</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (847 samples, 14.79%)</title><rect x="71.9972%" y="597" width="14.7870%" height="15" fill="rgb(237,193,20)"/><text x="72.2472%" y="607.50">&lt;std::panic::AssertUnwi..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (847 samples, 14.79%)</title><rect x="71.9972%" y="581" width="14.7870%" height="15" fill="rgb(239,122,19)"/><text x="72.2472%" y="591.50">tokio::runtime::task::h..</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (847 samples, 14.79%)</title><rect x="71.9972%" y="565" width="14.7870%" height="15" fill="rgb(231,220,10)"/><text x="72.2472%" y="575.50">tokio::runtime::task::c..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (847 samples, 14.79%)</title><rect x="71.9972%" y="549" width="14.7870%" height="15" fill="rgb(220,66,15)"/><text x="72.2472%" y="559.50">tokio::loom::std::unsaf..</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (847 samples, 14.79%)</title><rect x="71.9972%" y="533" width="14.7870%" height="15" fill="rgb(215,171,52)"/><text x="72.2472%" y="543.50">tokio::runtime::task::c..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (846 samples, 14.77%)</title><rect x="72.0147%" y="517" width="14.7696%" height="15" fill="rgb(241,169,50)"/><text x="72.2647%" y="527.50">&lt;core::future::from_gen..</text></g><g><title>rho_runtime::storage::coordinator::Coordinator::handle_produce::{{closure}} (219 samples, 3.82%)</title><rect x="82.9609%" y="501" width="3.8233%" height="15" fill="rgb(236,189,0)"/><text x="83.2109%" y="511.50">rho_..</text></g><g><title>tokio::sync::notify::Notify::notify_one (149 samples, 2.60%)</title><rect x="84.1830%" y="485" width="2.6013%" height="15" fill="rgb(217,147,20)"/><text x="84.4330%" y="495.50">to..</text></g><g><title>tokio::sync::notify::notify_locked (5 samples, 0.09%)</title><rect x="86.6969%" y="469" width="0.0873%" height="15" fill="rgb(206,188,39)"/><text x="86.9469%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (5 samples, 0.09%)</title><rect x="86.6969%" y="453" width="0.0873%" height="15" fill="rgb(227,118,25)"/><text x="86.9469%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_store (5 samples, 0.09%)</title><rect x="86.6969%" y="437" width="0.0873%" height="15" fill="rgb(248,171,40)"/><text x="86.9469%" y="447.50"></text></g><g><title>tokio::coop::budget (969 samples, 16.92%)</title><rect x="69.9546%" y="805" width="16.9169%" height="15" fill="rgb(251,90,54)"/><text x="70.2046%" y="815.50">tokio::coop::budget</text></g><g><title>tokio::coop::with_budget (969 samples, 16.92%)</title><rect x="69.9546%" y="789" width="16.9169%" height="15" fill="rgb(234,11,46)"/><text x="70.2046%" y="799.50">tokio::coop::with_budget</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (969 samples, 16.92%)</title><rect x="69.9546%" y="773" width="16.9169%" height="15" fill="rgb(229,134,13)"/><text x="70.2046%" y="783.50">std::thread::local::LocalK..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (969 samples, 16.92%)</title><rect x="69.9546%" y="757" width="16.9169%" height="15" fill="rgb(223,129,3)"/><text x="70.2046%" y="767.50">std::thread::local::LocalK..</text></g><g><title>tokio::coop::with_budget::{{closure}} (968 samples, 16.90%)</title><rect x="69.9721%" y="741" width="16.8994%" height="15" fill="rgb(221,124,13)"/><text x="70.2221%" y="751.50">tokio::coop::with_budget::..</text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (965 samples, 16.85%)</title><rect x="70.0244%" y="725" width="16.8471%" height="15" fill="rgb(234,3,18)"/><text x="70.2744%" y="735.50">tokio::runtime::thread_poo..</text></g><g><title>tokio::runtime::task::raw::poll (953 samples, 16.64%)</title><rect x="70.2339%" y="709" width="16.6376%" height="15" fill="rgb(249,199,20)"/><text x="70.4839%" y="719.50">tokio::runtime::task::raw:..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (953 samples, 16.64%)</title><rect x="70.2339%" y="693" width="16.6376%" height="15" fill="rgb(224,134,6)"/><text x="70.4839%" y="703.50">tokio::runtime::task::harn..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (895 samples, 15.62%)</title><rect x="71.2465%" y="677" width="15.6250%" height="15" fill="rgb(254,83,26)"/><text x="71.4965%" y="687.50">tokio::runtime::task::ha..</text></g><g><title>tokio::runtime::task::harness::poll_future (856 samples, 14.94%)</title><rect x="71.9274%" y="661" width="14.9441%" height="15" fill="rgb(217,88,9)"/><text x="72.1774%" y="671.50">tokio::runtime::task::h..</text></g><g><title>tokio::runtime::task::state::State::transition_to_idle (5 samples, 0.09%)</title><rect x="86.7842%" y="645" width="0.0873%" height="15" fill="rgb(225,73,2)"/><text x="87.0342%" y="655.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update (5 samples, 0.09%)</title><rect x="86.7842%" y="629" width="0.0873%" height="15" fill="rgb(226,44,39)"/><text x="87.0342%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (5 samples, 0.09%)</title><rect x="86.7842%" y="613" width="0.0873%" height="15" fill="rgb(228,53,17)"/><text x="87.0342%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (5 samples, 0.09%)</title><rect x="86.7842%" y="597" width="0.0873%" height="15" fill="rgb(212,27,27)"/><text x="87.0342%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (7 samples, 0.12%)</title><rect x="86.9413%" y="741" width="0.1222%" height="15" fill="rgb(241,50,6)"/><text x="87.1913%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_swap (7 samples, 0.12%)</title><rect x="86.9413%" y="725" width="0.1222%" height="15" fill="rgb(225,28,51)"/><text x="87.1913%" y="735.50"></text></g><g><title>core::mem::drop (1 samples, 0.02%)</title><rect x="87.0635%" y="725" width="0.0175%" height="15" fill="rgb(215,33,16)"/><text x="87.3135%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,()&gt;&gt; (1 samples, 0.02%)</title><rect x="87.0635%" y="709" width="0.0175%" height="15" fill="rgb(243,40,39)"/><text x="87.3135%" y="719.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="87.0635%" y="693" width="0.0175%" height="15" fill="rgb(225,11,42)"/><text x="87.3135%" y="703.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (1 samples, 0.02%)</title><rect x="87.0635%" y="677" width="0.0175%" height="15" fill="rgb(241,220,38)"/><text x="87.3135%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (1 samples, 0.02%)</title><rect x="87.0635%" y="661" width="0.0175%" height="15" fill="rgb(244,52,35)"/><text x="87.3135%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.02%)</title><rect x="87.0635%" y="645" width="0.0175%" height="15" fill="rgb(246,42,46)"/><text x="87.3135%" y="655.50"></text></g><g><title>&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (12 samples, 0.21%)</title><rect x="86.9064%" y="773" width="0.2095%" height="15" fill="rgb(205,184,13)"/><text x="87.1564%" y="783.50"></text></g><g><title>tokio::runtime::park::Inner::unpark (12 samples, 0.21%)</title><rect x="86.9064%" y="757" width="0.2095%" height="15" fill="rgb(209,48,36)"/><text x="87.1564%" y="767.50"></text></g><g><title>tokio::runtime::park::Inner::unpark_condvar (3 samples, 0.05%)</title><rect x="87.0635%" y="741" width="0.0524%" height="15" fill="rgb(244,34,51)"/><text x="87.3135%" y="751.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (2 samples, 0.03%)</title><rect x="87.0810%" y="725" width="0.0349%" height="15" fill="rgb(221,107,33)"/><text x="87.3310%" y="735.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (2 samples, 0.03%)</title><rect x="87.0810%" y="709" width="0.0349%" height="15" fill="rgb(224,203,12)"/><text x="87.3310%" y="719.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (2 samples, 0.03%)</title><rect x="87.0810%" y="693" width="0.0349%" height="15" fill="rgb(230,215,18)"/><text x="87.3310%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (2 samples, 0.03%)</title><rect x="87.0810%" y="677" width="0.0349%" height="15" fill="rgb(206,185,35)"/><text x="87.3310%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (2 samples, 0.03%)</title><rect x="87.0810%" y="661" width="0.0349%" height="15" fill="rgb(228,140,34)"/><text x="87.3310%" y="671.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="87.3603%" y="709" width="0.0175%" height="15" fill="rgb(208,93,13)"/><text x="87.6103%" y="719.50"></text></g><g><title>do_syscall_64 (2 samples, 0.03%)</title><rect x="87.3778%" y="709" width="0.0349%" height="15" fill="rgb(221,193,39)"/><text x="87.6278%" y="719.50"></text></g><g><title>entry_SYSCALL_64 (7 samples, 0.12%)</title><rect x="87.4127%" y="709" width="0.1222%" height="15" fill="rgb(241,132,34)"/><text x="87.6627%" y="719.50"></text></g><g><title>__prepare_exit_to_usermode (1 samples, 0.02%)</title><rect x="87.7619%" y="677" width="0.0175%" height="15" fill="rgb(221,141,10)"/><text x="88.0119%" y="687.50"></text></g><g><title>__syscall_return_slowpath (3 samples, 0.05%)</title><rect x="87.7793%" y="677" width="0.0524%" height="15" fill="rgb(226,90,31)"/><text x="88.0293%" y="687.50"></text></g><g><title>__prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="87.7968%" y="661" width="0.0349%" height="15" fill="rgb(243,75,5)"/><text x="88.0468%" y="671.50"></text></g><g><title>fpregs_assert_state_consistent (2 samples, 0.03%)</title><rect x="87.7968%" y="645" width="0.0349%" height="15" fill="rgb(227,156,21)"/><text x="88.0468%" y="655.50"></text></g><g><title>_raw_spin_lock (10 samples, 0.17%)</title><rect x="87.9714%" y="645" width="0.1746%" height="15" fill="rgb(250,195,8)"/><text x="88.2214%" y="655.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="88.7744%" y="629" width="0.0175%" height="15" fill="rgb(220,134,5)"/><text x="89.0244%" y="639.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="88.7744%" y="613" width="0.0175%" height="15" fill="rgb(246,106,34)"/><text x="89.0244%" y="623.50"></text></g><g><title>asm_call_sysvec_on_stack (1 samples, 0.02%)</title><rect x="88.7744%" y="597" width="0.0175%" height="15" fill="rgb(205,1,4)"/><text x="89.0244%" y="607.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="88.7744%" y="581" width="0.0175%" height="15" fill="rgb(224,151,29)"/><text x="89.0244%" y="591.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.02%)</title><rect x="88.7744%" y="565" width="0.0175%" height="15" fill="rgb(251,196,0)"/><text x="89.0244%" y="575.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.02%)</title><rect x="88.7744%" y="549" width="0.0175%" height="15" fill="rgb(212,127,0)"/><text x="89.0244%" y="559.50"></text></g><g><title>tick_sched_timer (1 samples, 0.02%)</title><rect x="88.7744%" y="533" width="0.0175%" height="15" fill="rgb(236,71,53)"/><text x="89.0244%" y="543.50"></text></g><g><title>tick_sched_handle.isra.0 (1 samples, 0.02%)</title><rect x="88.7744%" y="517" width="0.0175%" height="15" fill="rgb(227,99,0)"/><text x="89.0244%" y="527.50"></text></g><g><title>update_process_times (1 samples, 0.02%)</title><rect x="88.7744%" y="501" width="0.0175%" height="15" fill="rgb(239,89,21)"/><text x="89.0244%" y="511.50"></text></g><g><title>scheduler_tick (1 samples, 0.02%)</title><rect x="88.7744%" y="485" width="0.0175%" height="15" fill="rgb(243,122,19)"/><text x="89.0244%" y="495.50"></text></g><g><title>task_tick_fair (1 samples, 0.02%)</title><rect x="88.7744%" y="469" width="0.0175%" height="15" fill="rgb(229,192,45)"/><text x="89.0244%" y="479.50"></text></g><g><title>update_load_avg (1 samples, 0.02%)</title><rect x="88.7744%" y="453" width="0.0175%" height="15" fill="rgb(235,165,35)"/><text x="89.0244%" y="463.50"></text></g><g><title>get_futex_key (1 samples, 0.02%)</title><rect x="88.7919%" y="629" width="0.0175%" height="15" fill="rgb(253,202,0)"/><text x="89.0419%" y="639.50"></text></g><g><title>__unqueue_futex (8 samples, 0.14%)</title><rect x="89.1411%" y="613" width="0.1397%" height="15" fill="rgb(235,51,20)"/><text x="89.3911%" y="623.50"></text></g><g><title>mark_wake_futex (29 samples, 0.51%)</title><rect x="88.8094%" y="629" width="0.5063%" height="15" fill="rgb(218,95,46)"/><text x="89.0594%" y="639.50"></text></g><g><title>plist_del (2 samples, 0.03%)</title><rect x="89.2807%" y="613" width="0.0349%" height="15" fill="rgb(212,81,10)"/><text x="89.5307%" y="623.50"></text></g><g><title>wake_q_add_safe (4 samples, 0.07%)</title><rect x="89.3156%" y="629" width="0.0698%" height="15" fill="rgb(240,59,0)"/><text x="89.5656%" y="639.50"></text></g><g><title>__lock_text_start (1 samples, 0.02%)</title><rect x="89.5601%" y="613" width="0.0175%" height="15" fill="rgb(212,191,42)"/><text x="89.8101%" y="623.50"></text></g><g><title>_raw_spin_lock (5 samples, 0.09%)</title><rect x="89.5775%" y="613" width="0.0873%" height="15" fill="rgb(233,140,3)"/><text x="89.8275%" y="623.50"></text></g><g><title>__lock_text_start (1 samples, 0.02%)</title><rect x="90.0140%" y="597" width="0.0175%" height="15" fill="rgb(215,69,23)"/><text x="90.2640%" y="607.50"></text></g><g><title>_raw_spin_lock_irqsave (3 samples, 0.05%)</title><rect x="90.0314%" y="597" width="0.0524%" height="15" fill="rgb(240,202,20)"/><text x="90.2814%" y="607.50"></text></g><g><title>available_idle_cpu (1 samples, 0.02%)</title><rect x="90.0838%" y="597" width="0.0175%" height="15" fill="rgb(209,146,50)"/><text x="90.3338%" y="607.50"></text></g><g><title>enqueue_task_fair (1 samples, 0.02%)</title><rect x="90.1013%" y="597" width="0.0175%" height="15" fill="rgb(253,102,54)"/><text x="90.3513%" y="607.50"></text></g><g><title>available_idle_cpu (8 samples, 0.14%)</title><rect x="90.3631%" y="581" width="0.1397%" height="15" fill="rgb(250,173,47)"/><text x="90.6131%" y="591.50"></text></g><g><title>select_task_rq_fair (24 samples, 0.42%)</title><rect x="90.1187%" y="597" width="0.4190%" height="15" fill="rgb(232,142,7)"/><text x="90.3687%" y="607.50"></text></g><g><title>select_idle_sibling (2 samples, 0.03%)</title><rect x="90.5028%" y="581" width="0.0349%" height="15" fill="rgb(230,157,47)"/><text x="90.7528%" y="591.50"></text></g><g><title>set_task_cpu (1 samples, 0.02%)</title><rect x="90.5377%" y="597" width="0.0175%" height="15" fill="rgb(214,177,35)"/><text x="90.7877%" y="607.50"></text></g><g><title>check_preempt_curr (2 samples, 0.03%)</title><rect x="90.6774%" y="581" width="0.0349%" height="15" fill="rgb(234,119,46)"/><text x="90.9274%" y="591.50"></text></g><g><title>__enqueue_entity (2 samples, 0.03%)</title><rect x="90.9742%" y="565" width="0.0349%" height="15" fill="rgb(241,180,50)"/><text x="91.2242%" y="575.50"></text></g><g><title>__enqueue_entity (2 samples, 0.03%)</title><rect x="91.4630%" y="549" width="0.0349%" height="15" fill="rgb(221,54,25)"/><text x="91.7130%" y="559.50"></text></g><g><title>__update_load_avg_cfs_rq (1 samples, 0.02%)</title><rect x="91.4979%" y="549" width="0.0175%" height="15" fill="rgb(209,157,44)"/><text x="91.7479%" y="559.50"></text></g><g><title>__update_load_avg_se (1 samples, 0.02%)</title><rect x="91.5154%" y="549" width="0.0175%" height="15" fill="rgb(246,115,41)"/><text x="91.7654%" y="559.50"></text></g><g><title>account_entity_enqueue (1 samples, 0.02%)</title><rect x="91.5328%" y="549" width="0.0175%" height="15" fill="rgb(229,86,1)"/><text x="91.7828%" y="559.50"></text></g><g><title>place_entity (5 samples, 0.09%)</title><rect x="91.5503%" y="549" width="0.0873%" height="15" fill="rgb(240,108,53)"/><text x="91.8003%" y="559.50"></text></g><g><title>rb_insert_color (1 samples, 0.02%)</title><rect x="91.6376%" y="549" width="0.0175%" height="15" fill="rgb(227,134,2)"/><text x="91.8876%" y="559.50"></text></g><g><title>reweight_entity (1 samples, 0.02%)</title><rect x="91.6550%" y="549" width="0.0175%" height="15" fill="rgb(213,129,25)"/><text x="91.9050%" y="559.50"></text></g><g><title>update_cfs_group (19 samples, 0.33%)</title><rect x="91.6725%" y="549" width="0.3317%" height="15" fill="rgb(226,35,21)"/><text x="91.9225%" y="559.50"></text></g><g><title>reweight_entity (18 samples, 0.31%)</title><rect x="91.6899%" y="533" width="0.3142%" height="15" fill="rgb(208,129,26)"/><text x="91.9399%" y="543.50"></text></g><g><title>update_curr (1 samples, 0.02%)</title><rect x="92.0042%" y="549" width="0.0175%" height="15" fill="rgb(224,83,6)"/><text x="92.2542%" y="559.50"></text></g><g><title>__update_load_avg_cfs_rq (7 samples, 0.12%)</title><rect x="92.1089%" y="533" width="0.1222%" height="15" fill="rgb(227,52,39)"/><text x="92.3589%" y="543.50"></text></g><g><title>enqueue_entity (73 samples, 1.27%)</title><rect x="91.0091%" y="565" width="1.2744%" height="15" fill="rgb(241,30,17)"/><text x="91.2591%" y="575.50"></text></g><g><title>update_load_avg (15 samples, 0.26%)</title><rect x="92.0216%" y="549" width="0.2619%" height="15" fill="rgb(246,186,42)"/><text x="92.2716%" y="559.50"></text></g><g><title>__update_load_avg_se (3 samples, 0.05%)</title><rect x="92.2311%" y="533" width="0.0524%" height="15" fill="rgb(221,169,15)"/><text x="92.4811%" y="543.50"></text></g><g><title>place_entity (2 samples, 0.03%)</title><rect x="92.2835%" y="565" width="0.0349%" height="15" fill="rgb(235,108,21)"/><text x="92.5335%" y="575.50"></text></g><g><title>update_cfs_group (1 samples, 0.02%)</title><rect x="92.3184%" y="565" width="0.0175%" height="15" fill="rgb(219,148,30)"/><text x="92.5684%" y="575.50"></text></g><g><title>enqueue_task_fair (94 samples, 1.64%)</title><rect x="90.7123%" y="581" width="1.6411%" height="15" fill="rgb(220,109,5)"/><text x="90.9623%" y="591.50"></text></g><g><title>update_load_avg (1 samples, 0.02%)</title><rect x="92.3359%" y="565" width="0.0175%" height="15" fill="rgb(213,203,48)"/><text x="92.5859%" y="575.50"></text></g><g><title>psi_flags_change (1 samples, 0.02%)</title><rect x="92.3534%" y="581" width="0.0175%" height="15" fill="rgb(244,71,33)"/><text x="92.6034%" y="591.50"></text></g><g><title>psi_group_change (2 samples, 0.03%)</title><rect x="92.3708%" y="581" width="0.0349%" height="15" fill="rgb(209,23,2)"/><text x="92.6208%" y="591.50"></text></g><g><title>psi_flags_change (2 samples, 0.03%)</title><rect x="92.6676%" y="565" width="0.0349%" height="15" fill="rgb(219,97,7)"/><text x="92.9176%" y="575.50"></text></g><g><title>record_times (10 samples, 0.17%)</title><rect x="93.5580%" y="549" width="0.1746%" height="15" fill="rgb(216,161,23)"/><text x="93.8080%" y="559.50"></text></g><g><title>sched_clock_cpu (8 samples, 0.14%)</title><rect x="93.5929%" y="533" width="0.1397%" height="15" fill="rgb(207,45,42)"/><text x="93.8429%" y="543.50"></text></g><g><title>native_sched_clock (7 samples, 0.12%)</title><rect x="93.6103%" y="517" width="0.1222%" height="15" fill="rgb(241,61,4)"/><text x="93.8603%" y="527.50"></text></g><g><title>psi_group_change (60 samples, 1.05%)</title><rect x="92.7025%" y="565" width="1.0475%" height="15" fill="rgb(236,170,1)"/><text x="92.9525%" y="575.50"></text></g><g><title>sched_clock_cpu (1 samples, 0.02%)</title><rect x="93.7325%" y="549" width="0.0175%" height="15" fill="rgb(239,72,5)"/><text x="93.9825%" y="559.50"></text></g><g><title>psi_task_change (78 samples, 1.36%)</title><rect x="92.4057%" y="581" width="1.3617%" height="15" fill="rgb(214,13,50)"/><text x="92.6557%" y="591.50"></text></g><g><title>record_times (1 samples, 0.02%)</title><rect x="93.7500%" y="565" width="0.0175%" height="15" fill="rgb(224,88,9)"/><text x="94.0000%" y="575.50"></text></g><g><title>ttwu_do_activate (233 samples, 4.07%)</title><rect x="90.5552%" y="597" width="4.0677%" height="15" fill="rgb(238,192,34)"/><text x="90.8052%" y="607.50">ttwu..</text></g><g><title>ttwu_do_wakeup (49 samples, 0.86%)</title><rect x="93.7675%" y="581" width="0.8554%" height="15" fill="rgb(217,203,50)"/><text x="94.0175%" y="591.50"></text></g><g><title>check_preempt_curr (47 samples, 0.82%)</title><rect x="93.8024%" y="565" width="0.8205%" height="15" fill="rgb(241,123,32)"/><text x="94.0524%" y="575.50"></text></g><g><title>resched_curr (41 samples, 0.72%)</title><rect x="93.9071%" y="549" width="0.7158%" height="15" fill="rgb(248,151,39)"/><text x="94.1571%" y="559.50"></text></g><g><title>ttwu_queue_wakelist (2 samples, 0.03%)</title><rect x="94.6229%" y="597" width="0.0349%" height="15" fill="rgb(208,89,6)"/><text x="94.8729%" y="607.50"></text></g><g><title>__smp_call_single_queue (1 samples, 0.02%)</title><rect x="94.6404%" y="581" width="0.0175%" height="15" fill="rgb(254,43,26)"/><text x="94.8904%" y="591.50"></text></g><g><title>send_call_function_single_ipi (1 samples, 0.02%)</title><rect x="94.6404%" y="565" width="0.0175%" height="15" fill="rgb(216,158,13)"/><text x="94.8904%" y="575.50"></text></g><g><title>native_send_call_func_single_ipi (1 samples, 0.02%)</title><rect x="94.6404%" y="549" width="0.0175%" height="15" fill="rgb(212,47,37)"/><text x="94.8904%" y="559.50"></text></g><g><title>x2apic_send_IPI (1 samples, 0.02%)</title><rect x="94.6404%" y="533" width="0.0175%" height="15" fill="rgb(254,16,10)"/><text x="94.8904%" y="543.50"></text></g><g><title>native_write_msr (1 samples, 0.02%)</title><rect x="94.6404%" y="517" width="0.0175%" height="15" fill="rgb(223,228,16)"/><text x="94.8904%" y="527.50"></text></g><g><title>update_cfs_rq_h_load (22 samples, 0.38%)</title><rect x="94.6578%" y="597" width="0.3841%" height="15" fill="rgb(249,108,50)"/><text x="94.9078%" y="607.50"></text></g><g><title>try_to_wake_up (329 samples, 5.74%)</title><rect x="89.6648%" y="613" width="5.7437%" height="15" fill="rgb(208,220,5)"/><text x="89.9148%" y="623.50">try_to_..</text></g><g><title>update_rq_clock (21 samples, 0.37%)</title><rect x="95.0419%" y="597" width="0.3666%" height="15" fill="rgb(217,89,48)"/><text x="95.2919%" y="607.50"></text></g><g><title>sched_clock_cpu (5 samples, 0.09%)</title><rect x="95.3212%" y="581" width="0.0873%" height="15" fill="rgb(212,113,41)"/><text x="95.5712%" y="591.50"></text></g><g><title>native_sched_clock (5 samples, 0.09%)</title><rect x="95.3212%" y="565" width="0.0873%" height="15" fill="rgb(231,127,5)"/><text x="95.5712%" y="575.50"></text></g><g><title>futex_wake (417 samples, 7.28%)</title><rect x="88.1459%" y="645" width="7.2800%" height="15" fill="rgb(217,141,17)"/><text x="88.3959%" y="655.50">futex_wake</text></g><g><title>wake_up_q (346 samples, 6.04%)</title><rect x="89.3855%" y="629" width="6.0405%" height="15" fill="rgb(245,125,54)"/><text x="89.6355%" y="639.50">wake_up_q</text></g><g><title>update_rq_clock (1 samples, 0.02%)</title><rect x="95.4085%" y="613" width="0.0175%" height="15" fill="rgb(248,125,3)"/><text x="95.6585%" y="623.50"></text></g><g><title>hash_futex (5 samples, 0.09%)</title><rect x="95.4260%" y="645" width="0.0873%" height="15" fill="rgb(236,119,51)"/><text x="95.6760%" y="655.50"></text></g><g><title>do_futex (440 samples, 7.68%)</title><rect x="87.8666%" y="661" width="7.6816%" height="15" fill="rgb(239,99,8)"/><text x="88.1166%" y="671.50">do_futex</text></g><g><title>wake_up_q (2 samples, 0.03%)</title><rect x="95.5133%" y="645" width="0.0349%" height="15" fill="rgb(224,228,4)"/><text x="95.7633%" y="655.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (460 samples, 8.03%)</title><rect x="87.5349%" y="709" width="8.0307%" height="15" fill="rgb(220,131,45)"/><text x="87.7849%" y="719.50">entry_SYSCA..</text></g><g><title>do_syscall_64 (454 samples, 7.93%)</title><rect x="87.6397%" y="693" width="7.9260%" height="15" fill="rgb(215,62,5)"/><text x="87.8897%" y="703.50">do_syscall_..</text></g><g><title>__x64_sys_futex (443 samples, 7.73%)</title><rect x="87.8317%" y="677" width="7.7339%" height="15" fill="rgb(253,12,24)"/><text x="88.0817%" y="687.50">__x64_sys_f..</text></g><g><title>futex_wake (1 samples, 0.02%)</title><rect x="95.5482%" y="661" width="0.0175%" height="15" fill="rgb(248,120,50)"/><text x="95.7982%" y="671.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (485 samples, 8.47%)</title><rect x="87.1334%" y="741" width="8.4672%" height="15" fill="rgb(245,194,10)"/><text x="87.3834%" y="751.50">&lt;parking_lot..</text></g><g><title>syscall (483 samples, 8.43%)</title><rect x="87.1683%" y="725" width="8.4323%" height="15" fill="rgb(241,149,38)"/><text x="87.4183%" y="735.50">syscall</text></g><g><title>syscall_return_via_sysret (2 samples, 0.03%)</title><rect x="95.5656%" y="709" width="0.0349%" height="15" fill="rgb(219,215,7)"/><text x="95.8156%" y="719.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.02%)</title><rect x="95.6006%" y="741" width="0.0175%" height="15" fill="rgb(208,120,31)"/><text x="95.8506%" y="751.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.02%)</title><rect x="95.6180%" y="741" width="0.0175%" height="15" fill="rgb(244,30,8)"/><text x="95.8680%" y="751.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow::{{closure}} (1 samples, 0.02%)</title><rect x="95.6180%" y="725" width="0.0175%" height="15" fill="rgb(238,35,44)"/><text x="95.8680%" y="735.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::mark_parked_if_locked (1 samples, 0.02%)</title><rect x="95.6180%" y="709" width="0.0175%" height="15" fill="rgb(243,218,37)"/><text x="95.8680%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (20 samples, 0.35%)</title><rect x="95.6355%" y="741" width="0.3492%" height="15" fill="rgb(218,169,10)"/><text x="95.8855%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_load (20 samples, 0.35%)</title><rect x="95.6355%" y="725" width="0.3492%" height="15" fill="rgb(221,144,10)"/><text x="95.8855%" y="735.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::gen_u32 (1 samples, 0.02%)</title><rect x="95.9846%" y="725" width="0.0175%" height="15" fill="rgb(226,41,38)"/><text x="96.2346%" y="735.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::should_timeout (9 samples, 0.16%)</title><rect x="95.9846%" y="741" width="0.1571%" height="15" fill="rgb(228,3,1)"/><text x="96.2346%" y="751.50"></text></g><g><title>std::time::Instant::now (8 samples, 0.14%)</title><rect x="96.0021%" y="725" width="0.1397%" height="15" fill="rgb(209,129,12)"/><text x="96.2521%" y="735.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (8 samples, 0.14%)</title><rect x="96.0021%" y="709" width="0.1397%" height="15" fill="rgb(213,136,33)"/><text x="96.2521%" y="719.50"></text></g><g><title>std::sys::unix::time::inner::now (8 samples, 0.14%)</title><rect x="96.0021%" y="693" width="0.1397%" height="15" fill="rgb(209,181,29)"/><text x="96.2521%" y="703.50"></text></g><g><title>__clock_gettime (8 samples, 0.14%)</title><rect x="96.0021%" y="677" width="0.1397%" height="15" fill="rgb(234,173,18)"/><text x="96.2521%" y="687.50"></text></g><g><title>__vdso_clock_gettime (8 samples, 0.14%)</title><rect x="96.0021%" y="661" width="0.1397%" height="15" fill="rgb(227,73,47)"/><text x="96.2521%" y="671.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (16 samples, 0.28%)</title><rect x="96.1418%" y="741" width="0.2793%" height="15" fill="rgb(234,9,34)"/><text x="96.3918%" y="751.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (15 samples, 0.26%)</title><rect x="96.1592%" y="725" width="0.2619%" height="15" fill="rgb(235,172,15)"/><text x="96.4092%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (13 samples, 0.23%)</title><rect x="96.1941%" y="709" width="0.2270%" height="15" fill="rgb(245,61,2)"/><text x="96.4441%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (13 samples, 0.23%)</title><rect x="96.1941%" y="693" width="0.2270%" height="15" fill="rgb(238,39,47)"/><text x="96.4441%" y="703.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (548 samples, 9.57%)</title><rect x="87.1159%" y="773" width="9.5670%" height="15" fill="rgb(234,37,24)"/><text x="87.3659%" y="783.50">parking_lot::c..</text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (548 samples, 9.57%)</title><rect x="87.1159%" y="757" width="9.5670%" height="15" fill="rgb(248,223,24)"/><text x="87.3659%" y="767.50">parking_lot_co..</text></g><g><title>parking_lot_core::parking_lot::unlock_bucket_pair (15 samples, 0.26%)</title><rect x="96.4211%" y="741" width="0.2619%" height="15" fill="rgb(223,12,15)"/><text x="96.6711%" y="751.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::unlock (15 samples, 0.26%)</title><rect x="96.4211%" y="725" width="0.2619%" height="15" fill="rgb(249,6,3)"/><text x="96.6711%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (15 samples, 0.26%)</title><rect x="96.4211%" y="709" width="0.2619%" height="15" fill="rgb(237,105,33)"/><text x="96.6711%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_sub (15 samples, 0.26%)</title><rect x="96.4211%" y="693" width="0.2619%" height="15" fill="rgb(252,208,35)"/><text x="96.6711%" y="703.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::transition_worker_from_searching (5 samples, 0.09%)</title><rect x="96.6830%" y="773" width="0.0873%" height="15" fill="rgb(215,181,35)"/><text x="96.9330%" y="783.50"></text></g><g><title>tokio::runtime::thread_pool::idle::State::dec_num_searching (5 samples, 0.09%)</title><rect x="96.6830%" y="757" width="0.0873%" height="15" fill="rgb(246,212,3)"/><text x="96.9330%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (5 samples, 0.09%)</title><rect x="96.6830%" y="741" width="0.0873%" height="15" fill="rgb(247,156,24)"/><text x="96.9330%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_sub (5 samples, 0.09%)</title><rect x="96.6830%" y="725" width="0.0873%" height="15" fill="rgb(248,9,31)"/><text x="96.9330%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.02%)</title><rect x="96.7877%" y="741" width="0.0175%" height="15" fill="rgb(234,26,45)"/><text x="97.0377%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,alloc::vec::Vec&lt;usize&gt;&gt;&gt; (16 samples, 0.28%)</title><rect x="96.8052%" y="741" width="0.2793%" height="15" fill="rgb(249,11,32)"/><text x="97.0552%" y="751.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.28%)</title><rect x="96.8052%" y="725" width="0.2793%" height="15" fill="rgb(249,162,33)"/><text x="97.0552%" y="735.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (16 samples, 0.28%)</title><rect x="96.8052%" y="709" width="0.2793%" height="15" fill="rgb(232,4,32)"/><text x="97.0552%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (16 samples, 0.28%)</title><rect x="96.8052%" y="693" width="0.2793%" height="15" fill="rgb(212,5,45)"/><text x="97.0552%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (16 samples, 0.28%)</title><rect x="96.8052%" y="677" width="0.2793%" height="15" fill="rgb(227,95,13)"/><text x="97.0552%" y="687.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::notify_should_wakeup (9 samples, 0.16%)</title><rect x="97.0845%" y="741" width="0.1571%" height="15" fill="rgb(223,205,10)"/><text x="97.3345%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (8 samples, 0.14%)</title><rect x="97.1020%" y="725" width="0.1397%" height="15" fill="rgb(222,178,8)"/><text x="97.3520%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_add (8 samples, 0.14%)</title><rect x="97.1020%" y="709" width="0.1397%" height="15" fill="rgb(216,13,22)"/><text x="97.3520%" y="719.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (1,575 samples, 27.50%)</title><rect x="69.8149%" y="821" width="27.4965%" height="15" fill="rgb(240,167,12)"/><text x="70.0649%" y="831.50">tokio::runtime::thread_pool::worker::Context..</text></g><g><title>tokio::runtime::thread_pool::worker::Core::transition_from_searching (598 samples, 10.44%)</title><rect x="86.8715%" y="805" width="10.4399%" height="15" fill="rgb(235,68,35)"/><text x="87.1215%" y="815.50">tokio::runtime:..</text></g><g><title>tokio::runtime::thread_pool::worker::Shared::transition_worker_from_searching (596 samples, 10.41%)</title><rect x="86.9064%" y="789" width="10.4050%" height="15" fill="rgb(253,40,27)"/><text x="87.1564%" y="799.50">tokio::runtime:..</text></g><g><title>tokio::runtime::thread_pool::worker::Shared::notify_parked (31 samples, 0.54%)</title><rect x="96.7703%" y="773" width="0.5412%" height="15" fill="rgb(214,19,28)"/><text x="97.0203%" y="783.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::worker_to_notify (30 samples, 0.52%)</title><rect x="96.7877%" y="757" width="0.5237%" height="15" fill="rgb(210,167,45)"/><text x="97.0377%" y="767.50"></text></g><g><title>tokio::runtime::thread_pool::idle::State::unpark_one (4 samples, 0.07%)</title><rect x="97.2416%" y="741" width="0.0698%" height="15" fill="rgb(232,97,40)"/><text x="97.4916%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (4 samples, 0.07%)</title><rect x="97.2416%" y="725" width="0.0698%" height="15" fill="rgb(250,35,23)"/><text x="97.4916%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_add (4 samples, 0.07%)</title><rect x="97.2416%" y="709" width="0.0698%" height="15" fill="rgb(248,47,53)"/><text x="97.4916%" y="719.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (8 samples, 0.14%)</title><rect x="97.6257%" y="757" width="0.1397%" height="15" fill="rgb(226,58,50)"/><text x="97.8757%" y="767.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (8 samples, 0.14%)</title><rect x="97.6257%" y="741" width="0.1397%" height="15" fill="rgb(217,105,26)"/><text x="97.8757%" y="751.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (8 samples, 0.14%)</title><rect x="97.6257%" y="725" width="0.1397%" height="15" fill="rgb(208,64,1)"/><text x="97.8757%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (8 samples, 0.14%)</title><rect x="97.6257%" y="709" width="0.1397%" height="15" fill="rgb(214,80,1)"/><text x="97.8757%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (8 samples, 0.14%)</title><rect x="97.6257%" y="693" width="0.1397%" height="15" fill="rgb(206,175,26)"/><text x="97.8757%" y="703.50"></text></g><g><title>tokio::runtime::queue::Inject&lt;T&gt;::pop (10 samples, 0.17%)</title><rect x="97.6082%" y="773" width="0.1746%" height="15" fill="rgb(235,156,37)"/><text x="97.8582%" y="783.50"></text></g><g><title>tokio::runtime::queue::Inject&lt;T&gt;::is_empty (1 samples, 0.02%)</title><rect x="97.7654%" y="757" width="0.0175%" height="15" fill="rgb(213,100,9)"/><text x="98.0154%" y="767.50"></text></g><g><title>tokio::runtime::queue::Inject&lt;T&gt;::len (1 samples, 0.02%)</title><rect x="97.7654%" y="741" width="0.0175%" height="15" fill="rgb(241,15,13)"/><text x="98.0154%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.02%)</title><rect x="97.7654%" y="725" width="0.0175%" height="15" fill="rgb(205,97,43)"/><text x="98.0154%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="97.7654%" y="709" width="0.0175%" height="15" fill="rgb(216,106,32)"/><text x="98.0154%" y="719.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (11 samples, 0.19%)</title><rect x="97.6082%" y="805" width="0.1920%" height="15" fill="rgb(226,200,8)"/><text x="97.8582%" y="815.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::next_task::{{closure}} (11 samples, 0.19%)</title><rect x="97.6082%" y="789" width="0.1920%" height="15" fill="rgb(244,54,29)"/><text x="97.8582%" y="799.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Worker::inject (1 samples, 0.02%)</title><rect x="97.7828%" y="773" width="0.0175%" height="15" fill="rgb(252,169,12)"/><text x="98.0328%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.02%)</title><rect x="97.8701%" y="741" width="0.0175%" height="15" fill="rgb(231,199,11)"/><text x="98.1201%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.02%)</title><rect x="97.8701%" y="725" width="0.0175%" height="15" fill="rgb(233,191,18)"/><text x="98.1201%" y="735.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (9 samples, 0.16%)</title><rect x="97.8003%" y="789" width="0.1571%" height="15" fill="rgb(215,83,47)"/><text x="98.0503%" y="799.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::next_local_task::{{closure}} (8 samples, 0.14%)</title><rect x="97.8177%" y="773" width="0.1397%" height="15" fill="rgb(251,67,19)"/><text x="98.0677%" y="783.50"></text></g><g><title>tokio::runtime::queue::Local&lt;T&gt;::pop (8 samples, 0.14%)</title><rect x="97.8177%" y="757" width="0.1397%" height="15" fill="rgb(240,7,20)"/><text x="98.0677%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (4 samples, 0.07%)</title><rect x="97.8876%" y="741" width="0.0698%" height="15" fill="rgb(210,150,26)"/><text x="98.1376%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_load (4 samples, 0.07%)</title><rect x="97.8876%" y="725" width="0.0698%" height="15" fill="rgb(228,75,42)"/><text x="98.1376%" y="735.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::next_task (38 samples, 0.66%)</title><rect x="97.3115%" y="821" width="0.6634%" height="15" fill="rgb(237,134,48)"/><text x="97.5615%" y="831.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::next_local_task (10 samples, 0.17%)</title><rect x="97.8003%" y="805" width="0.1746%" height="15" fill="rgb(205,80,50)"/><text x="98.0503%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.02%)</title><rect x="97.9574%" y="789" width="0.0175%" height="15" fill="rgb(217,74,48)"/><text x="98.2074%" y="799.50"></text></g><g><title>core::mem::take (1 samples, 0.02%)</title><rect x="97.9574%" y="773" width="0.0175%" height="15" fill="rgb(205,82,50)"/><text x="98.2074%" y="783.50"></text></g><g><title>core::mem::replace (1 samples, 0.02%)</title><rect x="97.9574%" y="757" width="0.0175%" height="15" fill="rgb(228,1,33)"/><text x="98.2074%" y="767.50"></text></g><g><title>core::mem::swap (1 samples, 0.02%)</title><rect x="97.9574%" y="741" width="0.0175%" height="15" fill="rgb(214,50,23)"/><text x="98.2074%" y="751.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (1 samples, 0.02%)</title><rect x="97.9574%" y="725" width="0.0175%" height="15" fill="rgb(210,62,9)"/><text x="98.2074%" y="735.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="97.9574%" y="709" width="0.0175%" height="15" fill="rgb(210,104,37)"/><text x="98.2074%" y="719.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.02%)</title><rect x="98.2891%" y="805" width="0.0175%" height="15" fill="rgb(232,104,43)"/><text x="98.5391%" y="815.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.02%)</title><rect x="98.2891%" y="789" width="0.0175%" height="15" fill="rgb(244,52,6)"/><text x="98.5391%" y="799.50"></text></g><g><title>tokio::runtime::queue::Inject&lt;T&gt;::pop (2 samples, 0.03%)</title><rect x="98.3066%" y="805" width="0.0349%" height="15" fill="rgb(211,174,52)"/><text x="98.5566%" y="815.50"></text></g><g><title>tokio::runtime::queue::Inject&lt;T&gt;::is_empty (2 samples, 0.03%)</title><rect x="98.3066%" y="789" width="0.0349%" height="15" fill="rgb(229,48,4)"/><text x="98.5566%" y="799.50"></text></g><g><title>tokio::runtime::queue::Inject&lt;T&gt;::len (2 samples, 0.03%)</title><rect x="98.3066%" y="773" width="0.0349%" height="15" fill="rgb(205,155,16)"/><text x="98.5566%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.03%)</title><rect x="98.3066%" y="757" width="0.0349%" height="15" fill="rgb(211,141,53)"/><text x="98.5566%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.03%)</title><rect x="98.3066%" y="741" width="0.0349%" height="15" fill="rgb(240,148,11)"/><text x="98.5566%" y="751.50"></text></g><g><title>core::num::&lt;impl u16&gt;::wrapping_add (1 samples, 0.02%)</title><rect x="98.5684%" y="773" width="0.0175%" height="15" fill="rgb(214,45,23)"/><text x="98.8184%" y="783.50"></text></g><g><title>core::num::&lt;impl u16&gt;::wrapping_sub (3 samples, 0.05%)</title><rect x="98.5859%" y="773" width="0.0524%" height="15" fill="rgb(248,74,26)"/><text x="98.8359%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (6 samples, 0.10%)</title><rect x="98.6383%" y="773" width="0.1047%" height="15" fill="rgb(218,121,16)"/><text x="98.8883%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (6 samples, 0.10%)</title><rect x="98.6383%" y="757" width="0.1047%" height="15" fill="rgb(218,10,47)"/><text x="98.8883%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (7 samples, 0.12%)</title><rect x="98.7430%" y="773" width="0.1222%" height="15" fill="rgb(227,99,14)"/><text x="98.9930%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_load (7 samples, 0.12%)</title><rect x="98.7430%" y="757" width="0.1222%" height="15" fill="rgb(229,83,46)"/><text x="98.9930%" y="767.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (5 samples, 0.09%)</title><rect x="98.8652%" y="773" width="0.0873%" height="15" fill="rgb(228,25,1)"/><text x="99.1152%" y="783.50"></text></g><g><title>tokio::runtime::queue::Steal&lt;T&gt;::steal_into2::{{closure}} (5 samples, 0.09%)</title><rect x="98.8652%" y="757" width="0.0873%" height="15" fill="rgb(252,190,15)"/><text x="99.1152%" y="767.50"></text></g><g><title>core::ptr::read (5 samples, 0.09%)</title><rect x="98.8652%" y="741" width="0.0873%" height="15" fill="rgb(213,103,51)"/><text x="99.1152%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.09%)</title><rect x="98.8652%" y="725" width="0.0873%" height="15" fill="rgb(220,38,44)"/><text x="99.1152%" y="735.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1 samples, 0.02%)</title><rect x="98.9525%" y="773" width="0.0175%" height="15" fill="rgb(210,45,26)"/><text x="99.2025%" y="783.50"></text></g><g><title>tokio::runtime::queue::Steal&lt;T&gt;::steal_into2::{{closure}} (1 samples, 0.02%)</title><rect x="98.9525%" y="757" width="0.0175%" height="15" fill="rgb(205,95,48)"/><text x="99.2025%" y="767.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="98.9525%" y="741" width="0.0175%" height="15" fill="rgb(225,179,37)"/><text x="99.2025%" y="751.50"></text></g><g><title>tokio::runtime::queue::Steal&lt;T&gt;::steal_into (39 samples, 0.68%)</title><rect x="98.3415%" y="805" width="0.6809%" height="15" fill="rgb(230,209,3)"/><text x="98.5915%" y="815.50"></text></g><g><title>tokio::runtime::queue::Steal&lt;T&gt;::steal_into2 (37 samples, 0.65%)</title><rect x="98.3764%" y="789" width="0.6459%" height="15" fill="rgb(248,12,46)"/><text x="98.6264%" y="799.50"></text></g><g><title>tokio::runtime::queue::unpack (3 samples, 0.05%)</title><rect x="98.9700%" y="773" width="0.0524%" height="15" fill="rgb(234,18,0)"/><text x="99.2200%" y="783.50"></text></g><g><title>tokio::runtime::thread_pool::idle::State::inc_num_searching (16 samples, 0.28%)</title><rect x="99.0223%" y="773" width="0.2793%" height="15" fill="rgb(238,197,14)"/><text x="99.2723%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (16 samples, 0.28%)</title><rect x="99.0223%" y="757" width="0.2793%" height="15" fill="rgb(251,162,48)"/><text x="99.2723%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_add (16 samples, 0.28%)</title><rect x="99.0223%" y="741" width="0.2793%" height="15" fill="rgb(237,73,42)"/><text x="99.2723%" y="751.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::transition_to_searching (17 samples, 0.30%)</title><rect x="99.0223%" y="805" width="0.2968%" height="15" fill="rgb(211,108,8)"/><text x="99.2723%" y="815.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::transition_worker_to_searching (17 samples, 0.30%)</title><rect x="99.0223%" y="789" width="0.2968%" height="15" fill="rgb(213,45,22)"/><text x="99.2723%" y="799.50"></text></g><g><title>tokio::runtime::thread_pool::idle::State::load (1 samples, 0.02%)</title><rect x="99.3017%" y="773" width="0.0175%" height="15" fill="rgb(252,154,5)"/><text x="99.5517%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.02%)</title><rect x="99.3017%" y="757" width="0.0175%" height="15" fill="rgb(221,79,52)"/><text x="99.5517%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="99.3017%" y="741" width="0.0175%" height="15" fill="rgb(229,220,36)"/><text x="99.5517%" y="751.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::steal_work (79 samples, 1.38%)</title><rect x="97.9749%" y="821" width="1.3792%" height="15" fill="rgb(211,17,16)"/><text x="98.2249%" y="831.50"></text></g><g><title>tokio::util::rand::FastRand::fastrand_n (2 samples, 0.03%)</title><rect x="99.3191%" y="805" width="0.0349%" height="15" fill="rgb(222,55,31)"/><text x="99.5691%" y="815.50"></text></g><g><title>tokio::util::rand::FastRand::fastrand (2 samples, 0.03%)</title><rect x="99.3191%" y="789" width="0.0349%" height="15" fill="rgb(221,221,31)"/><text x="99.5691%" y="799.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::tick (1 samples, 0.02%)</title><rect x="99.3541%" y="821" width="0.0175%" height="15" fill="rgb(227,168,26)"/><text x="99.6041%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.02%)</title><rect x="99.3715%" y="805" width="0.0175%" height="15" fill="rgb(224,139,9)"/><text x="99.6215%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="99.3715%" y="789" width="0.0175%" height="15" fill="rgb(254,172,0)"/><text x="99.6215%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="99.3715%" y="773" width="0.0175%" height="15" fill="rgb(235,203,1)"/><text x="99.6215%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (1 samples, 0.02%)</title><rect x="99.3715%" y="757" width="0.0175%" height="15" fill="rgb(216,205,24)"/><text x="99.6215%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="99.3715%" y="741" width="0.0175%" height="15" fill="rgb(233,24,6)"/><text x="99.6215%" y="751.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="99.3715%" y="725" width="0.0175%" height="15" fill="rgb(244,110,9)"/><text x="99.6215%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.02%)</title><rect x="99.3715%" y="709" width="0.0175%" height="15" fill="rgb(239,222,42)"/><text x="99.6215%" y="719.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.02%)</title><rect x="99.3715%" y="693" width="0.0175%" height="15" fill="rgb(218,145,13)"/><text x="99.6215%" y="703.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.02%)</title><rect x="99.3715%" y="677" width="0.0175%" height="15" fill="rgb(207,69,11)"/><text x="99.6215%" y="687.50"></text></g><g><title>__rg_realloc (1 samples, 0.02%)</title><rect x="99.3715%" y="661" width="0.0175%" height="15" fill="rgb(220,223,22)"/><text x="99.6215%" y="671.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (1 samples, 0.02%)</title><rect x="99.3715%" y="645" width="0.0175%" height="15" fill="rgb(245,102,5)"/><text x="99.6215%" y="655.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.02%)</title><rect x="99.3715%" y="629" width="0.0175%" height="15" fill="rgb(211,148,2)"/><text x="99.6215%" y="639.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.02%)</title><rect x="99.3715%" y="613" width="0.0175%" height="15" fill="rgb(241,13,44)"/><text x="99.6215%" y="623.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.02%)</title><rect x="99.3715%" y="597" width="0.0175%" height="15" fill="rgb(219,137,21)"/><text x="99.6215%" y="607.50"></text></g><g><title>mi_thread_init (1 samples, 0.02%)</title><rect x="99.3715%" y="581" width="0.0175%" height="15" fill="rgb(242,206,5)"/><text x="99.6215%" y="591.50"></text></g><g><title>_mi_heap_init (1 samples, 0.02%)</title><rect x="99.3715%" y="565" width="0.0175%" height="15" fill="rgb(217,114,22)"/><text x="99.6215%" y="575.50"></text></g><g><title>_mi_random_init (1 samples, 0.02%)</title><rect x="99.3715%" y="549" width="0.0175%" height="15" fill="rgb(253,206,42)"/><text x="99.6215%" y="559.50"></text></g><g><title>os_random_buf (1 samples, 0.02%)</title><rect x="99.3715%" y="533" width="0.0175%" height="15" fill="rgb(236,102,18)"/><text x="99.6215%" y="543.50"></text></g><g><title>syscall (1 samples, 0.02%)</title><rect x="99.3715%" y="517" width="0.0175%" height="15" fill="rgb(208,59,49)"/><text x="99.6215%" y="527.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.02%)</title><rect x="99.3715%" y="501" width="0.0175%" height="15" fill="rgb(215,194,28)"/><text x="99.6215%" y="511.50"></text></g><g><title>do_syscall_64 (1 samples, 0.02%)</title><rect x="99.3715%" y="485" width="0.0175%" height="15" fill="rgb(243,207,11)"/><text x="99.6215%" y="495.50"></text></g><g><title>__x64_sys_getrandom (1 samples, 0.02%)</title><rect x="99.3715%" y="469" width="0.0175%" height="15" fill="rgb(254,179,35)"/><text x="99.6215%" y="479.50"></text></g><g><title>urandom_read_nowarn.isra.0 (1 samples, 0.02%)</title><rect x="99.3715%" y="453" width="0.0175%" height="15" fill="rgb(235,97,3)"/><text x="99.6215%" y="463.50"></text></g><g><title>extract_crng (1 samples, 0.02%)</title><rect x="99.3715%" y="437" width="0.0175%" height="15" fill="rgb(215,155,33)"/><text x="99.6215%" y="447.50"></text></g><g><title>_extract_crng (1 samples, 0.02%)</title><rect x="99.3715%" y="421" width="0.0175%" height="15" fill="rgb(223,128,12)"/><text x="99.6215%" y="431.50"></text></g><g><title>std::panic::catch_unwind (3,305 samples, 57.70%)</title><rect x="41.7074%" y="1269" width="57.6990%" height="15" fill="rgb(208,157,18)"/><text x="41.9574%" y="1279.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,305 samples, 57.70%)</title><rect x="41.7074%" y="1253" width="57.6990%" height="15" fill="rgb(249,70,54)"/><text x="41.9574%" y="1263.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,305 samples, 57.70%)</title><rect x="41.7074%" y="1237" width="57.6990%" height="15" fill="rgb(244,118,24)"/><text x="41.9574%" y="1247.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3,305 samples, 57.70%)</title><rect x="41.7074%" y="1221" width="57.6990%" height="15" fill="rgb(211,54,0)"/><text x="41.9574%" y="1231.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (3,305 samples, 57.70%)</title><rect x="41.7074%" y="1205" width="57.6990%" height="15" fill="rgb(245,137,45)"/><text x="41.9574%" y="1215.50">std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3,305 samples, 57.70%)</title><rect x="41.7074%" y="1189" width="57.6990%" height="15" fill="rgb(232,154,31)"/><text x="41.9574%" y="1199.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (3,305 samples, 57.70%)</title><rect x="41.7074%" y="1173" width="57.6990%" height="15" fill="rgb(253,6,39)"/><text x="41.9574%" y="1183.50">tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}}</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (3,305 samples, 57.70%)</title><rect x="41.7074%" y="1157" width="57.6990%" height="15" fill="rgb(234,183,24)"/><text x="41.9574%" y="1167.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (3,295 samples, 57.52%)</title><rect x="41.8820%" y="1141" width="57.5244%" height="15" fill="rgb(252,84,40)"/><text x="42.1320%" y="1151.50">tokio::runtime::task::Notified&lt;S&gt;::run</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (3,295 samples, 57.52%)</title><rect x="41.8820%" y="1125" width="57.5244%" height="15" fill="rgb(224,65,2)"/><text x="42.1320%" y="1135.50">tokio::runtime::task::raw::RawTask::poll</text></g><g><title>tokio::runtime::task::raw::poll (3,295 samples, 57.52%)</title><rect x="41.8820%" y="1109" width="57.5244%" height="15" fill="rgb(229,38,24)"/><text x="42.1320%" y="1119.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (3,295 samples, 57.52%)</title><rect x="41.8820%" y="1093" width="57.5244%" height="15" fill="rgb(218,131,50)"/><text x="42.1320%" y="1103.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (3,295 samples, 57.52%)</title><rect x="41.8820%" y="1077" width="57.5244%" height="15" fill="rgb(233,106,18)"/><text x="42.1320%" y="1087.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner</text></g><g><title>tokio::runtime::task::harness::poll_future (3,295 samples, 57.52%)</title><rect x="41.8820%" y="1061" width="57.5244%" height="15" fill="rgb(220,216,11)"/><text x="42.1320%" y="1071.50">tokio::runtime::task::harness::poll_future</text></g><g><title>std::panic::catch_unwind (3,295 samples, 57.52%)</title><rect x="41.8820%" y="1045" width="57.5244%" height="15" fill="rgb(251,100,45)"/><text x="42.1320%" y="1055.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,295 samples, 57.52%)</title><rect x="41.8820%" y="1029" width="57.5244%" height="15" fill="rgb(235,143,32)"/><text x="42.1320%" y="1039.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,295 samples, 57.52%)</title><rect x="41.8820%" y="1013" width="57.5244%" height="15" fill="rgb(248,124,34)"/><text x="42.1320%" y="1023.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3,295 samples, 57.52%)</title><rect x="41.8820%" y="997" width="57.5244%" height="15" fill="rgb(225,221,4)"/><text x="42.1320%" y="1007.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (3,295 samples, 57.52%)</title><rect x="41.8820%" y="981" width="57.5244%" height="15" fill="rgb(242,27,43)"/><text x="42.1320%" y="991.50">tokio::runtime::task::harness::poll_future::{{closure}}</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (3,295 samples, 57.52%)</title><rect x="41.8820%" y="965" width="57.5244%" height="15" fill="rgb(227,54,8)"/><text x="42.1320%" y="975.50">tokio::runtime::task::core::CoreStage&lt;T&gt;::poll</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (3,295 samples, 57.52%)</title><rect x="41.8820%" y="949" width="57.5244%" height="15" fill="rgb(253,139,49)"/><text x="42.1320%" y="959.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (3,295 samples, 57.52%)</title><rect x="41.8820%" y="933" width="57.5244%" height="15" fill="rgb(231,26,43)"/><text x="42.1320%" y="943.50">tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}}</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (3,295 samples, 57.52%)</title><rect x="41.8820%" y="917" width="57.5244%" height="15" fill="rgb(207,121,39)"/><text x="42.1320%" y="927.50">&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (3,295 samples, 57.52%)</title><rect x="41.8820%" y="901" width="57.5244%" height="15" fill="rgb(223,101,35)"/><text x="42.1320%" y="911.50">tokio::runtime::thread_pool::worker::Launch::launch::{{closure}}</text></g><g><title>tokio::runtime::thread_pool::worker::run (3,295 samples, 57.52%)</title><rect x="41.8820%" y="885" width="57.5244%" height="15" fill="rgb(232,87,23)"/><text x="42.1320%" y="895.50">tokio::runtime::thread_pool::worker::run</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (3,295 samples, 57.52%)</title><rect x="41.8820%" y="869" width="57.5244%" height="15" fill="rgb(225,180,29)"/><text x="42.1320%" y="879.50">tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (3,295 samples, 57.52%)</title><rect x="41.8820%" y="853" width="57.5244%" height="15" fill="rgb(225,25,17)"/><text x="42.1320%" y="863.50">tokio::runtime::thread_pool::worker::run::{{closure}}</text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (3,295 samples, 57.52%)</title><rect x="41.8820%" y="837" width="57.5244%" height="15" fill="rgb(223,8,52)"/><text x="42.1320%" y="847.50">tokio::runtime::thread_pool::worker::Context::run</text></g><g><title>tokio::runtime::thread_pool::worker::Shared::shutdown (2 samples, 0.03%)</title><rect x="99.3715%" y="821" width="0.0349%" height="15" fill="rgb(246,42,21)"/><text x="99.6215%" y="831.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (1 samples, 0.02%)</title><rect x="99.3890%" y="805" width="0.0175%" height="15" fill="rgb(205,64,43)"/><text x="99.6390%" y="815.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (1 samples, 0.02%)</title><rect x="99.3890%" y="789" width="0.0175%" height="15" fill="rgb(221,160,13)"/><text x="99.6390%" y="799.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (1 samples, 0.02%)</title><rect x="99.3890%" y="773" width="0.0175%" height="15" fill="rgb(239,58,35)"/><text x="99.6390%" y="783.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (1 samples, 0.02%)</title><rect x="99.3890%" y="757" width="0.0175%" height="15" fill="rgb(251,26,40)"/><text x="99.6390%" y="767.50"></text></g><g><title>parking_lot_core::parking_lot::park (1 samples, 0.02%)</title><rect x="99.3890%" y="741" width="0.0175%" height="15" fill="rgb(247,0,4)"/><text x="99.6390%" y="751.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (1 samples, 0.02%)</title><rect x="99.3890%" y="725" width="0.0175%" height="15" fill="rgb(218,130,10)"/><text x="99.6390%" y="735.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (1 samples, 0.02%)</title><rect x="99.3890%" y="709" width="0.0175%" height="15" fill="rgb(239,32,7)"/><text x="99.6390%" y="719.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (1 samples, 0.02%)</title><rect x="99.3890%" y="693" width="0.0175%" height="15" fill="rgb(210,192,24)"/><text x="99.6390%" y="703.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (1 samples, 0.02%)</title><rect x="99.3890%" y="677" width="0.0175%" height="15" fill="rgb(226,212,17)"/><text x="99.6390%" y="687.50"></text></g><g><title>syscall (1 samples, 0.02%)</title><rect x="99.3890%" y="661" width="0.0175%" height="15" fill="rgb(219,201,28)"/><text x="99.6390%" y="671.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.02%)</title><rect x="99.3890%" y="645" width="0.0175%" height="15" fill="rgb(235,207,41)"/><text x="99.6390%" y="655.50"></text></g><g><title>do_syscall_64 (1 samples, 0.02%)</title><rect x="99.3890%" y="629" width="0.0175%" height="15" fill="rgb(241,95,54)"/><text x="99.6390%" y="639.50"></text></g><g><title>__x64_sys_futex (1 samples, 0.02%)</title><rect x="99.3890%" y="613" width="0.0175%" height="15" fill="rgb(248,12,23)"/><text x="99.6390%" y="623.50"></text></g><g><title>do_futex (1 samples, 0.02%)</title><rect x="99.3890%" y="597" width="0.0175%" height="15" fill="rgb(228,173,4)"/><text x="99.6390%" y="607.50"></text></g><g><title>futex_wait (1 samples, 0.02%)</title><rect x="99.3890%" y="581" width="0.0175%" height="15" fill="rgb(254,99,5)"/><text x="99.6390%" y="591.50"></text></g><g><title>futex_wait_queue_me (1 samples, 0.02%)</title><rect x="99.3890%" y="565" width="0.0175%" height="15" fill="rgb(212,184,17)"/><text x="99.6390%" y="575.50"></text></g><g><title>schedule (1 samples, 0.02%)</title><rect x="99.3890%" y="549" width="0.0175%" height="15" fill="rgb(252,174,1)"/><text x="99.6390%" y="559.50"></text></g><g><title>__sched_text_start (1 samples, 0.02%)</title><rect x="99.3890%" y="533" width="0.0175%" height="15" fill="rgb(241,118,51)"/><text x="99.6390%" y="543.50"></text></g><g><title>pick_next_task_fair (1 samples, 0.02%)</title><rect x="99.3890%" y="517" width="0.0175%" height="15" fill="rgb(227,94,47)"/><text x="99.6390%" y="527.50"></text></g><g><title>newidle_balance (1 samples, 0.02%)</title><rect x="99.3890%" y="501" width="0.0175%" height="15" fill="rgb(229,104,2)"/><text x="99.6390%" y="511.50"></text></g><g><title>load_balance (1 samples, 0.02%)</title><rect x="99.3890%" y="485" width="0.0175%" height="15" fill="rgb(219,28,31)"/><text x="99.6390%" y="495.50"></text></g><g><title>find_busiest_group (1 samples, 0.02%)</title><rect x="99.3890%" y="469" width="0.0175%" height="15" fill="rgb(233,109,36)"/><text x="99.6390%" y="479.50"></text></g><g><title>cpumask_next_and (1 samples, 0.02%)</title><rect x="99.3890%" y="453" width="0.0175%" height="15" fill="rgb(246,88,11)"/><text x="99.6390%" y="463.50"></text></g><g><title>find_vma (1 samples, 0.02%)</title><rect x="99.4064%" y="1077" width="0.0175%" height="15" fill="rgb(209,212,17)"/><text x="99.6564%" y="1087.50"></text></g><g><title>vmacache_find (1 samples, 0.02%)</title><rect x="99.4064%" y="1061" width="0.0175%" height="15" fill="rgb(243,59,29)"/><text x="99.6564%" y="1071.50"></text></g><g><title>lru_add_drain (1 samples, 0.02%)</title><rect x="99.4239%" y="1061" width="0.0175%" height="15" fill="rgb(244,205,48)"/><text x="99.6739%" y="1071.50"></text></g><g><title>lru_add_drain_cpu (1 samples, 0.02%)</title><rect x="99.4239%" y="1045" width="0.0175%" height="15" fill="rgb(227,30,6)"/><text x="99.6739%" y="1055.50"></text></g><g><title>pagevec_lru_move_fn (1 samples, 0.02%)</title><rect x="99.4239%" y="1029" width="0.0175%" height="15" fill="rgb(220,205,48)"/><text x="99.6739%" y="1039.50"></text></g><g><title>__pagevec_lru_add_fn (1 samples, 0.02%)</title><rect x="99.4239%" y="1013" width="0.0175%" height="15" fill="rgb(250,94,14)"/><text x="99.6739%" y="1023.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.02%)</title><rect x="99.4239%" y="997" width="0.0175%" height="15" fill="rgb(216,119,42)"/><text x="99.6739%" y="1007.50"></text></g><g><title>__munmap (3 samples, 0.05%)</title><rect x="99.4064%" y="1173" width="0.0524%" height="15" fill="rgb(232,155,0)"/><text x="99.6564%" y="1183.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (3 samples, 0.05%)</title><rect x="99.4064%" y="1157" width="0.0524%" height="15" fill="rgb(212,24,32)"/><text x="99.6564%" y="1167.50"></text></g><g><title>do_syscall_64 (3 samples, 0.05%)</title><rect x="99.4064%" y="1141" width="0.0524%" height="15" fill="rgb(216,69,20)"/><text x="99.6564%" y="1151.50"></text></g><g><title>__x64_sys_munmap (3 samples, 0.05%)</title><rect x="99.4064%" y="1125" width="0.0524%" height="15" fill="rgb(229,73,31)"/><text x="99.6564%" y="1135.50"></text></g><g><title>__vm_munmap (3 samples, 0.05%)</title><rect x="99.4064%" y="1109" width="0.0524%" height="15" fill="rgb(224,219,20)"/><text x="99.6564%" y="1119.50"></text></g><g><title>__do_munmap (3 samples, 0.05%)</title><rect x="99.4064%" y="1093" width="0.0524%" height="15" fill="rgb(215,146,41)"/><text x="99.6564%" y="1103.50"></text></g><g><title>unmap_region (2 samples, 0.03%)</title><rect x="99.4239%" y="1077" width="0.0349%" height="15" fill="rgb(244,71,31)"/><text x="99.6739%" y="1087.50"></text></g><g><title>unmap_vmas (1 samples, 0.02%)</title><rect x="99.4413%" y="1061" width="0.0175%" height="15" fill="rgb(224,24,11)"/><text x="99.6913%" y="1071.50"></text></g><g><title>unmap_single_vma (1 samples, 0.02%)</title><rect x="99.4413%" y="1045" width="0.0175%" height="15" fill="rgb(229,76,15)"/><text x="99.6913%" y="1055.50"></text></g><g><title>unmap_page_range (1 samples, 0.02%)</title><rect x="99.4413%" y="1029" width="0.0175%" height="15" fill="rgb(209,93,2)"/><text x="99.6913%" y="1039.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3,309 samples, 57.77%)</title><rect x="41.7074%" y="1333" width="57.7689%" height="15" fill="rgb(216,200,50)"/><text x="41.9574%" y="1343.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3,309 samples, 57.77%)</title><rect x="41.7074%" y="1317" width="57.7689%" height="15" fill="rgb(211,67,34)"/><text x="41.9574%" y="1327.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (3,309 samples, 57.77%)</title><rect x="41.7074%" y="1301" width="57.7689%" height="15" fill="rgb(225,87,47)"/><text x="41.9574%" y="1311.50">core::ops::function::FnOnce::call_once{{vtable-shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (3,309 samples, 57.77%)</title><rect x="41.7074%" y="1285" width="57.7689%" height="15" fill="rgb(217,185,16)"/><text x="41.9574%" y="1295.50">std::thread::Builder::spawn_unchecked::{{closure}}</text></g><g><title>std::sys::unix::thread::guard::current (4 samples, 0.07%)</title><rect x="99.4064%" y="1269" width="0.0698%" height="15" fill="rgb(205,0,0)"/><text x="99.6564%" y="1279.50"></text></g><g><title>pthread_getattr_np (4 samples, 0.07%)</title><rect x="99.4064%" y="1253" width="0.0698%" height="15" fill="rgb(207,116,45)"/><text x="99.6564%" y="1263.50"></text></g><g><title>__libc_malloc (4 samples, 0.07%)</title><rect x="99.4064%" y="1237" width="0.0698%" height="15" fill="rgb(221,156,26)"/><text x="99.6564%" y="1247.50"></text></g><g><title>[libc-2.31.so] (4 samples, 0.07%)</title><rect x="99.4064%" y="1221" width="0.0698%" height="15" fill="rgb(213,140,4)"/><text x="99.6564%" y="1231.50"></text></g><g><title>[libc-2.31.so] (4 samples, 0.07%)</title><rect x="99.4064%" y="1205" width="0.0698%" height="15" fill="rgb(231,224,15)"/><text x="99.6564%" y="1215.50"></text></g><g><title>[libc-2.31.so] (4 samples, 0.07%)</title><rect x="99.4064%" y="1189" width="0.0698%" height="15" fill="rgb(244,76,20)"/><text x="99.6564%" y="1199.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.02%)</title><rect x="99.4588%" y="1173" width="0.0175%" height="15" fill="rgb(238,117,7)"/><text x="99.7088%" y="1183.50"></text></g><g><title>exc_page_fault (1 samples, 0.02%)</title><rect x="99.4588%" y="1157" width="0.0175%" height="15" fill="rgb(235,1,10)"/><text x="99.7088%" y="1167.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.02%)</title><rect x="99.4588%" y="1141" width="0.0175%" height="15" fill="rgb(216,165,6)"/><text x="99.7088%" y="1151.50"></text></g><g><title>handle_mm_fault (1 samples, 0.02%)</title><rect x="99.4588%" y="1125" width="0.0175%" height="15" fill="rgb(246,91,35)"/><text x="99.7088%" y="1135.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.02%)</title><rect x="99.4588%" y="1109" width="0.0175%" height="15" fill="rgb(228,96,24)"/><text x="99.7088%" y="1119.50"></text></g><g><title>clone (3,325 samples, 58.05%)</title><rect x="41.6027%" y="1381" width="58.0482%" height="15" fill="rgb(254,217,53)"/><text x="41.8527%" y="1391.50">clone</text></g><g><title>start_thread (3,325 samples, 58.05%)</title><rect x="41.6027%" y="1365" width="58.0482%" height="15" fill="rgb(209,60,0)"/><text x="41.8527%" y="1375.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (3,319 samples, 57.94%)</title><rect x="41.7074%" y="1349" width="57.9434%" height="15" fill="rgb(250,93,26)"/><text x="41.9574%" y="1359.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::stack_overflow::Handler&gt; (10 samples, 0.17%)</title><rect x="99.4763%" y="1333" width="0.1746%" height="15" fill="rgb(211,9,40)"/><text x="99.7263%" y="1343.50"></text></g><g><title>&lt;std::sys::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (10 samples, 0.17%)</title><rect x="99.4763%" y="1317" width="0.1746%" height="15" fill="rgb(242,57,20)"/><text x="99.7263%" y="1327.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::drop_handler (10 samples, 0.17%)</title><rect x="99.4763%" y="1301" width="0.1746%" height="15" fill="rgb(248,85,48)"/><text x="99.7263%" y="1311.50"></text></g><g><title>__munmap (10 samples, 0.17%)</title><rect x="99.4763%" y="1285" width="0.1746%" height="15" fill="rgb(212,117,2)"/><text x="99.7263%" y="1295.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (10 samples, 0.17%)</title><rect x="99.4763%" y="1269" width="0.1746%" height="15" fill="rgb(243,19,3)"/><text x="99.7263%" y="1279.50"></text></g><g><title>do_syscall_64 (10 samples, 0.17%)</title><rect x="99.4763%" y="1253" width="0.1746%" height="15" fill="rgb(232,217,24)"/><text x="99.7263%" y="1263.50"></text></g><g><title>__x64_sys_munmap (10 samples, 0.17%)</title><rect x="99.4763%" y="1237" width="0.1746%" height="15" fill="rgb(224,175,40)"/><text x="99.7263%" y="1247.50"></text></g><g><title>__vm_munmap (10 samples, 0.17%)</title><rect x="99.4763%" y="1221" width="0.1746%" height="15" fill="rgb(212,162,32)"/><text x="99.7263%" y="1231.50"></text></g><g><title>down_write_killable (10 samples, 0.17%)</title><rect x="99.4763%" y="1205" width="0.1746%" height="15" fill="rgb(215,9,4)"/><text x="99.7263%" y="1215.50"></text></g><g><title>rwsem_down_write_slowpath (10 samples, 0.17%)</title><rect x="99.4763%" y="1189" width="0.1746%" height="15" fill="rgb(242,42,7)"/><text x="99.7263%" y="1199.50"></text></g><g><title>schedule (10 samples, 0.17%)</title><rect x="99.4763%" y="1173" width="0.1746%" height="15" fill="rgb(242,184,45)"/><text x="99.7263%" y="1183.50"></text></g><g><title>__sched_text_start (10 samples, 0.17%)</title><rect x="99.4763%" y="1157" width="0.1746%" height="15" fill="rgb(228,111,51)"/><text x="99.7263%" y="1167.50"></text></g><g><title>finish_task_switch (10 samples, 0.17%)</title><rect x="99.4763%" y="1141" width="0.1746%" height="15" fill="rgb(236,147,17)"/><text x="99.7263%" y="1151.50"></text></g><g><title>__perf_event_task_sched_in (10 samples, 0.17%)</title><rect x="99.4763%" y="1125" width="0.1746%" height="15" fill="rgb(210,75,22)"/><text x="99.7263%" y="1135.50"></text></g><g><title>perf_pmu_enable.part.0 (10 samples, 0.17%)</title><rect x="99.4763%" y="1109" width="0.1746%" height="15" fill="rgb(217,159,45)"/><text x="99.7263%" y="1119.50"></text></g><g><title>x86_pmu_enable (10 samples, 0.17%)</title><rect x="99.4763%" y="1093" width="0.1746%" height="15" fill="rgb(245,165,53)"/><text x="99.7263%" y="1103.50"></text></g><g><title>intel_pmu_enable_all (10 samples, 0.17%)</title><rect x="99.4763%" y="1077" width="0.1746%" height="15" fill="rgb(251,190,50)"/><text x="99.7263%" y="1087.50"></text></g><g><title>native_write_msr (10 samples, 0.17%)</title><rect x="99.4763%" y="1061" width="0.1746%" height="15" fill="rgb(208,203,29)"/><text x="99.7263%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::expr::ExprInstance&gt; (1 samples, 0.02%)</title><rect x="99.6508%" y="1381" width="0.0175%" height="15" fill="rgb(207,209,35)"/><text x="99.9008%" y="1391.50"></text></g><g><title>entry_SYSCALL_64 (10 samples, 0.17%)</title><rect x="99.6683%" y="1381" width="0.1746%" height="15" fill="rgb(230,144,49)"/><text x="99.9183%" y="1391.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.03%)</title><rect x="99.8429%" y="1381" width="0.0349%" height="15" fill="rgb(229,31,6)"/><text x="100.0929%" y="1391.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (2 samples, 0.03%)</title><rect x="99.8778%" y="1381" width="0.0349%" height="15" fill="rgb(251,129,24)"/><text x="100.1278%" y="1391.50"></text></g><g><title>syscall_return_via_sysret (3 samples, 0.05%)</title><rect x="99.9127%" y="1381" width="0.0524%" height="15" fill="rgb(235,105,15)"/><text x="100.1627%" y="1391.50"></text></g><g><title>all (5,728 samples, 100%)</title><rect x="0.0000%" y="1413" width="100.0000%" height="15" fill="rgb(216,52,43)"/><text x="0.2500%" y="1423.50"></text></g><g><title>tokio-runtime-w (4,597 samples, 80.25%)</title><rect x="19.7451%" y="1397" width="80.2549%" height="15" fill="rgb(238,144,41)"/><text x="19.9951%" y="1407.50">tokio-runtime-w</text></g><g><title>tokio::runtime::task::raw::poll (2 samples, 0.03%)</title><rect x="99.9651%" y="1381" width="0.0349%" height="15" fill="rgb(243,63,9)"/><text x="100.2151%" y="1391.50"></text></g></svg></svg>