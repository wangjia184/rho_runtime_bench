<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1446" onload="init(evt)" viewBox="0 0 1200 1446" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1446" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1429.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1429.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="0.0084%" y="1349" width="0.0140%" height="15" fill="rgb(227,0,7)"/><text x="0.2584%" y="1359.50"></text></g><g><title>&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (18 samples, 0.02%)</title><rect x="0.0224%" y="1349" width="0.0168%" height="15" fill="rgb(217,0,24)"/><text x="0.2724%" y="1359.50"></text></g><g><title>[libc-2.31.so] (29 samples, 0.03%)</title><rect x="0.0402%" y="1349" width="0.0271%" height="15" fill="rgb(221,193,54)"/><text x="0.2902%" y="1359.50"></text></g><g><title>__libc_malloc (14 samples, 0.01%)</title><rect x="0.0720%" y="1349" width="0.0131%" height="15" fill="rgb(248,212,6)"/><text x="0.3220%" y="1359.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (32 samples, 0.03%)</title><rect x="0.0850%" y="1349" width="0.0299%" height="15" fill="rgb(208,68,35)"/><text x="0.3350%" y="1359.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (12 samples, 0.01%)</title><rect x="0.1149%" y="1349" width="0.0112%" height="15" fill="rgb(232,128,0)"/><text x="0.3649%" y="1359.50"></text></g><g><title>tokio::sync::mpsc::block::is_ready (15 samples, 0.01%)</title><rect x="0.1411%" y="1349" width="0.0140%" height="15" fill="rgb(207,160,47)"/><text x="0.3911%" y="1359.50"></text></g><g><title>[[heap]] (203 samples, 0.19%)</title><rect x="0.0047%" y="1365" width="0.1897%" height="15" fill="rgb(228,23,34)"/><text x="0.2547%" y="1375.50"></text></g><g><title>tokio::task::spawn::spawn (24 samples, 0.02%)</title><rect x="0.1720%" y="1349" width="0.0224%" height="15" fill="rgb(218,30,26)"/><text x="0.4220%" y="1359.50"></text></g><g><title>&lt;(tokio::sync::batch_semaphore::Semaphore,usize) as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (11 samples, 0.01%)</title><rect x="0.1944%" y="1349" width="0.0103%" height="15" fill="rgb(220,122,19)"/><text x="0.4444%" y="1359.50"></text></g><g><title>[libc-2.31.so] (31 samples, 0.03%)</title><rect x="0.2075%" y="1349" width="0.0290%" height="15" fill="rgb(250,228,42)"/><text x="0.4575%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::join::JoinHandle&lt;()&gt;&gt; (32 samples, 0.03%)</title><rect x="0.2897%" y="1333" width="0.0299%" height="15" fill="rgb(240,193,28)"/><text x="0.5397%" y="1343.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.03%)</title><rect x="0.2897%" y="1317" width="0.0299%" height="15" fill="rgb(216,20,37)"/><text x="0.5397%" y="1327.50"></text></g><g><title>rho_runtime::storage::coordinator::Coordinator::handle_produce (92 samples, 0.09%)</title><rect x="0.2607%" y="1349" width="0.0860%" height="15" fill="rgb(206,188,39)"/><text x="0.5107%" y="1359.50"></text></g><g><title>tokio::sync::oneshot::channel (29 samples, 0.03%)</title><rect x="0.3196%" y="1333" width="0.0271%" height="15" fill="rgb(217,207,13)"/><text x="0.5696%" y="1343.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (14 samples, 0.01%)</title><rect x="0.3336%" y="1317" width="0.0131%" height="15" fill="rgb(231,73,38)"/><text x="0.5836%" y="1327.50"></text></g><g><title>syscall (14 samples, 0.01%)</title><rect x="0.3514%" y="1349" width="0.0131%" height="15" fill="rgb(225,20,46)"/><text x="0.6014%" y="1359.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (43 samples, 0.04%)</title><rect x="0.3691%" y="1349" width="0.0402%" height="15" fill="rgb(210,31,41)"/><text x="0.6191%" y="1359.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::{{closure}} (38 samples, 0.04%)</title><rect x="0.3738%" y="1333" width="0.0355%" height="15" fill="rgb(221,200,47)"/><text x="0.6238%" y="1343.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (18 samples, 0.02%)</title><rect x="0.4093%" y="1349" width="0.0168%" height="15" fill="rgb(226,26,5)"/><text x="0.6593%" y="1359.50"></text></g><g><title>tokio::park::thread::Inner::park (98 samples, 0.09%)</title><rect x="0.4262%" y="1349" width="0.0916%" height="15" fill="rgb(249,33,26)"/><text x="0.6762%" y="1359.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (79 samples, 0.07%)</title><rect x="0.4439%" y="1333" width="0.0738%" height="15" fill="rgb(235,183,28)"/><text x="0.6939%" y="1343.50"></text></g><g><title>parking_lot::condvar::Condvar::wait (79 samples, 0.07%)</title><rect x="0.4439%" y="1317" width="0.0738%" height="15" fill="rgb(221,5,38)"/><text x="0.6939%" y="1327.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (78 samples, 0.07%)</title><rect x="0.4448%" y="1301" width="0.0729%" height="15" fill="rgb(247,18,42)"/><text x="0.6948%" y="1311.50"></text></g><g><title>parking_lot_core::parking_lot::park (78 samples, 0.07%)</title><rect x="0.4448%" y="1285" width="0.0729%" height="15" fill="rgb(241,131,45)"/><text x="0.6948%" y="1295.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (78 samples, 0.07%)</title><rect x="0.4448%" y="1269" width="0.0729%" height="15" fill="rgb(249,31,29)"/><text x="0.6948%" y="1279.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (78 samples, 0.07%)</title><rect x="0.4448%" y="1253" width="0.0729%" height="15" fill="rgb(225,111,53)"/><text x="0.6948%" y="1263.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (78 samples, 0.07%)</title><rect x="0.4448%" y="1237" width="0.0729%" height="15" fill="rgb(238,160,17)"/><text x="0.6948%" y="1247.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (78 samples, 0.07%)</title><rect x="0.4448%" y="1221" width="0.0729%" height="15" fill="rgb(214,148,48)"/><text x="0.6948%" y="1231.50"></text></g><g><title>syscall (78 samples, 0.07%)</title><rect x="0.4448%" y="1205" width="0.0729%" height="15" fill="rgb(232,36,49)"/><text x="0.6948%" y="1215.50"></text></g><g><title>[unknown] (78 samples, 0.07%)</title><rect x="0.4448%" y="1189" width="0.0729%" height="15" fill="rgb(209,103,24)"/><text x="0.6948%" y="1199.50"></text></g><g><title>tokio::runtime::enter::Enter::block_on (127 samples, 0.12%)</title><rect x="0.5271%" y="1349" width="0.1187%" height="15" fill="rgb(229,88,8)"/><text x="0.7771%" y="1359.50"></text></g><g><title>tokio::park::thread::CachedParkThread::block_on (127 samples, 0.12%)</title><rect x="0.5271%" y="1333" width="0.1187%" height="15" fill="rgb(213,181,19)"/><text x="0.7771%" y="1343.50"></text></g><g><title>tokio::coop::budget (124 samples, 0.12%)</title><rect x="0.5299%" y="1317" width="0.1159%" height="15" fill="rgb(254,191,54)"/><text x="0.7799%" y="1327.50"></text></g><g><title>tokio::coop::with_budget (57 samples, 0.05%)</title><rect x="0.5925%" y="1301" width="0.0533%" height="15" fill="rgb(241,83,37)"/><text x="0.8425%" y="1311.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (57 samples, 0.05%)</title><rect x="0.5925%" y="1285" width="0.0533%" height="15" fill="rgb(233,36,39)"/><text x="0.8425%" y="1295.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (57 samples, 0.05%)</title><rect x="0.5925%" y="1269" width="0.0533%" height="15" fill="rgb(226,3,54)"/><text x="0.8425%" y="1279.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (15 samples, 0.01%)</title><rect x="0.6318%" y="1253" width="0.0140%" height="15" fill="rgb(245,192,40)"/><text x="0.8818%" y="1263.50"></text></g><g><title>tokio::runtime::task::core::Cell&lt;T,S&gt;::new (16 samples, 0.01%)</title><rect x="0.6458%" y="1349" width="0.0150%" height="15" fill="rgb(238,167,29)"/><text x="0.8958%" y="1359.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (13 samples, 0.01%)</title><rect x="0.6486%" y="1333" width="0.0121%" height="15" fill="rgb(232,182,51)"/><text x="0.8986%" y="1343.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::coop::RestoreOnPending&gt; (14 samples, 0.01%)</title><rect x="0.7009%" y="1333" width="0.0131%" height="15" fill="rgb(231,60,39)"/><text x="0.9509%" y="1343.50"></text></g><g><title>[[stack]] (575 samples, 0.54%)</title><rect x="0.1944%" y="1365" width="0.5374%" height="15" fill="rgb(208,69,12)"/><text x="0.4444%" y="1375.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (69 samples, 0.06%)</title><rect x="0.6673%" y="1349" width="0.0645%" height="15" fill="rgb(235,93,37)"/><text x="0.9173%" y="1359.50"></text></g><g><title>tokio::coop::poll_proceed (19 samples, 0.02%)</title><rect x="0.7140%" y="1333" width="0.0178%" height="15" fill="rgb(213,116,39)"/><text x="0.9640%" y="1343.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (19 samples, 0.02%)</title><rect x="0.7140%" y="1317" width="0.0178%" height="15" fill="rgb(222,207,29)"/><text x="0.9640%" y="1327.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (19 samples, 0.02%)</title><rect x="0.7140%" y="1301" width="0.0178%" height="15" fill="rgb(206,96,30)"/><text x="0.9640%" y="1311.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (13 samples, 0.01%)</title><rect x="0.7317%" y="1349" width="0.0121%" height="15" fill="rgb(218,138,4)"/><text x="0.9817%" y="1359.50"></text></g><g><title>&lt;tokio::park::thread::CachedParkThread as tokio::park::Park&gt;::park (47 samples, 0.04%)</title><rect x="0.7458%" y="1349" width="0.0439%" height="15" fill="rgb(250,191,14)"/><text x="0.9958%" y="1359.50"></text></g><g><title>syscall (48 samples, 0.04%)</title><rect x="0.8046%" y="1349" width="0.0449%" height="15" fill="rgb(239,60,40)"/><text x="1.0546%" y="1359.50"></text></g><g><title>[anon] (160 samples, 0.15%)</title><rect x="0.7317%" y="1365" width="0.1495%" height="15" fill="rgb(206,27,48)"/><text x="0.9817%" y="1375.50"></text></g><g><title>[libc-2.31.so] (11 samples, 0.01%)</title><rect x="0.8813%" y="1365" width="0.0103%" height="15" fill="rgb(225,35,8)"/><text x="1.1313%" y="1375.50"></text></g><g><title>[rho_runtime] (18 samples, 0.02%)</title><rect x="0.8916%" y="1365" width="0.0168%" height="15" fill="rgb(250,213,24)"/><text x="1.1416%" y="1375.50"></text></g><g><title>tokio::runtime::spawner::Spawner::spawn (18 samples, 0.02%)</title><rect x="0.8916%" y="1349" width="0.0168%" height="15" fill="rgb(247,123,22)"/><text x="1.1416%" y="1359.50"></text></g><g><title>tokio::runtime::thread_pool::Spawner::spawn (18 samples, 0.02%)</title><rect x="0.8916%" y="1333" width="0.0168%" height="15" fill="rgb(231,138,38)"/><text x="1.1416%" y="1343.50"></text></g><g><title>rho_runtime::storage::coordinator::Coordinator::handle_produce (62 samples, 0.06%)</title><rect x="1.1009%" y="1221" width="0.0579%" height="15" fill="rgb(231,145,46)"/><text x="1.3509%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rho_runtime::storage::coordinator::TransitPort&gt;&gt;&gt; (62 samples, 0.06%)</title><rect x="1.1009%" y="1205" width="0.0579%" height="15" fill="rgb(251,118,11)"/><text x="1.3509%" y="1215.50"></text></g><g><title>tokio::task::spawn::spawn (62 samples, 0.06%)</title><rect x="1.1009%" y="1189" width="0.0579%" height="15" fill="rgb(217,147,25)"/><text x="1.3509%" y="1199.50"></text></g><g><title>tokio::runtime::spawner::Spawner::spawn (62 samples, 0.06%)</title><rect x="1.1009%" y="1173" width="0.0579%" height="15" fill="rgb(247,81,37)"/><text x="1.3509%" y="1183.50"></text></g><g><title>tokio::runtime::thread_pool::Spawner::spawn (62 samples, 0.06%)</title><rect x="1.1009%" y="1157" width="0.0579%" height="15" fill="rgb(209,12,38)"/><text x="1.3509%" y="1167.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (62 samples, 0.06%)</title><rect x="1.1009%" y="1141" width="0.0579%" height="15" fill="rgb(227,1,9)"/><text x="1.3509%" y="1151.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (62 samples, 0.06%)</title><rect x="1.1009%" y="1125" width="0.0579%" height="15" fill="rgb(248,47,43)"/><text x="1.3509%" y="1135.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (62 samples, 0.06%)</title><rect x="1.1009%" y="1109" width="0.0579%" height="15" fill="rgb(221,10,30)"/><text x="1.3509%" y="1119.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (62 samples, 0.06%)</title><rect x="1.1009%" y="1093" width="0.0579%" height="15" fill="rgb(210,229,1)"/><text x="1.3509%" y="1103.50"></text></g><g><title>syscall (62 samples, 0.06%)</title><rect x="1.1009%" y="1077" width="0.0579%" height="15" fill="rgb(222,148,37)"/><text x="1.3509%" y="1087.50"></text></g><g><title>[unknown] (62 samples, 0.06%)</title><rect x="1.1009%" y="1061" width="0.0579%" height="15" fill="rgb(234,67,33)"/><text x="1.3509%" y="1071.50"></text></g><g><title>&lt;(tokio::sync::batch_semaphore::Semaphore,usize) as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (200 samples, 0.19%)</title><rect x="1.1598%" y="1173" width="0.1869%" height="15" fill="rgb(247,98,35)"/><text x="1.4098%" y="1183.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (199 samples, 0.19%)</title><rect x="1.1607%" y="1157" width="0.1860%" height="15" fill="rgb(247,138,52)"/><text x="1.4107%" y="1167.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (199 samples, 0.19%)</title><rect x="1.1607%" y="1141" width="0.1860%" height="15" fill="rgb(213,79,30)"/><text x="1.4107%" y="1151.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (199 samples, 0.19%)</title><rect x="1.1607%" y="1125" width="0.1860%" height="15" fill="rgb(246,177,23)"/><text x="1.4107%" y="1135.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (199 samples, 0.19%)</title><rect x="1.1607%" y="1109" width="0.1860%" height="15" fill="rgb(230,62,27)"/><text x="1.4107%" y="1119.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (196 samples, 0.18%)</title><rect x="1.1635%" y="1093" width="0.1832%" height="15" fill="rgb(216,154,8)"/><text x="1.4135%" y="1103.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (196 samples, 0.18%)</title><rect x="1.1635%" y="1077" width="0.1832%" height="15" fill="rgb(244,35,45)"/><text x="1.4135%" y="1087.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (27 samples, 0.03%)</title><rect x="1.3710%" y="1157" width="0.0252%" height="15" fill="rgb(251,115,12)"/><text x="1.6210%" y="1167.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (27 samples, 0.03%)</title><rect x="1.3710%" y="1141" width="0.0252%" height="15" fill="rgb(240,54,50)"/><text x="1.6210%" y="1151.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (27 samples, 0.03%)</title><rect x="1.3710%" y="1125" width="0.0252%" height="15" fill="rgb(233,84,52)"/><text x="1.6210%" y="1135.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_fold::{{closure}} (27 samples, 0.03%)</title><rect x="1.3710%" y="1109" width="0.0252%" height="15" fill="rgb(207,117,47)"/><text x="1.6210%" y="1119.50"></text></g><g><title>core::mem::drop (69 samples, 0.06%)</title><rect x="1.3962%" y="1157" width="0.0645%" height="15" fill="rgb(249,43,39)"/><text x="1.6462%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::sync::batch_semaphore::Waitlist&gt;&gt; (69 samples, 0.06%)</title><rect x="1.3962%" y="1141" width="0.0645%" height="15" fill="rgb(209,38,44)"/><text x="1.6462%" y="1151.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (69 samples, 0.06%)</title><rect x="1.3962%" y="1125" width="0.0645%" height="15" fill="rgb(236,212,23)"/><text x="1.6462%" y="1135.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (69 samples, 0.06%)</title><rect x="1.3962%" y="1109" width="0.0645%" height="15" fill="rgb(242,79,21)"/><text x="1.6462%" y="1119.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (63 samples, 0.06%)</title><rect x="1.4018%" y="1093" width="0.0589%" height="15" fill="rgb(211,96,35)"/><text x="1.6518%" y="1103.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (63 samples, 0.06%)</title><rect x="1.4018%" y="1077" width="0.0589%" height="15" fill="rgb(253,215,40)"/><text x="1.6518%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;[core::option::Option&lt;core::task::wake::Waker&gt;: 8]&gt; (25 samples, 0.02%)</title><rect x="1.4728%" y="1157" width="0.0234%" height="15" fill="rgb(211,81,21)"/><text x="1.7228%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt; (25 samples, 0.02%)</title><rect x="1.4728%" y="1141" width="0.0234%" height="15" fill="rgb(208,190,38)"/><text x="1.7228%" y="1151.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (283 samples, 0.26%)</title><rect x="1.5009%" y="1157" width="0.2645%" height="15" fill="rgb(235,213,38)"/><text x="1.7509%" y="1167.50"></text></g><g><title>core::sync::atomic::atomic_add (283 samples, 0.26%)</title><rect x="1.5009%" y="1141" width="0.2645%" height="15" fill="rgb(237,122,38)"/><text x="1.7509%" y="1151.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (456 samples, 0.43%)</title><rect x="1.3467%" y="1173" width="0.4262%" height="15" fill="rgb(244,218,35)"/><text x="1.5967%" y="1183.50"></text></g><g><title>[libc-2.31.so] (226 samples, 0.21%)</title><rect x="1.7887%" y="1157" width="0.2112%" height="15" fill="rgb(240,68,47)"/><text x="2.0387%" y="1167.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (106 samples, 0.10%)</title><rect x="2.0139%" y="1141" width="0.0991%" height="15" fill="rgb(210,16,53)"/><text x="2.2639%" y="1151.50"></text></g><g><title>core::sync::atomic::atomic_load (106 samples, 0.10%)</title><rect x="2.0139%" y="1125" width="0.0991%" height="15" fill="rgb(235,124,12)"/><text x="2.2639%" y="1135.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (655 samples, 0.61%)</title><rect x="2.1130%" y="1141" width="0.6121%" height="15" fill="rgb(224,169,11)"/><text x="2.3630%" y="1151.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::read::{{closure}} (655 samples, 0.61%)</title><rect x="2.1130%" y="1125" width="0.6121%" height="15" fill="rgb(250,166,2)"/><text x="2.3630%" y="1135.50"></text></g><g><title>core::ptr::read (655 samples, 0.61%)</title><rect x="2.1130%" y="1109" width="0.6121%" height="15" fill="rgb(242,216,29)"/><text x="2.3630%" y="1119.50"></text></g><g><title>[libc-2.31.so] (556 samples, 0.52%)</title><rect x="2.2055%" y="1093" width="0.5196%" height="15" fill="rgb(230,116,27)"/><text x="2.4555%" y="1103.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::read (788 samples, 0.74%)</title><rect x="1.9999%" y="1157" width="0.7364%" height="15" fill="rgb(228,99,48)"/><text x="2.2499%" y="1167.50"></text></g><g><title>__sched_yield (71 samples, 0.07%)</title><rect x="2.7485%" y="1141" width="0.0664%" height="15" fill="rgb(253,11,6)"/><text x="2.9985%" y="1151.50"></text></g><g><title>[unknown] (66 samples, 0.06%)</title><rect x="2.7532%" y="1125" width="0.0617%" height="15" fill="rgb(247,143,39)"/><text x="3.0032%" y="1135.50"></text></g><g><title>[unknown] (56 samples, 0.05%)</title><rect x="2.7625%" y="1109" width="0.0523%" height="15" fill="rgb(236,97,10)"/><text x="3.0125%" y="1119.50"></text></g><g><title>[unknown] (50 samples, 0.05%)</title><rect x="2.7681%" y="1093" width="0.0467%" height="15" fill="rgb(233,208,19)"/><text x="3.0181%" y="1103.50"></text></g><g><title>[unknown] (50 samples, 0.05%)</title><rect x="2.7681%" y="1077" width="0.0467%" height="15" fill="rgb(216,164,2)"/><text x="3.0181%" y="1087.50"></text></g><g><title>[unknown] (46 samples, 0.04%)</title><rect x="2.7719%" y="1061" width="0.0430%" height="15" fill="rgb(220,129,5)"/><text x="3.0219%" y="1071.50"></text></g><g><title>[unknown] (43 samples, 0.04%)</title><rect x="2.7747%" y="1045" width="0.0402%" height="15" fill="rgb(242,17,10)"/><text x="3.0247%" y="1055.50"></text></g><g><title>[unknown] (34 samples, 0.03%)</title><rect x="2.7831%" y="1029" width="0.0318%" height="15" fill="rgb(242,107,0)"/><text x="3.0331%" y="1039.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="2.7915%" y="1013" width="0.0234%" height="15" fill="rgb(251,28,31)"/><text x="3.0415%" y="1023.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="2.7971%" y="997" width="0.0178%" height="15" fill="rgb(233,223,10)"/><text x="3.0471%" y="1007.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::reclaim_blocks (108 samples, 0.10%)</title><rect x="2.7363%" y="1157" width="0.1009%" height="15" fill="rgb(215,21,27)"/><text x="2.9863%" y="1167.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::reclaim_block (16 samples, 0.01%)</title><rect x="2.8223%" y="1141" width="0.0150%" height="15" fill="rgb(232,23,21)"/><text x="3.0723%" y="1151.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::try_push (16 samples, 0.01%)</title><rect x="2.8223%" y="1125" width="0.0150%" height="15" fill="rgb(244,5,23)"/><text x="3.0723%" y="1135.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::compare_exchange (15 samples, 0.01%)</title><rect x="2.8233%" y="1109" width="0.0140%" height="15" fill="rgb(226,81,46)"/><text x="3.0733%" y="1119.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (15 samples, 0.01%)</title><rect x="2.8233%" y="1093" width="0.0140%" height="15" fill="rgb(247,70,30)"/><text x="3.0733%" y="1103.50"></text></g><g><title>__sched_yield (83 samples, 0.08%)</title><rect x="2.9961%" y="1141" width="0.0776%" height="15" fill="rgb(212,68,19)"/><text x="3.2461%" y="1151.50"></text></g><g><title>[unknown] (76 samples, 0.07%)</title><rect x="3.0027%" y="1125" width="0.0710%" height="15" fill="rgb(240,187,13)"/><text x="3.2527%" y="1135.50"></text></g><g><title>[unknown] (66 samples, 0.06%)</title><rect x="3.0120%" y="1109" width="0.0617%" height="15" fill="rgb(223,113,26)"/><text x="3.2620%" y="1119.50"></text></g><g><title>[unknown] (62 samples, 0.06%)</title><rect x="3.0158%" y="1093" width="0.0579%" height="15" fill="rgb(206,192,2)"/><text x="3.2658%" y="1103.50"></text></g><g><title>[unknown] (61 samples, 0.06%)</title><rect x="3.0167%" y="1077" width="0.0570%" height="15" fill="rgb(241,108,4)"/><text x="3.2667%" y="1087.50"></text></g><g><title>[unknown] (56 samples, 0.05%)</title><rect x="3.0214%" y="1061" width="0.0523%" height="15" fill="rgb(247,173,49)"/><text x="3.2714%" y="1071.50"></text></g><g><title>[unknown] (54 samples, 0.05%)</title><rect x="3.0233%" y="1045" width="0.0505%" height="15" fill="rgb(224,114,35)"/><text x="3.2733%" y="1055.50"></text></g><g><title>[unknown] (38 samples, 0.04%)</title><rect x="3.0382%" y="1029" width="0.0355%" height="15" fill="rgb(245,159,27)"/><text x="3.2882%" y="1039.50"></text></g><g><title>[unknown] (30 samples, 0.03%)</title><rect x="3.0457%" y="1013" width="0.0280%" height="15" fill="rgb(245,172,44)"/><text x="3.2957%" y="1023.50"></text></g><g><title>[unknown] (18 samples, 0.02%)</title><rect x="3.0569%" y="997" width="0.0168%" height="15" fill="rgb(236,23,11)"/><text x="3.3069%" y="1007.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,138 samples, 2.00%)</title><rect x="1.0803%" y="1285" width="1.9981%" height="15" fill="rgb(205,117,38)"/><text x="1.3303%" y="1295.50">&lt;..</text></g><g><title>tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::recv::{{closure}} (2,138 samples, 2.00%)</title><rect x="1.0803%" y="1269" width="1.9981%" height="15" fill="rgb(237,72,25)"/><text x="1.3303%" y="1279.50">t..</text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (2,133 samples, 1.99%)</title><rect x="1.0850%" y="1253" width="1.9934%" height="15" fill="rgb(244,70,9)"/><text x="1.3350%" y="1263.50">&lt;..</text></g><g><title>tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::recv::{{closure}}::{{closure}} (2,133 samples, 1.99%)</title><rect x="1.0850%" y="1237" width="1.9934%" height="15" fill="rgb(217,125,39)"/><text x="1.3350%" y="1247.50">t..</text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (2,054 samples, 1.92%)</title><rect x="1.1588%" y="1221" width="1.9196%" height="15" fill="rgb(235,36,10)"/><text x="1.4088%" y="1231.50">t..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (2,053 samples, 1.92%)</title><rect x="1.1598%" y="1205" width="1.9186%" height="15" fill="rgb(251,123,47)"/><text x="1.4098%" y="1215.50">t..</text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::{{closure}} (2,053 samples, 1.92%)</title><rect x="1.1598%" y="1189" width="1.9186%" height="15" fill="rgb(221,13,13)"/><text x="1.4098%" y="1199.50">t..</text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (1,397 samples, 1.31%)</title><rect x="1.7728%" y="1173" width="1.3056%" height="15" fill="rgb(238,131,9)"/><text x="2.0228%" y="1183.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::try_advancing_head (258 samples, 0.24%)</title><rect x="2.8373%" y="1157" width="0.2411%" height="15" fill="rgb(211,50,8)"/><text x="3.0873%" y="1167.50"></text></g><g><title>core::future::from_generator (53 samples, 0.05%)</title><rect x="3.1588%" y="1269" width="0.0495%" height="15" fill="rgb(245,182,24)"/><text x="3.4088%" y="1279.50"></text></g><g><title>[libc-2.31.so] (51 samples, 0.05%)</title><rect x="3.1606%" y="1253" width="0.0477%" height="15" fill="rgb(242,14,37)"/><text x="3.4106%" y="1263.50"></text></g><g><title>core::option::Option&lt;T&gt;::replace (14 samples, 0.01%)</title><rect x="3.2083%" y="1269" width="0.0131%" height="15" fill="rgb(246,228,12)"/><text x="3.4583%" y="1279.50"></text></g><g><title>core::mem::replace (14 samples, 0.01%)</title><rect x="3.2083%" y="1253" width="0.0131%" height="15" fill="rgb(213,55,15)"/><text x="3.4583%" y="1263.50"></text></g><g><title>core::mem::swap (14 samples, 0.01%)</title><rect x="3.2083%" y="1237" width="0.0131%" height="15" fill="rgb(209,9,3)"/><text x="3.4583%" y="1247.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (14 samples, 0.01%)</title><rect x="3.2083%" y="1221" width="0.0131%" height="15" fill="rgb(230,59,30)"/><text x="3.4583%" y="1231.50"></text></g><g><title>core::ptr::read (13 samples, 0.01%)</title><rect x="3.2092%" y="1205" width="0.0121%" height="15" fill="rgb(209,121,21)"/><text x="3.4592%" y="1215.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.01%)</title><rect x="3.2092%" y="1189" width="0.0121%" height="15" fill="rgb(220,109,13)"/><text x="3.4592%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rho_runtime::storage::coordinator::TransitPort&gt;&gt;&gt; (11 samples, 0.01%)</title><rect x="3.2214%" y="1269" width="0.0103%" height="15" fill="rgb(232,18,1)"/><text x="3.4714%" y="1279.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.01%)</title><rect x="3.2214%" y="1253" width="0.0103%" height="15" fill="rgb(215,41,42)"/><text x="3.4714%" y="1263.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::header (31 samples, 0.03%)</title><rect x="3.3148%" y="1237" width="0.0290%" height="15" fill="rgb(224,123,36)"/><text x="3.5648%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::join::JoinHandle&lt;()&gt;&gt; (232 samples, 0.22%)</title><rect x="3.2317%" y="1269" width="0.2168%" height="15" fill="rgb(240,125,3)"/><text x="3.4817%" y="1279.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::ops::drop::Drop&gt;::drop (232 samples, 0.22%)</title><rect x="3.2317%" y="1253" width="0.2168%" height="15" fill="rgb(205,98,50)"/><text x="3.4817%" y="1263.50"></text></g><g><title>tokio::runtime::task::state::State::drop_join_handle_fast (112 samples, 0.10%)</title><rect x="3.3438%" y="1237" width="0.1047%" height="15" fill="rgb(205,185,37)"/><text x="3.5938%" y="1247.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (79 samples, 0.07%)</title><rect x="3.3746%" y="1221" width="0.0738%" height="15" fill="rgb(238,207,15)"/><text x="3.6246%" y="1231.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (79 samples, 0.07%)</title><rect x="3.3746%" y="1205" width="0.0738%" height="15" fill="rgb(213,199,42)"/><text x="3.6246%" y="1215.50"></text></g><g><title>hashbrown::map::make_hash (37 samples, 0.03%)</title><rect x="3.4784%" y="1221" width="0.0346%" height="15" fill="rgb(235,201,11)"/><text x="3.7284%" y="1231.50"></text></g><g><title>&lt;blake3::Hash as core::hash::Hash&gt;::hash (37 samples, 0.03%)</title><rect x="3.4784%" y="1205" width="0.0346%" height="15" fill="rgb(207,46,11)"/><text x="3.7284%" y="1215.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (37 samples, 0.03%)</title><rect x="3.4784%" y="1189" width="0.0346%" height="15" fill="rgb(241,35,35)"/><text x="3.7284%" y="1199.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (37 samples, 0.03%)</title><rect x="3.4784%" y="1173" width="0.0346%" height="15" fill="rgb(243,32,47)"/><text x="3.7284%" y="1183.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (37 samples, 0.03%)</title><rect x="3.4784%" y="1157" width="0.0346%" height="15" fill="rgb(247,202,23)"/><text x="3.7284%" y="1167.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write (37 samples, 0.03%)</title><rect x="3.4784%" y="1141" width="0.0346%" height="15" fill="rgb(219,102,11)"/><text x="3.7284%" y="1151.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (37 samples, 0.03%)</title><rect x="3.4784%" y="1125" width="0.0346%" height="15" fill="rgb(243,110,44)"/><text x="3.7284%" y="1135.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (21 samples, 0.02%)</title><rect x="3.4933%" y="1109" width="0.0196%" height="15" fill="rgb(222,74,54)"/><text x="3.7433%" y="1119.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.01%)</title><rect x="3.5335%" y="1189" width="0.0103%" height="15" fill="rgb(216,99,12)"/><text x="3.7835%" y="1199.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.03%)</title><rect x="3.5307%" y="1205" width="0.0252%" height="15" fill="rgb(226,22,26)"/><text x="3.7807%" y="1215.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::bucket (13 samples, 0.01%)</title><rect x="3.5438%" y="1189" width="0.0121%" height="15" fill="rgb(217,163,10)"/><text x="3.7938%" y="1199.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (13 samples, 0.01%)</title><rect x="3.5438%" y="1173" width="0.0121%" height="15" fill="rgb(213,25,53)"/><text x="3.7938%" y="1183.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (13 samples, 0.01%)</title><rect x="3.5438%" y="1157" width="0.0121%" height="15" fill="rgb(252,105,26)"/><text x="3.7938%" y="1167.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (70 samples, 0.07%)</title><rect x="3.5615%" y="1173" width="0.0654%" height="15" fill="rgb(220,39,43)"/><text x="3.8115%" y="1183.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (70 samples, 0.07%)</title><rect x="3.5615%" y="1157" width="0.0654%" height="15" fill="rgb(229,68,48)"/><text x="3.8115%" y="1167.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (70 samples, 0.07%)</title><rect x="3.5615%" y="1141" width="0.0654%" height="15" fill="rgb(252,8,32)"/><text x="3.8115%" y="1151.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::iter_hash (78 samples, 0.07%)</title><rect x="3.5559%" y="1205" width="0.0729%" height="15" fill="rgb(223,20,43)"/><text x="3.8059%" y="1215.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T&gt;::new (78 samples, 0.07%)</title><rect x="3.5559%" y="1189" width="0.0729%" height="15" fill="rgb(229,81,49)"/><text x="3.8059%" y="1199.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry (241 samples, 0.23%)</title><rect x="3.4662%" y="1237" width="0.2252%" height="15" fill="rgb(236,28,36)"/><text x="3.7162%" y="1247.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (191 samples, 0.18%)</title><rect x="3.5130%" y="1221" width="0.1785%" height="15" fill="rgb(249,185,26)"/><text x="3.7630%" y="1231.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry::{{closure}} (67 samples, 0.06%)</title><rect x="3.6288%" y="1205" width="0.0626%" height="15" fill="rgb(249,174,33)"/><text x="3.8788%" y="1215.50"></text></g><g><title>&lt;blake3::Hash as core::cmp::PartialEq&gt;::eq (67 samples, 0.06%)</title><rect x="3.6288%" y="1189" width="0.0626%" height="15" fill="rgb(233,201,37)"/><text x="3.8788%" y="1199.50"></text></g><g><title>constant_time_eq::constant_time_eq_32 (67 samples, 0.06%)</title><rect x="3.6288%" y="1173" width="0.0626%" height="15" fill="rgb(221,78,26)"/><text x="3.8788%" y="1183.50"></text></g><g><title>constant_time_eq::constant_time_ne_32 (62 samples, 0.06%)</title><rect x="3.6335%" y="1157" width="0.0579%" height="15" fill="rgb(250,127,30)"/><text x="3.8835%" y="1167.50"></text></g><g><title>rho_runtime::storage::coordinator::Coordinator::get_or_create_transit_port (308 samples, 0.29%)</title><rect x="3.4485%" y="1269" width="0.2878%" height="15" fill="rgb(230,49,44)"/><text x="3.6985%" y="1279.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (297 samples, 0.28%)</title><rect x="3.4587%" y="1253" width="0.2776%" height="15" fill="rgb(229,67,23)"/><text x="3.7087%" y="1263.50"></text></g><g><title>std::collections::hash::map::map_entry (48 samples, 0.04%)</title><rect x="3.6915%" y="1237" width="0.0449%" height="15" fill="rgb(249,83,47)"/><text x="3.9415%" y="1247.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (1,113 samples, 1.04%)</title><rect x="3.7363%" y="1253" width="1.0401%" height="15" fill="rgb(215,43,3)"/><text x="3.9863%" y="1263.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1,112 samples, 1.04%)</title><rect x="3.7372%" y="1237" width="1.0392%" height="15" fill="rgb(238,154,13)"/><text x="3.9872%" y="1247.50"></text></g><g><title>core::sync::atomic::atomic_add (1,112 samples, 1.04%)</title><rect x="3.7372%" y="1221" width="1.0392%" height="15" fill="rgb(219,56,2)"/><text x="3.9872%" y="1231.50"></text></g><g><title>[libc-2.31.so] (310 samples, 0.29%)</title><rect x="4.7895%" y="1237" width="0.2897%" height="15" fill="rgb(233,0,4)"/><text x="5.0395%" y="1247.50"></text></g><g><title>__libc_malloc (1,343 samples, 1.26%)</title><rect x="5.0792%" y="1173" width="1.2551%" height="15" fill="rgb(235,30,7)"/><text x="5.3292%" y="1183.50"></text></g><g><title>[libc-2.31.so] (728 samples, 0.68%)</title><rect x="5.6540%" y="1157" width="0.6803%" height="15" fill="rgb(250,79,13)"/><text x="5.9040%" y="1167.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (1,679 samples, 1.57%)</title><rect x="4.7765%" y="1253" width="1.5691%" height="15" fill="rgb(211,146,34)"/><text x="5.0265%" y="1263.50"></text></g><g><title>alloc::alloc::exchange_malloc (1,355 samples, 1.27%)</title><rect x="5.0792%" y="1237" width="1.2663%" height="15" fill="rgb(228,22,38)"/><text x="5.3292%" y="1247.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,355 samples, 1.27%)</title><rect x="5.0792%" y="1221" width="1.2663%" height="15" fill="rgb(235,168,5)"/><text x="5.3292%" y="1231.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,355 samples, 1.27%)</title><rect x="5.0792%" y="1205" width="1.2663%" height="15" fill="rgb(221,155,16)"/><text x="5.3292%" y="1215.50"></text></g><g><title>alloc::alloc::alloc (1,355 samples, 1.27%)</title><rect x="5.0792%" y="1189" width="1.2663%" height="15" fill="rgb(215,215,53)"/><text x="5.3292%" y="1199.50"></text></g><g><title>tokio::sync::oneshot::channel (2,793 samples, 2.61%)</title><rect x="3.7363%" y="1269" width="2.6102%" height="15" fill="rgb(223,4,10)"/><text x="3.9863%" y="1279.50">to..</text></g><g><title>[libc-2.31.so] (72 samples, 0.07%)</title><rect x="6.4054%" y="1253" width="0.0673%" height="15" fill="rgb(234,103,6)"/><text x="6.6554%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::spawner::Spawner&gt; (56 samples, 0.05%)</title><rect x="6.4736%" y="1253" width="0.0523%" height="15" fill="rgb(227,97,0)"/><text x="6.7236%" y="1263.50"></text></g><g><title>tokio::runtime::context::spawn_handle (381 samples, 0.36%)</title><rect x="6.5259%" y="1253" width="0.3561%" height="15" fill="rgb(234,150,53)"/><text x="6.7759%" y="1263.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (374 samples, 0.35%)</title><rect x="6.5325%" y="1237" width="0.3495%" height="15" fill="rgb(228,201,54)"/><text x="6.7825%" y="1247.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (374 samples, 0.35%)</title><rect x="6.5325%" y="1221" width="0.3495%" height="15" fill="rgb(222,22,37)"/><text x="6.7825%" y="1231.50"></text></g><g><title>tokio::runtime::context::spawn_handle::{{closure}} (369 samples, 0.34%)</title><rect x="6.5371%" y="1205" width="0.3448%" height="15" fill="rgb(237,53,32)"/><text x="6.7871%" y="1215.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (364 samples, 0.34%)</title><rect x="6.5418%" y="1189" width="0.3402%" height="15" fill="rgb(233,25,53)"/><text x="6.7918%" y="1199.50"></text></g><g><title>tokio::runtime::context::spawn_handle::{{closure}}::{{closure}} (360 samples, 0.34%)</title><rect x="6.5455%" y="1173" width="0.3364%" height="15" fill="rgb(210,40,34)"/><text x="6.7955%" y="1183.50"></text></g><g><title>&lt;tokio::runtime::spawner::Spawner as core::clone::Clone&gt;::clone (360 samples, 0.34%)</title><rect x="6.5455%" y="1157" width="0.3364%" height="15" fill="rgb(241,220,44)"/><text x="6.7955%" y="1167.50"></text></g><g><title>[libc-2.31.so] (78 samples, 0.07%)</title><rect x="6.9250%" y="1189" width="0.0729%" height="15" fill="rgb(235,28,35)"/><text x="7.1750%" y="1199.50"></text></g><g><title>[libc-2.31.so] (103 samples, 0.10%)</title><rect x="7.0025%" y="1173" width="0.0963%" height="15" fill="rgb(210,56,17)"/><text x="7.2525%" y="1183.50"></text></g><g><title>[libc-2.31.so] (70 samples, 0.07%)</title><rect x="7.1081%" y="1157" width="0.0654%" height="15" fill="rgb(224,130,29)"/><text x="7.3581%" y="1167.50"></text></g><g><title>__libc_malloc (750 samples, 0.70%)</title><rect x="7.1745%" y="1093" width="0.7009%" height="15" fill="rgb(235,212,8)"/><text x="7.4245%" y="1103.50"></text></g><g><title>[libc-2.31.so] (398 samples, 0.37%)</title><rect x="7.5035%" y="1077" width="0.3719%" height="15" fill="rgb(223,33,50)"/><text x="7.7535%" y="1087.50"></text></g><g><title>__rdl_alloc (12 samples, 0.01%)</title><rect x="7.8754%" y="1093" width="0.0112%" height="15" fill="rgb(219,149,13)"/><text x="8.1254%" y="1103.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (12 samples, 0.01%)</title><rect x="7.8754%" y="1077" width="0.0112%" height="15" fill="rgb(250,156,29)"/><text x="8.1254%" y="1087.50"></text></g><g><title>tokio::runtime::task::joinable (1,037 samples, 0.97%)</title><rect x="6.9250%" y="1221" width="0.9691%" height="15" fill="rgb(216,193,19)"/><text x="7.1750%" y="1231.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::new (1,037 samples, 0.97%)</title><rect x="6.9250%" y="1205" width="0.9691%" height="15" fill="rgb(216,135,14)"/><text x="7.1750%" y="1215.50"></text></g><g><title>tokio::runtime::task::core::Cell&lt;T,S&gt;::new (959 samples, 0.90%)</title><rect x="6.9979%" y="1189" width="0.8962%" height="15" fill="rgb(241,47,5)"/><text x="7.2479%" y="1199.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (851 samples, 0.80%)</title><rect x="7.0988%" y="1173" width="0.7953%" height="15" fill="rgb(233,42,35)"/><text x="7.3488%" y="1183.50"></text></g><g><title>alloc::alloc::exchange_malloc (771 samples, 0.72%)</title><rect x="7.1736%" y="1157" width="0.7205%" height="15" fill="rgb(231,13,6)"/><text x="7.4236%" y="1167.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (771 samples, 0.72%)</title><rect x="7.1736%" y="1141" width="0.7205%" height="15" fill="rgb(207,181,40)"/><text x="7.4236%" y="1151.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (771 samples, 0.72%)</title><rect x="7.1736%" y="1125" width="0.7205%" height="15" fill="rgb(254,173,49)"/><text x="7.4236%" y="1135.50"></text></g><g><title>alloc::alloc::alloc (770 samples, 0.72%)</title><rect x="7.1745%" y="1109" width="0.7196%" height="15" fill="rgb(221,1,38)"/><text x="7.4245%" y="1119.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (342 samples, 0.32%)</title><rect x="8.0315%" y="1173" width="0.3196%" height="15" fill="rgb(206,124,46)"/><text x="8.2815%" y="1183.50"></text></g><g><title>core::sync::atomic::atomic_swap (342 samples, 0.32%)</title><rect x="8.0315%" y="1157" width="0.3196%" height="15" fill="rgb(249,21,11)"/><text x="8.2815%" y="1167.50"></text></g><g><title>core::mem::drop (72 samples, 0.07%)</title><rect x="8.3511%" y="1157" width="0.0673%" height="15" fill="rgb(222,201,40)"/><text x="8.6011%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,()&gt;&gt; (72 samples, 0.07%)</title><rect x="8.3511%" y="1141" width="0.0673%" height="15" fill="rgb(235,61,29)"/><text x="8.6011%" y="1151.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (72 samples, 0.07%)</title><rect x="8.3511%" y="1125" width="0.0673%" height="15" fill="rgb(219,207,3)"/><text x="8.6011%" y="1135.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (72 samples, 0.07%)</title><rect x="8.3511%" y="1109" width="0.0673%" height="15" fill="rgb(222,56,46)"/><text x="8.6011%" y="1119.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (62 samples, 0.06%)</title><rect x="8.3604%" y="1093" width="0.0579%" height="15" fill="rgb(239,76,54)"/><text x="8.6104%" y="1103.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (62 samples, 0.06%)</title><rect x="8.3604%" y="1077" width="0.0579%" height="15" fill="rgb(231,124,27)"/><text x="8.6104%" y="1087.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (47 samples, 0.04%)</title><rect x="8.4296%" y="1109" width="0.0439%" height="15" fill="rgb(249,195,6)"/><text x="8.6796%" y="1119.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (47 samples, 0.04%)</title><rect x="8.4296%" y="1093" width="0.0439%" height="15" fill="rgb(237,174,47)"/><text x="8.6796%" y="1103.50"></text></g><g><title>&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (620 samples, 0.58%)</title><rect x="7.8950%" y="1205" width="0.5794%" height="15" fill="rgb(206,201,31)"/><text x="8.1450%" y="1215.50"></text></g><g><title>tokio::runtime::park::Inner::unpark (524 samples, 0.49%)</title><rect x="7.9847%" y="1189" width="0.4897%" height="15" fill="rgb(231,57,52)"/><text x="8.2347%" y="1199.50"></text></g><g><title>tokio::runtime::park::Inner::unpark_condvar (132 samples, 0.12%)</title><rect x="8.3511%" y="1173" width="0.1234%" height="15" fill="rgb(248,177,22)"/><text x="8.6011%" y="1183.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (53 samples, 0.05%)</title><rect x="8.4249%" y="1157" width="0.0495%" height="15" fill="rgb(215,211,37)"/><text x="8.6749%" y="1167.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (53 samples, 0.05%)</title><rect x="8.4249%" y="1141" width="0.0495%" height="15" fill="rgb(241,128,51)"/><text x="8.6749%" y="1151.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (53 samples, 0.05%)</title><rect x="8.4249%" y="1125" width="0.0495%" height="15" fill="rgb(227,165,31)"/><text x="8.6749%" y="1135.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (10,400 samples, 9.72%)</title><rect x="8.5156%" y="1173" width="9.7193%" height="15" fill="rgb(228,167,24)"/><text x="8.7656%" y="1183.50">&lt;parking_lot_c..</text></g><g><title>syscall (10,376 samples, 9.70%)</title><rect x="8.5380%" y="1157" width="9.6968%" height="15" fill="rgb(228,143,12)"/><text x="8.7880%" y="1167.50">syscall</text></g><g><title>[unknown] (10,227 samples, 9.56%)</title><rect x="8.6772%" y="1141" width="9.5576%" height="15" fill="rgb(249,149,8)"/><text x="8.9272%" y="1151.50">[unknown]</text></g><g><title>[unknown] (10,007 samples, 9.35%)</title><rect x="8.8828%" y="1125" width="9.3520%" height="15" fill="rgb(243,35,44)"/><text x="9.1328%" y="1135.50">[unknown]</text></g><g><title>[unknown] (9,936 samples, 9.29%)</title><rect x="8.9492%" y="1109" width="9.2856%" height="15" fill="rgb(246,89,9)"/><text x="9.1992%" y="1119.50">[unknown]</text></g><g><title>[unknown] (9,835 samples, 9.19%)</title><rect x="9.0436%" y="1093" width="9.1912%" height="15" fill="rgb(233,213,13)"/><text x="9.2936%" y="1103.50">[unknown]</text></g><g><title>[unknown] (9,737 samples, 9.10%)</title><rect x="9.1352%" y="1077" width="9.0997%" height="15" fill="rgb(233,141,41)"/><text x="9.3852%" y="1087.50">[unknown]</text></g><g><title>[unknown] (8,367 samples, 7.82%)</title><rect x="10.4155%" y="1061" width="7.8193%" height="15" fill="rgb(239,167,4)"/><text x="10.6655%" y="1071.50">[unknown]</text></g><g><title>[unknown] (7,770 samples, 7.26%)</title><rect x="10.9734%" y="1045" width="7.2614%" height="15" fill="rgb(209,217,16)"/><text x="11.2234%" y="1055.50">[unknown]</text></g><g><title>[unknown] (6,942 samples, 6.49%)</title><rect x="11.7472%" y="1029" width="6.4876%" height="15" fill="rgb(219,88,35)"/><text x="11.9972%" y="1039.50">[unknown]</text></g><g><title>[unknown] (6,115 samples, 5.71%)</title><rect x="12.5201%" y="1013" width="5.7147%" height="15" fill="rgb(220,193,23)"/><text x="12.7701%" y="1023.50">[unknow..</text></g><g><title>[unknown] (4,509 samples, 4.21%)</title><rect x="14.0210%" y="997" width="4.2139%" height="15" fill="rgb(230,90,52)"/><text x="14.2710%" y="1007.50">[unkn..</text></g><g><title>[unknown] (2,512 samples, 2.35%)</title><rect x="15.8873%" y="981" width="2.3476%" height="15" fill="rgb(252,106,19)"/><text x="16.1373%" y="991.50">[..</text></g><g><title>[unknown] (917 samples, 0.86%)</title><rect x="17.3779%" y="965" width="0.8570%" height="15" fill="rgb(206,74,20)"/><text x="17.6279%" y="975.50"></text></g><g><title>[unknown] (295 samples, 0.28%)</title><rect x="17.9591%" y="949" width="0.2757%" height="15" fill="rgb(230,138,44)"/><text x="18.2091%" y="959.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="18.2115%" y="933" width="0.0234%" height="15" fill="rgb(235,182,43)"/><text x="18.4615%" y="943.50"></text></g><g><title>core::ops::function::FnOnce::call_once (17 samples, 0.02%)</title><rect x="18.2479%" y="1173" width="0.0159%" height="15" fill="rgb(242,16,51)"/><text x="18.4979%" y="1183.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow::{{closure}} (17 samples, 0.02%)</title><rect x="18.2479%" y="1157" width="0.0159%" height="15" fill="rgb(248,9,4)"/><text x="18.4979%" y="1167.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (77 samples, 0.07%)</title><rect x="18.2666%" y="1173" width="0.0720%" height="15" fill="rgb(210,31,22)"/><text x="18.5166%" y="1183.50"></text></g><g><title>core::sync::atomic::atomic_load (77 samples, 0.07%)</title><rect x="18.2666%" y="1157" width="0.0720%" height="15" fill="rgb(239,54,39)"/><text x="18.5166%" y="1167.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::should_timeout (207 samples, 0.19%)</title><rect x="18.3386%" y="1173" width="0.1935%" height="15" fill="rgb(230,99,41)"/><text x="18.5886%" y="1183.50"></text></g><g><title>std::time::Instant::now (183 samples, 0.17%)</title><rect x="18.3610%" y="1157" width="0.1710%" height="15" fill="rgb(253,106,12)"/><text x="18.6110%" y="1167.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (183 samples, 0.17%)</title><rect x="18.3610%" y="1141" width="0.1710%" height="15" fill="rgb(213,46,41)"/><text x="18.6110%" y="1151.50"></text></g><g><title>std::sys::unix::time::inner::now (183 samples, 0.17%)</title><rect x="18.3610%" y="1125" width="0.1710%" height="15" fill="rgb(215,133,35)"/><text x="18.6110%" y="1135.50"></text></g><g><title>__clock_gettime (174 samples, 0.16%)</title><rect x="18.3694%" y="1109" width="0.1626%" height="15" fill="rgb(213,28,5)"/><text x="18.6194%" y="1119.50"></text></g><g><title>__vdso_clock_gettime (171 samples, 0.16%)</title><rect x="18.3722%" y="1093" width="0.1598%" height="15" fill="rgb(215,77,49)"/><text x="18.6222%" y="1103.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (255 samples, 0.24%)</title><rect x="18.5320%" y="1173" width="0.2383%" height="15" fill="rgb(248,100,22)"/><text x="18.7820%" y="1183.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (212 samples, 0.20%)</title><rect x="18.5722%" y="1157" width="0.1981%" height="15" fill="rgb(208,67,9)"/><text x="18.8222%" y="1167.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (201 samples, 0.19%)</title><rect x="18.5825%" y="1141" width="0.1878%" height="15" fill="rgb(219,133,21)"/><text x="18.8325%" y="1151.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (201 samples, 0.19%)</title><rect x="18.5825%" y="1125" width="0.1878%" height="15" fill="rgb(246,46,29)"/><text x="18.8325%" y="1135.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (11,244 samples, 10.51%)</title><rect x="8.4744%" y="1205" width="10.5080%" height="15" fill="rgb(246,185,52)"/><text x="8.7244%" y="1215.50">parking_lot::co..</text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (11,238 samples, 10.50%)</title><rect x="8.4801%" y="1189" width="10.5024%" height="15" fill="rgb(252,136,11)"/><text x="8.7301%" y="1199.50">parking_lot_cor..</text></g><g><title>parking_lot_core::parking_lot::unlock_bucket_pair (227 samples, 0.21%)</title><rect x="18.7703%" y="1173" width="0.2121%" height="15" fill="rgb(219,138,53)"/><text x="19.0203%" y="1183.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::unlock (227 samples, 0.21%)</title><rect x="18.7703%" y="1157" width="0.2121%" height="15" fill="rgb(211,51,23)"/><text x="19.0203%" y="1167.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (221 samples, 0.21%)</title><rect x="18.7759%" y="1141" width="0.2065%" height="15" fill="rgb(247,221,28)"/><text x="19.0259%" y="1151.50"></text></g><g><title>core::sync::atomic::atomic_sub (221 samples, 0.21%)</title><rect x="18.7759%" y="1125" width="0.2065%" height="15" fill="rgb(251,222,45)"/><text x="19.0259%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::queue::Pointers&gt;&gt; (274 samples, 0.26%)</title><rect x="18.9984%" y="1157" width="0.2561%" height="15" fill="rgb(217,162,53)"/><text x="19.2484%" y="1167.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (274 samples, 0.26%)</title><rect x="18.9984%" y="1141" width="0.2561%" height="15" fill="rgb(229,93,14)"/><text x="19.2484%" y="1151.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (274 samples, 0.26%)</title><rect x="18.9984%" y="1125" width="0.2561%" height="15" fill="rgb(209,67,49)"/><text x="19.2484%" y="1135.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (269 samples, 0.25%)</title><rect x="19.0030%" y="1109" width="0.2514%" height="15" fill="rgb(213,87,29)"/><text x="19.2530%" y="1119.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (269 samples, 0.25%)</title><rect x="19.0030%" y="1093" width="0.2514%" height="15" fill="rgb(205,151,52)"/><text x="19.2530%" y="1103.50"></text></g><g><title>tokio::runtime::queue::Inject&lt;T&gt;::push (635 samples, 0.59%)</title><rect x="18.9927%" y="1173" width="0.5934%" height="15" fill="rgb(253,215,39)"/><text x="19.2427%" y="1183.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (344 samples, 0.32%)</title><rect x="19.2647%" y="1157" width="0.3215%" height="15" fill="rgb(221,220,41)"/><text x="19.5147%" y="1167.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (344 samples, 0.32%)</title><rect x="19.2647%" y="1141" width="0.3215%" height="15" fill="rgb(218,133,21)"/><text x="19.5147%" y="1151.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (344 samples, 0.32%)</title><rect x="19.2647%" y="1125" width="0.3215%" height="15" fill="rgb(221,193,43)"/><text x="19.5147%" y="1135.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (338 samples, 0.32%)</title><rect x="19.2703%" y="1109" width="0.3159%" height="15" fill="rgb(240,128,52)"/><text x="19.5203%" y="1119.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (338 samples, 0.32%)</title><rect x="19.2703%" y="1093" width="0.3159%" height="15" fill="rgb(253,114,12)"/><text x="19.5203%" y="1103.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (239 samples, 0.22%)</title><rect x="19.5937%" y="1141" width="0.2234%" height="15" fill="rgb(215,223,47)"/><text x="19.8437%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,alloc::vec::Vec&lt;usize&gt;&gt;&gt; (57 samples, 0.05%)</title><rect x="19.8170%" y="1141" width="0.0533%" height="15" fill="rgb(248,225,23)"/><text x="20.0670%" y="1151.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (57 samples, 0.05%)</title><rect x="19.8170%" y="1125" width="0.0533%" height="15" fill="rgb(250,108,0)"/><text x="20.0670%" y="1135.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (57 samples, 0.05%)</title><rect x="19.8170%" y="1109" width="0.0533%" height="15" fill="rgb(228,208,7)"/><text x="20.0670%" y="1119.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (55 samples, 0.05%)</title><rect x="19.8189%" y="1093" width="0.0514%" height="15" fill="rgb(244,45,10)"/><text x="20.0689%" y="1103.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (55 samples, 0.05%)</title><rect x="19.8189%" y="1077" width="0.0514%" height="15" fill="rgb(207,125,25)"/><text x="20.0689%" y="1087.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (60 samples, 0.06%)</title><rect x="19.8703%" y="1141" width="0.0561%" height="15" fill="rgb(210,195,18)"/><text x="20.1203%" y="1151.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (60 samples, 0.06%)</title><rect x="19.8703%" y="1125" width="0.0561%" height="15" fill="rgb(249,80,12)"/><text x="20.1203%" y="1135.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (60 samples, 0.06%)</title><rect x="19.8703%" y="1109" width="0.0561%" height="15" fill="rgb(221,65,9)"/><text x="20.1203%" y="1119.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (54 samples, 0.05%)</title><rect x="19.8759%" y="1093" width="0.0505%" height="15" fill="rgb(235,49,36)"/><text x="20.1259%" y="1103.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (54 samples, 0.05%)</title><rect x="19.8759%" y="1077" width="0.0505%" height="15" fill="rgb(225,32,20)"/><text x="20.1259%" y="1087.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (277 samples, 0.26%)</title><rect x="19.9320%" y="1125" width="0.2589%" height="15" fill="rgb(215,141,46)"/><text x="20.1820%" y="1135.50"></text></g><g><title>core::sync::atomic::atomic_add (277 samples, 0.26%)</title><rect x="19.9320%" y="1109" width="0.2589%" height="15" fill="rgb(250,160,47)"/><text x="20.1820%" y="1119.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::notify_should_wakeup (285 samples, 0.27%)</title><rect x="19.9264%" y="1141" width="0.2663%" height="15" fill="rgb(216,222,40)"/><text x="20.1764%" y="1151.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (20,532 samples, 19.19%)</title><rect x="1.0514%" y="1349" width="19.1881%" height="15" fill="rgb(234,217,39)"/><text x="1.3014%" y="1359.50">&lt;core::future::from_generator:..</text></g><g><title>rho_runtime::run::{{closure}} (20,514 samples, 19.17%)</title><rect x="1.0682%" y="1333" width="19.1712%" height="15" fill="rgb(207,178,40)"/><text x="1.3182%" y="1343.50">rho_runtime::run::{{closure}}</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (20,514 samples, 19.17%)</title><rect x="1.0682%" y="1317" width="19.1712%" height="15" fill="rgb(221,136,13)"/><text x="1.3182%" y="1327.50">&lt;core::future::from_generator:..</text></g><g><title>rho_runtime::storage::coordinator::Coordinator::run::{{closure}} (20,514 samples, 19.17%)</title><rect x="1.0682%" y="1301" width="19.1712%" height="15" fill="rgb(249,199,10)"/><text x="1.3182%" y="1311.50">rho_runtime::storage::coordina..</text></g><g><title>rho_runtime::storage::coordinator::Coordinator::handle_produce (18,363 samples, 17.16%)</title><rect x="3.0784%" y="1285" width="17.1610%" height="15" fill="rgb(249,222,13)"/><text x="3.3284%" y="1295.50">rho_runtime::storage::coord..</text></g><g><title>tokio::task::spawn::spawn (14,866 samples, 13.89%)</title><rect x="6.3465%" y="1269" width="13.8929%" height="15" fill="rgb(244,185,38)"/><text x="6.5965%" y="1279.50">tokio::task::spawn::s..</text></g><g><title>tokio::runtime::spawner::Spawner::spawn (14,293 samples, 13.36%)</title><rect x="6.8820%" y="1253" width="13.3574%" height="15" fill="rgb(236,202,9)"/><text x="7.1320%" y="1263.50">tokio::runtime::spaw..</text></g><g><title>tokio::runtime::thread_pool::Spawner::spawn (14,292 samples, 13.36%)</title><rect x="6.8829%" y="1237" width="13.3565%" height="15" fill="rgb(250,229,37)"/><text x="7.1329%" y="1247.50">tokio::runtime::thre..</text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (13,210 samples, 12.35%)</title><rect x="7.8941%" y="1221" width="12.3453%" height="15" fill="rgb(206,174,23)"/><text x="8.1441%" y="1231.50">tokio::runtime::th..</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (1,345 samples, 1.26%)</title><rect x="18.9825%" y="1205" width="1.2570%" height="15" fill="rgb(211,33,43)"/><text x="19.2325%" y="1215.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule::{{closure}} (1,335 samples, 1.25%)</title><rect x="18.9918%" y="1189" width="1.2476%" height="15" fill="rgb(245,58,50)"/><text x="19.2418%" y="1199.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::notify_parked (699 samples, 0.65%)</title><rect x="19.5862%" y="1173" width="0.6532%" height="15" fill="rgb(244,68,36)"/><text x="19.8362%" y="1183.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::worker_to_notify (691 samples, 0.65%)</title><rect x="19.5937%" y="1157" width="0.6458%" height="15" fill="rgb(232,229,15)"/><text x="19.8437%" y="1167.50"></text></g><g><title>tokio::runtime::thread_pool::idle::State::unpark_one (50 samples, 0.05%)</title><rect x="20.1927%" y="1141" width="0.0467%" height="15" fill="rgb(254,30,23)"/><text x="20.4427%" y="1151.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (50 samples, 0.05%)</title><rect x="20.1927%" y="1125" width="0.0467%" height="15" fill="rgb(235,160,14)"/><text x="20.4427%" y="1135.50"></text></g><g><title>core::sync::atomic::atomic_add (50 samples, 0.05%)</title><rect x="20.1927%" y="1109" width="0.0467%" height="15" fill="rgb(212,155,44)"/><text x="20.4427%" y="1119.50"></text></g><g><title>&lt;tokio::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (20 samples, 0.02%)</title><rect x="20.2432%" y="1349" width="0.0187%" height="15" fill="rgb(226,2,50)"/><text x="20.4932%" y="1359.50"></text></g><g><title>[libc-2.31.so] (29 samples, 0.03%)</title><rect x="20.2619%" y="1349" width="0.0271%" height="15" fill="rgb(234,177,6)"/><text x="20.5119%" y="1359.50"></text></g><g><title>__libc_malloc (24 samples, 0.02%)</title><rect x="20.2955%" y="1349" width="0.0224%" height="15" fill="rgb(217,24,9)"/><text x="20.5455%" y="1359.50"></text></g><g><title>__rust_probestack (21 samples, 0.02%)</title><rect x="20.3198%" y="1349" width="0.0196%" height="15" fill="rgb(220,13,46)"/><text x="20.5698%" y="1359.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry (19 samples, 0.02%)</title><rect x="20.3404%" y="1349" width="0.0178%" height="15" fill="rgb(239,221,27)"/><text x="20.5904%" y="1359.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (25 samples, 0.02%)</title><rect x="20.3581%" y="1349" width="0.0234%" height="15" fill="rgb(222,198,25)"/><text x="20.6081%" y="1359.50"></text></g><g><title>parking_lot_core::parking_lot::park (16 samples, 0.01%)</title><rect x="20.3665%" y="1333" width="0.0150%" height="15" fill="rgb(211,99,13)"/><text x="20.6165%" y="1343.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (16 samples, 0.01%)</title><rect x="20.3665%" y="1317" width="0.0150%" height="15" fill="rgb(232,111,31)"/><text x="20.6165%" y="1327.50"></text></g><g><title>rho_runtime::main (69 samples, 0.06%)</title><rect x="20.3852%" y="1349" width="0.0645%" height="15" fill="rgb(245,82,37)"/><text x="20.6352%" y="1359.50"></text></g><g><title>tokio::runtime::Runtime::block_on (69 samples, 0.06%)</title><rect x="20.3852%" y="1333" width="0.0645%" height="15" fill="rgb(227,149,46)"/><text x="20.6352%" y="1343.50"></text></g><g><title>tokio::runtime::thread_pool::ThreadPool::block_on (69 samples, 0.06%)</title><rect x="20.3852%" y="1317" width="0.0645%" height="15" fill="rgb(218,36,50)"/><text x="20.6352%" y="1327.50"></text></g><g><title>tokio::runtime::enter::Enter::block_on (69 samples, 0.06%)</title><rect x="20.3852%" y="1301" width="0.0645%" height="15" fill="rgb(226,80,48)"/><text x="20.6352%" y="1311.50"></text></g><g><title>tokio::park::thread::CachedParkThread::block_on (69 samples, 0.06%)</title><rect x="20.3852%" y="1285" width="0.0645%" height="15" fill="rgb(238,224,15)"/><text x="20.6352%" y="1295.50"></text></g><g><title>tokio::coop::budget (69 samples, 0.06%)</title><rect x="20.3852%" y="1269" width="0.0645%" height="15" fill="rgb(241,136,10)"/><text x="20.6352%" y="1279.50"></text></g><g><title>tokio::coop::with_budget (69 samples, 0.06%)</title><rect x="20.3852%" y="1253" width="0.0645%" height="15" fill="rgb(208,32,45)"/><text x="20.6352%" y="1263.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (69 samples, 0.06%)</title><rect x="20.3852%" y="1237" width="0.0645%" height="15" fill="rgb(207,135,9)"/><text x="20.6352%" y="1247.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (69 samples, 0.06%)</title><rect x="20.3852%" y="1221" width="0.0645%" height="15" fill="rgb(206,86,44)"/><text x="20.6352%" y="1231.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (69 samples, 0.06%)</title><rect x="20.3852%" y="1205" width="0.0645%" height="15" fill="rgb(245,177,15)"/><text x="20.6352%" y="1215.50"></text></g><g><title>tokio::park::thread::CachedParkThread::block_on::{{closure}} (69 samples, 0.06%)</title><rect x="20.3852%" y="1189" width="0.0645%" height="15" fill="rgb(206,64,50)"/><text x="20.6352%" y="1199.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (69 samples, 0.06%)</title><rect x="20.3852%" y="1173" width="0.0645%" height="15" fill="rgb(234,36,40)"/><text x="20.6352%" y="1183.50"></text></g><g><title>__rust_probestack (69 samples, 0.06%)</title><rect x="20.3852%" y="1157" width="0.0645%" height="15" fill="rgb(213,64,8)"/><text x="20.6352%" y="1167.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (16 samples, 0.01%)</title><rect x="20.4656%" y="1349" width="0.0150%" height="15" fill="rgb(210,75,36)"/><text x="20.7156%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::coop::RestoreOnPending&gt; (32 samples, 0.03%)</title><rect x="20.5207%" y="1077" width="0.0299%" height="15" fill="rgb(229,88,21)"/><text x="20.7707%" y="1087.50"></text></g><g><title>&lt;tokio::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (28 samples, 0.03%)</title><rect x="20.5245%" y="1061" width="0.0262%" height="15" fill="rgb(252,204,47)"/><text x="20.7745%" y="1071.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (16 samples, 0.01%)</title><rect x="20.5357%" y="1045" width="0.0150%" height="15" fill="rgb(208,77,27)"/><text x="20.7857%" y="1055.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (16 samples, 0.01%)</title><rect x="20.5357%" y="1029" width="0.0150%" height="15" fill="rgb(221,76,26)"/><text x="20.7857%" y="1039.50"></text></g><g><title>tokio::coop::CURRENT::__getit (47 samples, 0.04%)</title><rect x="20.5506%" y="1029" width="0.0439%" height="15" fill="rgb(225,139,18)"/><text x="20.8006%" y="1039.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (47 samples, 0.04%)</title><rect x="20.5506%" y="1013" width="0.0439%" height="15" fill="rgb(230,137,11)"/><text x="20.8006%" y="1023.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (41 samples, 0.04%)</title><rect x="20.5562%" y="997" width="0.0383%" height="15" fill="rgb(212,28,1)"/><text x="20.8062%" y="1007.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (41 samples, 0.04%)</title><rect x="20.5562%" y="981" width="0.0383%" height="15" fill="rgb(248,164,17)"/><text x="20.8062%" y="991.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (150 samples, 0.14%)</title><rect x="20.6020%" y="1013" width="0.1402%" height="15" fill="rgb(222,171,42)"/><text x="20.8520%" y="1023.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (150 samples, 0.14%)</title><rect x="20.6020%" y="997" width="0.1402%" height="15" fill="rgb(243,84,45)"/><text x="20.8520%" y="1007.50"></text></g><g><title>core::mem::replace (150 samples, 0.14%)</title><rect x="20.6020%" y="981" width="0.1402%" height="15" fill="rgb(252,49,23)"/><text x="20.8520%" y="991.50"></text></g><g><title>core::mem::swap (150 samples, 0.14%)</title><rect x="20.6020%" y="965" width="0.1402%" height="15" fill="rgb(215,19,7)"/><text x="20.8520%" y="975.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (150 samples, 0.14%)</title><rect x="20.6020%" y="949" width="0.1402%" height="15" fill="rgb(238,81,41)"/><text x="20.8520%" y="959.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (150 samples, 0.14%)</title><rect x="20.6020%" y="933" width="0.1402%" height="15" fill="rgb(210,199,37)"/><text x="20.8520%" y="943.50"></text></g><g><title>tokio::coop::poll_proceed (255 samples, 0.24%)</title><rect x="20.5506%" y="1077" width="0.2383%" height="15" fill="rgb(244,192,49)"/><text x="20.8006%" y="1087.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (255 samples, 0.24%)</title><rect x="20.5506%" y="1061" width="0.2383%" height="15" fill="rgb(226,211,11)"/><text x="20.8006%" y="1071.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (255 samples, 0.24%)</title><rect x="20.5506%" y="1045" width="0.2383%" height="15" fill="rgb(236,162,54)"/><text x="20.8006%" y="1055.50"></text></g><g><title>tokio::coop::poll_proceed::{{closure}} (208 samples, 0.19%)</title><rect x="20.5946%" y="1029" width="0.1944%" height="15" fill="rgb(220,229,9)"/><text x="20.8446%" y="1039.50"></text></g><g><title>tokio::coop::Budget::decrement (50 samples, 0.05%)</title><rect x="20.7422%" y="1013" width="0.0467%" height="15" fill="rgb(250,87,22)"/><text x="20.9922%" y="1023.50"></text></g><g><title>[libc-2.31.so] (254 samples, 0.24%)</title><rect x="20.8469%" y="1045" width="0.2374%" height="15" fill="rgb(239,43,17)"/><text x="21.0969%" y="1055.50"></text></g><g><title>tokio::coop::RestoreOnPending::made_progress (13 samples, 0.01%)</title><rect x="21.0871%" y="1045" width="0.0121%" height="15" fill="rgb(231,177,25)"/><text x="21.3371%" y="1055.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (13 samples, 0.01%)</title><rect x="21.0871%" y="1029" width="0.0121%" height="15" fill="rgb(219,179,1)"/><text x="21.3371%" y="1039.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (13 samples, 0.01%)</title><rect x="21.0871%" y="1013" width="0.0121%" height="15" fill="rgb(238,219,53)"/><text x="21.3371%" y="1023.50"></text></g><g><title>core::mem::replace (13 samples, 0.01%)</title><rect x="21.0871%" y="997" width="0.0121%" height="15" fill="rgb(232,167,36)"/><text x="21.3371%" y="1007.50"></text></g><g><title>core::mem::swap (13 samples, 0.01%)</title><rect x="21.0871%" y="981" width="0.0121%" height="15" fill="rgb(244,19,51)"/><text x="21.3371%" y="991.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (13 samples, 0.01%)</title><rect x="21.0871%" y="965" width="0.0121%" height="15" fill="rgb(224,6,22)"/><text x="21.3371%" y="975.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.01%)</title><rect x="21.0871%" y="949" width="0.0121%" height="15" fill="rgb(224,145,5)"/><text x="21.3371%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (142 samples, 0.13%)</title><rect x="21.1086%" y="1013" width="0.1327%" height="15" fill="rgb(234,130,49)"/><text x="21.3586%" y="1023.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (142 samples, 0.13%)</title><rect x="21.1086%" y="997" width="0.1327%" height="15" fill="rgb(254,6,2)"/><text x="21.3586%" y="1007.50"></text></g><g><title>&lt;&amp;core::task::wake::Waker as tokio::sync::task::atomic_waker::WakerRef&gt;::into_waker (62 samples, 0.06%)</title><rect x="21.2422%" y="981" width="0.0579%" height="15" fill="rgb(208,96,46)"/><text x="21.4922%" y="991.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (62 samples, 0.06%)</title><rect x="21.2422%" y="965" width="0.0579%" height="15" fill="rgb(239,3,39)"/><text x="21.4922%" y="975.50"></text></g><g><title>tokio::park::thread::clone (58 samples, 0.05%)</title><rect x="21.2459%" y="949" width="0.0542%" height="15" fill="rgb(233,210,1)"/><text x="21.4959%" y="959.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (58 samples, 0.05%)</title><rect x="21.2459%" y="933" width="0.0542%" height="15" fill="rgb(244,137,37)"/><text x="21.4959%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (58 samples, 0.05%)</title><rect x="21.2459%" y="917" width="0.0542%" height="15" fill="rgb(240,136,2)"/><text x="21.4959%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_add (58 samples, 0.05%)</title><rect x="21.2459%" y="901" width="0.0542%" height="15" fill="rgb(239,18,37)"/><text x="21.4959%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (867 samples, 0.81%)</title><rect x="20.4918%" y="1157" width="0.8103%" height="15" fill="rgb(218,185,22)"/><text x="20.7418%" y="1167.50"></text></g><g><title>tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::recv::{{closure}} (867 samples, 0.81%)</title><rect x="20.4918%" y="1141" width="0.8103%" height="15" fill="rgb(225,218,4)"/><text x="20.7418%" y="1151.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (867 samples, 0.81%)</title><rect x="20.4918%" y="1125" width="0.8103%" height="15" fill="rgb(230,182,32)"/><text x="20.7418%" y="1135.50"></text></g><g><title>tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::recv::{{closure}}::{{closure}} (867 samples, 0.81%)</title><rect x="20.4918%" y="1109" width="0.8103%" height="15" fill="rgb(242,56,43)"/><text x="20.7418%" y="1119.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (867 samples, 0.81%)</title><rect x="20.4918%" y="1093" width="0.8103%" height="15" fill="rgb(233,99,24)"/><text x="20.7418%" y="1103.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (549 samples, 0.51%)</title><rect x="20.7889%" y="1077" width="0.5131%" height="15" fill="rgb(234,209,42)"/><text x="21.0389%" y="1087.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::{{closure}} (539 samples, 0.50%)</title><rect x="20.7983%" y="1061" width="0.5037%" height="15" fill="rgb(227,7,12)"/><text x="21.0483%" y="1071.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (217 samples, 0.20%)</title><rect x="21.0992%" y="1045" width="0.2028%" height="15" fill="rgb(245,203,43)"/><text x="21.3492%" y="1055.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register (213 samples, 0.20%)</title><rect x="21.1029%" y="1029" width="0.1991%" height="15" fill="rgb(238,205,33)"/><text x="21.3529%" y="1039.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (65 samples, 0.06%)</title><rect x="21.2413%" y="1013" width="0.0607%" height="15" fill="rgb(231,56,7)"/><text x="21.4913%" y="1023.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register::{{closure}} (65 samples, 0.06%)</title><rect x="21.2413%" y="997" width="0.0607%" height="15" fill="rgb(244,186,29)"/><text x="21.4913%" y="1007.50"></text></g><g><title>tokio::runtime::enter::Enter::block_on (881 samples, 0.82%)</title><rect x="20.4852%" y="1349" width="0.8233%" height="15" fill="rgb(234,111,31)"/><text x="20.7352%" y="1359.50"></text></g><g><title>tokio::park::thread::CachedParkThread::block_on (881 samples, 0.82%)</title><rect x="20.4852%" y="1333" width="0.8233%" height="15" fill="rgb(241,149,10)"/><text x="20.7352%" y="1343.50"></text></g><g><title>tokio::coop::budget (881 samples, 0.82%)</title><rect x="20.4852%" y="1317" width="0.8233%" height="15" fill="rgb(249,206,44)"/><text x="20.7352%" y="1327.50"></text></g><g><title>tokio::coop::with_budget (881 samples, 0.82%)</title><rect x="20.4852%" y="1301" width="0.8233%" height="15" fill="rgb(251,153,30)"/><text x="20.7352%" y="1311.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (881 samples, 0.82%)</title><rect x="20.4852%" y="1285" width="0.8233%" height="15" fill="rgb(239,152,38)"/><text x="20.7352%" y="1295.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (881 samples, 0.82%)</title><rect x="20.4852%" y="1269" width="0.8233%" height="15" fill="rgb(249,139,47)"/><text x="20.7352%" y="1279.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (881 samples, 0.82%)</title><rect x="20.4852%" y="1253" width="0.8233%" height="15" fill="rgb(244,64,35)"/><text x="20.7352%" y="1263.50"></text></g><g><title>tokio::park::thread::CachedParkThread::block_on::{{closure}} (881 samples, 0.82%)</title><rect x="20.4852%" y="1237" width="0.8233%" height="15" fill="rgb(216,46,15)"/><text x="20.7352%" y="1247.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (881 samples, 0.82%)</title><rect x="20.4852%" y="1221" width="0.8233%" height="15" fill="rgb(250,74,19)"/><text x="20.7352%" y="1231.50"></text></g><g><title>rho_runtime::run::{{closure}} (874 samples, 0.82%)</title><rect x="20.4918%" y="1205" width="0.8168%" height="15" fill="rgb(249,42,33)"/><text x="20.7418%" y="1215.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (874 samples, 0.82%)</title><rect x="20.4918%" y="1189" width="0.8168%" height="15" fill="rgb(242,149,17)"/><text x="20.7418%" y="1199.50"></text></g><g><title>rho_runtime::storage::coordinator::Coordinator::run::{{closure}} (874 samples, 0.82%)</title><rect x="20.4918%" y="1173" width="0.8168%" height="15" fill="rgb(244,29,21)"/><text x="20.7418%" y="1183.50"></text></g><g><title>tokio::runtime::queue::Inject&lt;T&gt;::push (12 samples, 0.01%)</title><rect x="21.3085%" y="1349" width="0.0112%" height="15" fill="rgb(220,130,37)"/><text x="21.5585%" y="1359.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (179 samples, 0.17%)</title><rect x="21.5095%" y="1141" width="0.1673%" height="15" fill="rgb(211,67,2)"/><text x="21.7595%" y="1151.50"></text></g><g><title>tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::recv::{{closure}} (179 samples, 0.17%)</title><rect x="21.5095%" y="1125" width="0.1673%" height="15" fill="rgb(235,68,52)"/><text x="21.7595%" y="1135.50"></text></g><g><title>[libc-2.31.so] (92 samples, 0.09%)</title><rect x="21.5908%" y="1109" width="0.0860%" height="15" fill="rgb(246,142,3)"/><text x="21.8408%" y="1119.50"></text></g><g><title>tokio::runtime::thread_pool::ThreadPool::block_on (708 samples, 0.66%)</title><rect x="21.3263%" y="1349" width="0.6617%" height="15" fill="rgb(241,25,7)"/><text x="21.5763%" y="1359.50"></text></g><g><title>tokio::runtime::enter::Enter::block_on (708 samples, 0.66%)</title><rect x="21.3263%" y="1333" width="0.6617%" height="15" fill="rgb(242,119,39)"/><text x="21.5763%" y="1343.50"></text></g><g><title>tokio::park::thread::CachedParkThread::block_on (708 samples, 0.66%)</title><rect x="21.3263%" y="1317" width="0.6617%" height="15" fill="rgb(241,98,45)"/><text x="21.5763%" y="1327.50"></text></g><g><title>tokio::coop::budget (708 samples, 0.66%)</title><rect x="21.3263%" y="1301" width="0.6617%" height="15" fill="rgb(254,28,30)"/><text x="21.5763%" y="1311.50"></text></g><g><title>tokio::coop::with_budget (708 samples, 0.66%)</title><rect x="21.3263%" y="1285" width="0.6617%" height="15" fill="rgb(241,142,54)"/><text x="21.5763%" y="1295.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (708 samples, 0.66%)</title><rect x="21.3263%" y="1269" width="0.6617%" height="15" fill="rgb(222,85,15)"/><text x="21.5763%" y="1279.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (708 samples, 0.66%)</title><rect x="21.3263%" y="1253" width="0.6617%" height="15" fill="rgb(210,85,47)"/><text x="21.5763%" y="1263.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (708 samples, 0.66%)</title><rect x="21.3263%" y="1237" width="0.6617%" height="15" fill="rgb(224,206,25)"/><text x="21.5763%" y="1247.50"></text></g><g><title>tokio::park::thread::CachedParkThread::block_on::{{closure}} (708 samples, 0.66%)</title><rect x="21.3263%" y="1221" width="0.6617%" height="15" fill="rgb(243,201,19)"/><text x="21.5763%" y="1231.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (708 samples, 0.66%)</title><rect x="21.3263%" y="1205" width="0.6617%" height="15" fill="rgb(236,59,4)"/><text x="21.5763%" y="1215.50"></text></g><g><title>rho_runtime::run::{{closure}} (705 samples, 0.66%)</title><rect x="21.3291%" y="1189" width="0.6589%" height="15" fill="rgb(254,179,45)"/><text x="21.5791%" y="1199.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (689 samples, 0.64%)</title><rect x="21.3441%" y="1173" width="0.6439%" height="15" fill="rgb(226,14,10)"/><text x="21.5941%" y="1183.50"></text></g><g><title>rho_runtime::storage::coordinator::Coordinator::run::{{closure}} (689 samples, 0.64%)</title><rect x="21.3441%" y="1157" width="0.6439%" height="15" fill="rgb(244,27,41)"/><text x="21.5941%" y="1167.50"></text></g><g><title>[libc-2.31.so] (333 samples, 0.31%)</title><rect x="21.6768%" y="1141" width="0.3112%" height="15" fill="rgb(235,35,32)"/><text x="21.9268%" y="1151.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (18 samples, 0.02%)</title><rect x="22.0113%" y="1349" width="0.0168%" height="15" fill="rgb(218,68,31)"/><text x="22.2613%" y="1359.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (51 samples, 0.05%)</title><rect x="22.0281%" y="1349" width="0.0477%" height="15" fill="rgb(207,120,37)"/><text x="22.2781%" y="1359.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::read (17 samples, 0.02%)</title><rect x="22.0599%" y="1333" width="0.0159%" height="15" fill="rgb(227,98,0)"/><text x="22.3099%" y="1343.50"></text></g><g><title>[unknown] (22,652 samples, 21.17%)</title><rect x="0.9084%" y="1365" width="21.1693%" height="15" fill="rgb(207,7,3)"/><text x="1.1584%" y="1375.50">[unknown]</text></g><g><title>tokio::park::thread::CURRENT_PARKER::__getit (17 samples, 0.02%)</title><rect x="22.3076%" y="1061" width="0.0159%" height="15" fill="rgb(206,98,19)"/><text x="22.5576%" y="1071.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (17 samples, 0.02%)</title><rect x="22.3076%" y="1045" width="0.0159%" height="15" fill="rgb(217,5,26)"/><text x="22.5576%" y="1055.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (13 samples, 0.01%)</title><rect x="22.3113%" y="1029" width="0.0121%" height="15" fill="rgb(235,190,38)"/><text x="22.5613%" y="1039.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (13 samples, 0.01%)</title><rect x="22.3113%" y="1013" width="0.0121%" height="15" fill="rgb(247,86,24)"/><text x="22.5613%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,()&gt;&gt; (88 samples, 0.08%)</title><rect x="22.5188%" y="1013" width="0.0822%" height="15" fill="rgb(205,101,16)"/><text x="22.7688%" y="1023.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (88 samples, 0.08%)</title><rect x="22.5188%" y="997" width="0.0822%" height="15" fill="rgb(246,168,33)"/><text x="22.7688%" y="1007.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (76 samples, 0.07%)</title><rect x="22.5300%" y="981" width="0.0710%" height="15" fill="rgb(231,114,1)"/><text x="22.7800%" y="991.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (71 samples, 0.07%)</title><rect x="22.5347%" y="965" width="0.0664%" height="15" fill="rgb(207,184,53)"/><text x="22.7847%" y="975.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (71 samples, 0.07%)</title><rect x="22.5347%" y="949" width="0.0664%" height="15" fill="rgb(224,95,51)"/><text x="22.7847%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (351 samples, 0.33%)</title><rect x="22.6010%" y="1013" width="0.3280%" height="15" fill="rgb(212,188,45)"/><text x="22.8510%" y="1023.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (351 samples, 0.33%)</title><rect x="22.6010%" y="997" width="0.3280%" height="15" fill="rgb(223,154,38)"/><text x="22.8510%" y="1007.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (120 samples, 0.11%)</title><rect x="22.9459%" y="965" width="0.1121%" height="15" fill="rgb(251,22,52)"/><text x="23.1959%" y="975.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (114 samples, 0.11%)</title><rect x="22.9515%" y="949" width="0.1065%" height="15" fill="rgb(229,209,22)"/><text x="23.2015%" y="959.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (114 samples, 0.11%)</title><rect x="22.9515%" y="933" width="0.1065%" height="15" fill="rgb(234,138,34)"/><text x="23.2015%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicI32::load (540 samples, 0.50%)</title><rect x="23.0851%" y="901" width="0.5047%" height="15" fill="rgb(212,95,11)"/><text x="23.3351%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_load (540 samples, 0.50%)</title><rect x="23.0851%" y="885" width="0.5047%" height="15" fill="rgb(240,179,47)"/><text x="23.3351%" y="895.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (10,775 samples, 10.07%)</title><rect x="23.0832%" y="917" width="10.0697%" height="15" fill="rgb(240,163,11)"/><text x="23.3332%" y="927.50">&lt;parking_lot_co..</text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (10,233 samples, 9.56%)</title><rect x="23.5898%" y="901" width="9.5632%" height="15" fill="rgb(236,37,12)"/><text x="23.8398%" y="911.50">parking_lot_co..</text></g><g><title>syscall (10,228 samples, 9.56%)</title><rect x="23.5944%" y="885" width="9.5585%" height="15" fill="rgb(232,164,16)"/><text x="23.8444%" y="895.50">syscall</text></g><g><title>[unknown] (10,021 samples, 9.37%)</title><rect x="23.7879%" y="869" width="9.3651%" height="15" fill="rgb(244,205,15)"/><text x="24.0379%" y="879.50">[unknown]</text></g><g><title>[unknown] (9,479 samples, 8.86%)</title><rect x="24.2944%" y="853" width="8.8585%" height="15" fill="rgb(223,117,47)"/><text x="24.5444%" y="863.50">[unknown]</text></g><g><title>[unknown] (9,330 samples, 8.72%)</title><rect x="24.4337%" y="837" width="8.7193%" height="15" fill="rgb(244,107,35)"/><text x="24.6837%" y="847.50">[unknown]</text></g><g><title>[unknown] (9,174 samples, 8.57%)</title><rect x="24.5795%" y="821" width="8.5735%" height="15" fill="rgb(205,140,8)"/><text x="24.8295%" y="831.50">[unknown]</text></g><g><title>[unknown] (8,955 samples, 8.37%)</title><rect x="24.7841%" y="805" width="8.3688%" height="15" fill="rgb(228,84,46)"/><text x="25.0341%" y="815.50">[unknown]</text></g><g><title>[unknown] (8,463 samples, 7.91%)</title><rect x="25.2439%" y="789" width="7.9091%" height="15" fill="rgb(254,188,9)"/><text x="25.4939%" y="799.50">[unknown]</text></g><g><title>[unknown] (7,461 samples, 6.97%)</title><rect x="26.1803%" y="773" width="6.9726%" height="15" fill="rgb(206,112,54)"/><text x="26.4303%" y="783.50">[unknown]</text></g><g><title>[unknown] (6,921 samples, 6.47%)</title><rect x="26.6850%" y="757" width="6.4680%" height="15" fill="rgb(216,84,49)"/><text x="26.9350%" y="767.50">[unknown]</text></g><g><title>[unknown] (6,219 samples, 5.81%)</title><rect x="27.3410%" y="741" width="5.8119%" height="15" fill="rgb(214,194,35)"/><text x="27.5910%" y="751.50">[unknow..</text></g><g><title>[unknown] (4,666 samples, 4.36%)</title><rect x="28.7924%" y="725" width="4.3606%" height="15" fill="rgb(249,28,3)"/><text x="29.0424%" y="735.50">[unkn..</text></g><g><title>[unknown] (3,020 samples, 2.82%)</title><rect x="30.3306%" y="709" width="2.8223%" height="15" fill="rgb(222,56,52)"/><text x="30.5806%" y="719.50">[u..</text></g><g><title>[unknown] (2,037 samples, 1.90%)</title><rect x="31.2493%" y="693" width="1.9037%" height="15" fill="rgb(245,217,50)"/><text x="31.4993%" y="703.50">[..</text></g><g><title>[unknown] (1,087 samples, 1.02%)</title><rect x="32.1371%" y="677" width="1.0158%" height="15" fill="rgb(213,201,24)"/><text x="32.3871%" y="687.50"></text></g><g><title>[unknown] (620 samples, 0.58%)</title><rect x="32.5735%" y="661" width="0.5794%" height="15" fill="rgb(248,116,28)"/><text x="32.8235%" y="671.50"></text></g><g><title>[unknown] (38 samples, 0.04%)</title><rect x="33.1175%" y="645" width="0.0355%" height="15" fill="rgb(219,72,43)"/><text x="33.3675%" y="655.50"></text></g><g><title>[unknown] (21 samples, 0.02%)</title><rect x="33.1333%" y="629" width="0.0196%" height="15" fill="rgb(209,138,14)"/><text x="33.3833%" y="639.50"></text></g><g><title>[unknown] (21 samples, 0.02%)</title><rect x="33.1333%" y="613" width="0.0196%" height="15" fill="rgb(222,18,33)"/><text x="33.3833%" y="623.50"></text></g><g><title>[unknown] (17 samples, 0.02%)</title><rect x="33.1371%" y="597" width="0.0159%" height="15" fill="rgb(213,199,7)"/><text x="33.3871%" y="607.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="33.1380%" y="581" width="0.0150%" height="15" fill="rgb(250,110,10)"/><text x="33.3880%" y="591.50"></text></g><g><title>core::ops::function::FnOnce::call_once (60 samples, 0.06%)</title><rect x="33.1614%" y="917" width="0.0561%" height="15" fill="rgb(248,123,6)"/><text x="33.4114%" y="927.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal::{{closure}} (60 samples, 0.06%)</title><rect x="33.1614%" y="901" width="0.0561%" height="15" fill="rgb(206,91,31)"/><text x="33.4114%" y="911.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (55 samples, 0.05%)</title><rect x="33.1660%" y="885" width="0.0514%" height="15" fill="rgb(211,154,13)"/><text x="33.4160%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (50 samples, 0.05%)</title><rect x="33.1707%" y="869" width="0.0467%" height="15" fill="rgb(225,148,7)"/><text x="33.4207%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (50 samples, 0.05%)</title><rect x="33.1707%" y="853" width="0.0467%" height="15" fill="rgb(220,160,43)"/><text x="33.4207%" y="863.50"></text></g><g><title>parking_lot_core::parking_lot::get_hashtable (12 samples, 0.01%)</title><rect x="33.2380%" y="901" width="0.0112%" height="15" fill="rgb(213,52,39)"/><text x="33.4880%" y="911.50"></text></g><g><title>parking_lot_core::parking_lot::hash (11 samples, 0.01%)</title><rect x="33.2492%" y="901" width="0.0103%" height="15" fill="rgb(243,137,7)"/><text x="33.4992%" y="911.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket (353 samples, 0.33%)</title><rect x="33.2212%" y="917" width="0.3299%" height="15" fill="rgb(230,79,13)"/><text x="33.4712%" y="927.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (312 samples, 0.29%)</title><rect x="33.2595%" y="901" width="0.2916%" height="15" fill="rgb(247,105,23)"/><text x="33.5095%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (305 samples, 0.29%)</title><rect x="33.2660%" y="885" width="0.2850%" height="15" fill="rgb(223,179,41)"/><text x="33.5160%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (305 samples, 0.29%)</title><rect x="33.2660%" y="869" width="0.2850%" height="15" fill="rgb(218,9,34)"/><text x="33.5160%" y="879.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (11,293 samples, 10.55%)</title><rect x="23.0655%" y="933" width="10.5538%" height="15" fill="rgb(222,106,8)"/><text x="23.3155%" y="943.50">parking_lot_cor..</text></g><g><title>parking_lot_core::word_lock::WordLock::unlock (73 samples, 0.07%)</title><rect x="33.5511%" y="917" width="0.0682%" height="15" fill="rgb(211,220,0)"/><text x="33.8011%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (70 samples, 0.07%)</title><rect x="33.5539%" y="901" width="0.0654%" height="15" fill="rgb(229,52,16)"/><text x="33.8039%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_sub (70 samples, 0.07%)</title><rect x="33.5539%" y="885" width="0.0654%" height="15" fill="rgb(212,155,18)"/><text x="33.8039%" y="895.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (11,463 samples, 10.71%)</title><rect x="22.9290%" y="1013" width="10.7127%" height="15" fill="rgb(242,21,14)"/><text x="23.1790%" y="1023.50">tokio::loom::std..</text></g><g><title>parking_lot::condvar::Condvar::wait (11,463 samples, 10.71%)</title><rect x="22.9290%" y="997" width="10.7127%" height="15" fill="rgb(222,19,48)"/><text x="23.1790%" y="1007.50">parking_lot::con..</text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (11,460 samples, 10.71%)</title><rect x="22.9319%" y="981" width="10.7099%" height="15" fill="rgb(232,45,27)"/><text x="23.1819%" y="991.50">parking_lot::con..</text></g><g><title>parking_lot_core::parking_lot::park (11,325 samples, 10.58%)</title><rect x="23.0580%" y="965" width="10.5837%" height="15" fill="rgb(249,103,42)"/><text x="23.3080%" y="975.50">parking_lot_cor..</text></g><g><title>parking_lot_core::parking_lot::with_thread_data (11,325 samples, 10.58%)</title><rect x="23.0580%" y="949" width="10.5837%" height="15" fill="rgb(246,81,33)"/><text x="23.3080%" y="959.50">parking_lot_cor..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (24 samples, 0.02%)</title><rect x="33.6193%" y="933" width="0.0224%" height="15" fill="rgb(252,33,42)"/><text x="33.8693%" y="943.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__getit (11 samples, 0.01%)</title><rect x="33.6315%" y="917" width="0.0103%" height="15" fill="rgb(209,212,41)"/><text x="33.8815%" y="927.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (11 samples, 0.01%)</title><rect x="33.6315%" y="901" width="0.0103%" height="15" fill="rgb(207,154,6)"/><text x="33.8815%" y="911.50"></text></g><g><title>&lt;tokio::park::thread::CachedParkThread as tokio::park::Park&gt;::park (12,186 samples, 11.39%)</title><rect x="22.3076%" y="1109" width="11.3884%" height="15" fill="rgb(223,64,47)"/><text x="22.5576%" y="1119.50">&lt;tokio::park::thr..</text></g><g><title>tokio::park::thread::CachedParkThread::with_current (12,186 samples, 11.39%)</title><rect x="22.3076%" y="1093" width="11.3884%" height="15" fill="rgb(211,161,38)"/><text x="22.5576%" y="1103.50">tokio::park::thre..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (12,186 samples, 11.39%)</title><rect x="22.3076%" y="1077" width="11.3884%" height="15" fill="rgb(219,138,40)"/><text x="22.5576%" y="1087.50">std::thread::loca..</text></g><g><title>tokio::park::thread::CachedParkThread::with_current::{{closure}} (12,169 samples, 11.37%)</title><rect x="22.3235%" y="1061" width="11.3725%" height="15" fill="rgb(241,228,46)"/><text x="22.5735%" y="1071.50">tokio::park::thre..</text></g><g><title>&lt;tokio::park::thread::CachedParkThread as tokio::park::Park&gt;::park::{{closure}} (12,169 samples, 11.37%)</title><rect x="22.3235%" y="1045" width="11.3725%" height="15" fill="rgb(223,209,38)"/><text x="22.5735%" y="1055.50">&lt;tokio::park::thr..</text></g><g><title>tokio::park::thread::Inner::park (11,972 samples, 11.19%)</title><rect x="22.5076%" y="1029" width="11.1884%" height="15" fill="rgb(236,164,45)"/><text x="22.7576%" y="1039.50">tokio::park::thr..</text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (58 samples, 0.05%)</title><rect x="33.6417%" y="1013" width="0.0542%" height="15" fill="rgb(231,15,5)"/><text x="33.8917%" y="1023.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (58 samples, 0.05%)</title><rect x="33.6417%" y="997" width="0.0542%" height="15" fill="rgb(252,35,15)"/><text x="33.8917%" y="1007.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (58 samples, 0.05%)</title><rect x="33.6417%" y="981" width="0.0542%" height="15" fill="rgb(248,181,18)"/><text x="33.8917%" y="991.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (55 samples, 0.05%)</title><rect x="33.6445%" y="965" width="0.0514%" height="15" fill="rgb(233,39,42)"/><text x="33.8945%" y="975.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (55 samples, 0.05%)</title><rect x="33.6445%" y="949" width="0.0514%" height="15" fill="rgb(238,110,33)"/><text x="33.8945%" y="959.50"></text></g><g><title>tokio::coop::Budget::initial (23 samples, 0.02%)</title><rect x="33.6959%" y="1093" width="0.0215%" height="15" fill="rgb(233,195,10)"/><text x="33.9459%" y="1103.50"></text></g><g><title>tokio::coop::CURRENT::__getit (27 samples, 0.03%)</title><rect x="33.7184%" y="1045" width="0.0252%" height="15" fill="rgb(254,105,3)"/><text x="33.9684%" y="1055.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (27 samples, 0.03%)</title><rect x="33.7184%" y="1029" width="0.0252%" height="15" fill="rgb(221,225,9)"/><text x="33.9684%" y="1039.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (25 samples, 0.02%)</title><rect x="33.7202%" y="1013" width="0.0234%" height="15" fill="rgb(224,227,45)"/><text x="33.9702%" y="1023.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (25 samples, 0.02%)</title><rect x="33.7202%" y="997" width="0.0234%" height="15" fill="rgb(229,198,43)"/><text x="33.9702%" y="1007.50"></text></g><g><title>std::panic::catch_unwind (12,527 samples, 11.71%)</title><rect x="22.0833%" y="1301" width="11.7070%" height="15" fill="rgb(206,209,35)"/><text x="22.3333%" y="1311.50">std::panic::catch..</text></g><g><title>std::panicking::try (12,527 samples, 11.71%)</title><rect x="22.0833%" y="1285" width="11.7070%" height="15" fill="rgb(245,195,53)"/><text x="22.3333%" y="1295.50">std::panicking::t..</text></g><g><title>std::panicking::try::do_call (12,527 samples, 11.71%)</title><rect x="22.0833%" y="1269" width="11.7070%" height="15" fill="rgb(240,92,26)"/><text x="22.3333%" y="1279.50">std::panicking::t..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (12,527 samples, 11.71%)</title><rect x="22.0833%" y="1253" width="11.7070%" height="15" fill="rgb(207,40,23)"/><text x="22.3333%" y="1263.50">core::ops::functi..</text></g><g><title>std::rt::lang_start::{{closure}} (12,527 samples, 11.71%)</title><rect x="22.0833%" y="1237" width="11.7070%" height="15" fill="rgb(223,111,35)"/><text x="22.3333%" y="1247.50">std::rt::lang_sta..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (12,527 samples, 11.71%)</title><rect x="22.0833%" y="1221" width="11.7070%" height="15" fill="rgb(229,147,28)"/><text x="22.3333%" y="1231.50">std::sys_common::..</text></g><g><title>core::ops::function::FnOnce::call_once (12,527 samples, 11.71%)</title><rect x="22.0833%" y="1205" width="11.7070%" height="15" fill="rgb(211,29,28)"/><text x="22.3333%" y="1215.50">core::ops::functi..</text></g><g><title>rho_runtime::main (12,527 samples, 11.71%)</title><rect x="22.0833%" y="1189" width="11.7070%" height="15" fill="rgb(228,72,33)"/><text x="22.3333%" y="1199.50">rho_runtime::main</text></g><g><title>tokio::runtime::Runtime::block_on (12,527 samples, 11.71%)</title><rect x="22.0833%" y="1173" width="11.7070%" height="15" fill="rgb(205,214,31)"/><text x="22.3333%" y="1183.50">tokio::runtime::R..</text></g><g><title>tokio::runtime::thread_pool::ThreadPool::block_on (12,527 samples, 11.71%)</title><rect x="22.0833%" y="1157" width="11.7070%" height="15" fill="rgb(224,111,15)"/><text x="22.3333%" y="1167.50">tokio::runtime::t..</text></g><g><title>tokio::runtime::enter::Enter::block_on (12,527 samples, 11.71%)</title><rect x="22.0833%" y="1141" width="11.7070%" height="15" fill="rgb(253,21,26)"/><text x="22.3333%" y="1151.50">tokio::runtime::e..</text></g><g><title>tokio::park::thread::CachedParkThread::block_on (12,527 samples, 11.71%)</title><rect x="22.0833%" y="1125" width="11.7070%" height="15" fill="rgb(245,139,43)"/><text x="22.3333%" y="1135.50">tokio::park::thre..</text></g><g><title>tokio::coop::budget (101 samples, 0.09%)</title><rect x="33.6959%" y="1109" width="0.0944%" height="15" fill="rgb(252,170,7)"/><text x="33.9459%" y="1119.50"></text></g><g><title>tokio::coop::with_budget (78 samples, 0.07%)</title><rect x="33.7174%" y="1093" width="0.0729%" height="15" fill="rgb(231,118,14)"/><text x="33.9674%" y="1103.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (78 samples, 0.07%)</title><rect x="33.7174%" y="1077" width="0.0729%" height="15" fill="rgb(238,83,0)"/><text x="33.9674%" y="1087.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (78 samples, 0.07%)</title><rect x="33.7174%" y="1061" width="0.0729%" height="15" fill="rgb(221,39,39)"/><text x="33.9674%" y="1071.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (50 samples, 0.05%)</title><rect x="33.7436%" y="1045" width="0.0467%" height="15" fill="rgb(222,119,46)"/><text x="33.9936%" y="1055.50"></text></g><g><title>tokio::park::thread::CachedParkThread::block_on::{{closure}} (14 samples, 0.01%)</title><rect x="33.7772%" y="1029" width="0.0131%" height="15" fill="rgb(222,165,49)"/><text x="34.0272%" y="1039.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11 samples, 0.01%)</title><rect x="33.7800%" y="1013" width="0.0103%" height="15" fill="rgb(219,113,52)"/><text x="34.0300%" y="1023.50"></text></g><g><title>__rust_probestack (11 samples, 0.01%)</title><rect x="33.7800%" y="997" width="0.0103%" height="15" fill="rgb(214,7,15)"/><text x="34.0300%" y="1007.50"></text></g><g><title>_start (12,528 samples, 11.71%)</title><rect x="22.0833%" y="1365" width="11.7080%" height="15" fill="rgb(235,32,4)"/><text x="22.3333%" y="1375.50">_start</text></g><g><title>__libc_start_main (12,528 samples, 11.71%)</title><rect x="22.0833%" y="1349" width="11.7080%" height="15" fill="rgb(238,90,54)"/><text x="22.3333%" y="1359.50">__libc_start_main</text></g><g><title>main (12,528 samples, 11.71%)</title><rect x="22.0833%" y="1333" width="11.7080%" height="15" fill="rgb(213,208,19)"/><text x="22.3333%" y="1343.50">main</text></g><g><title>std::rt::lang_start_internal (12,528 samples, 11.71%)</title><rect x="22.0833%" y="1317" width="11.7080%" height="15" fill="rgb(233,156,4)"/><text x="22.3333%" y="1327.50">std::rt::lang_sta..</text></g><g><title>[unknown] (45 samples, 0.04%)</title><rect x="33.7987%" y="1349" width="0.0421%" height="15" fill="rgb(207,194,5)"/><text x="34.0487%" y="1359.50"></text></g><g><title>[unknown] (45 samples, 0.04%)</title><rect x="33.7987%" y="1333" width="0.0421%" height="15" fill="rgb(206,111,30)"/><text x="34.0487%" y="1343.50"></text></g><g><title>[unknown] (45 samples, 0.04%)</title><rect x="33.7987%" y="1317" width="0.0421%" height="15" fill="rgb(243,70,54)"/><text x="34.0487%" y="1327.50"></text></g><g><title>[unknown] (44 samples, 0.04%)</title><rect x="33.7997%" y="1301" width="0.0411%" height="15" fill="rgb(242,28,8)"/><text x="34.0497%" y="1311.50"></text></g><g><title>[unknown] (43 samples, 0.04%)</title><rect x="33.8006%" y="1285" width="0.0402%" height="15" fill="rgb(219,106,18)"/><text x="34.0506%" y="1295.50"></text></g><g><title>[unknown] (42 samples, 0.04%)</title><rect x="33.8015%" y="1269" width="0.0393%" height="15" fill="rgb(244,222,10)"/><text x="34.0515%" y="1279.50"></text></g><g><title>[unknown] (42 samples, 0.04%)</title><rect x="33.8015%" y="1253" width="0.0393%" height="15" fill="rgb(236,179,52)"/><text x="34.0515%" y="1263.50"></text></g><g><title>[unknown] (42 samples, 0.04%)</title><rect x="33.8015%" y="1237" width="0.0393%" height="15" fill="rgb(213,23,39)"/><text x="34.0515%" y="1247.50"></text></g><g><title>clone (46 samples, 0.04%)</title><rect x="33.7987%" y="1365" width="0.0430%" height="15" fill="rgb(238,48,10)"/><text x="34.0487%" y="1375.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (22 samples, 0.02%)</title><rect x="33.8445%" y="1365" width="0.0206%" height="15" fill="rgb(251,196,23)"/><text x="34.0945%" y="1375.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (19 samples, 0.02%)</title><rect x="33.8473%" y="1349" width="0.0178%" height="15" fill="rgb(250,152,24)"/><text x="34.0973%" y="1359.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::should_timeout (12 samples, 0.01%)</title><rect x="33.8539%" y="1333" width="0.0112%" height="15" fill="rgb(209,150,17)"/><text x="34.1039%" y="1343.50"></text></g><g><title>tokio::runtime::spawner::Spawner::spawn (12 samples, 0.01%)</title><rect x="33.8810%" y="1365" width="0.0112%" height="15" fill="rgb(234,202,34)"/><text x="34.1310%" y="1375.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::read (43 samples, 0.04%)</title><rect x="33.9258%" y="1349" width="0.0402%" height="15" fill="rgb(253,148,53)"/><text x="34.1758%" y="1359.50"></text></g><g><title>rho_runtime (36,341 samples, 33.96%)</title><rect x="0.0047%" y="1381" width="33.9623%" height="15" fill="rgb(218,129,16)"/><text x="0.2547%" y="1391.50">rho_runtime</text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (73 samples, 0.07%)</title><rect x="33.8987%" y="1365" width="0.0682%" height="15" fill="rgb(216,85,19)"/><text x="34.1487%" y="1375.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (16 samples, 0.01%)</title><rect x="33.9978%" y="1349" width="0.0150%" height="15" fill="rgb(235,228,7)"/><text x="34.2478%" y="1359.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (14 samples, 0.01%)</title><rect x="33.9997%" y="1333" width="0.0131%" height="15" fill="rgb(245,175,0)"/><text x="34.2497%" y="1343.50"></text></g><g><title>alloc::slice::hack::to_vec (14 samples, 0.01%)</title><rect x="33.9997%" y="1317" width="0.0131%" height="15" fill="rgb(208,168,36)"/><text x="34.2497%" y="1327.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (11 samples, 0.01%)</title><rect x="34.0127%" y="1237" width="0.0103%" height="15" fill="rgb(246,171,24)"/><text x="34.2627%" y="1247.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11 samples, 0.01%)</title><rect x="34.0127%" y="1221" width="0.0103%" height="15" fill="rgb(215,142,24)"/><text x="34.2627%" y="1231.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (11 samples, 0.01%)</title><rect x="34.0127%" y="1205" width="0.0103%" height="15" fill="rgb(250,187,7)"/><text x="34.2627%" y="1215.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 0.01%)</title><rect x="34.0127%" y="1189" width="0.0103%" height="15" fill="rgb(228,66,33)"/><text x="34.2627%" y="1199.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.01%)</title><rect x="34.0127%" y="1173" width="0.0103%" height="15" fill="rgb(234,215,21)"/><text x="34.2627%" y="1183.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.01%)</title><rect x="34.0127%" y="1157" width="0.0103%" height="15" fill="rgb(222,191,20)"/><text x="34.2627%" y="1167.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (47 samples, 0.04%)</title><rect x="33.9800%" y="1365" width="0.0439%" height="15" fill="rgb(245,79,54)"/><text x="34.2300%" y="1375.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (12 samples, 0.01%)</title><rect x="34.0127%" y="1349" width="0.0112%" height="15" fill="rgb(240,10,37)"/><text x="34.2627%" y="1359.50"></text></g><g><title>&lt;model::bitset::BitSet&lt;B&gt; as core::clone::Clone&gt;::clone (12 samples, 0.01%)</title><rect x="34.0127%" y="1333" width="0.0112%" height="15" fill="rgb(214,192,32)"/><text x="34.2627%" y="1343.50"></text></g><g><title>&lt;bit_vec::BitVec&lt;B&gt; as core::clone::Clone&gt;::clone (12 samples, 0.01%)</title><rect x="34.0127%" y="1317" width="0.0112%" height="15" fill="rgb(209,36,54)"/><text x="34.2627%" y="1327.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (12 samples, 0.01%)</title><rect x="34.0127%" y="1301" width="0.0112%" height="15" fill="rgb(220,10,11)"/><text x="34.2627%" y="1311.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (12 samples, 0.01%)</title><rect x="34.0127%" y="1285" width="0.0112%" height="15" fill="rgb(221,106,17)"/><text x="34.2627%" y="1295.50"></text></g><g><title>alloc::slice::hack::to_vec (12 samples, 0.01%)</title><rect x="34.0127%" y="1269" width="0.0112%" height="15" fill="rgb(251,142,44)"/><text x="34.2627%" y="1279.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (12 samples, 0.01%)</title><rect x="34.0127%" y="1253" width="0.0112%" height="15" fill="rgb(238,13,15)"/><text x="34.2627%" y="1263.50"></text></g><g><title>&lt;model::rho_types::Expr as core::clone::Clone&gt;::clone (22 samples, 0.02%)</title><rect x="34.0670%" y="1333" width="0.0206%" height="15" fill="rgb(208,107,27)"/><text x="34.3170%" y="1343.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (11 samples, 0.01%)</title><rect x="34.0772%" y="1317" width="0.0103%" height="15" fill="rgb(205,136,37)"/><text x="34.3272%" y="1327.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (61 samples, 0.06%)</title><rect x="34.0370%" y="1349" width="0.0570%" height="15" fill="rgb(250,205,27)"/><text x="34.2870%" y="1359.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (17 samples, 0.02%)</title><rect x="34.1081%" y="1333" width="0.0159%" height="15" fill="rgb(210,80,43)"/><text x="34.3581%" y="1343.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (41 samples, 0.04%)</title><rect x="34.0941%" y="1349" width="0.0383%" height="15" fill="rgb(247,160,36)"/><text x="34.3441%" y="1359.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18 samples, 0.02%)</title><rect x="34.1342%" y="1349" width="0.0168%" height="15" fill="rgb(234,13,49)"/><text x="34.3842%" y="1359.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (22 samples, 0.02%)</title><rect x="34.1511%" y="1349" width="0.0206%" height="15" fill="rgb(234,122,0)"/><text x="34.4011%" y="1359.50"></text></g><g><title>&lt;tokio::sync::oneshot::Receiver&lt;T&gt; as core::future::future::Future&gt;::poll (22 samples, 0.02%)</title><rect x="34.1800%" y="1349" width="0.0206%" height="15" fill="rgb(207,146,38)"/><text x="34.4300%" y="1359.50"></text></g><g><title>tokio::sync::oneshot::Inner&lt;T&gt;::poll_recv (19 samples, 0.02%)</title><rect x="34.1828%" y="1333" width="0.0178%" height="15" fill="rgb(207,177,25)"/><text x="34.4328%" y="1343.50"></text></g><g><title>[libc-2.31.so] (19 samples, 0.02%)</title><rect x="34.2006%" y="1349" width="0.0178%" height="15" fill="rgb(211,178,42)"/><text x="34.4506%" y="1359.50"></text></g><g><title>alloc::slice::merge_sort (48 samples, 0.04%)</title><rect x="34.2417%" y="1349" width="0.0449%" height="15" fill="rgb(230,69,54)"/><text x="34.4917%" y="1359.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (20 samples, 0.02%)</title><rect x="34.2978%" y="1349" width="0.0187%" height="15" fill="rgb(214,135,41)"/><text x="34.5478%" y="1359.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (71 samples, 0.07%)</title><rect x="34.3193%" y="1349" width="0.0664%" height="15" fill="rgb(237,67,25)"/><text x="34.5693%" y="1359.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (64 samples, 0.06%)</title><rect x="34.3258%" y="1333" width="0.0598%" height="15" fill="rgb(222,189,50)"/><text x="34.5758%" y="1343.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (61 samples, 0.06%)</title><rect x="34.3286%" y="1317" width="0.0570%" height="15" fill="rgb(245,148,34)"/><text x="34.5786%" y="1327.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (61 samples, 0.06%)</title><rect x="34.3286%" y="1301" width="0.0570%" height="15" fill="rgb(222,29,6)"/><text x="34.5786%" y="1311.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (61 samples, 0.06%)</title><rect x="34.3286%" y="1285" width="0.0570%" height="15" fill="rgb(221,189,43)"/><text x="34.5786%" y="1295.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (61 samples, 0.06%)</title><rect x="34.3286%" y="1269" width="0.0570%" height="15" fill="rgb(207,36,27)"/><text x="34.5786%" y="1279.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (14 samples, 0.01%)</title><rect x="34.4165%" y="1349" width="0.0131%" height="15" fill="rgb(217,90,24)"/><text x="34.6665%" y="1359.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (27 samples, 0.03%)</title><rect x="34.4529%" y="1349" width="0.0252%" height="15" fill="rgb(224,66,35)"/><text x="34.7029%" y="1359.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (66 samples, 0.06%)</title><rect x="34.4782%" y="1349" width="0.0617%" height="15" fill="rgb(221,13,50)"/><text x="34.7282%" y="1359.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::steal_work (46 samples, 0.04%)</title><rect x="34.4968%" y="1333" width="0.0430%" height="15" fill="rgb(236,68,49)"/><text x="34.7468%" y="1343.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (11 samples, 0.01%)</title><rect x="34.5398%" y="1349" width="0.0103%" height="15" fill="rgb(229,146,28)"/><text x="34.7898%" y="1359.50"></text></g><g><title>[[heap]] (561 samples, 0.52%)</title><rect x="34.0370%" y="1365" width="0.5243%" height="15" fill="rgb(225,31,38)"/><text x="34.2870%" y="1375.50"></text></g><g><title>&lt;model::rho_types::Expr as core::clone::Clone&gt;::clone (43 samples, 0.04%)</title><rect x="34.6277%" y="1333" width="0.0402%" height="15" fill="rgb(250,208,3)"/><text x="34.8777%" y="1343.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (19 samples, 0.02%)</title><rect x="34.6501%" y="1317" width="0.0178%" height="15" fill="rgb(246,54,23)"/><text x="34.9001%" y="1327.50"></text></g><g><title>&lt;model::rho_types::MatchCase as core::clone::Clone&gt;::clone (11 samples, 0.01%)</title><rect x="34.6688%" y="1253" width="0.0103%" height="15" fill="rgb(243,76,11)"/><text x="34.9188%" y="1263.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (15 samples, 0.01%)</title><rect x="34.6688%" y="1317" width="0.0140%" height="15" fill="rgb(245,21,50)"/><text x="34.9188%" y="1327.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (15 samples, 0.01%)</title><rect x="34.6688%" y="1301" width="0.0140%" height="15" fill="rgb(228,9,43)"/><text x="34.9188%" y="1311.50"></text></g><g><title>alloc::slice::hack::to_vec (15 samples, 0.01%)</title><rect x="34.6688%" y="1285" width="0.0140%" height="15" fill="rgb(208,100,47)"/><text x="34.9188%" y="1295.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (15 samples, 0.01%)</title><rect x="34.6688%" y="1269" width="0.0140%" height="15" fill="rgb(232,26,8)"/><text x="34.9188%" y="1279.50"></text></g><g><title>&lt;model::rho_types::Match as core::clone::Clone&gt;::clone (18 samples, 0.02%)</title><rect x="34.6679%" y="1333" width="0.0168%" height="15" fill="rgb(216,166,38)"/><text x="34.9179%" y="1343.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (11 samples, 0.01%)</title><rect x="34.6847%" y="1333" width="0.0103%" height="15" fill="rgb(251,202,51)"/><text x="34.9347%" y="1343.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11 samples, 0.01%)</title><rect x="34.6847%" y="1317" width="0.0103%" height="15" fill="rgb(254,216,34)"/><text x="34.9347%" y="1327.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (11 samples, 0.01%)</title><rect x="34.6847%" y="1301" width="0.0103%" height="15" fill="rgb(251,32,27)"/><text x="34.9347%" y="1311.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 0.01%)</title><rect x="34.6847%" y="1285" width="0.0103%" height="15" fill="rgb(208,127,28)"/><text x="34.9347%" y="1295.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.01%)</title><rect x="34.6847%" y="1269" width="0.0103%" height="15" fill="rgb(224,137,22)"/><text x="34.9347%" y="1279.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.01%)</title><rect x="34.6847%" y="1253" width="0.0103%" height="15" fill="rgb(254,70,32)"/><text x="34.9347%" y="1263.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (155 samples, 0.14%)</title><rect x="34.5613%" y="1349" width="0.1449%" height="15" fill="rgb(229,75,37)"/><text x="34.8113%" y="1359.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (12 samples, 0.01%)</title><rect x="34.6950%" y="1333" width="0.0112%" height="15" fill="rgb(252,64,23)"/><text x="34.9450%" y="1343.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (20 samples, 0.02%)</title><rect x="34.7314%" y="1333" width="0.0187%" height="15" fill="rgb(232,162,48)"/><text x="34.9814%" y="1343.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (54 samples, 0.05%)</title><rect x="34.7080%" y="1349" width="0.0505%" height="15" fill="rgb(246,160,12)"/><text x="34.9580%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),model::rho_types::ExecutionError&gt;+core::marker::Send&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="34.8735%" y="1317" width="0.0112%" height="15" fill="rgb(247,166,0)"/><text x="35.1235%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),model::rho_types::ExecutionError&gt;+core::marker::Send&gt;&gt; (12 samples, 0.01%)</title><rect x="34.8735%" y="1301" width="0.0112%" height="15" fill="rgb(249,219,21)"/><text x="35.1235%" y="1311.50"></text></g><g><title>&lt;model::rho_types::Par as rho_runtime::interpreter::reduce::eval_expression::AsyncParExpressionEvaluator&lt;S&gt;&gt;::evaluate_single_expression::{{closure}} (68 samples, 0.06%)</title><rect x="34.8305%" y="1333" width="0.0635%" height="15" fill="rgb(205,209,3)"/><text x="35.0805%" y="1343.50"></text></g><g><title>&lt;rho_runtime::storage::coordinator::AsyncStore as rho_runtime::storage::Storage&gt;::produce::{{closure}} (43 samples, 0.04%)</title><rect x="34.8940%" y="1333" width="0.0402%" height="15" fill="rgb(243,44,1)"/><text x="35.1440%" y="1343.50"></text></g><g><title>tokio::sync::oneshot::channel (15 samples, 0.01%)</title><rect x="34.9202%" y="1317" width="0.0140%" height="15" fill="rgb(206,159,16)"/><text x="35.1702%" y="1327.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::evaludate::{{closure}} (12 samples, 0.01%)</title><rect x="34.9342%" y="1333" width="0.0112%" height="15" fill="rgb(244,77,30)"/><text x="35.1842%" y="1343.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_expression::eval_eplus::&lt;impl rho_runtime::interpreter::reduce::eval_expression::AsyncExprInstanceEvaluator&lt;S&gt; for model::rho_types::EPlus&gt;::evaluate::{{closure}} (28 samples, 0.03%)</title><rect x="34.9454%" y="1333" width="0.0262%" height="15" fill="rgb(218,69,12)"/><text x="35.1954%" y="1343.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_expression::expr_instance::&lt;impl rho_runtime::interpreter::reduce::AsyncEvaluator&lt;S&gt; for model::rho_types::Expr&gt;::evaluate::{{closure}} (83 samples, 0.08%)</title><rect x="34.9716%" y="1333" width="0.0776%" height="15" fill="rgb(212,87,7)"/><text x="35.2216%" y="1343.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_match::&lt;impl rho_runtime::interpreter::reduce::AsyncEvaluator&lt;S&gt; for model::rho_types::Match&gt;::evaluate::{{closure}} (23 samples, 0.02%)</title><rect x="35.0492%" y="1333" width="0.0215%" height="15" fill="rgb(245,114,25)"/><text x="35.2992%" y="1343.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15 samples, 0.01%)</title><rect x="35.0884%" y="1317" width="0.0140%" height="15" fill="rgb(210,61,42)"/><text x="35.3384%" y="1327.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::produce::{{closure}} (15 samples, 0.01%)</title><rect x="35.0884%" y="1301" width="0.0140%" height="15" fill="rgb(211,52,33)"/><text x="35.3384%" y="1311.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_send::&lt;impl rho_runtime::interpreter::reduce::AsyncEvaluator&lt;S&gt; for model::rho_types::Send&gt;::evaluate::{{closure}} (50 samples, 0.05%)</title><rect x="35.0800%" y="1333" width="0.0467%" height="15" fill="rgb(234,58,33)"/><text x="35.3300%" y="1343.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (402 samples, 0.38%)</title><rect x="34.7585%" y="1349" width="0.3757%" height="15" fill="rgb(220,115,36)"/><text x="35.0085%" y="1359.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (16 samples, 0.01%)</title><rect x="35.1445%" y="1317" width="0.0150%" height="15" fill="rgb(243,153,54)"/><text x="35.3945%" y="1327.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (15 samples, 0.01%)</title><rect x="35.1594%" y="1317" width="0.0140%" height="15" fill="rgb(251,47,18)"/><text x="35.4094%" y="1327.50"></text></g><g><title>&lt;model::ordering::ScoreTreeIter as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 0.04%)</title><rect x="35.1407%" y="1349" width="0.0374%" height="15" fill="rgb(242,102,42)"/><text x="35.3907%" y="1359.50"></text></g><g><title>&lt;model::ordering::sort_unforgeable::UnforgeableScoreTreeIter as core::iter::traits::iterator::Iterator&gt;::next (38 samples, 0.04%)</title><rect x="35.1426%" y="1333" width="0.0355%" height="15" fill="rgb(234,31,38)"/><text x="35.3926%" y="1343.50"></text></g><g><title>&lt;model::ordering::sort_par::ParScoreTreeIter as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 0.03%)</title><rect x="35.1781%" y="1349" width="0.0280%" height="15" fill="rgb(221,117,51)"/><text x="35.4281%" y="1359.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (32 samples, 0.03%)</title><rect x="35.2370%" y="1333" width="0.0299%" height="15" fill="rgb(212,20,18)"/><text x="35.4870%" y="1343.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (25 samples, 0.02%)</title><rect x="35.2435%" y="1317" width="0.0234%" height="15" fill="rgb(245,133,36)"/><text x="35.4935%" y="1327.50"></text></g><g><title>alloc::slice::hack::to_vec (25 samples, 0.02%)</title><rect x="35.2435%" y="1301" width="0.0234%" height="15" fill="rgb(212,6,19)"/><text x="35.4935%" y="1311.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (78 samples, 0.07%)</title><rect x="35.2062%" y="1349" width="0.0729%" height="15" fill="rgb(218,1,36)"/><text x="35.4562%" y="1359.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (13 samples, 0.01%)</title><rect x="35.2669%" y="1333" width="0.0121%" height="15" fill="rgb(246,84,54)"/><text x="35.5169%" y="1343.50"></text></g><g><title>&lt;model::bitset::BitSet&lt;B&gt; as core::clone::Clone&gt;::clone (13 samples, 0.01%)</title><rect x="35.2669%" y="1317" width="0.0121%" height="15" fill="rgb(242,110,6)"/><text x="35.5169%" y="1327.50"></text></g><g><title>&lt;bit_vec::BitVec&lt;B&gt; as core::clone::Clone&gt;::clone (13 samples, 0.01%)</title><rect x="35.2669%" y="1301" width="0.0121%" height="15" fill="rgb(214,47,5)"/><text x="35.5169%" y="1311.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (13 samples, 0.01%)</title><rect x="35.2669%" y="1285" width="0.0121%" height="15" fill="rgb(218,159,25)"/><text x="35.5169%" y="1295.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (13 samples, 0.01%)</title><rect x="35.2669%" y="1269" width="0.0121%" height="15" fill="rgb(215,211,28)"/><text x="35.5169%" y="1279.50"></text></g><g><title>alloc::slice::hack::to_vec (13 samples, 0.01%)</title><rect x="35.2669%" y="1253" width="0.0121%" height="15" fill="rgb(238,59,32)"/><text x="35.5169%" y="1263.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (13 samples, 0.01%)</title><rect x="35.2669%" y="1237" width="0.0121%" height="15" fill="rgb(226,82,3)"/><text x="35.5169%" y="1247.50"></text></g><g><title>&lt;model::rho_types::Par as model::ordering::hash::Blake3Hashable&gt;::blake3_hash::traverse (17 samples, 0.02%)</title><rect x="35.2837%" y="1349" width="0.0159%" height="15" fill="rgb(240,164,32)"/><text x="35.5337%" y="1359.50"></text></g><g><title>&lt;rho_runtime::storage::TaggedContinuation as core::clone::Clone&gt;::clone (23 samples, 0.02%)</title><rect x="35.2996%" y="1349" width="0.0215%" height="15" fill="rgb(232,46,7)"/><text x="35.5496%" y="1359.50"></text></g><g><title>&lt;model::rho_types::ParWithRandom as core::clone::Clone&gt;::clone (22 samples, 0.02%)</title><rect x="35.3005%" y="1333" width="0.0206%" height="15" fill="rgb(229,129,53)"/><text x="35.5505%" y="1343.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (19 samples, 0.02%)</title><rect x="35.3034%" y="1317" width="0.0178%" height="15" fill="rgb(234,188,29)"/><text x="35.5534%" y="1327.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (18 samples, 0.02%)</title><rect x="35.3043%" y="1301" width="0.0168%" height="15" fill="rgb(246,141,4)"/><text x="35.5543%" y="1311.50"></text></g><g><title>&lt;smallvec::IntoIter&lt;A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="35.3211%" y="1349" width="0.0112%" height="15" fill="rgb(229,23,39)"/><text x="35.5711%" y="1359.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="35.3211%" y="1333" width="0.0112%" height="15" fill="rgb(206,12,3)"/><text x="35.5711%" y="1343.50"></text></g><g><title>&lt;smallvec::IntoIter&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="35.3211%" y="1317" width="0.0112%" height="15" fill="rgb(252,226,20)"/><text x="35.5711%" y="1327.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (46 samples, 0.04%)</title><rect x="35.3323%" y="1349" width="0.0430%" height="15" fill="rgb(216,123,35)"/><text x="35.5823%" y="1359.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.02%)</title><rect x="35.3753%" y="1349" width="0.0159%" height="15" fill="rgb(212,68,40)"/><text x="35.6253%" y="1359.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (23 samples, 0.02%)</title><rect x="35.3977%" y="1349" width="0.0215%" height="15" fill="rgb(254,125,32)"/><text x="35.6477%" y="1359.50"></text></g><g><title>tokio::runtime::park::Inner::park (11 samples, 0.01%)</title><rect x="35.4090%" y="1333" width="0.0103%" height="15" fill="rgb(253,97,22)"/><text x="35.6590%" y="1343.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (34 samples, 0.03%)</title><rect x="35.4220%" y="1349" width="0.0318%" height="15" fill="rgb(241,101,14)"/><text x="35.6720%" y="1359.50"></text></g><g><title>tokio::coop::poll_proceed (17 samples, 0.02%)</title><rect x="35.4379%" y="1333" width="0.0159%" height="15" fill="rgb(238,103,29)"/><text x="35.6879%" y="1343.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (17 samples, 0.02%)</title><rect x="35.4379%" y="1317" width="0.0159%" height="15" fill="rgb(233,195,47)"/><text x="35.6879%" y="1327.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (17 samples, 0.02%)</title><rect x="35.4379%" y="1301" width="0.0159%" height="15" fill="rgb(246,218,30)"/><text x="35.6879%" y="1311.50"></text></g><g><title>tokio::coop::poll_proceed::{{closure}} (11 samples, 0.01%)</title><rect x="35.4435%" y="1285" width="0.0103%" height="15" fill="rgb(219,145,47)"/><text x="35.6935%" y="1295.50"></text></g><g><title>&lt;tokio::sync::oneshot::Receiver&lt;T&gt; as core::future::future::Future&gt;::poll (19 samples, 0.02%)</title><rect x="35.4576%" y="1349" width="0.0178%" height="15" fill="rgb(243,12,26)"/><text x="35.7076%" y="1359.50"></text></g><g><title>[libc-2.31.so] (198 samples, 0.19%)</title><rect x="35.4753%" y="1349" width="0.1850%" height="15" fill="rgb(214,87,16)"/><text x="35.7253%" y="1359.50"></text></g><g><title>__libc_malloc (74 samples, 0.07%)</title><rect x="35.6678%" y="1349" width="0.0692%" height="15" fill="rgb(208,99,42)"/><text x="35.9178%" y="1359.50"></text></g><g><title>__rdl_alloc (11 samples, 0.01%)</title><rect x="35.7370%" y="1349" width="0.0103%" height="15" fill="rgb(253,99,2)"/><text x="35.9870%" y="1359.50"></text></g><g><title>__rust_probestack (29 samples, 0.03%)</title><rect x="35.7473%" y="1349" width="0.0271%" height="15" fill="rgb(220,168,23)"/><text x="35.9973%" y="1359.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (38 samples, 0.04%)</title><rect x="35.7790%" y="1349" width="0.0355%" height="15" fill="rgb(242,38,24)"/><text x="36.0290%" y="1359.50"></text></g><g><title>alloc::slice::merge_sort (36 samples, 0.03%)</title><rect x="35.8145%" y="1349" width="0.0336%" height="15" fill="rgb(225,182,9)"/><text x="36.0645%" y="1359.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (13 samples, 0.01%)</title><rect x="35.8482%" y="1349" width="0.0121%" height="15" fill="rgb(243,178,37)"/><text x="36.0982%" y="1359.50"></text></g><g><title>cfree (14 samples, 0.01%)</title><rect x="35.8706%" y="1349" width="0.0131%" height="15" fill="rgb(232,139,19)"/><text x="36.1206%" y="1359.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (16 samples, 0.01%)</title><rect x="35.9117%" y="1285" width="0.0150%" height="15" fill="rgb(225,201,24)"/><text x="36.1617%" y="1295.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (13 samples, 0.01%)</title><rect x="35.9145%" y="1269" width="0.0121%" height="15" fill="rgb(221,47,46)"/><text x="36.1645%" y="1279.50"></text></g><g><title>alloc::slice::hack::to_vec (13 samples, 0.01%)</title><rect x="35.9145%" y="1253" width="0.0121%" height="15" fill="rgb(249,23,13)"/><text x="36.1645%" y="1263.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (59 samples, 0.06%)</title><rect x="35.8837%" y="1349" width="0.0551%" height="15" fill="rgb(219,9,5)"/><text x="36.1337%" y="1359.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (50 samples, 0.05%)</title><rect x="35.8921%" y="1333" width="0.0467%" height="15" fill="rgb(254,171,16)"/><text x="36.1421%" y="1343.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned::{{closure}} (45 samples, 0.04%)</title><rect x="35.8968%" y="1317" width="0.0421%" height="15" fill="rgb(230,171,20)"/><text x="36.1468%" y="1327.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (45 samples, 0.04%)</title><rect x="35.8968%" y="1301" width="0.0421%" height="15" fill="rgb(210,71,41)"/><text x="36.1468%" y="1311.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (13 samples, 0.01%)</title><rect x="35.9267%" y="1285" width="0.0121%" height="15" fill="rgb(206,173,20)"/><text x="36.1767%" y="1295.50"></text></g><g><title>&lt;model::bitset::BitSet&lt;B&gt; as core::clone::Clone&gt;::clone (13 samples, 0.01%)</title><rect x="35.9267%" y="1269" width="0.0121%" height="15" fill="rgb(233,88,34)"/><text x="36.1767%" y="1279.50"></text></g><g><title>&lt;bit_vec::BitVec&lt;B&gt; as core::clone::Clone&gt;::clone (13 samples, 0.01%)</title><rect x="35.9267%" y="1253" width="0.0121%" height="15" fill="rgb(223,209,46)"/><text x="36.1767%" y="1263.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (13 samples, 0.01%)</title><rect x="35.9267%" y="1237" width="0.0121%" height="15" fill="rgb(250,43,18)"/><text x="36.1767%" y="1247.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (13 samples, 0.01%)</title><rect x="35.9267%" y="1221" width="0.0121%" height="15" fill="rgb(208,13,10)"/><text x="36.1767%" y="1231.50"></text></g><g><title>alloc::slice::hack::to_vec (13 samples, 0.01%)</title><rect x="35.9267%" y="1205" width="0.0121%" height="15" fill="rgb(212,200,36)"/><text x="36.1767%" y="1215.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (13 samples, 0.01%)</title><rect x="35.9267%" y="1189" width="0.0121%" height="15" fill="rgb(225,90,30)"/><text x="36.1767%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::FlatMap&lt;smallvec::IntoIter&lt;[model::rho_types::ListParWithRandom: 3]&gt;,alloc::vec::into_iter::IntoIter&lt;model::rho_types::Par&gt;,rho_runtime::interpreter::InterpreterContext&lt;rho_runtime::storage::coordinator::AsyncStore&gt;::handle_comm_events::{{closure}}&gt;&gt; (12 samples, 0.01%)</title><rect x="35.9687%" y="1349" width="0.0112%" height="15" fill="rgb(236,182,39)"/><text x="36.2187%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Expr&gt; (14 samples, 0.01%)</title><rect x="35.9800%" y="1349" width="0.0131%" height="15" fill="rgb(212,144,35)"/><text x="36.2300%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Par&gt; (33 samples, 0.03%)</title><rect x="36.0005%" y="1349" width="0.0308%" height="15" fill="rgb(228,63,44)"/><text x="36.2505%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Stage&lt;core::future::from_generator::GenFuture&lt;rho_runtime::interpreter::InterpreterContext&lt;rho_runtime::storage::coordinator::AsyncStore&gt;::spawn_evaluation&lt;model::rho_types::Send&gt;::{{closure}}&gt;&gt;&gt; (11 samples, 0.01%)</title><rect x="36.0463%" y="1349" width="0.0103%" height="15" fill="rgb(228,109,6)"/><text x="36.2963%" y="1359.50"></text></g><g><title>crossbeam_queue::seg_queue::SegQueue&lt;T&gt;::pop (12 samples, 0.01%)</title><rect x="36.0566%" y="1349" width="0.0112%" height="15" fill="rgb(238,117,24)"/><text x="36.3066%" y="1359.50"></text></g><g><title>model::ordering::sort_par::&lt;impl model::ordering::Sortable for model::rho_types::Par&gt;::sort (48 samples, 0.04%)</title><rect x="36.0762%" y="1349" width="0.0449%" height="15" fill="rgb(242,26,26)"/><text x="36.3262%" y="1359.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by (21 samples, 0.02%)</title><rect x="36.1015%" y="1333" width="0.0196%" height="15" fill="rgb(221,92,48)"/><text x="36.3515%" y="1343.50"></text></g><g><title>model::rho_types::Par::append_expr (15 samples, 0.01%)</title><rect x="36.1229%" y="1349" width="0.0140%" height="15" fill="rgb(209,209,32)"/><text x="36.3729%" y="1359.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (29 samples, 0.03%)</title><rect x="36.1566%" y="1317" width="0.0271%" height="15" fill="rgb(221,70,22)"/><text x="36.4066%" y="1327.50"></text></g><g><title>syscall (27 samples, 0.03%)</title><rect x="36.1585%" y="1301" width="0.0252%" height="15" fill="rgb(248,145,5)"/><text x="36.4085%" y="1311.50"></text></g><g><title>[unknown] (27 samples, 0.03%)</title><rect x="36.1585%" y="1285" width="0.0252%" height="15" fill="rgb(226,116,26)"/><text x="36.4085%" y="1295.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (55 samples, 0.05%)</title><rect x="36.1370%" y="1349" width="0.0514%" height="15" fill="rgb(244,5,17)"/><text x="36.3870%" y="1359.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (34 samples, 0.03%)</title><rect x="36.1566%" y="1333" width="0.0318%" height="15" fill="rgb(252,159,33)"/><text x="36.4066%" y="1343.50"></text></g><g><title>rho_runtime::interpreter::reduce::substitute::sub_par::&lt;impl rho_runtime::interpreter::reduce::substitute::Substitutable&lt;S&gt; for model::rho_types::Par&gt;::substitute_no_sort (27 samples, 0.03%)</title><rect x="36.2117%" y="1349" width="0.0252%" height="15" fill="rgb(206,71,0)"/><text x="36.4617%" y="1359.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (11 samples, 0.01%)</title><rect x="36.2697%" y="1333" width="0.0103%" height="15" fill="rgb(233,118,54)"/><text x="36.5197%" y="1343.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (11 samples, 0.01%)</title><rect x="36.2697%" y="1317" width="0.0103%" height="15" fill="rgb(234,83,48)"/><text x="36.5197%" y="1327.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11 samples, 0.01%)</title><rect x="36.2697%" y="1301" width="0.0103%" height="15" fill="rgb(228,3,54)"/><text x="36.5197%" y="1311.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (11 samples, 0.01%)</title><rect x="36.2697%" y="1285" width="0.0103%" height="15" fill="rgb(226,155,13)"/><text x="36.5197%" y="1295.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 0.01%)</title><rect x="36.2697%" y="1269" width="0.0103%" height="15" fill="rgb(241,28,37)"/><text x="36.5197%" y="1279.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.01%)</title><rect x="36.2697%" y="1253" width="0.0103%" height="15" fill="rgb(233,93,10)"/><text x="36.5197%" y="1263.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.01%)</title><rect x="36.2697%" y="1237" width="0.0103%" height="15" fill="rgb(225,113,19)"/><text x="36.5197%" y="1247.50"></text></g><g><title>rho_runtime::interpreter::reduce::substitute::sub_par::substitute_expressions_in_par (54 samples, 0.05%)</title><rect x="36.2370%" y="1349" width="0.0505%" height="15" fill="rgb(241,2,18)"/><text x="36.4870%" y="1359.50"></text></g><g><title>syscall (55 samples, 0.05%)</title><rect x="36.3061%" y="1349" width="0.0514%" height="15" fill="rgb(228,207,21)"/><text x="36.5561%" y="1359.50"></text></g><g><title>[unknown] (18 samples, 0.02%)</title><rect x="36.3407%" y="1333" width="0.0168%" height="15" fill="rgb(213,211,35)"/><text x="36.5907%" y="1343.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (29 samples, 0.03%)</title><rect x="36.3753%" y="1333" width="0.0271%" height="15" fill="rgb(209,83,10)"/><text x="36.6253%" y="1343.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (29 samples, 0.03%)</title><rect x="36.3753%" y="1317" width="0.0271%" height="15" fill="rgb(209,164,1)"/><text x="36.6253%" y="1327.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (44 samples, 0.04%)</title><rect x="36.3669%" y="1349" width="0.0411%" height="15" fill="rgb(213,184,43)"/><text x="36.6169%" y="1359.50"></text></g><g><title>tokio::runtime::task::core::Cell&lt;T,S&gt;::new (12 samples, 0.01%)</title><rect x="36.4117%" y="1349" width="0.0112%" height="15" fill="rgb(231,61,34)"/><text x="36.6617%" y="1359.50"></text></g><g><title>tokio::runtime::task::harness::SchedulerView&lt;S&gt;::transition_to_terminal (31 samples, 0.03%)</title><rect x="36.4360%" y="1333" width="0.0290%" height="15" fill="rgb(235,75,3)"/><text x="36.6860%" y="1343.50"></text></g><g><title>tokio::runtime::task::harness::SchedulerView&lt;S&gt;::to_task (12 samples, 0.01%)</title><rect x="36.4538%" y="1317" width="0.0112%" height="15" fill="rgb(220,106,47)"/><text x="36.7038%" y="1327.50"></text></g><g><title>tokio::runtime::task::Task&lt;S&gt;::from_raw (12 samples, 0.01%)</title><rect x="36.4538%" y="1301" width="0.0112%" height="15" fill="rgb(210,196,33)"/><text x="36.7038%" y="1311.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (57 samples, 0.05%)</title><rect x="36.4229%" y="1349" width="0.0533%" height="15" fill="rgb(229,154,42)"/><text x="36.6729%" y="1359.50"></text></g><g><title>tokio::runtime::task::harness::transition_to_complete (12 samples, 0.01%)</title><rect x="36.4650%" y="1333" width="0.0112%" height="15" fill="rgb(228,114,26)"/><text x="36.7150%" y="1343.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (50 samples, 0.05%)</title><rect x="36.4846%" y="1349" width="0.0467%" height="15" fill="rgb(208,144,1)"/><text x="36.7346%" y="1359.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (21 samples, 0.02%)</title><rect x="36.5117%" y="1333" width="0.0196%" height="15" fill="rgb(239,112,37)"/><text x="36.7617%" y="1343.50"></text></g><g><title>tokio::runtime::task::harness::SchedulerView&lt;S&gt;::transition_to_running (16 samples, 0.01%)</title><rect x="36.5164%" y="1317" width="0.0150%" height="15" fill="rgb(210,96,50)"/><text x="36.7664%" y="1327.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::try_read_output (20 samples, 0.02%)</title><rect x="36.5313%" y="1349" width="0.0187%" height="15" fill="rgb(222,178,2)"/><text x="36.7813%" y="1359.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (12 samples, 0.01%)</title><rect x="36.6145%" y="1349" width="0.0112%" height="15" fill="rgb(226,74,18)"/><text x="36.8645%" y="1359.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_ref (12 samples, 0.01%)</title><rect x="36.6145%" y="1333" width="0.0112%" height="15" fill="rgb(225,67,54)"/><text x="36.8645%" y="1343.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (88 samples, 0.08%)</title><rect x="36.6369%" y="1349" width="0.0822%" height="15" fill="rgb(251,92,32)"/><text x="36.8869%" y="1359.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (11 samples, 0.01%)</title><rect x="36.7267%" y="1349" width="0.0103%" height="15" fill="rgb(228,149,22)"/><text x="36.9767%" y="1359.50"></text></g><g><title>[anon] (2,363 samples, 2.21%)</title><rect x="34.5613%" y="1365" width="2.2083%" height="15" fill="rgb(243,54,13)"/><text x="34.8113%" y="1375.50">[..</text></g><g><title>tokio::task::spawn::spawn (12 samples, 0.01%)</title><rect x="36.7584%" y="1349" width="0.0112%" height="15" fill="rgb(243,180,28)"/><text x="37.0084%" y="1359.50"></text></g><g><title>[libc-2.31.so] (82 samples, 0.08%)</title><rect x="36.7697%" y="1365" width="0.0766%" height="15" fill="rgb(208,167,24)"/><text x="37.0197%" y="1375.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (167 samples, 0.16%)</title><rect x="37.0538%" y="1349" width="0.1561%" height="15" fill="rgb(245,73,45)"/><text x="37.3038%" y="1359.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (128 samples, 0.12%)</title><rect x="37.2098%" y="1349" width="0.1196%" height="15" fill="rgb(237,203,48)"/><text x="37.4598%" y="1359.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (13 samples, 0.01%)</title><rect x="37.3173%" y="1333" width="0.0121%" height="15" fill="rgb(211,197,16)"/><text x="37.5673%" y="1343.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.01%)</title><rect x="37.3294%" y="1349" width="0.0103%" height="15" fill="rgb(243,99,51)"/><text x="37.5794%" y="1359.50"></text></g><g><title>[libc-2.31.so] (216 samples, 0.20%)</title><rect x="37.7079%" y="1221" width="0.2019%" height="15" fill="rgb(215,123,29)"/><text x="37.9579%" y="1231.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (66 samples, 0.06%)</title><rect x="37.9145%" y="1221" width="0.0617%" height="15" fill="rgb(239,186,37)"/><text x="38.1645%" y="1231.50"></text></g><g><title>core::ptr::read (64 samples, 0.06%)</title><rect x="37.9163%" y="1205" width="0.0598%" height="15" fill="rgb(252,136,39)"/><text x="38.1663%" y="1215.50"></text></g><g><title>[libc-2.31.so] (64 samples, 0.06%)</title><rect x="37.9163%" y="1189" width="0.0598%" height="15" fill="rgb(223,213,32)"/><text x="38.1663%" y="1199.50"></text></g><g><title>[libc-2.31.so] (17 samples, 0.02%)</title><rect x="37.9762%" y="1141" width="0.0159%" height="15" fill="rgb(233,115,5)"/><text x="38.2262%" y="1151.50"></text></g><g><title>alloc::alloc::box_free (26 samples, 0.02%)</title><rect x="37.9762%" y="1189" width="0.0243%" height="15" fill="rgb(207,226,44)"/><text x="38.2262%" y="1199.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (26 samples, 0.02%)</title><rect x="37.9762%" y="1173" width="0.0243%" height="15" fill="rgb(208,126,0)"/><text x="38.2262%" y="1183.50"></text></g><g><title>alloc::alloc::dealloc (26 samples, 0.02%)</title><rect x="37.9762%" y="1157" width="0.0243%" height="15" fill="rgb(244,66,21)"/><text x="38.2262%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),model::rho_types::ExecutionError&gt;+core::marker::Send&gt;&gt;&gt; (29 samples, 0.03%)</title><rect x="37.9762%" y="1221" width="0.0271%" height="15" fill="rgb(222,97,12)"/><text x="38.2262%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),model::rho_types::ExecutionError&gt;+core::marker::Send&gt;&gt; (29 samples, 0.03%)</title><rect x="37.9762%" y="1205" width="0.0271%" height="15" fill="rgb(219,213,19)"/><text x="38.2262%" y="1215.50"></text></g><g><title>[libc-2.31.so] (25 samples, 0.02%)</title><rect x="38.0107%" y="1189" width="0.0234%" height="15" fill="rgb(252,169,30)"/><text x="38.2607%" y="1199.50"></text></g><g><title>__libc_malloc (13 samples, 0.01%)</title><rect x="38.0341%" y="1125" width="0.0121%" height="15" fill="rgb(206,32,51)"/><text x="38.2841%" y="1135.50"></text></g><g><title>&lt;model::rho_types::Par as rho_runtime::interpreter::reduce::eval_expression::AsyncParExpressionEvaluator&lt;S&gt;&gt;::evaluate_single_expression::{{closure}} (433 samples, 0.40%)</title><rect x="37.6472%" y="1237" width="0.4047%" height="15" fill="rgb(250,172,42)"/><text x="37.8972%" y="1247.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_expression::expr_instance::&lt;impl rho_runtime::interpreter::reduce::AsyncEvaluator&lt;S&gt; for model::rho_types::Expr&gt;::evaluate (52 samples, 0.05%)</title><rect x="38.0033%" y="1221" width="0.0486%" height="15" fill="rgb(209,34,43)"/><text x="38.2533%" y="1231.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (52 samples, 0.05%)</title><rect x="38.0033%" y="1205" width="0.0486%" height="15" fill="rgb(223,11,35)"/><text x="38.2533%" y="1215.50"></text></g><g><title>alloc::alloc::exchange_malloc (19 samples, 0.02%)</title><rect x="38.0341%" y="1189" width="0.0178%" height="15" fill="rgb(251,219,26)"/><text x="38.2841%" y="1199.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (19 samples, 0.02%)</title><rect x="38.0341%" y="1173" width="0.0178%" height="15" fill="rgb(231,119,3)"/><text x="38.2841%" y="1183.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (19 samples, 0.02%)</title><rect x="38.0341%" y="1157" width="0.0178%" height="15" fill="rgb(216,97,11)"/><text x="38.2841%" y="1167.50"></text></g><g><title>alloc::alloc::alloc (19 samples, 0.02%)</title><rect x="38.0341%" y="1141" width="0.0178%" height="15" fill="rgb(223,59,9)"/><text x="38.2841%" y="1151.50"></text></g><g><title>[libc-2.31.so] (52 samples, 0.05%)</title><rect x="38.0518%" y="1237" width="0.0486%" height="15" fill="rgb(233,93,31)"/><text x="38.3018%" y="1247.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (43 samples, 0.04%)</title><rect x="38.1182%" y="1221" width="0.0402%" height="15" fill="rgb(239,81,33)"/><text x="38.3682%" y="1231.50"></text></g><g><title>[libc-2.31.so] (42 samples, 0.04%)</title><rect x="38.1191%" y="1205" width="0.0393%" height="15" fill="rgb(213,120,34)"/><text x="38.3691%" y="1215.50"></text></g><g><title>[libc-2.31.so] (80 samples, 0.07%)</title><rect x="38.1631%" y="1189" width="0.0748%" height="15" fill="rgb(243,49,53)"/><text x="38.4131%" y="1199.50"></text></g><g><title>__libc_malloc (19 samples, 0.02%)</title><rect x="38.2406%" y="1125" width="0.0178%" height="15" fill="rgb(247,216,33)"/><text x="38.4906%" y="1135.50"></text></g><g><title>&lt;model::rho_types::Par as rho_runtime::interpreter::reduce::eval_expression::AsyncParExpressionEvaluator&lt;S&gt;&gt;::evaluate_single_expression (117 samples, 0.11%)</title><rect x="38.1584%" y="1221" width="0.1093%" height="15" fill="rgb(226,26,14)"/><text x="38.4084%" y="1231.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (117 samples, 0.11%)</title><rect x="38.1584%" y="1205" width="0.1093%" height="15" fill="rgb(215,49,53)"/><text x="38.4084%" y="1215.50"></text></g><g><title>alloc::alloc::exchange_malloc (32 samples, 0.03%)</title><rect x="38.2378%" y="1189" width="0.0299%" height="15" fill="rgb(245,162,40)"/><text x="38.4878%" y="1199.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (32 samples, 0.03%)</title><rect x="38.2378%" y="1173" width="0.0299%" height="15" fill="rgb(229,68,17)"/><text x="38.4878%" y="1183.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (32 samples, 0.03%)</title><rect x="38.2378%" y="1157" width="0.0299%" height="15" fill="rgb(213,182,10)"/><text x="38.4878%" y="1167.50"></text></g><g><title>alloc::alloc::alloc (32 samples, 0.03%)</title><rect x="38.2378%" y="1141" width="0.0299%" height="15" fill="rgb(245,125,30)"/><text x="38.4878%" y="1151.50"></text></g><g><title>[libc-2.31.so] (207 samples, 0.19%)</title><rect x="38.2677%" y="1221" width="0.1935%" height="15" fill="rgb(232,202,2)"/><text x="38.5177%" y="1231.50"></text></g><g><title>[libc-2.31.so] (21 samples, 0.02%)</title><rect x="38.4621%" y="1141" width="0.0196%" height="15" fill="rgb(237,140,51)"/><text x="38.7121%" y="1151.50"></text></g><g><title>alloc::alloc::box_free (47 samples, 0.04%)</title><rect x="38.4612%" y="1189" width="0.0439%" height="15" fill="rgb(236,157,25)"/><text x="38.7112%" y="1199.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (46 samples, 0.04%)</title><rect x="38.4621%" y="1173" width="0.0430%" height="15" fill="rgb(219,209,0)"/><text x="38.7121%" y="1183.50"></text></g><g><title>alloc::alloc::dealloc (46 samples, 0.04%)</title><rect x="38.4621%" y="1157" width="0.0430%" height="15" fill="rgb(240,116,54)"/><text x="38.7121%" y="1167.50"></text></g><g><title>cfree (16 samples, 0.01%)</title><rect x="38.4901%" y="1141" width="0.0150%" height="15" fill="rgb(216,10,36)"/><text x="38.7401%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;model::rho_types::Expr,model::rho_types::ExecutionError&gt;+core::marker::Send&gt;&gt;&gt; (50 samples, 0.05%)</title><rect x="38.4612%" y="1221" width="0.0467%" height="15" fill="rgb(222,72,44)"/><text x="38.7112%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;model::rho_types::Expr,model::rho_types::ExecutionError&gt;+core::marker::Send&gt;&gt; (50 samples, 0.05%)</title><rect x="38.4612%" y="1205" width="0.0467%" height="15" fill="rgb(232,159,9)"/><text x="38.7112%" y="1215.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (945 samples, 0.88%)</title><rect x="37.6322%" y="1269" width="0.8831%" height="15" fill="rgb(210,39,32)"/><text x="37.8822%" y="1279.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (944 samples, 0.88%)</title><rect x="37.6332%" y="1253" width="0.8822%" height="15" fill="rgb(216,194,45)"/><text x="37.8832%" y="1263.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_expression::eval_eplus::&lt;impl rho_runtime::interpreter::reduce::eval_expression::AsyncExprInstanceEvaluator&lt;S&gt; for model::rho_types::EPlus&gt;::evaluate::{{closure}} (444 samples, 0.41%)</title><rect x="38.1004%" y="1237" width="0.4149%" height="15" fill="rgb(218,18,35)"/><text x="38.3504%" y="1247.50"></text></g><g><title>[libc-2.31.so] (64 samples, 0.06%)</title><rect x="38.5191%" y="1253" width="0.0598%" height="15" fill="rgb(207,83,51)"/><text x="38.7691%" y="1263.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (69 samples, 0.06%)</title><rect x="38.5154%" y="1269" width="0.0645%" height="15" fill="rgb(225,63,43)"/><text x="38.7654%" y="1279.50"></text></g><g><title>[libc-2.31.so] (81 samples, 0.08%)</title><rect x="38.5836%" y="1237" width="0.0757%" height="15" fill="rgb(207,57,36)"/><text x="38.8336%" y="1247.50"></text></g><g><title>__libc_malloc (20 samples, 0.02%)</title><rect x="38.6621%" y="1173" width="0.0187%" height="15" fill="rgb(216,99,33)"/><text x="38.9121%" y="1183.50"></text></g><g><title>&lt;model::rho_types::Par as rho_runtime::interpreter::reduce::eval_expression::AsyncParExpressionEvaluator&lt;S&gt;&gt;::evaluate_single_expression (109 samples, 0.10%)</title><rect x="38.5799%" y="1269" width="0.1019%" height="15" fill="rgb(225,42,16)"/><text x="38.8299%" y="1279.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (109 samples, 0.10%)</title><rect x="38.5799%" y="1253" width="0.1019%" height="15" fill="rgb(220,201,45)"/><text x="38.8299%" y="1263.50"></text></g><g><title>alloc::alloc::exchange_malloc (24 samples, 0.02%)</title><rect x="38.6593%" y="1237" width="0.0224%" height="15" fill="rgb(225,33,4)"/><text x="38.9093%" y="1247.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (24 samples, 0.02%)</title><rect x="38.6593%" y="1221" width="0.0224%" height="15" fill="rgb(224,33,50)"/><text x="38.9093%" y="1231.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (24 samples, 0.02%)</title><rect x="38.6593%" y="1205" width="0.0224%" height="15" fill="rgb(246,198,51)"/><text x="38.9093%" y="1215.50"></text></g><g><title>alloc::alloc::alloc (23 samples, 0.02%)</title><rect x="38.6602%" y="1189" width="0.0215%" height="15" fill="rgb(205,22,4)"/><text x="38.9102%" y="1199.50"></text></g><g><title>[libc-2.31.so] (261 samples, 0.24%)</title><rect x="38.6817%" y="1269" width="0.2439%" height="15" fill="rgb(206,3,8)"/><text x="38.9317%" y="1279.50"></text></g><g><title>[libc-2.31.so] (44 samples, 0.04%)</title><rect x="38.9378%" y="1157" width="0.0411%" height="15" fill="rgb(251,23,15)"/><text x="39.1878%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Expr&gt;&gt; (53 samples, 0.05%)</title><rect x="38.9341%" y="1237" width="0.0495%" height="15" fill="rgb(252,88,28)"/><text x="39.1841%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::Expr&gt;&gt; (52 samples, 0.05%)</title><rect x="38.9350%" y="1221" width="0.0486%" height="15" fill="rgb(212,127,14)"/><text x="39.1850%" y="1231.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (52 samples, 0.05%)</title><rect x="38.9350%" y="1205" width="0.0486%" height="15" fill="rgb(247,145,37)"/><text x="39.1850%" y="1215.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (52 samples, 0.05%)</title><rect x="38.9350%" y="1189" width="0.0486%" height="15" fill="rgb(209,117,53)"/><text x="39.1850%" y="1199.50"></text></g><g><title>alloc::alloc::dealloc (49 samples, 0.05%)</title><rect x="38.9378%" y="1173" width="0.0458%" height="15" fill="rgb(212,90,42)"/><text x="39.1878%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Par&gt; (77 samples, 0.07%)</title><rect x="38.9266%" y="1253" width="0.0720%" height="15" fill="rgb(218,164,37)"/><text x="39.1766%" y="1263.50"></text></g><g><title>[libc-2.31.so] (14 samples, 0.01%)</title><rect x="39.0126%" y="1205" width="0.0131%" height="15" fill="rgb(246,65,34)"/><text x="39.2626%" y="1215.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (19 samples, 0.02%)</title><rect x="39.0406%" y="1141" width="0.0178%" height="15" fill="rgb(231,100,33)"/><text x="39.2906%" y="1151.50"></text></g><g><title>alloc::alloc::dealloc (18 samples, 0.02%)</title><rect x="39.0415%" y="1125" width="0.0168%" height="15" fill="rgb(228,126,14)"/><text x="39.2915%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Expr&gt;&gt; (20 samples, 0.02%)</title><rect x="39.0406%" y="1189" width="0.0187%" height="15" fill="rgb(215,173,21)"/><text x="39.2906%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::Expr&gt;&gt; (20 samples, 0.02%)</title><rect x="39.0406%" y="1173" width="0.0187%" height="15" fill="rgb(210,6,40)"/><text x="39.2906%" y="1183.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.02%)</title><rect x="39.0406%" y="1157" width="0.0187%" height="15" fill="rgb(212,48,18)"/><text x="39.2906%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::ELt&gt; (60 samples, 0.06%)</title><rect x="39.0116%" y="1237" width="0.0561%" height="15" fill="rgb(230,214,11)"/><text x="39.2616%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;model::rho_types::Par&gt;&gt; (60 samples, 0.06%)</title><rect x="39.0116%" y="1221" width="0.0561%" height="15" fill="rgb(254,105,39)"/><text x="39.2616%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Par&gt; (34 samples, 0.03%)</title><rect x="39.0359%" y="1205" width="0.0318%" height="15" fill="rgb(245,158,5)"/><text x="39.2859%" y="1215.50"></text></g><g><title>[libc-2.31.so] (28 samples, 0.03%)</title><rect x="39.0677%" y="1205" width="0.0262%" height="15" fill="rgb(249,208,11)"/><text x="39.3177%" y="1215.50"></text></g><g><title>[libc-2.31.so] (39 samples, 0.04%)</title><rect x="39.1032%" y="1109" width="0.0364%" height="15" fill="rgb(210,39,28)"/><text x="39.3532%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Expr&gt;&gt; (49 samples, 0.05%)</title><rect x="39.0985%" y="1189" width="0.0458%" height="15" fill="rgb(211,56,53)"/><text x="39.3485%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::Expr&gt;&gt; (44 samples, 0.04%)</title><rect x="39.1032%" y="1173" width="0.0411%" height="15" fill="rgb(226,201,30)"/><text x="39.3532%" y="1183.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 0.04%)</title><rect x="39.1032%" y="1157" width="0.0411%" height="15" fill="rgb(239,101,34)"/><text x="39.3532%" y="1167.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (44 samples, 0.04%)</title><rect x="39.1032%" y="1141" width="0.0411%" height="15" fill="rgb(226,209,5)"/><text x="39.3532%" y="1151.50"></text></g><g><title>alloc::alloc::dealloc (44 samples, 0.04%)</title><rect x="39.1032%" y="1125" width="0.0411%" height="15" fill="rgb(250,105,47)"/><text x="39.3532%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;model::rho_types::expr::ExprInstance&gt;&gt; (249 samples, 0.23%)</title><rect x="38.9256%" y="1269" width="0.2327%" height="15" fill="rgb(230,72,3)"/><text x="39.1756%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::expr::ExprInstance&gt; (171 samples, 0.16%)</title><rect x="38.9985%" y="1253" width="0.1598%" height="15" fill="rgb(232,218,39)"/><text x="39.2485%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::EPlus&gt; (97 samples, 0.09%)</title><rect x="39.0677%" y="1237" width="0.0907%" height="15" fill="rgb(248,166,6)"/><text x="39.3177%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;model::rho_types::Par&gt;&gt; (97 samples, 0.09%)</title><rect x="39.0677%" y="1221" width="0.0907%" height="15" fill="rgb(247,89,20)"/><text x="39.3177%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Par&gt; (68 samples, 0.06%)</title><rect x="39.0948%" y="1205" width="0.0635%" height="15" fill="rgb(248,130,54)"/><text x="39.3448%" y="1215.50"></text></g><g><title>[libc-2.31.so] (19 samples, 0.02%)</title><rect x="39.1602%" y="1189" width="0.0178%" height="15" fill="rgb(234,196,4)"/><text x="39.4102%" y="1199.50"></text></g><g><title>alloc::alloc::box_free (29 samples, 0.03%)</title><rect x="39.1583%" y="1237" width="0.0271%" height="15" fill="rgb(250,143,31)"/><text x="39.4083%" y="1247.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (27 samples, 0.03%)</title><rect x="39.1602%" y="1221" width="0.0252%" height="15" fill="rgb(211,110,34)"/><text x="39.4102%" y="1231.50"></text></g><g><title>alloc::alloc::dealloc (27 samples, 0.03%)</title><rect x="39.1602%" y="1205" width="0.0252%" height="15" fill="rgb(215,124,48)"/><text x="39.4102%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;model::rho_types::Expr,model::rho_types::ExecutionError&gt;+core::marker::Send&gt;&gt;&gt; (31 samples, 0.03%)</title><rect x="39.1583%" y="1269" width="0.0290%" height="15" fill="rgb(216,46,13)"/><text x="39.4083%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;model::rho_types::Expr,model::rho_types::ExecutionError&gt;+core::marker::Send&gt;&gt; (31 samples, 0.03%)</title><rect x="39.1583%" y="1253" width="0.0290%" height="15" fill="rgb(205,184,25)"/><text x="39.4083%" y="1263.50"></text></g><g><title>alloc::alloc::box_free (18 samples, 0.02%)</title><rect x="39.1873%" y="1237" width="0.0168%" height="15" fill="rgb(228,1,10)"/><text x="39.4373%" y="1247.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (18 samples, 0.02%)</title><rect x="39.1873%" y="1221" width="0.0168%" height="15" fill="rgb(213,116,27)"/><text x="39.4373%" y="1231.50"></text></g><g><title>alloc::alloc::dealloc (18 samples, 0.02%)</title><rect x="39.1873%" y="1205" width="0.0168%" height="15" fill="rgb(241,95,50)"/><text x="39.4373%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;model::rho_types::expr::ExprInstance,model::rho_types::ExecutionError&gt;+core::marker::Send&gt;&gt;&gt; (19 samples, 0.02%)</title><rect x="39.1873%" y="1269" width="0.0178%" height="15" fill="rgb(238,48,32)"/><text x="39.4373%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;model::rho_types::expr::ExprInstance,model::rho_types::ExecutionError&gt;+core::marker::Send&gt;&gt; (19 samples, 0.02%)</title><rect x="39.1873%" y="1253" width="0.0178%" height="15" fill="rgb(235,113,49)"/><text x="39.4373%" y="1263.50"></text></g><g><title>[libc-2.31.so] (21 samples, 0.02%)</title><rect x="39.2088%" y="1237" width="0.0196%" height="15" fill="rgb(205,127,43)"/><text x="39.4588%" y="1247.50"></text></g><g><title>__libc_malloc (23 samples, 0.02%)</title><rect x="39.2294%" y="1173" width="0.0215%" height="15" fill="rgb(250,162,2)"/><text x="39.4794%" y="1183.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_expression::eval_eplus::&lt;impl rho_runtime::interpreter::reduce::eval_expression::AsyncExprInstanceEvaluator&lt;S&gt; for model::rho_types::EPlus&gt;::evaluate (51 samples, 0.05%)</title><rect x="39.2051%" y="1269" width="0.0477%" height="15" fill="rgb(220,13,41)"/><text x="39.4551%" y="1279.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (51 samples, 0.05%)</title><rect x="39.2051%" y="1253" width="0.0477%" height="15" fill="rgb(249,221,25)"/><text x="39.4551%" y="1263.50"></text></g><g><title>alloc::alloc::exchange_malloc (26 samples, 0.02%)</title><rect x="39.2284%" y="1237" width="0.0243%" height="15" fill="rgb(215,208,19)"/><text x="39.4784%" y="1247.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (26 samples, 0.02%)</title><rect x="39.2284%" y="1221" width="0.0243%" height="15" fill="rgb(236,175,2)"/><text x="39.4784%" y="1231.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (26 samples, 0.02%)</title><rect x="39.2284%" y="1205" width="0.0243%" height="15" fill="rgb(241,52,2)"/><text x="39.4784%" y="1215.50"></text></g><g><title>alloc::alloc::alloc (25 samples, 0.02%)</title><rect x="39.2294%" y="1189" width="0.0234%" height="15" fill="rgb(248,140,14)"/><text x="39.4794%" y="1199.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,821 samples, 1.70%)</title><rect x="37.5612%" y="1317" width="1.7018%" height="15" fill="rgb(253,22,42)"/><text x="37.8112%" y="1327.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,820 samples, 1.70%)</title><rect x="37.5621%" y="1301" width="1.7009%" height="15" fill="rgb(234,61,47)"/><text x="37.8121%" y="1311.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_expression::expr_instance::&lt;impl rho_runtime::interpreter::reduce::AsyncEvaluator&lt;S&gt; for model::rho_types::Expr&gt;::evaluate::{{closure}} (1,812 samples, 1.69%)</title><rect x="37.5696%" y="1285" width="1.6934%" height="15" fill="rgb(208,226,15)"/><text x="37.8196%" y="1295.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_expression::expr_instance::&lt;impl rho_runtime::interpreter::reduce::AsyncEvaluator&lt;S&gt; for model::rho_types::Expr&gt;::evaluate::{{closure}}::relop (11 samples, 0.01%)</title><rect x="39.2527%" y="1269" width="0.0103%" height="15" fill="rgb(217,221,4)"/><text x="39.5027%" y="1279.50"></text></g><g><title>core::ptr::read (60 samples, 0.06%)</title><rect x="39.2668%" y="1301" width="0.0561%" height="15" fill="rgb(212,174,34)"/><text x="39.5168%" y="1311.50"></text></g><g><title>[libc-2.31.so] (55 samples, 0.05%)</title><rect x="39.2714%" y="1285" width="0.0514%" height="15" fill="rgb(253,83,4)"/><text x="39.5214%" y="1295.50"></text></g><g><title>&lt;smallvec::IntoIter&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (66 samples, 0.06%)</title><rect x="39.2640%" y="1317" width="0.0617%" height="15" fill="rgb(250,195,49)"/><text x="39.5140%" y="1327.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (70 samples, 0.07%)</title><rect x="39.5247%" y="1301" width="0.0654%" height="15" fill="rgb(241,192,25)"/><text x="39.7747%" y="1311.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (60 samples, 0.06%)</title><rect x="39.5340%" y="1285" width="0.0561%" height="15" fill="rgb(208,124,10)"/><text x="39.7840%" y="1295.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (60 samples, 0.06%)</title><rect x="39.5340%" y="1269" width="0.0561%" height="15" fill="rgb(222,33,0)"/><text x="39.7840%" y="1279.50"></text></g><g><title>core::ptr::read (60 samples, 0.06%)</title><rect x="39.5340%" y="1253" width="0.0561%" height="15" fill="rgb(234,209,28)"/><text x="39.7840%" y="1263.50"></text></g><g><title>[libc-2.31.so] (52 samples, 0.05%)</title><rect x="39.5415%" y="1237" width="0.0486%" height="15" fill="rgb(224,11,23)"/><text x="39.7915%" y="1247.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (18 samples, 0.02%)</title><rect x="39.5901%" y="1301" width="0.0168%" height="15" fill="rgb(232,99,1)"/><text x="39.8401%" y="1311.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (18 samples, 0.02%)</title><rect x="39.5901%" y="1285" width="0.0168%" height="15" fill="rgb(237,95,45)"/><text x="39.8401%" y="1295.50"></text></g><g><title>core::ptr::write (48 samples, 0.04%)</title><rect x="39.6097%" y="1301" width="0.0449%" height="15" fill="rgb(208,109,11)"/><text x="39.8597%" y="1311.50"></text></g><g><title>[libc-2.31.so] (43 samples, 0.04%)</title><rect x="39.6144%" y="1285" width="0.0402%" height="15" fill="rgb(216,190,48)"/><text x="39.8644%" y="1295.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (357 samples, 0.33%)</title><rect x="39.3256%" y="1317" width="0.3336%" height="15" fill="rgb(251,171,36)"/><text x="39.5756%" y="1327.50"></text></g><g><title>[libc-2.31.so] (308 samples, 0.29%)</title><rect x="39.6630%" y="1301" width="0.2878%" height="15" fill="rgb(230,62,22)"/><text x="39.9130%" y="1311.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (318 samples, 0.30%)</title><rect x="39.6593%" y="1317" width="0.2972%" height="15" fill="rgb(225,114,35)"/><text x="39.9093%" y="1327.50"></text></g><g><title>[libc-2.31.so] (614 samples, 0.57%)</title><rect x="39.9565%" y="1317" width="0.5738%" height="15" fill="rgb(215,118,42)"/><text x="40.2065%" y="1327.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (14 samples, 0.01%)</title><rect x="40.5303%" y="1317" width="0.0131%" height="15" fill="rgb(243,119,21)"/><text x="40.7803%" y="1327.50"></text></g><g><title>[libc-2.31.so] (22 samples, 0.02%)</title><rect x="40.5546%" y="1237" width="0.0206%" height="15" fill="rgb(252,177,53)"/><text x="40.8046%" y="1247.50"></text></g><g><title>alloc::alloc::box_free (39 samples, 0.04%)</title><rect x="40.5490%" y="1285" width="0.0364%" height="15" fill="rgb(237,209,29)"/><text x="40.7990%" y="1295.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (39 samples, 0.04%)</title><rect x="40.5490%" y="1269" width="0.0364%" height="15" fill="rgb(212,65,23)"/><text x="40.7990%" y="1279.50"></text></g><g><title>alloc::alloc::dealloc (36 samples, 0.03%)</title><rect x="40.5518%" y="1253" width="0.0336%" height="15" fill="rgb(230,222,46)"/><text x="40.8018%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),model::rho_types::ExecutionError&gt;+core::marker::Send&gt;&gt;&gt; (47 samples, 0.04%)</title><rect x="40.5433%" y="1317" width="0.0439%" height="15" fill="rgb(215,135,32)"/><text x="40.7933%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),model::rho_types::ExecutionError&gt;+core::marker::Send&gt;&gt; (47 samples, 0.04%)</title><rect x="40.5433%" y="1301" width="0.0439%" height="15" fill="rgb(246,101,22)"/><text x="40.7933%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;smallvec::IntoIter&lt;[model::rho_types::Expr: 5]&gt;&gt; (13 samples, 0.01%)</title><rect x="40.5873%" y="1317" width="0.0121%" height="15" fill="rgb(206,107,13)"/><text x="40.8373%" y="1327.50"></text></g><g><title>[libc-2.31.so] (51 samples, 0.05%)</title><rect x="40.6153%" y="1301" width="0.0477%" height="15" fill="rgb(250,100,44)"/><text x="40.8653%" y="1311.50"></text></g><g><title>model::rho_types::Par::append_expr (137 samples, 0.13%)</title><rect x="40.5994%" y="1317" width="0.1280%" height="15" fill="rgb(231,147,38)"/><text x="40.8494%" y="1327.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (69 samples, 0.06%)</title><rect x="40.6630%" y="1301" width="0.0645%" height="15" fill="rgb(229,8,40)"/><text x="40.9130%" y="1311.50"></text></g><g><title>core::ptr::write (68 samples, 0.06%)</title><rect x="40.6639%" y="1285" width="0.0635%" height="15" fill="rgb(221,135,30)"/><text x="40.9139%" y="1295.50"></text></g><g><title>[libc-2.31.so] (67 samples, 0.06%)</title><rect x="40.6648%" y="1269" width="0.0626%" height="15" fill="rgb(249,193,18)"/><text x="40.9148%" y="1279.50"></text></g><g><title>[libc-2.31.so] (12 samples, 0.01%)</title><rect x="40.7377%" y="1285" width="0.0112%" height="15" fill="rgb(209,133,39)"/><text x="40.9877%" y="1295.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_expression::expr_instance::&lt;impl rho_runtime::interpreter::reduce::AsyncEvaluator&lt;S&gt; for model::rho_types::Expr&gt;::evaluate (39 samples, 0.04%)</title><rect x="40.7274%" y="1317" width="0.0364%" height="15" fill="rgb(232,100,14)"/><text x="40.9774%" y="1327.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (39 samples, 0.04%)</title><rect x="40.7274%" y="1301" width="0.0364%" height="15" fill="rgb(224,185,1)"/><text x="40.9774%" y="1311.50"></text></g><g><title>alloc::alloc::exchange_malloc (16 samples, 0.01%)</title><rect x="40.7489%" y="1285" width="0.0150%" height="15" fill="rgb(223,139,8)"/><text x="40.9989%" y="1295.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.01%)</title><rect x="40.7489%" y="1269" width="0.0150%" height="15" fill="rgb(232,213,38)"/><text x="40.9989%" y="1279.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.01%)</title><rect x="40.7489%" y="1253" width="0.0150%" height="15" fill="rgb(207,94,22)"/><text x="40.9989%" y="1263.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.01%)</title><rect x="40.7489%" y="1237" width="0.0150%" height="15" fill="rgb(219,183,54)"/><text x="40.9989%" y="1247.50"></text></g><g><title>&lt;model::rho_types::Par as rho_runtime::interpreter::reduce::eval_expression::AsyncParExpressionEvaluator&lt;S&gt;&gt;::evaluate_nested_expressions::{{closure}} (3,541 samples, 3.31%)</title><rect x="37.4565%" y="1333" width="3.3092%" height="15" fill="rgb(216,185,54)"/><text x="37.7065%" y="1343.50">&lt;mo..</text></g><g><title>[libc-2.31.so] (118 samples, 0.11%)</title><rect x="40.7732%" y="1301" width="0.1103%" height="15" fill="rgb(254,217,39)"/><text x="41.0232%" y="1311.50"></text></g><g><title>[libc-2.31.so] (52 samples, 0.05%)</title><rect x="40.8901%" y="1253" width="0.0486%" height="15" fill="rgb(240,178,23)"/><text x="41.1401%" y="1263.50"></text></g><g><title>&lt;tokio::sync::oneshot::Inner&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="40.9489%" y="1221" width="0.0112%" height="15" fill="rgb(218,11,47)"/><text x="41.1989%" y="1231.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (24 samples, 0.02%)</title><rect x="40.9387%" y="1253" width="0.0224%" height="15" fill="rgb(218,51,51)"/><text x="41.1887%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::oneshot::Inner&lt;core::option::Option&lt;smallvec::SmallVec&lt;[(rho_runtime::storage::TaggedContinuation,smallvec::SmallVec&lt;[model::rho_types::ListParWithRandom: 3]&gt;): 3]&gt;&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="40.9489%" y="1237" width="0.0121%" height="15" fill="rgb(238,126,27)"/><text x="41.1989%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::sync::oneshot::Inner&lt;core::option::Option&lt;smallvec::SmallVec&lt;[(rho_runtime::storage::TaggedContinuation,smallvec::SmallVec&lt;[model::rho_types::ListParWithRandom: 3]&gt;): 3]&gt;&gt;&gt;&gt;&gt;&gt; (115 samples, 0.11%)</title><rect x="40.8901%" y="1301" width="0.1075%" height="15" fill="rgb(249,202,22)"/><text x="41.1401%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::sync::oneshot::Inner&lt;core::option::Option&lt;smallvec::SmallVec&lt;[(rho_runtime::storage::TaggedContinuation,smallvec::SmallVec&lt;[model::rho_types::ListParWithRandom: 3]&gt;): 3]&gt;&gt;&gt;&gt;&gt; (115 samples, 0.11%)</title><rect x="40.8901%" y="1285" width="0.1075%" height="15" fill="rgb(254,195,49)"/><text x="41.1401%" y="1295.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (115 samples, 0.11%)</title><rect x="40.8901%" y="1269" width="0.1075%" height="15" fill="rgb(208,123,14)"/><text x="41.1401%" y="1279.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (36 samples, 0.03%)</title><rect x="40.9639%" y="1253" width="0.0336%" height="15" fill="rgb(224,200,8)"/><text x="41.2139%" y="1263.50"></text></g><g><title>core::sync::atomic::atomic_sub (36 samples, 0.03%)</title><rect x="40.9639%" y="1237" width="0.0336%" height="15" fill="rgb(217,61,36)"/><text x="41.2139%" y="1247.50"></text></g><g><title>[libc-2.31.so] (112 samples, 0.10%)</title><rect x="41.0209%" y="1285" width="0.1047%" height="15" fill="rgb(206,35,45)"/><text x="41.2709%" y="1295.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (24 samples, 0.02%)</title><rect x="41.1312%" y="1221" width="0.0224%" height="15" fill="rgb(217,65,33)"/><text x="41.3812%" y="1231.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (24 samples, 0.02%)</title><rect x="41.1312%" y="1205" width="0.0224%" height="15" fill="rgb(222,158,48)"/><text x="41.3812%" y="1215.50"></text></g><g><title>core::mem::replace (24 samples, 0.02%)</title><rect x="41.1312%" y="1189" width="0.0224%" height="15" fill="rgb(254,2,54)"/><text x="41.3812%" y="1199.50"></text></g><g><title>core::mem::swap (24 samples, 0.02%)</title><rect x="41.1312%" y="1173" width="0.0224%" height="15" fill="rgb(250,143,38)"/><text x="41.3812%" y="1183.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (24 samples, 0.02%)</title><rect x="41.1312%" y="1157" width="0.0224%" height="15" fill="rgb(248,25,0)"/><text x="41.3812%" y="1167.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (24 samples, 0.02%)</title><rect x="41.1312%" y="1141" width="0.0224%" height="15" fill="rgb(206,152,27)"/><text x="41.3812%" y="1151.50"></text></g><g><title>tokio::coop::poll_proceed (33 samples, 0.03%)</title><rect x="41.1256%" y="1285" width="0.0308%" height="15" fill="rgb(240,77,30)"/><text x="41.3756%" y="1295.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (33 samples, 0.03%)</title><rect x="41.1256%" y="1269" width="0.0308%" height="15" fill="rgb(231,5,3)"/><text x="41.3756%" y="1279.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (33 samples, 0.03%)</title><rect x="41.1256%" y="1253" width="0.0308%" height="15" fill="rgb(207,226,32)"/><text x="41.3756%" y="1263.50"></text></g><g><title>tokio::coop::poll_proceed::{{closure}} (30 samples, 0.03%)</title><rect x="41.1284%" y="1237" width="0.0280%" height="15" fill="rgb(222,207,47)"/><text x="41.3784%" y="1247.50"></text></g><g><title>tokio::sync::oneshot::Inner&lt;T&gt;::consume_value (117 samples, 0.11%)</title><rect x="41.1564%" y="1285" width="0.1093%" height="15" fill="rgb(229,115,45)"/><text x="41.4064%" y="1295.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (117 samples, 0.11%)</title><rect x="41.1564%" y="1269" width="0.1093%" height="15" fill="rgb(224,191,6)"/><text x="41.4064%" y="1279.50"></text></g><g><title>tokio::sync::oneshot::Inner&lt;T&gt;::consume_value::{{closure}} (117 samples, 0.11%)</title><rect x="41.1564%" y="1253" width="0.1093%" height="15" fill="rgb(230,227,24)"/><text x="41.4064%" y="1263.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (117 samples, 0.11%)</title><rect x="41.1564%" y="1237" width="0.1093%" height="15" fill="rgb(228,80,19)"/><text x="41.4064%" y="1247.50"></text></g><g><title>core::mem::take (117 samples, 0.11%)</title><rect x="41.1564%" y="1221" width="0.1093%" height="15" fill="rgb(247,229,0)"/><text x="41.4064%" y="1231.50"></text></g><g><title>core::mem::replace (117 samples, 0.11%)</title><rect x="41.1564%" y="1205" width="0.1093%" height="15" fill="rgb(237,194,15)"/><text x="41.4064%" y="1215.50"></text></g><g><title>core::mem::swap (117 samples, 0.11%)</title><rect x="41.1564%" y="1189" width="0.1093%" height="15" fill="rgb(219,203,20)"/><text x="41.4064%" y="1199.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (117 samples, 0.11%)</title><rect x="41.1564%" y="1173" width="0.1093%" height="15" fill="rgb(234,128,8)"/><text x="41.4064%" y="1183.50"></text></g><g><title>core::ptr::swap_nonoverlapping (117 samples, 0.11%)</title><rect x="41.1564%" y="1157" width="0.1093%" height="15" fill="rgb(248,202,8)"/><text x="41.4064%" y="1167.50"></text></g><g><title>core::ptr::swap_nonoverlapping_bytes (117 samples, 0.11%)</title><rect x="41.1564%" y="1141" width="0.1093%" height="15" fill="rgb(206,104,37)"/><text x="41.4064%" y="1151.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (100 samples, 0.09%)</title><rect x="41.1723%" y="1125" width="0.0935%" height="15" fill="rgb(223,8,27)"/><text x="41.4223%" y="1135.50"></text></g><g><title>tokio::sync::oneshot::State::set_rx_task (12 samples, 0.01%)</title><rect x="41.2732%" y="1285" width="0.0112%" height="15" fill="rgb(216,217,28)"/><text x="41.5232%" y="1295.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (12 samples, 0.01%)</title><rect x="41.2732%" y="1269" width="0.0112%" height="15" fill="rgb(249,199,1)"/><text x="41.5232%" y="1279.50"></text></g><g><title>core::sync::atomic::atomic_or (12 samples, 0.01%)</title><rect x="41.2732%" y="1253" width="0.0112%" height="15" fill="rgb(240,85,17)"/><text x="41.5232%" y="1263.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (38 samples, 0.04%)</title><rect x="41.2844%" y="1237" width="0.0355%" height="15" fill="rgb(206,108,45)"/><text x="41.5344%" y="1247.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (24 samples, 0.02%)</title><rect x="41.2975%" y="1221" width="0.0224%" height="15" fill="rgb(245,210,41)"/><text x="41.5475%" y="1231.50"></text></g><g><title>tokio::runtime::task::state::State::ref_inc (24 samples, 0.02%)</title><rect x="41.2975%" y="1205" width="0.0224%" height="15" fill="rgb(206,13,37)"/><text x="41.5475%" y="1215.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (22 samples, 0.02%)</title><rect x="41.2994%" y="1189" width="0.0206%" height="15" fill="rgb(250,61,18)"/><text x="41.5494%" y="1199.50"></text></g><g><title>core::sync::atomic::atomic_add (22 samples, 0.02%)</title><rect x="41.2994%" y="1173" width="0.0206%" height="15" fill="rgb(235,172,48)"/><text x="41.5494%" y="1183.50"></text></g><g><title>&lt;rho_runtime::storage::coordinator::AsyncStore as rho_runtime::storage::Storage&gt;::produce::{{closure}} (600 samples, 0.56%)</title><rect x="40.7658%" y="1333" width="0.5607%" height="15" fill="rgb(249,201,17)"/><text x="41.0158%" y="1343.50"></text></g><g><title>&lt;tokio::sync::oneshot::Receiver&lt;T&gt; as core::future::future::Future&gt;::poll (598 samples, 0.56%)</title><rect x="40.7676%" y="1317" width="0.5589%" height="15" fill="rgb(219,208,6)"/><text x="41.0176%" y="1327.50"></text></g><g><title>tokio::sync::oneshot::Inner&lt;T&gt;::poll_recv (352 samples, 0.33%)</title><rect x="40.9975%" y="1301" width="0.3290%" height="15" fill="rgb(248,31,23)"/><text x="41.2475%" y="1311.50"></text></g><g><title>tokio::sync::oneshot::Task::set_task (45 samples, 0.04%)</title><rect x="41.2844%" y="1285" width="0.0421%" height="15" fill="rgb(245,15,42)"/><text x="41.5344%" y="1295.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (45 samples, 0.04%)</title><rect x="41.2844%" y="1269" width="0.0421%" height="15" fill="rgb(222,217,39)"/><text x="41.5344%" y="1279.50"></text></g><g><title>tokio::sync::oneshot::Task::set_task::{{closure}} (45 samples, 0.04%)</title><rect x="41.2844%" y="1253" width="0.0421%" height="15" fill="rgb(210,219,27)"/><text x="41.5344%" y="1263.50"></text></g><g><title>[libc-2.31.so] (17 samples, 0.02%)</title><rect x="41.4527%" y="1221" width="0.0159%" height="15" fill="rgb(252,166,36)"/><text x="41.7027%" y="1231.50"></text></g><g><title>[libc-2.31.so] (52 samples, 0.05%)</title><rect x="41.4732%" y="1205" width="0.0486%" height="15" fill="rgb(245,132,34)"/><text x="41.7232%" y="1215.50"></text></g><g><title>__libc_malloc (123 samples, 0.11%)</title><rect x="41.5218%" y="1141" width="0.1149%" height="15" fill="rgb(236,54,3)"/><text x="41.7718%" y="1151.50"></text></g><g><title>[libc-2.31.so] (64 samples, 0.06%)</title><rect x="41.5770%" y="1125" width="0.0598%" height="15" fill="rgb(241,173,43)"/><text x="41.8270%" y="1135.50"></text></g><g><title>&lt;rho_runtime::storage::coordinator::AsyncStore as rho_runtime::storage::Storage&gt;::produce (199 samples, 0.19%)</title><rect x="41.4517%" y="1237" width="0.1860%" height="15" fill="rgb(215,190,9)"/><text x="41.7017%" y="1247.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (181 samples, 0.17%)</title><rect x="41.4685%" y="1221" width="0.1692%" height="15" fill="rgb(242,101,16)"/><text x="41.7185%" y="1231.50"></text></g><g><title>alloc::alloc::exchange_malloc (124 samples, 0.12%)</title><rect x="41.5218%" y="1205" width="0.1159%" height="15" fill="rgb(223,190,21)"/><text x="41.7718%" y="1215.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (124 samples, 0.12%)</title><rect x="41.5218%" y="1189" width="0.1159%" height="15" fill="rgb(215,228,25)"/><text x="41.7718%" y="1199.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (124 samples, 0.12%)</title><rect x="41.5218%" y="1173" width="0.1159%" height="15" fill="rgb(225,36,22)"/><text x="41.7718%" y="1183.50"></text></g><g><title>alloc::alloc::alloc (124 samples, 0.12%)</title><rect x="41.5218%" y="1157" width="0.1159%" height="15" fill="rgb(251,106,46)"/><text x="41.7718%" y="1167.50"></text></g><g><title>[libc-2.31.so] (59 samples, 0.06%)</title><rect x="41.6377%" y="1237" width="0.0551%" height="15" fill="rgb(208,90,1)"/><text x="41.8877%" y="1247.50"></text></g><g><title>[libc-2.31.so] (70 samples, 0.07%)</title><rect x="41.7003%" y="1157" width="0.0654%" height="15" fill="rgb(243,10,4)"/><text x="41.9503%" y="1167.50"></text></g><g><title>alloc::alloc::box_free (88 samples, 0.08%)</title><rect x="41.6947%" y="1205" width="0.0822%" height="15" fill="rgb(212,137,27)"/><text x="41.9447%" y="1215.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (84 samples, 0.08%)</title><rect x="41.6984%" y="1189" width="0.0785%" height="15" fill="rgb(231,220,49)"/><text x="41.9484%" y="1199.50"></text></g><g><title>alloc::alloc::dealloc (82 samples, 0.08%)</title><rect x="41.7003%" y="1173" width="0.0766%" height="15" fill="rgb(237,96,20)"/><text x="41.9503%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::option::Option&lt;smallvec::SmallVec&lt;[(rho_runtime::storage::TaggedContinuation,smallvec::SmallVec&lt;[model::rho_types::ListParWithRandom: 3]&gt;): 3]&gt;&gt;+core::marker::Send&gt;&gt;&gt; (93 samples, 0.09%)</title><rect x="41.6928%" y="1237" width="0.0869%" height="15" fill="rgb(239,229,30)"/><text x="41.9428%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::option::Option&lt;smallvec::SmallVec&lt;[(rho_runtime::storage::TaggedContinuation,smallvec::SmallVec&lt;[model::rho_types::ListParWithRandom: 3]&gt;): 3]&gt;&gt;+core::marker::Send&gt;&gt; (93 samples, 0.09%)</title><rect x="41.6928%" y="1221" width="0.0869%" height="15" fill="rgb(219,65,33)"/><text x="41.9428%" y="1231.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (386 samples, 0.36%)</title><rect x="41.4199%" y="1269" width="0.3607%" height="15" fill="rgb(243,134,7)"/><text x="41.6699%" y="1279.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::produce::{{closure}} (386 samples, 0.36%)</title><rect x="41.4199%" y="1253" width="0.3607%" height="15" fill="rgb(216,177,54)"/><text x="41.6699%" y="1263.50"></text></g><g><title>[libc-2.31.so] (265 samples, 0.25%)</title><rect x="41.8031%" y="1237" width="0.2477%" height="15" fill="rgb(211,160,20)"/><text x="42.0531%" y="1247.50"></text></g><g><title>__libc_malloc (192 samples, 0.18%)</title><rect x="42.0508%" y="1173" width="0.1794%" height="15" fill="rgb(239,85,39)"/><text x="42.3008%" y="1183.50"></text></g><g><title>[libc-2.31.so] (132 samples, 0.12%)</title><rect x="42.1068%" y="1157" width="0.1234%" height="15" fill="rgb(232,125,22)"/><text x="42.3568%" y="1167.50"></text></g><g><title>&lt;model::rho_types::Par as rho_runtime::interpreter::reduce::eval_expression::AsyncParExpressionEvaluator&lt;S&gt;&gt;::evaluate_nested_expressions (469 samples, 0.44%)</title><rect x="41.7956%" y="1269" width="0.4383%" height="15" fill="rgb(244,57,34)"/><text x="42.0456%" y="1279.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (469 samples, 0.44%)</title><rect x="41.7956%" y="1253" width="0.4383%" height="15" fill="rgb(214,203,32)"/><text x="42.0456%" y="1263.50"></text></g><g><title>alloc::alloc::exchange_malloc (196 samples, 0.18%)</title><rect x="42.0508%" y="1237" width="0.1832%" height="15" fill="rgb(207,58,43)"/><text x="42.3008%" y="1247.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (196 samples, 0.18%)</title><rect x="42.0508%" y="1221" width="0.1832%" height="15" fill="rgb(215,193,15)"/><text x="42.3008%" y="1231.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (196 samples, 0.18%)</title><rect x="42.0508%" y="1205" width="0.1832%" height="15" fill="rgb(232,15,44)"/><text x="42.3008%" y="1215.50"></text></g><g><title>alloc::alloc::alloc (196 samples, 0.18%)</title><rect x="42.0508%" y="1189" width="0.1832%" height="15" fill="rgb(212,3,48)"/><text x="42.3008%" y="1199.50"></text></g><g><title>[libc-2.31.so] (93 samples, 0.09%)</title><rect x="42.2339%" y="1269" width="0.0869%" height="15" fill="rgb(218,128,7)"/><text x="42.4839%" y="1279.50"></text></g><g><title>__libc_malloc (15 samples, 0.01%)</title><rect x="42.3302%" y="1157" width="0.0140%" height="15" fill="rgb(226,216,39)"/><text x="42.5802%" y="1167.50"></text></g><g><title>alloc::raw_vec::finish_grow (18 samples, 0.02%)</title><rect x="42.3283%" y="1173" width="0.0168%" height="15" fill="rgb(243,47,51)"/><text x="42.5783%" y="1183.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (29 samples, 0.03%)</title><rect x="42.3208%" y="1237" width="0.0271%" height="15" fill="rgb(241,183,40)"/><text x="42.5708%" y="1247.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (24 samples, 0.02%)</title><rect x="42.3255%" y="1221" width="0.0224%" height="15" fill="rgb(231,217,32)"/><text x="42.5755%" y="1231.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (24 samples, 0.02%)</title><rect x="42.3255%" y="1205" width="0.0224%" height="15" fill="rgb(229,61,38)"/><text x="42.5755%" y="1215.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (24 samples, 0.02%)</title><rect x="42.3255%" y="1189" width="0.0224%" height="15" fill="rgb(225,210,5)"/><text x="42.5755%" y="1199.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (43 samples, 0.04%)</title><rect x="42.3208%" y="1253" width="0.0402%" height="15" fill="rgb(231,79,45)"/><text x="42.5708%" y="1263.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (44 samples, 0.04%)</title><rect x="42.3208%" y="1269" width="0.0411%" height="15" fill="rgb(224,100,7)"/><text x="42.5708%" y="1279.50"></text></g><g><title>[libc-2.31.so] (114 samples, 0.11%)</title><rect x="42.4722%" y="1173" width="0.1065%" height="15" fill="rgb(241,198,18)"/><text x="42.7222%" y="1183.50"></text></g><g><title>[libc-2.31.so] (217 samples, 0.20%)</title><rect x="42.3769%" y="1189" width="0.2028%" height="15" fill="rgb(252,97,53)"/><text x="42.6269%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),model::rho_types::ExecutionError&gt;+core::marker::Send&gt;&gt;&gt; (234 samples, 0.22%)</title><rect x="42.3685%" y="1269" width="0.2187%" height="15" fill="rgb(220,88,7)"/><text x="42.6185%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),model::rho_types::ExecutionError&gt;+core::marker::Send&gt;&gt; (234 samples, 0.22%)</title><rect x="42.3685%" y="1253" width="0.2187%" height="15" fill="rgb(213,176,14)"/><text x="42.6185%" y="1263.50"></text></g><g><title>alloc::alloc::box_free (228 samples, 0.21%)</title><rect x="42.3741%" y="1237" width="0.2131%" height="15" fill="rgb(246,73,7)"/><text x="42.6241%" y="1247.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (225 samples, 0.21%)</title><rect x="42.3769%" y="1221" width="0.2103%" height="15" fill="rgb(245,64,36)"/><text x="42.6269%" y="1231.50"></text></g><g><title>alloc::alloc::dealloc (225 samples, 0.21%)</title><rect x="42.3769%" y="1205" width="0.2103%" height="15" fill="rgb(245,80,10)"/><text x="42.6269%" y="1215.50"></text></g><g><title>model::rho_types::Par::single_bundle (22 samples, 0.02%)</title><rect x="42.5872%" y="1269" width="0.0206%" height="15" fill="rgb(232,107,50)"/><text x="42.8372%" y="1279.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (16 samples, 0.01%)</title><rect x="42.5928%" y="1253" width="0.0150%" height="15" fill="rgb(253,3,0)"/><text x="42.8428%" y="1263.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (16 samples, 0.01%)</title><rect x="42.6330%" y="1237" width="0.0150%" height="15" fill="rgb(212,99,53)"/><text x="42.8830%" y="1247.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (14 samples, 0.01%)</title><rect x="42.6349%" y="1221" width="0.0131%" height="15" fill="rgb(249,111,54)"/><text x="42.8849%" y="1231.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,408 samples, 1.32%)</title><rect x="41.3340%" y="1317" width="1.3158%" height="15" fill="rgb(249,55,30)"/><text x="41.5840%" y="1327.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,400 samples, 1.31%)</title><rect x="41.3414%" y="1301" width="1.3084%" height="15" fill="rgb(237,47,42)"/><text x="41.5914%" y="1311.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_send::&lt;impl rho_runtime::interpreter::reduce::AsyncEvaluator&lt;S&gt; for model::rho_types::Send&gt;::evaluate::{{closure}} (1,396 samples, 1.30%)</title><rect x="41.3452%" y="1285" width="1.3046%" height="15" fill="rgb(211,20,18)"/><text x="41.5952%" y="1295.50"></text></g><g><title>rho_runtime::interpreter::reduce::substitute::sub_par::&lt;impl rho_runtime::interpreter::reduce::substitute::Substitutable&lt;S&gt; for model::rho_types::Par&gt;::substitute (37 samples, 0.03%)</title><rect x="42.6152%" y="1269" width="0.0346%" height="15" fill="rgb(231,203,46)"/><text x="42.8652%" y="1279.50"></text></g><g><title>model::ordering::sort_par::&lt;impl model::ordering::Sortable for model::rho_types::Par&gt;::sort (32 samples, 0.03%)</title><rect x="42.6199%" y="1253" width="0.0299%" height="15" fill="rgb(237,142,3)"/><text x="42.8699%" y="1263.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::spawn_evaluation::{{closure}} (1,426 samples, 1.33%)</title><rect x="41.3330%" y="1333" width="1.3327%" height="15" fill="rgb(241,107,1)"/><text x="41.5830%" y="1343.50"></text></g><g><title>[libc-2.31.so] (86 samples, 0.08%)</title><rect x="42.7330%" y="1173" width="0.0804%" height="15" fill="rgb(229,83,13)"/><text x="42.9830%" y="1183.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (17 samples, 0.02%)</title><rect x="42.8134%" y="1173" width="0.0159%" height="15" fill="rgb(241,91,40)"/><text x="43.0634%" y="1183.50"></text></g><g><title>core::ptr::read (16 samples, 0.01%)</title><rect x="42.8143%" y="1157" width="0.0150%" height="15" fill="rgb(225,3,45)"/><text x="43.0643%" y="1167.50"></text></g><g><title>[libc-2.31.so] (16 samples, 0.01%)</title><rect x="42.8143%" y="1141" width="0.0150%" height="15" fill="rgb(244,223,14)"/><text x="43.0643%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),model::rho_types::ExecutionError&gt;+core::marker::Send&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="42.8292%" y="1173" width="0.0112%" height="15" fill="rgb(224,124,37)"/><text x="43.0792%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),model::rho_types::ExecutionError&gt;+core::marker::Send&gt;&gt; (12 samples, 0.01%)</title><rect x="42.8292%" y="1157" width="0.0112%" height="15" fill="rgb(251,171,30)"/><text x="43.0792%" y="1167.50"></text></g><g><title>alloc::alloc::box_free (12 samples, 0.01%)</title><rect x="42.8292%" y="1141" width="0.0112%" height="15" fill="rgb(236,46,54)"/><text x="43.0792%" y="1151.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12 samples, 0.01%)</title><rect x="42.8292%" y="1125" width="0.0112%" height="15" fill="rgb(245,213,5)"/><text x="43.0792%" y="1135.50"></text></g><g><title>alloc::alloc::dealloc (12 samples, 0.01%)</title><rect x="42.8292%" y="1109" width="0.0112%" height="15" fill="rgb(230,144,27)"/><text x="43.0792%" y="1119.50"></text></g><g><title>[libc-2.31.so] (17 samples, 0.02%)</title><rect x="42.8423%" y="1141" width="0.0159%" height="15" fill="rgb(220,86,6)"/><text x="43.0923%" y="1151.50"></text></g><g><title>&lt;model::rho_types::Par as rho_runtime::interpreter::reduce::eval_expression::AsyncParExpressionEvaluator&lt;S&gt;&gt;::evaluate_single_expression::{{closure}} (175 samples, 0.16%)</title><rect x="42.7031%" y="1189" width="0.1635%" height="15" fill="rgb(240,20,13)"/><text x="42.9531%" y="1199.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_expression::expr_instance::&lt;impl rho_runtime::interpreter::reduce::AsyncEvaluator&lt;S&gt; for model::rho_types::Expr&gt;::evaluate (28 samples, 0.03%)</title><rect x="42.8405%" y="1173" width="0.0262%" height="15" fill="rgb(217,89,34)"/><text x="43.0905%" y="1183.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (28 samples, 0.03%)</title><rect x="42.8405%" y="1157" width="0.0262%" height="15" fill="rgb(229,13,5)"/><text x="43.0905%" y="1167.50"></text></g><g><title>[libc-2.31.so] (55 samples, 0.05%)</title><rect x="42.8666%" y="1189" width="0.0514%" height="15" fill="rgb(244,67,35)"/><text x="43.1166%" y="1199.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (50 samples, 0.05%)</title><rect x="43.0451%" y="1077" width="0.0467%" height="15" fill="rgb(221,40,2)"/><text x="43.2951%" y="1087.50"></text></g><g><title>[libc-2.31.so] (24 samples, 0.02%)</title><rect x="43.0694%" y="1061" width="0.0224%" height="15" fill="rgb(237,157,21)"/><text x="43.3194%" y="1071.50"></text></g><g><title>&lt;model::rho_types::Expr as core::clone::Clone&gt;::clone (110 samples, 0.10%)</title><rect x="43.0049%" y="1093" width="0.1028%" height="15" fill="rgb(222,94,11)"/><text x="43.2549%" y="1103.50"></text></g><g><title>[libc-2.31.so] (17 samples, 0.02%)</title><rect x="43.0918%" y="1077" width="0.0159%" height="15" fill="rgb(249,113,6)"/><text x="43.3418%" y="1087.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (22 samples, 0.02%)</title><rect x="43.1236%" y="1045" width="0.0206%" height="15" fill="rgb(238,137,36)"/><text x="43.3736%" y="1055.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (22 samples, 0.02%)</title><rect x="43.1236%" y="1029" width="0.0206%" height="15" fill="rgb(210,102,26)"/><text x="43.3736%" y="1039.50"></text></g><g><title>alloc::alloc::alloc (19 samples, 0.02%)</title><rect x="43.1264%" y="1013" width="0.0178%" height="15" fill="rgb(218,30,30)"/><text x="43.3764%" y="1023.50"></text></g><g><title>__libc_malloc (19 samples, 0.02%)</title><rect x="43.1264%" y="997" width="0.0178%" height="15" fill="rgb(214,67,26)"/><text x="43.3764%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity_from_bytes (15 samples, 0.01%)</title><rect x="43.1442%" y="1045" width="0.0140%" height="15" fill="rgb(251,9,53)"/><text x="43.3942%" y="1055.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (57 samples, 0.05%)</title><rect x="43.1105%" y="1093" width="0.0533%" height="15" fill="rgb(228,204,25)"/><text x="43.3605%" y="1103.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (49 samples, 0.05%)</title><rect x="43.1180%" y="1077" width="0.0458%" height="15" fill="rgb(207,153,8)"/><text x="43.3680%" y="1087.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (49 samples, 0.05%)</title><rect x="43.1180%" y="1061" width="0.0458%" height="15" fill="rgb(242,9,16)"/><text x="43.3680%" y="1071.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (223 samples, 0.21%)</title><rect x="42.9769%" y="1157" width="0.2084%" height="15" fill="rgb(217,211,10)"/><text x="43.2269%" y="1167.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (214 samples, 0.20%)</title><rect x="42.9853%" y="1141" width="0.2000%" height="15" fill="rgb(219,228,52)"/><text x="43.2353%" y="1151.50"></text></g><g><title>alloc::slice::hack::to_vec (214 samples, 0.20%)</title><rect x="42.9853%" y="1125" width="0.2000%" height="15" fill="rgb(231,92,29)"/><text x="43.2353%" y="1135.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (214 samples, 0.20%)</title><rect x="42.9853%" y="1109" width="0.2000%" height="15" fill="rgb(232,8,23)"/><text x="43.2353%" y="1119.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (23 samples, 0.02%)</title><rect x="43.1638%" y="1093" width="0.0215%" height="15" fill="rgb(216,211,34)"/><text x="43.4138%" y="1103.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (289 samples, 0.27%)</title><rect x="42.9283%" y="1173" width="0.2701%" height="15" fill="rgb(236,151,0)"/><text x="43.1783%" y="1183.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (14 samples, 0.01%)</title><rect x="43.1853%" y="1157" width="0.0131%" height="15" fill="rgb(209,168,3)"/><text x="43.4353%" y="1167.50"></text></g><g><title>&lt;model::bitset::BitSet&lt;B&gt; as core::clone::Clone&gt;::clone (11 samples, 0.01%)</title><rect x="43.1881%" y="1141" width="0.0103%" height="15" fill="rgb(208,129,28)"/><text x="43.4381%" y="1151.50"></text></g><g><title>&lt;bit_vec::BitVec&lt;B&gt; as core::clone::Clone&gt;::clone (11 samples, 0.01%)</title><rect x="43.1881%" y="1125" width="0.0103%" height="15" fill="rgb(229,78,22)"/><text x="43.4381%" y="1135.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (11 samples, 0.01%)</title><rect x="43.1881%" y="1109" width="0.0103%" height="15" fill="rgb(228,187,13)"/><text x="43.4381%" y="1119.50"></text></g><g><title>[libc-2.31.so] (26 samples, 0.02%)</title><rect x="43.1984%" y="1173" width="0.0243%" height="15" fill="rgb(240,119,24)"/><text x="43.4484%" y="1183.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (560 samples, 0.52%)</title><rect x="42.7012%" y="1221" width="0.5233%" height="15" fill="rgb(209,194,42)"/><text x="42.9512%" y="1231.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (560 samples, 0.52%)</title><rect x="42.7012%" y="1205" width="0.5233%" height="15" fill="rgb(247,200,46)"/><text x="42.9512%" y="1215.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_var::&lt;impl rho_runtime::interpreter::reduce::AsyncEvaluator&lt;S,model::rho_types::Par&gt; for model::rho_types::Var&gt;::evaluate::{{closure}} (328 samples, 0.31%)</title><rect x="42.9180%" y="1189" width="0.3065%" height="15" fill="rgb(218,76,16)"/><text x="43.1680%" y="1199.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (18 samples, 0.02%)</title><rect x="43.2246%" y="1221" width="0.0168%" height="15" fill="rgb(225,21,48)"/><text x="43.4746%" y="1231.50"></text></g><g><title>[libc-2.31.so] (15 samples, 0.01%)</title><rect x="43.2274%" y="1205" width="0.0140%" height="15" fill="rgb(239,223,50)"/><text x="43.4774%" y="1215.50"></text></g><g><title>[libc-2.31.so] (27 samples, 0.03%)</title><rect x="43.2442%" y="1189" width="0.0252%" height="15" fill="rgb(244,45,21)"/><text x="43.4942%" y="1199.50"></text></g><g><title>&lt;model::rho_types::Par as rho_runtime::interpreter::reduce::eval_expression::AsyncParExpressionEvaluator&lt;S&gt;&gt;::evaluate_single_expression (39 samples, 0.04%)</title><rect x="43.2414%" y="1221" width="0.0364%" height="15" fill="rgb(232,33,43)"/><text x="43.4914%" y="1231.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (39 samples, 0.04%)</title><rect x="43.2414%" y="1205" width="0.0364%" height="15" fill="rgb(209,8,3)"/><text x="43.4914%" y="1215.50"></text></g><g><title>[libc-2.31.so] (96 samples, 0.09%)</title><rect x="43.2778%" y="1221" width="0.0897%" height="15" fill="rgb(214,25,53)"/><text x="43.5278%" y="1231.50"></text></g><g><title>alloc::alloc::box_free (13 samples, 0.01%)</title><rect x="43.3685%" y="1189" width="0.0121%" height="15" fill="rgb(254,186,54)"/><text x="43.6185%" y="1199.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.01%)</title><rect x="43.3685%" y="1173" width="0.0121%" height="15" fill="rgb(208,174,49)"/><text x="43.6185%" y="1183.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.01%)</title><rect x="43.3685%" y="1157" width="0.0121%" height="15" fill="rgb(233,191,51)"/><text x="43.6185%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;model::rho_types::Expr,model::rho_types::ExecutionError&gt;+core::marker::Send&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="43.3685%" y="1221" width="0.0140%" height="15" fill="rgb(222,134,10)"/><text x="43.6185%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;model::rho_types::Expr,model::rho_types::ExecutionError&gt;+core::marker::Send&gt;&gt; (15 samples, 0.01%)</title><rect x="43.3685%" y="1205" width="0.0140%" height="15" fill="rgb(230,226,20)"/><text x="43.6185%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;model::rho_types::Par,model::rho_types::ExecutionError&gt;+core::marker::Send&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="43.3825%" y="1221" width="0.0121%" height="15" fill="rgb(251,111,25)"/><text x="43.6325%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;model::rho_types::Par,model::rho_types::ExecutionError&gt;+core::marker::Send&gt;&gt; (13 samples, 0.01%)</title><rect x="43.3825%" y="1205" width="0.0121%" height="15" fill="rgb(224,40,46)"/><text x="43.6325%" y="1215.50"></text></g><g><title>alloc::alloc::box_free (13 samples, 0.01%)</title><rect x="43.3825%" y="1189" width="0.0121%" height="15" fill="rgb(236,108,47)"/><text x="43.6325%" y="1199.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.01%)</title><rect x="43.3825%" y="1173" width="0.0121%" height="15" fill="rgb(234,93,0)"/><text x="43.6325%" y="1183.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.01%)</title><rect x="43.3825%" y="1157" width="0.0121%" height="15" fill="rgb(224,213,32)"/><text x="43.6325%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Expr&gt;&gt; (13 samples, 0.01%)</title><rect x="43.4031%" y="1205" width="0.0121%" height="15" fill="rgb(251,11,48)"/><text x="43.6531%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::Expr&gt;&gt; (13 samples, 0.01%)</title><rect x="43.4031%" y="1189" width="0.0121%" height="15" fill="rgb(236,173,5)"/><text x="43.6531%" y="1199.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="43.4031%" y="1173" width="0.0121%" height="15" fill="rgb(230,95,12)"/><text x="43.6531%" y="1183.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.01%)</title><rect x="43.4031%" y="1157" width="0.0121%" height="15" fill="rgb(232,209,1)"/><text x="43.6531%" y="1167.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.01%)</title><rect x="43.4049%" y="1141" width="0.0103%" height="15" fill="rgb(232,6,1)"/><text x="43.6549%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Par&gt; (30 samples, 0.03%)</title><rect x="43.3946%" y="1221" width="0.0280%" height="15" fill="rgb(210,224,50)"/><text x="43.6446%" y="1231.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_expression::eval_eplus::&lt;impl rho_runtime::interpreter::reduce::eval_expression::AsyncExprInstanceEvaluator&lt;S&gt; for model::rho_types::EPlus&gt;::evaluate::{{closure}} (823 samples, 0.77%)</title><rect x="42.6657%" y="1333" width="0.7691%" height="15" fill="rgb(228,127,35)"/><text x="42.9157%" y="1343.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (823 samples, 0.77%)</title><rect x="42.6657%" y="1317" width="0.7691%" height="15" fill="rgb(245,102,45)"/><text x="42.9157%" y="1327.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (823 samples, 0.77%)</title><rect x="42.6657%" y="1301" width="0.7691%" height="15" fill="rgb(214,1,49)"/><text x="42.9157%" y="1311.50"></text></g><g><title>&lt;model::rho_types::Par as rho_runtime::interpreter::reduce::eval_expression::AsyncParExpressionEvaluator&lt;S&gt;&gt;::evaluate_single_expression::{{closure}} (823 samples, 0.77%)</title><rect x="42.6657%" y="1285" width="0.7691%" height="15" fill="rgb(226,163,40)"/><text x="42.9157%" y="1295.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (823 samples, 0.77%)</title><rect x="42.6657%" y="1269" width="0.7691%" height="15" fill="rgb(239,212,28)"/><text x="42.9157%" y="1279.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (823 samples, 0.77%)</title><rect x="42.6657%" y="1253" width="0.7691%" height="15" fill="rgb(220,20,13)"/><text x="42.9157%" y="1263.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_expression::expr_instance::&lt;impl rho_runtime::interpreter::reduce::AsyncEvaluator&lt;S&gt; for model::rho_types::Expr&gt;::evaluate::{{closure}} (815 samples, 0.76%)</title><rect x="42.6732%" y="1237" width="0.7617%" height="15" fill="rgb(210,164,35)"/><text x="42.9232%" y="1247.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_var::&lt;impl rho_runtime::interpreter::reduce::AsyncEvaluator&lt;S,model::rho_types::Par&gt; for model::rho_types::Var&gt;::evaluate (13 samples, 0.01%)</title><rect x="43.4227%" y="1221" width="0.0121%" height="15" fill="rgb(248,109,41)"/><text x="43.6727%" y="1231.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (13 samples, 0.01%)</title><rect x="43.4227%" y="1205" width="0.0121%" height="15" fill="rgb(238,23,50)"/><text x="43.6727%" y="1215.50"></text></g><g><title>alloc::alloc::exchange_malloc (12 samples, 0.01%)</title><rect x="43.4236%" y="1189" width="0.0112%" height="15" fill="rgb(211,48,49)"/><text x="43.6736%" y="1199.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.01%)</title><rect x="43.4236%" y="1173" width="0.0112%" height="15" fill="rgb(223,36,21)"/><text x="43.6736%" y="1183.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.01%)</title><rect x="43.4236%" y="1157" width="0.0112%" height="15" fill="rgb(207,123,46)"/><text x="43.6736%" y="1167.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.01%)</title><rect x="43.4236%" y="1141" width="0.0112%" height="15" fill="rgb(240,218,32)"/><text x="43.6736%" y="1151.50"></text></g><g><title>[libc-2.31.so] (83 samples, 0.08%)</title><rect x="43.5376%" y="1173" width="0.0776%" height="15" fill="rgb(252,5,43)"/><text x="43.7876%" y="1183.50"></text></g><g><title>alloc::alloc::box_free (19 samples, 0.02%)</title><rect x="43.6236%" y="1141" width="0.0178%" height="15" fill="rgb(252,84,19)"/><text x="43.8736%" y="1151.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (19 samples, 0.02%)</title><rect x="43.6236%" y="1125" width="0.0178%" height="15" fill="rgb(243,152,39)"/><text x="43.8736%" y="1135.50"></text></g><g><title>alloc::alloc::dealloc (19 samples, 0.02%)</title><rect x="43.6236%" y="1109" width="0.0178%" height="15" fill="rgb(234,160,15)"/><text x="43.8736%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),model::rho_types::ExecutionError&gt;+core::marker::Send&gt;&gt;&gt; (23 samples, 0.02%)</title><rect x="43.6236%" y="1173" width="0.0215%" height="15" fill="rgb(237,34,20)"/><text x="43.8736%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),model::rho_types::ExecutionError&gt;+core::marker::Send&gt;&gt; (23 samples, 0.02%)</title><rect x="43.6236%" y="1157" width="0.0215%" height="15" fill="rgb(229,97,13)"/><text x="43.8736%" y="1167.50"></text></g><g><title>[libc-2.31.so] (19 samples, 0.02%)</title><rect x="43.6479%" y="1141" width="0.0178%" height="15" fill="rgb(234,71,50)"/><text x="43.8979%" y="1151.50"></text></g><g><title>&lt;model::rho_types::Par as rho_runtime::interpreter::reduce::eval_expression::AsyncParExpressionEvaluator&lt;S&gt;&gt;::evaluate_single_expression::{{closure}} (174 samples, 0.16%)</title><rect x="43.5105%" y="1189" width="0.1626%" height="15" fill="rgb(253,155,4)"/><text x="43.7605%" y="1199.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_expression::expr_instance::&lt;impl rho_runtime::interpreter::reduce::AsyncEvaluator&lt;S&gt; for model::rho_types::Expr&gt;::evaluate (30 samples, 0.03%)</title><rect x="43.6451%" y="1173" width="0.0280%" height="15" fill="rgb(222,185,37)"/><text x="43.8951%" y="1183.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (30 samples, 0.03%)</title><rect x="43.6451%" y="1157" width="0.0280%" height="15" fill="rgb(251,177,13)"/><text x="43.8951%" y="1167.50"></text></g><g><title>[libc-2.31.so] (43 samples, 0.04%)</title><rect x="43.6731%" y="1189" width="0.0402%" height="15" fill="rgb(250,179,40)"/><text x="43.9231%" y="1199.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (18 samples, 0.02%)</title><rect x="43.7610%" y="1141" width="0.0168%" height="15" fill="rgb(242,44,2)"/><text x="44.0110%" y="1151.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (31 samples, 0.03%)</title><rect x="43.8245%" y="1077" width="0.0290%" height="15" fill="rgb(216,177,13)"/><text x="44.0745%" y="1087.50"></text></g><g><title>[libc-2.31.so] (16 samples, 0.01%)</title><rect x="43.8385%" y="1061" width="0.0150%" height="15" fill="rgb(216,106,43)"/><text x="44.0885%" y="1071.50"></text></g><g><title>&lt;model::rho_types::Expr as core::clone::Clone&gt;::clone (78 samples, 0.07%)</title><rect x="43.7937%" y="1093" width="0.0729%" height="15" fill="rgb(216,183,2)"/><text x="44.0437%" y="1103.50"></text></g><g><title>[libc-2.31.so] (14 samples, 0.01%)</title><rect x="43.8535%" y="1077" width="0.0131%" height="15" fill="rgb(249,75,3)"/><text x="44.1035%" y="1087.50"></text></g><g><title>__libc_malloc (18 samples, 0.02%)</title><rect x="43.8909%" y="997" width="0.0168%" height="15" fill="rgb(219,67,39)"/><text x="44.1409%" y="1007.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (29 samples, 0.03%)</title><rect x="43.8871%" y="1045" width="0.0271%" height="15" fill="rgb(253,228,2)"/><text x="44.1371%" y="1055.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (29 samples, 0.03%)</title><rect x="43.8871%" y="1029" width="0.0271%" height="15" fill="rgb(235,138,27)"/><text x="44.1371%" y="1039.50"></text></g><g><title>alloc::alloc::alloc (25 samples, 0.02%)</title><rect x="43.8909%" y="1013" width="0.0234%" height="15" fill="rgb(236,97,51)"/><text x="44.1409%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity_from_bytes (11 samples, 0.01%)</title><rect x="43.9142%" y="1045" width="0.0103%" height="15" fill="rgb(240,80,30)"/><text x="44.1642%" y="1055.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (69 samples, 0.06%)</title><rect x="43.8703%" y="1093" width="0.0645%" height="15" fill="rgb(230,178,19)"/><text x="44.1203%" y="1103.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (61 samples, 0.06%)</title><rect x="43.8778%" y="1077" width="0.0570%" height="15" fill="rgb(210,190,27)"/><text x="44.1278%" y="1087.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (61 samples, 0.06%)</title><rect x="43.8778%" y="1061" width="0.0570%" height="15" fill="rgb(222,107,31)"/><text x="44.1278%" y="1071.50"></text></g><g><title>core::alloc::layout::Layout::array (11 samples, 0.01%)</title><rect x="43.9245%" y="1045" width="0.0103%" height="15" fill="rgb(216,127,34)"/><text x="44.1745%" y="1055.50"></text></g><g><title>core::alloc::layout::Layout::repeat (11 samples, 0.01%)</title><rect x="43.9245%" y="1029" width="0.0103%" height="15" fill="rgb(234,116,52)"/><text x="44.1745%" y="1039.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (11 samples, 0.01%)</title><rect x="43.9245%" y="1013" width="0.0103%" height="15" fill="rgb(222,124,15)"/><text x="44.1745%" y="1023.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (11 samples, 0.01%)</title><rect x="43.9245%" y="997" width="0.0103%" height="15" fill="rgb(231,179,28)"/><text x="44.1745%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (216 samples, 0.20%)</title><rect x="43.7600%" y="1157" width="0.2019%" height="15" fill="rgb(226,93,45)"/><text x="44.0100%" y="1167.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (197 samples, 0.18%)</title><rect x="43.7778%" y="1141" width="0.1841%" height="15" fill="rgb(215,8,51)"/><text x="44.0278%" y="1151.50"></text></g><g><title>alloc::slice::hack::to_vec (197 samples, 0.18%)</title><rect x="43.7778%" y="1125" width="0.1841%" height="15" fill="rgb(223,106,5)"/><text x="44.0278%" y="1135.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (197 samples, 0.18%)</title><rect x="43.7778%" y="1109" width="0.1841%" height="15" fill="rgb(250,191,5)"/><text x="44.0278%" y="1119.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (29 samples, 0.03%)</title><rect x="43.9348%" y="1093" width="0.0271%" height="15" fill="rgb(242,132,44)"/><text x="44.1848%" y="1103.50"></text></g><g><title>[libc-2.31.so] (16 samples, 0.01%)</title><rect x="43.9470%" y="1077" width="0.0150%" height="15" fill="rgb(251,152,29)"/><text x="44.1970%" y="1087.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (265 samples, 0.25%)</title><rect x="43.7236%" y="1173" width="0.2477%" height="15" fill="rgb(218,179,5)"/><text x="43.9736%" y="1183.50"></text></g><g><title>[libc-2.31.so] (65 samples, 0.06%)</title><rect x="43.9713%" y="1173" width="0.0607%" height="15" fill="rgb(227,67,19)"/><text x="44.2213%" y="1183.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (569 samples, 0.53%)</title><rect x="43.5030%" y="1221" width="0.5318%" height="15" fill="rgb(233,119,31)"/><text x="43.7530%" y="1231.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (568 samples, 0.53%)</title><rect x="43.5040%" y="1205" width="0.5308%" height="15" fill="rgb(241,120,22)"/><text x="43.7540%" y="1215.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_var::&lt;impl rho_runtime::interpreter::reduce::AsyncEvaluator&lt;S,model::rho_types::Par&gt; for model::rho_types::Var&gt;::evaluate::{{closure}} (344 samples, 0.32%)</title><rect x="43.7133%" y="1189" width="0.3215%" height="15" fill="rgb(224,102,30)"/><text x="43.9633%" y="1199.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (20 samples, 0.02%)</title><rect x="44.0348%" y="1221" width="0.0187%" height="15" fill="rgb(210,164,37)"/><text x="44.2848%" y="1231.50"></text></g><g><title>[libc-2.31.so] (18 samples, 0.02%)</title><rect x="44.0367%" y="1205" width="0.0168%" height="15" fill="rgb(226,191,16)"/><text x="44.2867%" y="1215.50"></text></g><g><title>[libc-2.31.so] (16 samples, 0.01%)</title><rect x="44.0600%" y="1189" width="0.0150%" height="15" fill="rgb(214,40,45)"/><text x="44.3100%" y="1199.50"></text></g><g><title>&lt;model::rho_types::Par as rho_runtime::interpreter::reduce::eval_expression::AsyncParExpressionEvaluator&lt;S&gt;&gt;::evaluate_single_expression (30 samples, 0.03%)</title><rect x="44.0535%" y="1221" width="0.0280%" height="15" fill="rgb(244,29,26)"/><text x="44.3035%" y="1231.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (30 samples, 0.03%)</title><rect x="44.0535%" y="1205" width="0.0280%" height="15" fill="rgb(216,16,5)"/><text x="44.3035%" y="1215.50"></text></g><g><title>[libc-2.31.so] (98 samples, 0.09%)</title><rect x="44.0815%" y="1221" width="0.0916%" height="15" fill="rgb(249,76,35)"/><text x="44.3315%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;model::rho_types::Expr,model::rho_types::ExecutionError&gt;+core::marker::Send&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="44.1787%" y="1221" width="0.0112%" height="15" fill="rgb(207,11,44)"/><text x="44.4287%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;model::rho_types::Expr,model::rho_types::ExecutionError&gt;+core::marker::Send&gt;&gt; (12 samples, 0.01%)</title><rect x="44.1787%" y="1205" width="0.0112%" height="15" fill="rgb(228,190,49)"/><text x="44.4287%" y="1215.50"></text></g><g><title>alloc::alloc::box_free (12 samples, 0.01%)</title><rect x="44.1787%" y="1189" width="0.0112%" height="15" fill="rgb(214,173,12)"/><text x="44.4287%" y="1199.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11 samples, 0.01%)</title><rect x="44.1797%" y="1173" width="0.0103%" height="15" fill="rgb(218,26,35)"/><text x="44.4297%" y="1183.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.01%)</title><rect x="44.1797%" y="1157" width="0.0103%" height="15" fill="rgb(220,200,19)"/><text x="44.4297%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;model::rho_types::Par,model::rho_types::ExecutionError&gt;+core::marker::Send&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="44.1899%" y="1221" width="0.0112%" height="15" fill="rgb(239,95,49)"/><text x="44.4399%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;model::rho_types::Par,model::rho_types::ExecutionError&gt;+core::marker::Send&gt;&gt; (12 samples, 0.01%)</title><rect x="44.1899%" y="1205" width="0.0112%" height="15" fill="rgb(235,85,53)"/><text x="44.4399%" y="1215.50"></text></g><g><title>alloc::alloc::box_free (12 samples, 0.01%)</title><rect x="44.1899%" y="1189" width="0.0112%" height="15" fill="rgb(233,133,31)"/><text x="44.4399%" y="1199.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11 samples, 0.01%)</title><rect x="44.1909%" y="1173" width="0.0103%" height="15" fill="rgb(218,25,20)"/><text x="44.4409%" y="1183.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.01%)</title><rect x="44.1909%" y="1157" width="0.0103%" height="15" fill="rgb(252,210,38)"/><text x="44.4409%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Expr&gt;&gt; (15 samples, 0.01%)</title><rect x="44.2105%" y="1205" width="0.0140%" height="15" fill="rgb(242,134,21)"/><text x="44.4605%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::Expr&gt;&gt; (13 samples, 0.01%)</title><rect x="44.2124%" y="1189" width="0.0121%" height="15" fill="rgb(213,28,48)"/><text x="44.4624%" y="1199.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="44.2124%" y="1173" width="0.0121%" height="15" fill="rgb(250,196,2)"/><text x="44.4624%" y="1183.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.01%)</title><rect x="44.2124%" y="1157" width="0.0121%" height="15" fill="rgb(227,5,17)"/><text x="44.4624%" y="1167.50"></text></g><g><title>alloc::alloc::dealloc (12 samples, 0.01%)</title><rect x="44.2133%" y="1141" width="0.0112%" height="15" fill="rgb(221,226,24)"/><text x="44.4633%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Par&gt; (32 samples, 0.03%)</title><rect x="44.2012%" y="1221" width="0.0299%" height="15" fill="rgb(211,5,48)"/><text x="44.4512%" y="1231.50"></text></g><g><title>&lt;model::rho_types::Par as rho_runtime::interpreter::reduce::eval_expression::AsyncParExpressionEvaluator&lt;S&gt;&gt;::evaluate_single_expression::{{closure}} (867 samples, 0.81%)</title><rect x="43.4348%" y="1285" width="0.8103%" height="15" fill="rgb(219,150,6)"/><text x="43.6848%" y="1295.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (867 samples, 0.81%)</title><rect x="43.4348%" y="1269" width="0.8103%" height="15" fill="rgb(251,46,16)"/><text x="43.6848%" y="1279.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (867 samples, 0.81%)</title><rect x="43.4348%" y="1253" width="0.8103%" height="15" fill="rgb(220,204,40)"/><text x="43.6848%" y="1263.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_expression::expr_instance::&lt;impl rho_runtime::interpreter::reduce::AsyncEvaluator&lt;S&gt; for model::rho_types::Expr&gt;::evaluate::{{closure}} (857 samples, 0.80%)</title><rect x="43.4442%" y="1237" width="0.8009%" height="15" fill="rgb(211,85,2)"/><text x="43.6942%" y="1247.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_var::&lt;impl rho_runtime::interpreter::reduce::AsyncEvaluator&lt;S,model::rho_types::Par&gt; for model::rho_types::Var&gt;::evaluate (15 samples, 0.01%)</title><rect x="44.2311%" y="1221" width="0.0140%" height="15" fill="rgb(229,17,7)"/><text x="44.4811%" y="1231.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (15 samples, 0.01%)</title><rect x="44.2311%" y="1205" width="0.0140%" height="15" fill="rgb(239,72,28)"/><text x="44.4811%" y="1215.50"></text></g><g><title>alloc::alloc::exchange_malloc (15 samples, 0.01%)</title><rect x="44.2311%" y="1189" width="0.0140%" height="15" fill="rgb(230,47,54)"/><text x="44.4811%" y="1199.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (15 samples, 0.01%)</title><rect x="44.2311%" y="1173" width="0.0140%" height="15" fill="rgb(214,50,8)"/><text x="44.4811%" y="1183.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15 samples, 0.01%)</title><rect x="44.2311%" y="1157" width="0.0140%" height="15" fill="rgb(216,198,43)"/><text x="44.4811%" y="1167.50"></text></g><g><title>alloc::alloc::alloc (15 samples, 0.01%)</title><rect x="44.2311%" y="1141" width="0.0140%" height="15" fill="rgb(234,20,35)"/><text x="44.4811%" y="1151.50"></text></g><g><title>__libc_malloc (14 samples, 0.01%)</title><rect x="44.2320%" y="1125" width="0.0131%" height="15" fill="rgb(254,45,19)"/><text x="44.4820%" y="1135.50"></text></g><g><title>[libc-2.31.so] (184 samples, 0.17%)</title><rect x="44.3086%" y="1221" width="0.1720%" height="15" fill="rgb(219,14,44)"/><text x="44.5586%" y="1231.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (80 samples, 0.07%)</title><rect x="44.4824%" y="1221" width="0.0748%" height="15" fill="rgb(217,220,26)"/><text x="44.7324%" y="1231.50"></text></g><g><title>core::ptr::read (79 samples, 0.07%)</title><rect x="44.4834%" y="1205" width="0.0738%" height="15" fill="rgb(213,158,28)"/><text x="44.7334%" y="1215.50"></text></g><g><title>[libc-2.31.so] (79 samples, 0.07%)</title><rect x="44.4834%" y="1189" width="0.0738%" height="15" fill="rgb(252,51,52)"/><text x="44.7334%" y="1199.50"></text></g><g><title>[libc-2.31.so] (17 samples, 0.02%)</title><rect x="44.5591%" y="1141" width="0.0159%" height="15" fill="rgb(246,89,16)"/><text x="44.8091%" y="1151.50"></text></g><g><title>alloc::alloc::box_free (32 samples, 0.03%)</title><rect x="44.5572%" y="1189" width="0.0299%" height="15" fill="rgb(216,158,49)"/><text x="44.8072%" y="1199.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (30 samples, 0.03%)</title><rect x="44.5591%" y="1173" width="0.0280%" height="15" fill="rgb(236,107,19)"/><text x="44.8091%" y="1183.50"></text></g><g><title>alloc::alloc::dealloc (30 samples, 0.03%)</title><rect x="44.5591%" y="1157" width="0.0280%" height="15" fill="rgb(228,185,30)"/><text x="44.8091%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),model::rho_types::ExecutionError&gt;+core::marker::Send&gt;&gt;&gt; (34 samples, 0.03%)</title><rect x="44.5572%" y="1221" width="0.0318%" height="15" fill="rgb(246,134,8)"/><text x="44.8072%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),model::rho_types::ExecutionError&gt;+core::marker::Send&gt;&gt; (34 samples, 0.03%)</title><rect x="44.5572%" y="1205" width="0.0318%" height="15" fill="rgb(214,143,50)"/><text x="44.8072%" y="1215.50"></text></g><g><title>[libc-2.31.so] (28 samples, 0.03%)</title><rect x="44.5955%" y="1189" width="0.0262%" height="15" fill="rgb(228,75,8)"/><text x="44.8455%" y="1199.50"></text></g><g><title>__libc_malloc (21 samples, 0.02%)</title><rect x="44.6217%" y="1125" width="0.0196%" height="15" fill="rgb(207,175,4)"/><text x="44.8717%" y="1135.50"></text></g><g><title>&lt;model::rho_types::Par as rho_runtime::interpreter::reduce::eval_expression::AsyncParExpressionEvaluator&lt;S&gt;&gt;::evaluate_single_expression::{{closure}} (427 samples, 0.40%)</title><rect x="44.2488%" y="1237" width="0.3991%" height="15" fill="rgb(205,108,24)"/><text x="44.4988%" y="1247.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_expression::expr_instance::&lt;impl rho_runtime::interpreter::reduce::AsyncEvaluator&lt;S&gt; for model::rho_types::Expr&gt;::evaluate (63 samples, 0.06%)</title><rect x="44.5890%" y="1221" width="0.0589%" height="15" fill="rgb(244,120,49)"/><text x="44.8390%" y="1231.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (63 samples, 0.06%)</title><rect x="44.5890%" y="1205" width="0.0589%" height="15" fill="rgb(223,47,38)"/><text x="44.8390%" y="1215.50"></text></g><g><title>alloc::alloc::exchange_malloc (28 samples, 0.03%)</title><rect x="44.6217%" y="1189" width="0.0262%" height="15" fill="rgb(229,179,11)"/><text x="44.8717%" y="1199.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (28 samples, 0.03%)</title><rect x="44.6217%" y="1173" width="0.0262%" height="15" fill="rgb(231,122,1)"/><text x="44.8717%" y="1183.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (28 samples, 0.03%)</title><rect x="44.6217%" y="1157" width="0.0262%" height="15" fill="rgb(245,119,9)"/><text x="44.8717%" y="1167.50"></text></g><g><title>alloc::alloc::alloc (28 samples, 0.03%)</title><rect x="44.6217%" y="1141" width="0.0262%" height="15" fill="rgb(241,163,25)"/><text x="44.8717%" y="1151.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_expression::expr_instance::&lt;impl rho_runtime::interpreter::reduce::AsyncEvaluator&lt;S&gt; for model::rho_types::Expr&gt;::evaluate::{{closure}} (1,323 samples, 1.24%)</title><rect x="43.4348%" y="1333" width="1.2364%" height="15" fill="rgb(217,214,3)"/><text x="43.6848%" y="1343.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,323 samples, 1.24%)</title><rect x="43.4348%" y="1317" width="1.2364%" height="15" fill="rgb(240,86,28)"/><text x="43.6848%" y="1327.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,323 samples, 1.24%)</title><rect x="43.4348%" y="1301" width="1.2364%" height="15" fill="rgb(215,47,9)"/><text x="43.6848%" y="1311.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_expression::eval_eplus::&lt;impl rho_runtime::interpreter::reduce::eval_expression::AsyncExprInstanceEvaluator&lt;S&gt; for model::rho_types::EPlus&gt;::evaluate::{{closure}} (456 samples, 0.43%)</title><rect x="44.2451%" y="1285" width="0.4262%" height="15" fill="rgb(252,25,45)"/><text x="44.4951%" y="1295.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (456 samples, 0.43%)</title><rect x="44.2451%" y="1269" width="0.4262%" height="15" fill="rgb(251,164,9)"/><text x="44.4951%" y="1279.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (456 samples, 0.43%)</title><rect x="44.2451%" y="1253" width="0.4262%" height="15" fill="rgb(233,194,0)"/><text x="44.4951%" y="1263.50"></text></g><g><title>[libc-2.31.so] (25 samples, 0.02%)</title><rect x="44.6479%" y="1237" width="0.0234%" height="15" fill="rgb(249,111,24)"/><text x="44.8979%" y="1247.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (31 samples, 0.03%)</title><rect x="44.6759%" y="1253" width="0.0290%" height="15" fill="rgb(250,223,3)"/><text x="44.9259%" y="1263.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (31 samples, 0.03%)</title><rect x="44.6759%" y="1237" width="0.0290%" height="15" fill="rgb(236,178,37)"/><text x="44.9259%" y="1247.50"></text></g><g><title>core::sync::atomic::atomic_add (31 samples, 0.03%)</title><rect x="44.6759%" y="1221" width="0.0290%" height="15" fill="rgb(241,158,50)"/><text x="44.9259%" y="1231.50"></text></g><g><title>[libc-2.31.so] (15 samples, 0.01%)</title><rect x="44.7123%" y="1109" width="0.0140%" height="15" fill="rgb(213,121,41)"/><text x="44.9623%" y="1119.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (21 samples, 0.02%)</title><rect x="44.7796%" y="997" width="0.0196%" height="15" fill="rgb(240,92,3)"/><text x="45.0296%" y="1007.50"></text></g><g><title>&lt;model::rho_types::Expr as core::clone::Clone&gt;::clone (43 samples, 0.04%)</title><rect x="44.7694%" y="1013" width="0.0402%" height="15" fill="rgb(205,123,3)"/><text x="45.0194%" y="1023.50"></text></g><g><title>[libc-2.31.so] (11 samples, 0.01%)</title><rect x="44.7993%" y="997" width="0.0103%" height="15" fill="rgb(205,97,47)"/><text x="45.0493%" y="1007.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 0.01%)</title><rect x="44.8236%" y="965" width="0.0103%" height="15" fill="rgb(247,152,14)"/><text x="45.0736%" y="975.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.01%)</title><rect x="44.8236%" y="949" width="0.0103%" height="15" fill="rgb(248,195,53)"/><text x="45.0736%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (36 samples, 0.03%)</title><rect x="44.8105%" y="1013" width="0.0336%" height="15" fill="rgb(226,201,16)"/><text x="45.0605%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (32 samples, 0.03%)</title><rect x="44.8142%" y="997" width="0.0299%" height="15" fill="rgb(205,98,0)"/><text x="45.0642%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (32 samples, 0.03%)</title><rect x="44.8142%" y="981" width="0.0299%" height="15" fill="rgb(214,191,48)"/><text x="45.0642%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (138 samples, 0.13%)</title><rect x="44.7441%" y="1077" width="0.1290%" height="15" fill="rgb(237,112,39)"/><text x="44.9941%" y="1087.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (129 samples, 0.12%)</title><rect x="44.7525%" y="1061" width="0.1206%" height="15" fill="rgb(247,203,27)"/><text x="45.0025%" y="1071.50"></text></g><g><title>alloc::slice::hack::to_vec (127 samples, 0.12%)</title><rect x="44.7544%" y="1045" width="0.1187%" height="15" fill="rgb(235,124,28)"/><text x="45.0044%" y="1055.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (127 samples, 0.12%)</title><rect x="44.7544%" y="1029" width="0.1187%" height="15" fill="rgb(208,207,46)"/><text x="45.0044%" y="1039.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (31 samples, 0.03%)</title><rect x="44.8441%" y="1013" width="0.0290%" height="15" fill="rgb(234,176,4)"/><text x="45.0941%" y="1023.50"></text></g><g><title>[libc-2.31.so] (12 samples, 0.01%)</title><rect x="44.8619%" y="997" width="0.0112%" height="15" fill="rgb(230,133,28)"/><text x="45.1119%" y="1007.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (186 samples, 0.17%)</title><rect x="44.7077%" y="1157" width="0.1738%" height="15" fill="rgb(211,137,40)"/><text x="44.9577%" y="1167.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (185 samples, 0.17%)</title><rect x="44.7086%" y="1141" width="0.1729%" height="15" fill="rgb(254,35,13)"/><text x="44.9586%" y="1151.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (184 samples, 0.17%)</title><rect x="44.7095%" y="1125" width="0.1720%" height="15" fill="rgb(225,49,51)"/><text x="44.9595%" y="1135.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned::{{closure}} (166 samples, 0.16%)</title><rect x="44.7264%" y="1109" width="0.1551%" height="15" fill="rgb(251,10,15)"/><text x="44.9764%" y="1119.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (166 samples, 0.16%)</title><rect x="44.7264%" y="1093" width="0.1551%" height="15" fill="rgb(228,207,15)"/><text x="44.9764%" y="1103.50"></text></g><g><title>core::ptr::write (21 samples, 0.02%)</title><rect x="44.8815%" y="1157" width="0.0196%" height="15" fill="rgb(241,99,19)"/><text x="45.1315%" y="1167.50"></text></g><g><title>[libc-2.31.so] (19 samples, 0.02%)</title><rect x="44.8834%" y="1141" width="0.0178%" height="15" fill="rgb(207,104,49)"/><text x="45.1334%" y="1151.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (215 samples, 0.20%)</title><rect x="44.7049%" y="1205" width="0.2009%" height="15" fill="rgb(234,99,18)"/><text x="44.9549%" y="1215.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::FromIterator&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::from_iter (215 samples, 0.20%)</title><rect x="44.7049%" y="1189" width="0.2009%" height="15" fill="rgb(213,191,49)"/><text x="44.9549%" y="1199.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (215 samples, 0.20%)</title><rect x="44.7049%" y="1173" width="0.2009%" height="15" fill="rgb(210,226,19)"/><text x="44.9549%" y="1183.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::clone::Clone&gt;::clone (217 samples, 0.20%)</title><rect x="44.7049%" y="1237" width="0.2028%" height="15" fill="rgb(229,97,18)"/><text x="44.9549%" y="1247.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::convert::From&lt;&amp;[&lt;A as smallvec::Array&gt;::Item]&gt;&gt;::from (217 samples, 0.20%)</title><rect x="44.7049%" y="1221" width="0.2028%" height="15" fill="rgb(211,167,15)"/><text x="44.9549%" y="1231.50"></text></g><g><title>&lt;rho_runtime::interpreter::reduce::environment::Env&lt;T&gt; as core::clone::Clone&gt;::clone (251 samples, 0.23%)</title><rect x="44.7049%" y="1253" width="0.2346%" height="15" fill="rgb(210,169,34)"/><text x="44.9549%" y="1263.50"></text></g><g><title>[libc-2.31.so] (34 samples, 0.03%)</title><rect x="44.9077%" y="1237" width="0.0318%" height="15" fill="rgb(241,121,31)"/><text x="45.1577%" y="1247.50"></text></g><g><title>core::future::from_generator (28 samples, 0.03%)</title><rect x="44.9488%" y="1253" width="0.0262%" height="15" fill="rgb(232,40,11)"/><text x="45.1988%" y="1263.50"></text></g><g><title>[libc-2.31.so] (28 samples, 0.03%)</title><rect x="44.9488%" y="1237" width="0.0262%" height="15" fill="rgb(205,86,26)"/><text x="45.1988%" y="1247.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (27 samples, 0.03%)</title><rect x="44.9787%" y="1237" width="0.0252%" height="15" fill="rgb(231,126,28)"/><text x="45.2287%" y="1247.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (27 samples, 0.03%)</title><rect x="44.9787%" y="1221" width="0.0252%" height="15" fill="rgb(219,221,18)"/><text x="45.2287%" y="1231.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (19 samples, 0.02%)</title><rect x="45.0039%" y="1237" width="0.0178%" height="15" fill="rgb(211,40,0)"/><text x="45.2539%" y="1247.50"></text></g><g><title>core::sync::atomic::atomic_or (19 samples, 0.02%)</title><rect x="45.0039%" y="1221" width="0.0178%" height="15" fill="rgb(239,85,43)"/><text x="45.2539%" y="1231.50"></text></g><g><title>crossbeam_queue::seg_queue::SegQueue&lt;T&gt;::push (52 samples, 0.05%)</title><rect x="44.9750%" y="1253" width="0.0486%" height="15" fill="rgb(231,55,21)"/><text x="45.2250%" y="1263.50"></text></g><g><title>[libc-2.31.so] (30 samples, 0.03%)</title><rect x="45.0254%" y="1237" width="0.0280%" height="15" fill="rgb(225,184,43)"/><text x="45.2754%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::spawner::Spawner&gt; (59 samples, 0.06%)</title><rect x="45.0535%" y="1237" width="0.0551%" height="15" fill="rgb(251,158,41)"/><text x="45.3035%" y="1247.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (572 samples, 0.53%)</title><rect x="44.6712%" y="1317" width="0.5346%" height="15" fill="rgb(234,159,37)"/><text x="44.9212%" y="1327.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (572 samples, 0.53%)</title><rect x="44.6712%" y="1301" width="0.5346%" height="15" fill="rgb(216,204,22)"/><text x="44.9212%" y="1311.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_par::&lt;impl rho_runtime::interpreter::reduce::AsyncEvaluator&lt;S&gt; for model::rho_types::Par&gt;::evaluate::{{closure}} (568 samples, 0.53%)</title><rect x="44.6750%" y="1285" width="0.5308%" height="15" fill="rgb(214,17,3)"/><text x="44.9250%" y="1295.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::spawn_evaluation (568 samples, 0.53%)</title><rect x="44.6750%" y="1269" width="0.5308%" height="15" fill="rgb(212,111,17)"/><text x="44.9250%" y="1279.50"></text></g><g><title>tokio::task::spawn::spawn (195 samples, 0.18%)</title><rect x="45.0236%" y="1253" width="0.1822%" height="15" fill="rgb(221,157,24)"/><text x="45.2736%" y="1263.50"></text></g><g><title>tokio::runtime::context::spawn_handle (104 samples, 0.10%)</title><rect x="45.1086%" y="1237" width="0.0972%" height="15" fill="rgb(252,16,13)"/><text x="45.3586%" y="1247.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (104 samples, 0.10%)</title><rect x="45.1086%" y="1221" width="0.0972%" height="15" fill="rgb(221,62,2)"/><text x="45.3586%" y="1231.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (104 samples, 0.10%)</title><rect x="45.1086%" y="1205" width="0.0972%" height="15" fill="rgb(247,87,22)"/><text x="45.3586%" y="1215.50"></text></g><g><title>tokio::runtime::context::spawn_handle::{{closure}} (102 samples, 0.10%)</title><rect x="45.1105%" y="1189" width="0.0953%" height="15" fill="rgb(215,73,9)"/><text x="45.3605%" y="1199.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (101 samples, 0.09%)</title><rect x="45.1114%" y="1173" width="0.0944%" height="15" fill="rgb(207,175,33)"/><text x="45.3614%" y="1183.50"></text></g><g><title>tokio::runtime::context::spawn_handle::{{closure}}::{{closure}} (101 samples, 0.09%)</title><rect x="45.1114%" y="1157" width="0.0944%" height="15" fill="rgb(243,129,54)"/><text x="45.3614%" y="1167.50"></text></g><g><title>&lt;tokio::runtime::spawner::Spawner as core::clone::Clone&gt;::clone (101 samples, 0.09%)</title><rect x="45.1114%" y="1141" width="0.0944%" height="15" fill="rgb(227,119,45)"/><text x="45.3614%" y="1151.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (59 samples, 0.06%)</title><rect x="45.2263%" y="1269" width="0.0551%" height="15" fill="rgb(205,109,36)"/><text x="45.4763%" y="1279.50"></text></g><g><title>core::ptr::read (58 samples, 0.05%)</title><rect x="45.2273%" y="1253" width="0.0542%" height="15" fill="rgb(205,6,39)"/><text x="45.4773%" y="1263.50"></text></g><g><title>[libc-2.31.so] (57 samples, 0.05%)</title><rect x="45.2282%" y="1237" width="0.0533%" height="15" fill="rgb(221,32,16)"/><text x="45.4782%" y="1247.50"></text></g><g><title>[libc-2.31.so] (134 samples, 0.13%)</title><rect x="45.2843%" y="1269" width="0.1252%" height="15" fill="rgb(228,144,50)"/><text x="45.5343%" y="1279.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (69 samples, 0.06%)</title><rect x="45.4095%" y="1253" width="0.0645%" height="15" fill="rgb(229,201,53)"/><text x="45.6595%" y="1263.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (67 samples, 0.06%)</title><rect x="45.4114%" y="1237" width="0.0626%" height="15" fill="rgb(249,153,27)"/><text x="45.6614%" y="1247.50"></text></g><g><title>[libc-2.31.so] (64 samples, 0.06%)</title><rect x="45.4142%" y="1221" width="0.0598%" height="15" fill="rgb(227,106,25)"/><text x="45.6642%" y="1231.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (71 samples, 0.07%)</title><rect x="45.4095%" y="1269" width="0.0664%" height="15" fill="rgb(230,65,29)"/><text x="45.6595%" y="1279.50"></text></g><g><title>__libc_malloc (20 samples, 0.02%)</title><rect x="45.4815%" y="1157" width="0.0187%" height="15" fill="rgb(221,57,46)"/><text x="45.7315%" y="1167.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (30 samples, 0.03%)</title><rect x="45.4759%" y="1269" width="0.0280%" height="15" fill="rgb(229,161,17)"/><text x="45.7259%" y="1279.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (30 samples, 0.03%)</title><rect x="45.4759%" y="1253" width="0.0280%" height="15" fill="rgb(222,213,11)"/><text x="45.7259%" y="1263.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (26 samples, 0.02%)</title><rect x="45.4796%" y="1237" width="0.0243%" height="15" fill="rgb(235,35,13)"/><text x="45.7296%" y="1247.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (26 samples, 0.02%)</title><rect x="45.4796%" y="1221" width="0.0243%" height="15" fill="rgb(233,158,34)"/><text x="45.7296%" y="1231.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (25 samples, 0.02%)</title><rect x="45.4805%" y="1205" width="0.0234%" height="15" fill="rgb(215,151,48)"/><text x="45.7305%" y="1215.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (25 samples, 0.02%)</title><rect x="45.4805%" y="1189" width="0.0234%" height="15" fill="rgb(229,84,14)"/><text x="45.7305%" y="1199.50"></text></g><g><title>alloc::alloc::alloc (24 samples, 0.02%)</title><rect x="45.4815%" y="1173" width="0.0224%" height="15" fill="rgb(229,68,14)"/><text x="45.7315%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;model::rho_types::Expr&gt;&gt; (27 samples, 0.03%)</title><rect x="45.5039%" y="1269" width="0.0252%" height="15" fill="rgb(243,106,26)"/><text x="45.7539%" y="1279.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.03%)</title><rect x="45.5039%" y="1253" width="0.0252%" height="15" fill="rgb(206,45,38)"/><text x="45.7539%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;model::rho_types::Expr,alloc::alloc::Global&gt;&gt; (22 samples, 0.02%)</title><rect x="45.5086%" y="1237" width="0.0206%" height="15" fill="rgb(226,6,15)"/><text x="45.7586%" y="1247.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.02%)</title><rect x="45.5086%" y="1221" width="0.0206%" height="15" fill="rgb(232,22,54)"/><text x="45.7586%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::Expr&gt;&gt; (22 samples, 0.02%)</title><rect x="45.5086%" y="1205" width="0.0206%" height="15" fill="rgb(229,222,32)"/><text x="45.7586%" y="1215.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.02%)</title><rect x="45.5086%" y="1189" width="0.0206%" height="15" fill="rgb(228,62,29)"/><text x="45.7586%" y="1199.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (22 samples, 0.02%)</title><rect x="45.5086%" y="1173" width="0.0206%" height="15" fill="rgb(251,103,34)"/><text x="45.7586%" y="1183.50"></text></g><g><title>alloc::alloc::dealloc (20 samples, 0.02%)</title><rect x="45.5104%" y="1157" width="0.0187%" height="15" fill="rgb(233,12,30)"/><text x="45.7604%" y="1167.50"></text></g><g><title>[libc-2.31.so] (23 samples, 0.02%)</title><rect x="45.5441%" y="1253" width="0.0215%" height="15" fill="rgb(238,52,0)"/><text x="45.7941%" y="1263.50"></text></g><g><title>model::rho_types::Par::append_expr (106 samples, 0.10%)</title><rect x="45.5291%" y="1269" width="0.0991%" height="15" fill="rgb(223,98,5)"/><text x="45.7791%" y="1279.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (67 samples, 0.06%)</title><rect x="45.5656%" y="1253" width="0.0626%" height="15" fill="rgb(228,75,37)"/><text x="45.8156%" y="1263.50"></text></g><g><title>core::ptr::write (67 samples, 0.06%)</title><rect x="45.5656%" y="1237" width="0.0626%" height="15" fill="rgb(205,115,49)"/><text x="45.8156%" y="1247.50"></text></g><g><title>[libc-2.31.so] (65 samples, 0.06%)</title><rect x="45.5675%" y="1221" width="0.0607%" height="15" fill="rgb(250,154,43)"/><text x="45.8175%" y="1231.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_match::&lt;impl rho_runtime::interpreter::reduce::AsyncEvaluator&lt;S&gt; for model::rho_types::Match&gt;::evaluate::{{closure}} (1,040 samples, 0.97%)</title><rect x="44.6712%" y="1333" width="0.9719%" height="15" fill="rgb(226,43,29)"/><text x="44.9212%" y="1343.50"></text></g><g><title>rho_runtime::interpreter::reduce::substitute::sub_par::&lt;impl rho_runtime::interpreter::reduce::substitute::Substitutable&lt;S&gt; for model::rho_types::Par&gt;::substitute (468 samples, 0.44%)</title><rect x="45.2058%" y="1317" width="0.4374%" height="15" fill="rgb(249,228,39)"/><text x="45.4558%" y="1327.50"></text></g><g><title>rho_runtime::interpreter::reduce::substitute::sub_par::&lt;impl rho_runtime::interpreter::reduce::substitute::Substitutable&lt;S&gt; for model::rho_types::Par&gt;::substitute_no_sort (468 samples, 0.44%)</title><rect x="45.2058%" y="1301" width="0.4374%" height="15" fill="rgb(216,79,43)"/><text x="45.4558%" y="1311.50"></text></g><g><title>rho_runtime::interpreter::reduce::substitute::sub_par::substitute_expressions_in_par (468 samples, 0.44%)</title><rect x="45.2058%" y="1285" width="0.4374%" height="15" fill="rgb(228,95,12)"/><text x="45.4558%" y="1295.50"></text></g><g><title>rho_runtime::interpreter::reduce::substitute::sub_expr::&lt;impl rho_runtime::interpreter::reduce::substitute::Substitutable&lt;S&gt; for model::rho_types::Expr&gt;::substitute_no_sort (16 samples, 0.01%)</title><rect x="45.6282%" y="1269" width="0.0150%" height="15" fill="rgb(249,221,15)"/><text x="45.8782%" y="1279.50"></text></g><g><title>tokio::runtime::task::joinable (113 samples, 0.11%)</title><rect x="45.6488%" y="1253" width="0.1056%" height="15" fill="rgb(233,34,13)"/><text x="45.8988%" y="1263.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::new (113 samples, 0.11%)</title><rect x="45.6488%" y="1237" width="0.1056%" height="15" fill="rgb(214,103,39)"/><text x="45.8988%" y="1247.50"></text></g><g><title>[libc-2.31.so] (113 samples, 0.11%)</title><rect x="45.6488%" y="1221" width="0.1056%" height="15" fill="rgb(251,126,39)"/><text x="45.8988%" y="1231.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_par::&lt;impl rho_runtime::interpreter::reduce::AsyncEvaluator&lt;S&gt; for model::rho_types::Par&gt;::evaluate::{{closure}} (248 samples, 0.23%)</title><rect x="45.6432%" y="1333" width="0.2318%" height="15" fill="rgb(214,216,36)"/><text x="45.8932%" y="1343.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::spawn_evaluation (248 samples, 0.23%)</title><rect x="45.6432%" y="1317" width="0.2318%" height="15" fill="rgb(220,221,8)"/><text x="45.8932%" y="1327.50"></text></g><g><title>tokio::task::spawn::spawn (248 samples, 0.23%)</title><rect x="45.6432%" y="1301" width="0.2318%" height="15" fill="rgb(240,216,3)"/><text x="45.8932%" y="1311.50"></text></g><g><title>tokio::runtime::spawner::Spawner::spawn (248 samples, 0.23%)</title><rect x="45.6432%" y="1285" width="0.2318%" height="15" fill="rgb(232,218,17)"/><text x="45.8932%" y="1295.50"></text></g><g><title>tokio::runtime::thread_pool::Spawner::spawn (247 samples, 0.23%)</title><rect x="45.6441%" y="1269" width="0.2308%" height="15" fill="rgb(229,163,45)"/><text x="45.8941%" y="1279.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (129 samples, 0.12%)</title><rect x="45.7544%" y="1253" width="0.1206%" height="15" fill="rgb(231,110,42)"/><text x="46.0044%" y="1263.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (126 samples, 0.12%)</title><rect x="45.7572%" y="1237" width="0.1178%" height="15" fill="rgb(208,170,48)"/><text x="46.0072%" y="1247.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule::{{closure}} (36 samples, 0.03%)</title><rect x="45.8413%" y="1221" width="0.0336%" height="15" fill="rgb(239,116,25)"/><text x="46.0913%" y="1231.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule_local (11 samples, 0.01%)</title><rect x="45.8646%" y="1205" width="0.0103%" height="15" fill="rgb(219,200,50)"/><text x="46.1146%" y="1215.50"></text></g><g><title>[libc-2.31.so] (31 samples, 0.03%)</title><rect x="45.9282%" y="1221" width="0.0290%" height="15" fill="rgb(245,200,0)"/><text x="46.1782%" y="1231.50"></text></g><g><title>tokio::park::thread::wake (18 samples, 0.02%)</title><rect x="45.9572%" y="1221" width="0.0168%" height="15" fill="rgb(245,119,33)"/><text x="46.2072%" y="1231.50"></text></g><g><title>tokio::park::thread::Inner::unpark (18 samples, 0.02%)</title><rect x="45.9572%" y="1205" width="0.0168%" height="15" fill="rgb(231,125,12)"/><text x="46.2072%" y="1215.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::notify_one (18 samples, 0.02%)</title><rect x="45.9572%" y="1189" width="0.0168%" height="15" fill="rgb(216,96,41)"/><text x="46.2072%" y="1199.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one (18 samples, 0.02%)</title><rect x="45.9572%" y="1173" width="0.0168%" height="15" fill="rgb(248,43,45)"/><text x="46.2072%" y="1183.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (18 samples, 0.02%)</title><rect x="45.9572%" y="1157" width="0.0168%" height="15" fill="rgb(217,222,7)"/><text x="46.2072%" y="1167.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (18 samples, 0.02%)</title><rect x="45.9572%" y="1141" width="0.0168%" height="15" fill="rgb(233,28,6)"/><text x="46.2072%" y="1151.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (18 samples, 0.02%)</title><rect x="45.9572%" y="1125" width="0.0168%" height="15" fill="rgb(231,218,15)"/><text x="46.2072%" y="1135.50"></text></g><g><title>syscall (18 samples, 0.02%)</title><rect x="45.9572%" y="1109" width="0.0168%" height="15" fill="rgb(226,171,48)"/><text x="46.2072%" y="1119.50"></text></g><g><title>[unknown] (18 samples, 0.02%)</title><rect x="45.9572%" y="1093" width="0.0168%" height="15" fill="rgb(235,201,9)"/><text x="46.2072%" y="1103.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (24 samples, 0.02%)</title><rect x="45.9983%" y="1173" width="0.0224%" height="15" fill="rgb(217,80,15)"/><text x="46.2483%" y="1183.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::poll_acquire (17 samples, 0.02%)</title><rect x="46.0048%" y="1157" width="0.0159%" height="15" fill="rgb(219,152,8)"/><text x="46.2548%" y="1167.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (50 samples, 0.05%)</title><rect x="45.9824%" y="1205" width="0.0467%" height="15" fill="rgb(243,107,38)"/><text x="46.2324%" y="1215.50"></text></g><g><title>tokio::sync::mpsc::bounded::Sender&lt;T&gt;::reserve::{{closure}} (50 samples, 0.05%)</title><rect x="45.9824%" y="1189" width="0.0467%" height="15" fill="rgb(231,17,5)"/><text x="46.2324%" y="1199.50"></text></g><g><title>[libc-2.31.so] (55 samples, 0.05%)</title><rect x="46.0291%" y="1205" width="0.0514%" height="15" fill="rgb(209,25,54)"/><text x="46.2791%" y="1215.50"></text></g><g><title>[libc-2.31.so] (26 samples, 0.02%)</title><rect x="46.0805%" y="1189" width="0.0243%" height="15" fill="rgb(219,0,2)"/><text x="46.3305%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::park::thread::Inner&gt;&gt; (25 samples, 0.02%)</title><rect x="46.1058%" y="1173" width="0.0234%" height="15" fill="rgb(246,9,5)"/><text x="46.3558%" y="1183.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.02%)</title><rect x="46.1058%" y="1157" width="0.0234%" height="15" fill="rgb(226,159,4)"/><text x="46.3558%" y="1167.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (17 samples, 0.02%)</title><rect x="46.1132%" y="1141" width="0.0159%" height="15" fill="rgb(219,175,34)"/><text x="46.3632%" y="1151.50"></text></g><g><title>core::sync::atomic::atomic_sub (17 samples, 0.02%)</title><rect x="46.1132%" y="1125" width="0.0159%" height="15" fill="rgb(236,10,46)"/><text x="46.3632%" y="1135.50"></text></g><g><title>core::mem::drop (19 samples, 0.02%)</title><rect x="46.1291%" y="1157" width="0.0178%" height="15" fill="rgb(240,211,16)"/><text x="46.3791%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,()&gt;&gt; (19 samples, 0.02%)</title><rect x="46.1291%" y="1141" width="0.0178%" height="15" fill="rgb(205,3,43)"/><text x="46.3791%" y="1151.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.02%)</title><rect x="46.1291%" y="1125" width="0.0178%" height="15" fill="rgb(245,7,22)"/><text x="46.3791%" y="1135.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (19 samples, 0.02%)</title><rect x="46.1291%" y="1109" width="0.0178%" height="15" fill="rgb(239,132,32)"/><text x="46.3791%" y="1119.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (19 samples, 0.02%)</title><rect x="46.1291%" y="1093" width="0.0178%" height="15" fill="rgb(228,202,34)"/><text x="46.3791%" y="1103.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (19 samples, 0.02%)</title><rect x="46.1291%" y="1077" width="0.0178%" height="15" fill="rgb(254,200,22)"/><text x="46.3791%" y="1087.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (59 samples, 0.06%)</title><rect x="46.1469%" y="1157" width="0.0551%" height="15" fill="rgb(219,10,39)"/><text x="46.3969%" y="1167.50"></text></g><g><title>core::sync::atomic::atomic_swap (59 samples, 0.06%)</title><rect x="46.1469%" y="1141" width="0.0551%" height="15" fill="rgb(226,210,39)"/><text x="46.3969%" y="1151.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (5,714 samples, 5.34%)</title><rect x="46.2086%" y="1093" width="5.3400%" height="15" fill="rgb(208,219,16)"/><text x="46.4586%" y="1103.50">&lt;parkin..</text></g><g><title>syscall (5,683 samples, 5.31%)</title><rect x="46.2375%" y="1077" width="5.3110%" height="15" fill="rgb(216,158,51)"/><text x="46.4875%" y="1087.50">syscall</text></g><g><title>[unknown] (5,623 samples, 5.25%)</title><rect x="46.2936%" y="1061" width="5.2549%" height="15" fill="rgb(233,14,44)"/><text x="46.5436%" y="1071.50">[unkno..</text></g><g><title>[unknown] (5,559 samples, 5.20%)</title><rect x="46.3534%" y="1045" width="5.1951%" height="15" fill="rgb(237,97,39)"/><text x="46.6034%" y="1055.50">[unkno..</text></g><g><title>[unknown] (5,529 samples, 5.17%)</title><rect x="46.3814%" y="1029" width="5.1671%" height="15" fill="rgb(218,198,43)"/><text x="46.6314%" y="1039.50">[unkno..</text></g><g><title>[unknown] (5,509 samples, 5.15%)</title><rect x="46.4001%" y="1013" width="5.1484%" height="15" fill="rgb(231,104,20)"/><text x="46.6501%" y="1023.50">[unkno..</text></g><g><title>[unknown] (5,484 samples, 5.13%)</title><rect x="46.4235%" y="997" width="5.1250%" height="15" fill="rgb(254,36,13)"/><text x="46.6735%" y="1007.50">[unkno..</text></g><g><title>[unknown] (4,745 samples, 4.43%)</title><rect x="47.1141%" y="981" width="4.4344%" height="15" fill="rgb(248,14,50)"/><text x="47.3641%" y="991.50">[unkn..</text></g><g><title>[unknown] (4,473 samples, 4.18%)</title><rect x="47.3683%" y="965" width="4.1802%" height="15" fill="rgb(217,107,29)"/><text x="47.6183%" y="975.50">[unkn..</text></g><g><title>[unknown] (3,992 samples, 3.73%)</title><rect x="47.8178%" y="949" width="3.7307%" height="15" fill="rgb(251,169,33)"/><text x="48.0678%" y="959.50">[unk..</text></g><g><title>[unknown] (3,294 samples, 3.08%)</title><rect x="48.4702%" y="933" width="3.0784%" height="15" fill="rgb(217,108,32)"/><text x="48.7202%" y="943.50">[un..</text></g><g><title>[unknown] (2,009 samples, 1.88%)</title><rect x="49.6710%" y="917" width="1.8775%" height="15" fill="rgb(219,66,42)"/><text x="49.9210%" y="927.50">[..</text></g><g><title>[unknown] (872 samples, 0.81%)</title><rect x="50.7336%" y="901" width="0.8149%" height="15" fill="rgb(206,180,7)"/><text x="50.9836%" y="911.50"></text></g><g><title>[unknown] (343 samples, 0.32%)</title><rect x="51.2280%" y="885" width="0.3205%" height="15" fill="rgb(208,226,31)"/><text x="51.4780%" y="895.50"></text></g><g><title>[unknown] (51 samples, 0.05%)</title><rect x="51.5009%" y="869" width="0.0477%" height="15" fill="rgb(218,26,49)"/><text x="51.7509%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (175 samples, 0.16%)</title><rect x="51.5541%" y="1093" width="0.1635%" height="15" fill="rgb(233,197,48)"/><text x="51.8041%" y="1103.50"></text></g><g><title>core::sync::atomic::atomic_load (175 samples, 0.16%)</title><rect x="51.5541%" y="1077" width="0.1635%" height="15" fill="rgb(252,181,51)"/><text x="51.8041%" y="1087.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::should_timeout (49 samples, 0.05%)</title><rect x="51.7177%" y="1093" width="0.0458%" height="15" fill="rgb(253,90,19)"/><text x="51.9677%" y="1103.50"></text></g><g><title>std::time::Instant::now (39 samples, 0.04%)</title><rect x="51.7270%" y="1077" width="0.0364%" height="15" fill="rgb(215,171,30)"/><text x="51.9770%" y="1087.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (39 samples, 0.04%)</title><rect x="51.7270%" y="1061" width="0.0364%" height="15" fill="rgb(214,222,9)"/><text x="51.9770%" y="1071.50"></text></g><g><title>std::sys::unix::time::inner::now (39 samples, 0.04%)</title><rect x="51.7270%" y="1045" width="0.0364%" height="15" fill="rgb(223,3,22)"/><text x="51.9770%" y="1055.50"></text></g><g><title>__clock_gettime (38 samples, 0.04%)</title><rect x="51.7280%" y="1029" width="0.0355%" height="15" fill="rgb(225,196,46)"/><text x="51.9780%" y="1039.50"></text></g><g><title>__vdso_clock_gettime (37 samples, 0.03%)</title><rect x="51.7289%" y="1013" width="0.0346%" height="15" fill="rgb(209,110,37)"/><text x="51.9789%" y="1023.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (202 samples, 0.19%)</title><rect x="51.7635%" y="1093" width="0.1888%" height="15" fill="rgb(249,89,12)"/><text x="52.0135%" y="1103.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (186 samples, 0.17%)</title><rect x="51.7784%" y="1077" width="0.1738%" height="15" fill="rgb(226,27,33)"/><text x="52.0284%" y="1087.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (185 samples, 0.17%)</title><rect x="51.7794%" y="1061" width="0.1729%" height="15" fill="rgb(213,82,22)"/><text x="52.0294%" y="1071.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (185 samples, 0.17%)</title><rect x="51.7794%" y="1045" width="0.1729%" height="15" fill="rgb(248,140,0)"/><text x="52.0294%" y="1055.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::notify_one (6,255 samples, 5.85%)</title><rect x="46.2020%" y="1157" width="5.8456%" height="15" fill="rgb(228,106,3)"/><text x="46.4520%" y="1167.50">tokio::..</text></g><g><title>parking_lot::condvar::Condvar::notify_one (6,255 samples, 5.85%)</title><rect x="46.2020%" y="1141" width="5.8456%" height="15" fill="rgb(209,23,37)"/><text x="46.4520%" y="1151.50">parking..</text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (6,254 samples, 5.84%)</title><rect x="46.2029%" y="1125" width="5.8446%" height="15" fill="rgb(241,93,50)"/><text x="46.4529%" y="1135.50">parking..</text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (6,251 samples, 5.84%)</title><rect x="46.2057%" y="1109" width="5.8418%" height="15" fill="rgb(253,46,43)"/><text x="46.4557%" y="1119.50">parking..</text></g><g><title>parking_lot_core::parking_lot::unlock_bucket_pair (102 samples, 0.10%)</title><rect x="51.9523%" y="1093" width="0.0953%" height="15" fill="rgb(226,206,43)"/><text x="52.2023%" y="1103.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::unlock (102 samples, 0.10%)</title><rect x="51.9523%" y="1077" width="0.0953%" height="15" fill="rgb(217,54,7)"/><text x="52.2023%" y="1087.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (102 samples, 0.10%)</title><rect x="51.9523%" y="1061" width="0.0953%" height="15" fill="rgb(223,5,52)"/><text x="52.2023%" y="1071.50"></text></g><g><title>core::sync::atomic::atomic_sub (102 samples, 0.10%)</title><rect x="51.9523%" y="1045" width="0.0953%" height="15" fill="rgb(206,52,46)"/><text x="52.2023%" y="1055.50"></text></g><g><title>tokio::park::thread::wake (6,374 samples, 5.96%)</title><rect x="46.1048%" y="1189" width="5.9568%" height="15" fill="rgb(253,136,11)"/><text x="46.3548%" y="1199.50">tokio::p..</text></g><g><title>tokio::park::thread::Inner::unpark (6,348 samples, 5.93%)</title><rect x="46.1291%" y="1173" width="5.9325%" height="15" fill="rgb(208,106,33)"/><text x="46.3791%" y="1183.50">tokio::p..</text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (15 samples, 0.01%)</title><rect x="52.0476%" y="1157" width="0.0140%" height="15" fill="rgb(206,54,4)"/><text x="52.2976%" y="1167.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (15 samples, 0.01%)</title><rect x="52.0476%" y="1141" width="0.0140%" height="15" fill="rgb(213,3,15)"/><text x="52.2976%" y="1151.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (15 samples, 0.01%)</title><rect x="52.0476%" y="1125" width="0.0140%" height="15" fill="rgb(252,211,39)"/><text x="52.2976%" y="1135.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (14 samples, 0.01%)</title><rect x="52.0485%" y="1109" width="0.0131%" height="15" fill="rgb(223,6,36)"/><text x="52.2985%" y="1119.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (14 samples, 0.01%)</title><rect x="52.0485%" y="1093" width="0.0131%" height="15" fill="rgb(252,169,45)"/><text x="52.2985%" y="1103.50"></text></g><g><title>[libc-2.31.so] (39 samples, 0.04%)</title><rect x="52.0635%" y="1157" width="0.0364%" height="15" fill="rgb(212,48,26)"/><text x="52.3135%" y="1167.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (222 samples, 0.21%)</title><rect x="52.1018%" y="1141" width="0.2075%" height="15" fill="rgb(251,102,48)"/><text x="52.3518%" y="1151.50"></text></g><g><title>core::sync::atomic::atomic_add (222 samples, 0.21%)</title><rect x="52.1018%" y="1125" width="0.2075%" height="15" fill="rgb(243,208,16)"/><text x="52.3518%" y="1135.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (11 samples, 0.01%)</title><rect x="52.3121%" y="1125" width="0.0103%" height="15" fill="rgb(219,96,24)"/><text x="52.5621%" y="1135.50"></text></g><g><title>[libc-2.31.so] (11 samples, 0.01%)</title><rect x="52.3121%" y="1109" width="0.0103%" height="15" fill="rgb(219,33,29)"/><text x="52.5621%" y="1119.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::write (282 samples, 0.26%)</title><rect x="52.3093%" y="1141" width="0.2635%" height="15" fill="rgb(223,176,5)"/><text x="52.5593%" y="1151.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::set_ready (268 samples, 0.25%)</title><rect x="52.3223%" y="1125" width="0.2505%" height="15" fill="rgb(228,140,14)"/><text x="52.5723%" y="1135.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (268 samples, 0.25%)</title><rect x="52.3223%" y="1109" width="0.2505%" height="15" fill="rgb(217,179,31)"/><text x="52.5723%" y="1119.50"></text></g><g><title>core::sync::atomic::atomic_or (268 samples, 0.25%)</title><rect x="52.3223%" y="1093" width="0.2505%" height="15" fill="rgb(230,9,30)"/><text x="52.5723%" y="1103.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (548 samples, 0.51%)</title><rect x="52.0616%" y="1189" width="0.5121%" height="15" fill="rgb(230,136,20)"/><text x="52.3116%" y="1199.50"></text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (547 samples, 0.51%)</title><rect x="52.0625%" y="1173" width="0.5112%" height="15" fill="rgb(215,210,22)"/><text x="52.3125%" y="1183.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::push (506 samples, 0.47%)</title><rect x="52.1009%" y="1157" width="0.4729%" height="15" fill="rgb(218,43,5)"/><text x="52.3509%" y="1167.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_and (18 samples, 0.02%)</title><rect x="52.5737%" y="1157" width="0.0168%" height="15" fill="rgb(216,11,5)"/><text x="52.8237%" y="1167.50"></text></g><g><title>core::sync::atomic::atomic_and (18 samples, 0.02%)</title><rect x="52.5737%" y="1141" width="0.0168%" height="15" fill="rgb(209,82,29)"/><text x="52.8237%" y="1151.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,146 samples, 6.68%)</title><rect x="45.9273%" y="1237" width="6.6783%" height="15" fill="rgb(244,115,12)"/><text x="46.1773%" y="1247.50">&lt;core::fu..</text></g><g><title>tokio::sync::mpsc::bounded::Sender&lt;T&gt;::send::{{closure}} (7,096 samples, 6.63%)</title><rect x="45.9740%" y="1221" width="6.6315%" height="15" fill="rgb(222,82,18)"/><text x="46.2240%" y="1231.50">tokio::sy..</text></g><g><title>tokio::sync::mpsc::bounded::Permit&lt;T&gt;::send (6,982 samples, 6.52%)</title><rect x="46.0805%" y="1205" width="6.5250%" height="15" fill="rgb(249,227,8)"/><text x="46.3305%" y="1215.50">tokio::sy..</text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (34 samples, 0.03%)</title><rect x="52.5737%" y="1189" width="0.0318%" height="15" fill="rgb(253,141,45)"/><text x="52.8237%" y="1199.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::take_waker (34 samples, 0.03%)</title><rect x="52.5737%" y="1173" width="0.0318%" height="15" fill="rgb(234,184,4)"/><text x="52.8237%" y="1183.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (16 samples, 0.01%)</title><rect x="52.5906%" y="1157" width="0.0150%" height="15" fill="rgb(218,194,23)"/><text x="52.8406%" y="1167.50"></text></g><g><title>core::sync::atomic::atomic_or (16 samples, 0.01%)</title><rect x="52.5906%" y="1141" width="0.0150%" height="15" fill="rgb(235,66,41)"/><text x="52.8406%" y="1151.50"></text></g><g><title>model::ordering::sort_par::ParScoreTreeIter::news_score (46 samples, 0.04%)</title><rect x="52.7046%" y="1173" width="0.0430%" height="15" fill="rgb(245,217,1)"/><text x="52.9546%" y="1183.50"></text></g><g><title>model::ordering::sort_par::ParScoreTreeIter::matches_score (30 samples, 0.03%)</title><rect x="52.7195%" y="1157" width="0.0280%" height="15" fill="rgb(229,91,1)"/><text x="52.9695%" y="1167.50"></text></g><g><title>model::ordering::sort_par::ParScoreTreeIter::bundles_score (30 samples, 0.03%)</title><rect x="52.7195%" y="1141" width="0.0280%" height="15" fill="rgb(207,101,30)"/><text x="52.9695%" y="1151.50"></text></g><g><title>model::ordering::sort_par::ParScoreTreeIter::connectives_score (30 samples, 0.03%)</title><rect x="52.7195%" y="1125" width="0.0280%" height="15" fill="rgb(223,82,49)"/><text x="52.9695%" y="1135.50"></text></g><g><title>model::ordering::sort_par::ParScoreTreeIter::unforgeables_score (26 samples, 0.02%)</title><rect x="52.7233%" y="1109" width="0.0243%" height="15" fill="rgb(218,167,17)"/><text x="52.9733%" y="1119.50"></text></g><g><title>model::ordering::sort_unforgeable::&lt;impl model::ordering::Scorable for &amp;model::rho_types::GUnforgeable&gt;::score_tree_iter (22 samples, 0.02%)</title><rect x="52.7270%" y="1093" width="0.0206%" height="15" fill="rgb(208,103,14)"/><text x="52.9770%" y="1103.50"></text></g><g><title>&lt;model::ordering::ScoreTreeIter as core::iter::traits::iterator::Iterator&gt;::next (123 samples, 0.11%)</title><rect x="52.6541%" y="1205" width="0.1149%" height="15" fill="rgb(238,20,8)"/><text x="52.9041%" y="1215.50"></text></g><g><title>&lt;model::ordering::sort_par::ParScoreTreeIter as core::iter::traits::iterator::Iterator&gt;::next (107 samples, 0.10%)</title><rect x="52.6691%" y="1189" width="0.1000%" height="15" fill="rgb(218,80,54)"/><text x="52.9191%" y="1199.50"></text></g><g><title>&lt;model::ordering::ScoreTreeIter as core::iter::traits::iterator::Iterator&gt;::next (47 samples, 0.04%)</title><rect x="52.7840%" y="1189" width="0.0439%" height="15" fill="rgb(240,144,17)"/><text x="53.0340%" y="1199.50"></text></g><g><title>&lt;model::ordering::sort_unforgeable::UnforgeableScoreTreeIter as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.03%)</title><rect x="52.7980%" y="1173" width="0.0299%" height="15" fill="rgb(245,27,50)"/><text x="53.0480%" y="1183.50"></text></g><g><title>model::ordering::sort_unforgeable::UnforgeableScoreTreeIter::private_body_next (32 samples, 0.03%)</title><rect x="52.7980%" y="1157" width="0.0299%" height="15" fill="rgb(251,51,7)"/><text x="53.0480%" y="1167.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (55 samples, 0.05%)</title><rect x="52.8784%" y="1125" width="0.0514%" height="15" fill="rgb(245,217,29)"/><text x="53.1284%" y="1135.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (55 samples, 0.05%)</title><rect x="52.8784%" y="1109" width="0.0514%" height="15" fill="rgb(221,176,29)"/><text x="53.1284%" y="1119.50"></text></g><g><title>[libc-2.31.so] (54 samples, 0.05%)</title><rect x="52.8793%" y="1093" width="0.0505%" height="15" fill="rgb(212,180,24)"/><text x="53.1293%" y="1103.50"></text></g><g><title>blake3::ChunkState::fill_buf (80 samples, 0.07%)</title><rect x="52.8569%" y="1141" width="0.0748%" height="15" fill="rgb(254,24,2)"/><text x="53.1069%" y="1151.50"></text></g><g><title>blake3::ChunkState::update (97 samples, 0.09%)</title><rect x="52.8457%" y="1157" width="0.0907%" height="15" fill="rgb(230,100,2)"/><text x="53.0957%" y="1167.50"></text></g><g><title>blake3::Hasher::update (122 samples, 0.11%)</title><rect x="52.8279%" y="1189" width="0.1140%" height="15" fill="rgb(219,142,25)"/><text x="53.0779%" y="1199.50"></text></g><g><title>blake3::Hasher::update_with_join (122 samples, 0.11%)</title><rect x="52.8279%" y="1173" width="0.1140%" height="15" fill="rgb(240,73,43)"/><text x="53.0779%" y="1183.50"></text></g><g><title>&lt;model::rho_types::Par as model::ordering::hash::Blake3Hashable&gt;::blake3_hash::traverse (187 samples, 0.17%)</title><rect x="52.7691%" y="1205" width="0.1748%" height="15" fill="rgb(214,114,15)"/><text x="53.0191%" y="1215.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (46 samples, 0.04%)</title><rect x="53.0186%" y="1141" width="0.0430%" height="15" fill="rgb(207,130,4)"/><text x="53.2686%" y="1151.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (46 samples, 0.04%)</title><rect x="53.0186%" y="1125" width="0.0430%" height="15" fill="rgb(221,25,40)"/><text x="53.2686%" y="1135.50"></text></g><g><title>[libc-2.31.so] (39 samples, 0.04%)</title><rect x="53.0251%" y="1109" width="0.0364%" height="15" fill="rgb(241,184,7)"/><text x="53.2751%" y="1119.50"></text></g><g><title>blake3::ChunkState::fill_buf (69 samples, 0.06%)</title><rect x="52.9990%" y="1157" width="0.0645%" height="15" fill="rgb(235,159,4)"/><text x="53.2490%" y="1167.50"></text></g><g><title>blake3::ChunkState::update (102 samples, 0.10%)</title><rect x="52.9728%" y="1173" width="0.0953%" height="15" fill="rgb(214,87,48)"/><text x="53.2228%" y="1183.50"></text></g><g><title>blake3::Hasher::merge_cv_stack (16 samples, 0.01%)</title><rect x="53.0681%" y="1173" width="0.0150%" height="15" fill="rgb(246,198,24)"/><text x="53.3181%" y="1183.50"></text></g><g><title>core::num::&lt;impl u64&gt;::count_ones (12 samples, 0.01%)</title><rect x="53.0718%" y="1157" width="0.0112%" height="15" fill="rgb(209,66,40)"/><text x="53.3218%" y="1167.50"></text></g><g><title>blake3::Hasher::update (158 samples, 0.15%)</title><rect x="52.9447%" y="1205" width="0.1477%" height="15" fill="rgb(233,147,39)"/><text x="53.1947%" y="1215.50"></text></g><g><title>blake3::Hasher::update_with_join (157 samples, 0.15%)</title><rect x="52.9457%" y="1189" width="0.1467%" height="15" fill="rgb(231,145,52)"/><text x="53.1957%" y="1199.50"></text></g><g><title>&lt;model::rho_types::Par as model::ordering::hash::Blake3Hashable&gt;::blake3_hash::traverse (517 samples, 0.48%)</title><rect x="52.6111%" y="1221" width="0.4832%" height="15" fill="rgb(206,20,26)"/><text x="52.8611%" y="1231.50"></text></g><g><title>blake3::Hasher::final_output (20 samples, 0.02%)</title><rect x="53.0943%" y="1205" width="0.0187%" height="15" fill="rgb(238,220,4)"/><text x="53.3443%" y="1215.50"></text></g><g><title>blake3::ChunkState::output (20 samples, 0.02%)</title><rect x="53.0943%" y="1189" width="0.0187%" height="15" fill="rgb(252,195,42)"/><text x="53.3443%" y="1199.50"></text></g><g><title>blake3::Hasher::finalize (27 samples, 0.03%)</title><rect x="53.0943%" y="1221" width="0.0252%" height="15" fill="rgb(209,10,6)"/><text x="53.3443%" y="1231.50"></text></g><g><title>&lt;model::rho_types::Par as model::ordering::hash::Blake3Hashable&gt;::blake3_hash (555 samples, 0.52%)</title><rect x="52.6055%" y="1237" width="0.5187%" height="15" fill="rgb(229,3,52)"/><text x="52.8555%" y="1247.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (14 samples, 0.01%)</title><rect x="53.1242%" y="1205" width="0.0131%" height="15" fill="rgb(253,49,37)"/><text x="53.3742%" y="1215.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (14 samples, 0.01%)</title><rect x="53.1242%" y="1189" width="0.0131%" height="15" fill="rgb(240,103,49)"/><text x="53.3742%" y="1199.50"></text></g><g><title>core::sync::atomic::atomic_add (14 samples, 0.01%)</title><rect x="53.1242%" y="1173" width="0.0131%" height="15" fill="rgb(250,182,30)"/><text x="53.3742%" y="1183.50"></text></g><g><title>&lt;tokio::sync::mpsc::bounded::Sender&lt;T&gt; as core::clone::Clone&gt;::clone (29 samples, 0.03%)</title><rect x="53.1242%" y="1237" width="0.0271%" height="15" fill="rgb(248,8,30)"/><text x="53.3742%" y="1247.50"></text></g><g><title>&lt;tokio::sync::mpsc::chan::Tx&lt;T,S&gt; as core::clone::Clone&gt;::clone (29 samples, 0.03%)</title><rect x="53.1242%" y="1221" width="0.0271%" height="15" fill="rgb(237,120,30)"/><text x="53.3742%" y="1231.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (15 samples, 0.01%)</title><rect x="53.1373%" y="1205" width="0.0140%" height="15" fill="rgb(221,146,34)"/><text x="53.3873%" y="1215.50"></text></g><g><title>core::sync::atomic::atomic_add (15 samples, 0.01%)</title><rect x="53.1373%" y="1189" width="0.0140%" height="15" fill="rgb(242,55,13)"/><text x="53.3873%" y="1199.50"></text></g><g><title>[libc-2.31.so] (240 samples, 0.22%)</title><rect x="53.1541%" y="1237" width="0.2243%" height="15" fill="rgb(242,112,31)"/><text x="53.4041%" y="1247.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (15 samples, 0.01%)</title><rect x="53.3802%" y="1157" width="0.0140%" height="15" fill="rgb(249,192,27)"/><text x="53.6302%" y="1167.50"></text></g><g><title>core::sync::atomic::atomic_sub (15 samples, 0.01%)</title><rect x="53.3802%" y="1141" width="0.0140%" height="15" fill="rgb(208,204,44)"/><text x="53.6302%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_utils::sync::sharded_lock::ShardedLockReadGuard&lt;tokio::sync::mpsc::bounded::Sender&lt;rho_runtime::storage::coordinator::PendingTask&gt;&gt;&gt; (29 samples, 0.03%)</title><rect x="53.3802%" y="1237" width="0.0271%" height="15" fill="rgb(208,93,54)"/><text x="53.6302%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;()&gt;&gt; (29 samples, 0.03%)</title><rect x="53.3802%" y="1221" width="0.0271%" height="15" fill="rgb(242,1,31)"/><text x="53.6302%" y="1231.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.03%)</title><rect x="53.3802%" y="1205" width="0.0271%" height="15" fill="rgb(241,83,25)"/><text x="53.6302%" y="1215.50"></text></g><g><title>std::sys_common::rwlock::RWLock::read_unlock (29 samples, 0.03%)</title><rect x="53.3802%" y="1189" width="0.0271%" height="15" fill="rgb(205,169,50)"/><text x="53.6302%" y="1199.50"></text></g><g><title>std::sys::unix::rwlock::RWLock::read_unlock (29 samples, 0.03%)</title><rect x="53.3802%" y="1173" width="0.0271%" height="15" fill="rgb(239,186,37)"/><text x="53.6302%" y="1183.50"></text></g><g><title>std::sys::unix::rwlock::RWLock::raw_unlock (14 samples, 0.01%)</title><rect x="53.3943%" y="1157" width="0.0131%" height="15" fill="rgb(205,221,10)"/><text x="53.6443%" y="1167.50"></text></g><g><title>__GI___pthread_rwlock_unlock (14 samples, 0.01%)</title><rect x="53.3943%" y="1141" width="0.0131%" height="15" fill="rgb(218,196,15)"/><text x="53.6443%" y="1151.50"></text></g><g><title>&lt;tokio::sync::mpsc::chan::Tx&lt;T,S&gt; as core::ops::drop::Drop&gt;::drop (167 samples, 0.16%)</title><rect x="53.4073%" y="1205" width="0.1561%" height="15" fill="rgb(218,196,35)"/><text x="53.6573%" y="1215.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (164 samples, 0.15%)</title><rect x="53.4102%" y="1189" width="0.1533%" height="15" fill="rgb(233,63,24)"/><text x="53.6602%" y="1199.50"></text></g><g><title>core::sync::atomic::atomic_sub (164 samples, 0.15%)</title><rect x="53.4102%" y="1173" width="0.1533%" height="15" fill="rgb(225,8,4)"/><text x="53.6602%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::mpsc::bounded::Sender&lt;rho_runtime::storage::coordinator::PendingTask&gt;&gt; (184 samples, 0.17%)</title><rect x="53.4073%" y="1237" width="0.1720%" height="15" fill="rgb(234,105,35)"/><text x="53.6573%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::mpsc::chan::Tx&lt;rho_runtime::storage::coordinator::PendingTask,(tokio::sync::batch_semaphore::Semaphore,usize)&gt;&gt; (184 samples, 0.17%)</title><rect x="53.4073%" y="1221" width="0.1720%" height="15" fill="rgb(236,21,32)"/><text x="53.6573%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::sync::mpsc::chan::Chan&lt;rho_runtime::storage::coordinator::PendingTask,(tokio::sync::batch_semaphore::Semaphore,usize)&gt;&gt;&gt; (17 samples, 0.02%)</title><rect x="53.5634%" y="1205" width="0.0159%" height="15" fill="rgb(228,109,6)"/><text x="53.8134%" y="1215.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.02%)</title><rect x="53.5634%" y="1189" width="0.0159%" height="15" fill="rgb(229,215,31)"/><text x="53.8134%" y="1199.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (16 samples, 0.01%)</title><rect x="53.5644%" y="1173" width="0.0150%" height="15" fill="rgb(221,52,54)"/><text x="53.8144%" y="1183.50"></text></g><g><title>core::sync::atomic::atomic_sub (16 samples, 0.01%)</title><rect x="53.5644%" y="1157" width="0.0150%" height="15" fill="rgb(252,129,43)"/><text x="53.8144%" y="1167.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (47 samples, 0.04%)</title><rect x="53.6101%" y="1173" width="0.0439%" height="15" fill="rgb(248,183,27)"/><text x="53.8601%" y="1183.50"></text></g><g><title>crossbeam_utils::sync::sharded_lock::ShardedLock&lt;T&gt;::read (92 samples, 0.09%)</title><rect x="53.5840%" y="1237" width="0.0860%" height="15" fill="rgb(250,0,22)"/><text x="53.8340%" y="1247.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (80 samples, 0.07%)</title><rect x="53.5952%" y="1221" width="0.0748%" height="15" fill="rgb(213,166,10)"/><text x="53.8452%" y="1231.50"></text></g><g><title>std::sys_common::rwlock::RWLock::read (65 samples, 0.06%)</title><rect x="53.6092%" y="1205" width="0.0607%" height="15" fill="rgb(207,163,36)"/><text x="53.8592%" y="1215.50"></text></g><g><title>std::sys::unix::rwlock::RWLock::read (65 samples, 0.06%)</title><rect x="53.6092%" y="1189" width="0.0607%" height="15" fill="rgb(208,122,22)"/><text x="53.8592%" y="1199.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (17 samples, 0.02%)</title><rect x="53.6541%" y="1173" width="0.0159%" height="15" fill="rgb(207,104,49)"/><text x="53.9041%" y="1183.50"></text></g><g><title>core::sync::atomic::atomic_add (17 samples, 0.02%)</title><rect x="53.6541%" y="1157" width="0.0159%" height="15" fill="rgb(248,211,50)"/><text x="53.9041%" y="1167.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (51 samples, 0.05%)</title><rect x="53.6709%" y="1221" width="0.0477%" height="15" fill="rgb(217,13,45)"/><text x="53.9209%" y="1231.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (50 samples, 0.05%)</title><rect x="53.6718%" y="1205" width="0.0467%" height="15" fill="rgb(211,216,49)"/><text x="53.9218%" y="1215.50"></text></g><g><title>core::sync::atomic::atomic_add (50 samples, 0.05%)</title><rect x="53.6718%" y="1189" width="0.0467%" height="15" fill="rgb(221,58,53)"/><text x="53.9218%" y="1199.50"></text></g><g><title>[libc-2.31.so] (35 samples, 0.03%)</title><rect x="53.7195%" y="1205" width="0.0327%" height="15" fill="rgb(220,112,41)"/><text x="53.9695%" y="1215.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (173 samples, 0.16%)</title><rect x="53.7186%" y="1221" width="0.1617%" height="15" fill="rgb(236,38,28)"/><text x="53.9686%" y="1231.50"></text></g><g><title>alloc::alloc::exchange_malloc (137 samples, 0.13%)</title><rect x="53.7522%" y="1205" width="0.1280%" height="15" fill="rgb(227,195,22)"/><text x="54.0022%" y="1215.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (137 samples, 0.13%)</title><rect x="53.7522%" y="1189" width="0.1280%" height="15" fill="rgb(214,55,33)"/><text x="54.0022%" y="1199.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (137 samples, 0.13%)</title><rect x="53.7522%" y="1173" width="0.1280%" height="15" fill="rgb(248,80,13)"/><text x="54.0022%" y="1183.50"></text></g><g><title>alloc::alloc::alloc (137 samples, 0.13%)</title><rect x="53.7522%" y="1157" width="0.1280%" height="15" fill="rgb(238,52,6)"/><text x="54.0022%" y="1167.50"></text></g><g><title>__libc_malloc (137 samples, 0.13%)</title><rect x="53.7522%" y="1141" width="0.1280%" height="15" fill="rgb(224,198,47)"/><text x="54.0022%" y="1151.50"></text></g><g><title>[libc-2.31.so] (63 samples, 0.06%)</title><rect x="53.8214%" y="1125" width="0.0589%" height="15" fill="rgb(233,171,20)"/><text x="54.0714%" y="1135.50"></text></g><g><title>&lt;rho_runtime::storage::coordinator::AsyncStore as rho_runtime::storage::Storage&gt;::produce::{{closure}} (8,569 samples, 8.01%)</title><rect x="45.8759%" y="1253" width="8.0081%" height="15" fill="rgb(241,30,25)"/><text x="46.1259%" y="1263.50">&lt;rho_runtim..</text></g><g><title>tokio::sync::oneshot::channel (229 samples, 0.21%)</title><rect x="53.6700%" y="1237" width="0.2140%" height="15" fill="rgb(207,171,38)"/><text x="53.9200%" y="1247.50"></text></g><g><title>[libc-2.31.so] (34 samples, 0.03%)</title><rect x="53.8840%" y="1253" width="0.0318%" height="15" fill="rgb(234,70,1)"/><text x="54.1340%" y="1263.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (8,606 samples, 8.04%)</title><rect x="45.8749%" y="1285" width="8.0427%" height="15" fill="rgb(232,178,18)"/><text x="46.1249%" y="1295.50">&lt;core::pin:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,606 samples, 8.04%)</title><rect x="45.8749%" y="1269" width="8.0427%" height="15" fill="rgb(241,78,40)"/><text x="46.1249%" y="1279.50">&lt;core::futu..</text></g><g><title>&lt;rho_runtime::storage::coordinator::AsyncStore as rho_runtime::storage::Storage&gt;::produce (52 samples, 0.05%)</title><rect x="53.9176%" y="1285" width="0.0486%" height="15" fill="rgb(222,35,25)"/><text x="54.1676%" y="1295.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (52 samples, 0.05%)</title><rect x="53.9176%" y="1269" width="0.0486%" height="15" fill="rgb(207,92,16)"/><text x="54.1676%" y="1279.50"></text></g><g><title>alloc::alloc::exchange_malloc (52 samples, 0.05%)</title><rect x="53.9176%" y="1253" width="0.0486%" height="15" fill="rgb(216,59,51)"/><text x="54.1676%" y="1263.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (52 samples, 0.05%)</title><rect x="53.9176%" y="1237" width="0.0486%" height="15" fill="rgb(213,80,28)"/><text x="54.1676%" y="1247.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (52 samples, 0.05%)</title><rect x="53.9176%" y="1221" width="0.0486%" height="15" fill="rgb(220,93,7)"/><text x="54.1676%" y="1231.50"></text></g><g><title>alloc::alloc::alloc (52 samples, 0.05%)</title><rect x="53.9176%" y="1205" width="0.0486%" height="15" fill="rgb(225,24,44)"/><text x="54.1676%" y="1215.50"></text></g><g><title>__libc_malloc (52 samples, 0.05%)</title><rect x="53.9176%" y="1189" width="0.0486%" height="15" fill="rgb(243,74,40)"/><text x="54.1676%" y="1199.50"></text></g><g><title>[libc-2.31.so] (52 samples, 0.05%)</title><rect x="53.9176%" y="1173" width="0.0486%" height="15" fill="rgb(228,39,7)"/><text x="54.1676%" y="1183.50"></text></g><g><title>[libc-2.31.so] (52 samples, 0.05%)</title><rect x="53.9176%" y="1157" width="0.0486%" height="15" fill="rgb(227,79,8)"/><text x="54.1676%" y="1167.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,662 samples, 8.10%)</title><rect x="45.8749%" y="1317" width="8.0950%" height="15" fill="rgb(236,58,11)"/><text x="46.1249%" y="1327.50">&lt;core::futu..</text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::produce::{{closure}} (8,662 samples, 8.10%)</title><rect x="45.8749%" y="1301" width="8.0950%" height="15" fill="rgb(249,63,35)"/><text x="46.1249%" y="1311.50">rho_runtime..</text></g><g><title>&lt;model::rho_types::Par as rho_runtime::interpreter::reduce::eval_expression::AsyncParExpressionEvaluator&lt;S&gt;&gt;::evaluate_nested_expressions (185 samples, 0.17%)</title><rect x="53.9746%" y="1317" width="0.1729%" height="15" fill="rgb(252,114,16)"/><text x="54.2246%" y="1327.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (185 samples, 0.17%)</title><rect x="53.9746%" y="1301" width="0.1729%" height="15" fill="rgb(254,151,24)"/><text x="54.2246%" y="1311.50"></text></g><g><title>alloc::alloc::exchange_malloc (185 samples, 0.17%)</title><rect x="53.9746%" y="1285" width="0.1729%" height="15" fill="rgb(253,54,39)"/><text x="54.2246%" y="1295.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (185 samples, 0.17%)</title><rect x="53.9746%" y="1269" width="0.1729%" height="15" fill="rgb(243,25,45)"/><text x="54.2246%" y="1279.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (185 samples, 0.17%)</title><rect x="53.9746%" y="1253" width="0.1729%" height="15" fill="rgb(234,134,9)"/><text x="54.2246%" y="1263.50"></text></g><g><title>alloc::alloc::alloc (185 samples, 0.17%)</title><rect x="53.9746%" y="1237" width="0.1729%" height="15" fill="rgb(227,166,31)"/><text x="54.2246%" y="1247.50"></text></g><g><title>__libc_malloc (185 samples, 0.17%)</title><rect x="53.9746%" y="1221" width="0.1729%" height="15" fill="rgb(245,143,41)"/><text x="54.2246%" y="1231.50"></text></g><g><title>[libc-2.31.so] (185 samples, 0.17%)</title><rect x="53.9746%" y="1205" width="0.1729%" height="15" fill="rgb(238,181,32)"/><text x="54.2246%" y="1215.50"></text></g><g><title>[libc-2.31.so] (185 samples, 0.17%)</title><rect x="53.9746%" y="1189" width="0.1729%" height="15" fill="rgb(224,113,18)"/><text x="54.2246%" y="1199.50"></text></g><g><title>model::ordering::sort_par::&lt;impl model::ordering::Sortable for model::rho_types::Par&gt;::sort (12 samples, 0.01%)</title><rect x="54.1522%" y="1301" width="0.0112%" height="15" fill="rgb(240,229,28)"/><text x="54.4022%" y="1311.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by (12 samples, 0.01%)</title><rect x="54.1522%" y="1285" width="0.0112%" height="15" fill="rgb(250,185,3)"/><text x="54.4022%" y="1295.50"></text></g><g><title>alloc::slice::merge_sort (12 samples, 0.01%)</title><rect x="54.1522%" y="1269" width="0.0112%" height="15" fill="rgb(212,59,25)"/><text x="54.4022%" y="1279.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (43 samples, 0.04%)</title><rect x="54.1952%" y="1269" width="0.0402%" height="15" fill="rgb(221,87,20)"/><text x="54.4452%" y="1279.50"></text></g><g><title>core::ptr::read (41 samples, 0.04%)</title><rect x="54.1970%" y="1253" width="0.0383%" height="15" fill="rgb(213,74,28)"/><text x="54.4470%" y="1263.50"></text></g><g><title>[libc-2.31.so] (40 samples, 0.04%)</title><rect x="54.1980%" y="1237" width="0.0374%" height="15" fill="rgb(224,132,34)"/><text x="54.4480%" y="1247.50"></text></g><g><title>[libc-2.31.so] (80 samples, 0.07%)</title><rect x="54.2363%" y="1269" width="0.0748%" height="15" fill="rgb(222,101,24)"/><text x="54.4863%" y="1279.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (25 samples, 0.02%)</title><rect x="54.3111%" y="1269" width="0.0234%" height="15" fill="rgb(254,142,4)"/><text x="54.5611%" y="1279.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (25 samples, 0.02%)</title><rect x="54.3111%" y="1253" width="0.0234%" height="15" fill="rgb(230,229,49)"/><text x="54.5611%" y="1263.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (21 samples, 0.02%)</title><rect x="54.3148%" y="1237" width="0.0196%" height="15" fill="rgb(238,70,47)"/><text x="54.5648%" y="1247.50"></text></g><g><title>[libc-2.31.so] (19 samples, 0.02%)</title><rect x="54.3167%" y="1221" width="0.0178%" height="15" fill="rgb(231,160,17)"/><text x="54.5667%" y="1231.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 0.01%)</title><rect x="54.3391%" y="1205" width="0.0103%" height="15" fill="rgb(218,68,53)"/><text x="54.5891%" y="1215.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.01%)</title><rect x="54.3391%" y="1189" width="0.0103%" height="15" fill="rgb(236,111,10)"/><text x="54.5891%" y="1199.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (19 samples, 0.02%)</title><rect x="54.3344%" y="1269" width="0.0178%" height="15" fill="rgb(224,34,41)"/><text x="54.5844%" y="1279.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (19 samples, 0.02%)</title><rect x="54.3344%" y="1253" width="0.0178%" height="15" fill="rgb(241,118,19)"/><text x="54.5844%" y="1263.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (19 samples, 0.02%)</title><rect x="54.3344%" y="1237" width="0.0178%" height="15" fill="rgb(238,129,25)"/><text x="54.5844%" y="1247.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (19 samples, 0.02%)</title><rect x="54.3344%" y="1221" width="0.0178%" height="15" fill="rgb(238,22,31)"/><text x="54.5844%" y="1231.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11 samples, 0.01%)</title><rect x="54.3540%" y="1173" width="0.0103%" height="15" fill="rgb(222,174,48)"/><text x="54.6040%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;model::rho_types::Expr,alloc::alloc::Global&gt;&gt; (13 samples, 0.01%)</title><rect x="54.3540%" y="1237" width="0.0121%" height="15" fill="rgb(206,152,40)"/><text x="54.6040%" y="1247.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="54.3540%" y="1221" width="0.0121%" height="15" fill="rgb(218,99,54)"/><text x="54.6040%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::Expr&gt;&gt; (13 samples, 0.01%)</title><rect x="54.3540%" y="1205" width="0.0121%" height="15" fill="rgb(220,174,26)"/><text x="54.6040%" y="1215.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="54.3540%" y="1189" width="0.0121%" height="15" fill="rgb(245,116,9)"/><text x="54.6040%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;model::rho_types::Expr&gt;&gt; (16 samples, 0.01%)</title><rect x="54.3522%" y="1269" width="0.0150%" height="15" fill="rgb(209,72,35)"/><text x="54.6022%" y="1279.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="54.3522%" y="1253" width="0.0150%" height="15" fill="rgb(226,126,21)"/><text x="54.6022%" y="1263.50"></text></g><g><title>[libc-2.31.so] (25 samples, 0.02%)</title><rect x="54.3718%" y="1253" width="0.0234%" height="15" fill="rgb(227,192,1)"/><text x="54.6218%" y="1263.50"></text></g><g><title>model::rho_types::Par::append_expr (59 samples, 0.06%)</title><rect x="54.3671%" y="1269" width="0.0551%" height="15" fill="rgb(237,180,29)"/><text x="54.6171%" y="1279.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (29 samples, 0.03%)</title><rect x="54.3952%" y="1253" width="0.0271%" height="15" fill="rgb(230,197,35)"/><text x="54.6452%" y="1263.50"></text></g><g><title>core::ptr::write (27 samples, 0.03%)</title><rect x="54.3970%" y="1237" width="0.0252%" height="15" fill="rgb(246,193,31)"/><text x="54.6470%" y="1247.50"></text></g><g><title>[libc-2.31.so] (26 samples, 0.02%)</title><rect x="54.3980%" y="1221" width="0.0243%" height="15" fill="rgb(241,36,4)"/><text x="54.6480%" y="1231.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_send::&lt;impl rho_runtime::interpreter::reduce::AsyncEvaluator&lt;S&gt; for model::rho_types::Send&gt;::evaluate::{{closure}} (9,149 samples, 8.55%)</title><rect x="45.8749%" y="1333" width="8.5501%" height="15" fill="rgb(241,130,17)"/><text x="46.1249%" y="1343.50">rho_runtime:..</text></g><g><title>rho_runtime::interpreter::reduce::substitute::sub_par::&lt;impl rho_runtime::interpreter::reduce::substitute::Substitutable&lt;S&gt; for model::rho_types::Par&gt;::substitute (292 samples, 0.27%)</title><rect x="54.1522%" y="1317" width="0.2729%" height="15" fill="rgb(206,137,32)"/><text x="54.4022%" y="1327.50"></text></g><g><title>rho_runtime::interpreter::reduce::substitute::sub_par::&lt;impl rho_runtime::interpreter::reduce::substitute::Substitutable&lt;S&gt; for model::rho_types::Par&gt;::substitute_no_sort (280 samples, 0.26%)</title><rect x="54.1634%" y="1301" width="0.2617%" height="15" fill="rgb(237,228,51)"/><text x="54.4134%" y="1311.50"></text></g><g><title>rho_runtime::interpreter::reduce::substitute::sub_par::substitute_expressions_in_par (256 samples, 0.24%)</title><rect x="54.1858%" y="1285" width="0.2392%" height="15" fill="rgb(243,6,42)"/><text x="54.4358%" y="1295.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (20 samples, 0.02%)</title><rect x="54.6522%" y="1029" width="0.0187%" height="15" fill="rgb(251,74,28)"/><text x="54.9022%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (38 samples, 0.04%)</title><rect x="54.6512%" y="1045" width="0.0355%" height="15" fill="rgb(218,20,49)"/><text x="54.9012%" y="1055.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (17 samples, 0.02%)</title><rect x="54.6709%" y="1029" width="0.0159%" height="15" fill="rgb(238,28,14)"/><text x="54.9209%" y="1039.50"></text></g><g><title>alloc::slice::hack::to_vec (17 samples, 0.02%)</title><rect x="54.6709%" y="1013" width="0.0159%" height="15" fill="rgb(229,40,46)"/><text x="54.9209%" y="1023.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (17 samples, 0.02%)</title><rect x="54.6709%" y="997" width="0.0159%" height="15" fill="rgb(244,195,20)"/><text x="54.9209%" y="1007.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (14 samples, 0.01%)</title><rect x="54.6737%" y="981" width="0.0131%" height="15" fill="rgb(253,56,35)"/><text x="54.9237%" y="991.50"></text></g><g><title>__libc_malloc (40 samples, 0.04%)</title><rect x="54.6914%" y="837" width="0.0374%" height="15" fill="rgb(210,149,44)"/><text x="54.9414%" y="847.50"></text></g><g><title>[libc-2.31.so] (12 samples, 0.01%)</title><rect x="54.7176%" y="821" width="0.0112%" height="15" fill="rgb(240,135,12)"/><text x="54.9676%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (48 samples, 0.04%)</title><rect x="54.6895%" y="885" width="0.0449%" height="15" fill="rgb(251,24,50)"/><text x="54.9395%" y="895.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (48 samples, 0.04%)</title><rect x="54.6895%" y="869" width="0.0449%" height="15" fill="rgb(243,200,47)"/><text x="54.9395%" y="879.50"></text></g><g><title>alloc::alloc::alloc (48 samples, 0.04%)</title><rect x="54.6895%" y="853" width="0.0449%" height="15" fill="rgb(224,166,26)"/><text x="54.9395%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (51 samples, 0.05%)</title><rect x="54.6895%" y="933" width="0.0477%" height="15" fill="rgb(233,0,47)"/><text x="54.9395%" y="943.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (51 samples, 0.05%)</title><rect x="54.6895%" y="917" width="0.0477%" height="15" fill="rgb(253,80,5)"/><text x="54.9395%" y="927.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (51 samples, 0.05%)</title><rect x="54.6895%" y="901" width="0.0477%" height="15" fill="rgb(214,133,25)"/><text x="54.9395%" y="911.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (189 samples, 0.18%)</title><rect x="54.5671%" y="1061" width="0.1766%" height="15" fill="rgb(209,27,14)"/><text x="54.8171%" y="1071.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (61 samples, 0.06%)</title><rect x="54.6867%" y="1045" width="0.0570%" height="15" fill="rgb(219,102,51)"/><text x="54.9367%" y="1055.50"></text></g><g><title>&lt;model::bitset::BitSet&lt;B&gt; as core::clone::Clone&gt;::clone (59 samples, 0.06%)</title><rect x="54.6886%" y="1029" width="0.0551%" height="15" fill="rgb(237,18,16)"/><text x="54.9386%" y="1039.50"></text></g><g><title>&lt;bit_vec::BitVec&lt;B&gt; as core::clone::Clone&gt;::clone (59 samples, 0.06%)</title><rect x="54.6886%" y="1013" width="0.0551%" height="15" fill="rgb(241,85,17)"/><text x="54.9386%" y="1023.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (58 samples, 0.05%)</title><rect x="54.6895%" y="997" width="0.0542%" height="15" fill="rgb(236,90,42)"/><text x="54.9395%" y="1007.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (58 samples, 0.05%)</title><rect x="54.6895%" y="981" width="0.0542%" height="15" fill="rgb(249,57,21)"/><text x="54.9395%" y="991.50"></text></g><g><title>alloc::slice::hack::to_vec (58 samples, 0.05%)</title><rect x="54.6895%" y="965" width="0.0542%" height="15" fill="rgb(243,12,36)"/><text x="54.9395%" y="975.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (58 samples, 0.05%)</title><rect x="54.6895%" y="949" width="0.0542%" height="15" fill="rgb(253,128,47)"/><text x="54.9395%" y="959.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (301 samples, 0.28%)</title><rect x="54.5559%" y="1077" width="0.2813%" height="15" fill="rgb(207,33,20)"/><text x="54.8059%" y="1087.50"></text></g><g><title>[libc-2.31.so] (100 samples, 0.09%)</title><rect x="54.7437%" y="1061" width="0.0935%" height="15" fill="rgb(233,215,35)"/><text x="54.9937%" y="1071.50"></text></g><g><title>&lt;model::rho_types::MatchCase as core::clone::Clone&gt;::clone (339 samples, 0.32%)</title><rect x="54.5419%" y="1093" width="0.3168%" height="15" fill="rgb(249,188,52)"/><text x="54.7919%" y="1103.50"></text></g><g><title>[libc-2.31.so] (23 samples, 0.02%)</title><rect x="54.8372%" y="1077" width="0.0215%" height="15" fill="rgb(225,12,32)"/><text x="55.0872%" y="1087.50"></text></g><g><title>__libc_malloc (13 samples, 0.01%)</title><rect x="54.8615%" y="997" width="0.0121%" height="15" fill="rgb(247,98,14)"/><text x="55.1115%" y="1007.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.01%)</title><rect x="54.8615%" y="1045" width="0.0131%" height="15" fill="rgb(247,219,48)"/><text x="55.1115%" y="1055.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.01%)</title><rect x="54.8615%" y="1029" width="0.0131%" height="15" fill="rgb(253,60,48)"/><text x="55.1115%" y="1039.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.01%)</title><rect x="54.8615%" y="1013" width="0.0131%" height="15" fill="rgb(245,15,52)"/><text x="55.1115%" y="1023.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (17 samples, 0.02%)</title><rect x="54.8596%" y="1093" width="0.0159%" height="15" fill="rgb(220,133,28)"/><text x="55.1096%" y="1103.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16 samples, 0.01%)</title><rect x="54.8606%" y="1077" width="0.0150%" height="15" fill="rgb(217,180,4)"/><text x="55.1106%" y="1087.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (16 samples, 0.01%)</title><rect x="54.8606%" y="1061" width="0.0150%" height="15" fill="rgb(251,24,1)"/><text x="55.1106%" y="1071.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (425 samples, 0.40%)</title><rect x="54.5363%" y="1157" width="0.3972%" height="15" fill="rgb(212,185,49)"/><text x="54.7863%" y="1167.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (425 samples, 0.40%)</title><rect x="54.5363%" y="1141" width="0.3972%" height="15" fill="rgb(215,175,22)"/><text x="54.7863%" y="1151.50"></text></g><g><title>alloc::slice::hack::to_vec (425 samples, 0.40%)</title><rect x="54.5363%" y="1125" width="0.3972%" height="15" fill="rgb(250,205,14)"/><text x="54.7863%" y="1135.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (425 samples, 0.40%)</title><rect x="54.5363%" y="1109" width="0.3972%" height="15" fill="rgb(225,211,22)"/><text x="54.7863%" y="1119.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (62 samples, 0.06%)</title><rect x="54.8755%" y="1093" width="0.0579%" height="15" fill="rgb(251,179,42)"/><text x="55.1255%" y="1103.50"></text></g><g><title>[libc-2.31.so] (55 samples, 0.05%)</title><rect x="54.8821%" y="1077" width="0.0514%" height="15" fill="rgb(208,216,51)"/><text x="55.1321%" y="1087.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (62 samples, 0.06%)</title><rect x="54.9372%" y="997" width="0.0579%" height="15" fill="rgb(235,36,11)"/><text x="55.1872%" y="1007.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (62 samples, 0.06%)</title><rect x="54.9372%" y="981" width="0.0579%" height="15" fill="rgb(213,189,28)"/><text x="55.1872%" y="991.50"></text></g><g><title>alloc::alloc::alloc (62 samples, 0.06%)</title><rect x="54.9372%" y="965" width="0.0579%" height="15" fill="rgb(227,203,42)"/><text x="55.1872%" y="975.50"></text></g><g><title>__libc_malloc (60 samples, 0.06%)</title><rect x="54.9391%" y="949" width="0.0561%" height="15" fill="rgb(244,72,36)"/><text x="55.1891%" y="959.50"></text></g><g><title>[libc-2.31.so] (18 samples, 0.02%)</title><rect x="54.9783%" y="933" width="0.0168%" height="15" fill="rgb(213,53,17)"/><text x="55.2283%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (65 samples, 0.06%)</title><rect x="54.9372%" y="1045" width="0.0607%" height="15" fill="rgb(207,167,3)"/><text x="55.1872%" y="1055.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (65 samples, 0.06%)</title><rect x="54.9372%" y="1029" width="0.0607%" height="15" fill="rgb(216,98,30)"/><text x="55.1872%" y="1039.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (65 samples, 0.06%)</title><rect x="54.9372%" y="1013" width="0.0607%" height="15" fill="rgb(236,123,15)"/><text x="55.1872%" y="1023.50"></text></g><g><title>&lt;model::bitset::BitSet&lt;B&gt; as core::clone::Clone&gt;::clone (71 samples, 0.07%)</title><rect x="54.9363%" y="1141" width="0.0664%" height="15" fill="rgb(248,81,50)"/><text x="55.1863%" y="1151.50"></text></g><g><title>&lt;bit_vec::BitVec&lt;B&gt; as core::clone::Clone&gt;::clone (71 samples, 0.07%)</title><rect x="54.9363%" y="1125" width="0.0664%" height="15" fill="rgb(214,120,4)"/><text x="55.1863%" y="1135.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (70 samples, 0.07%)</title><rect x="54.9372%" y="1109" width="0.0654%" height="15" fill="rgb(208,179,34)"/><text x="55.1872%" y="1119.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (70 samples, 0.07%)</title><rect x="54.9372%" y="1093" width="0.0654%" height="15" fill="rgb(227,140,7)"/><text x="55.1872%" y="1103.50"></text></g><g><title>alloc::slice::hack::to_vec (70 samples, 0.07%)</title><rect x="54.9372%" y="1077" width="0.0654%" height="15" fill="rgb(214,22,6)"/><text x="55.1872%" y="1087.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (70 samples, 0.07%)</title><rect x="54.9372%" y="1061" width="0.0654%" height="15" fill="rgb(207,137,27)"/><text x="55.1872%" y="1071.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (16 samples, 0.01%)</title><rect x="55.0129%" y="1125" width="0.0150%" height="15" fill="rgb(210,8,46)"/><text x="55.2629%" y="1135.50"></text></g><g><title>__libc_malloc (23 samples, 0.02%)</title><rect x="55.0297%" y="917" width="0.0215%" height="15" fill="rgb(240,16,54)"/><text x="55.2797%" y="927.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (25 samples, 0.02%)</title><rect x="55.0297%" y="965" width="0.0234%" height="15" fill="rgb(211,209,29)"/><text x="55.2797%" y="975.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (25 samples, 0.02%)</title><rect x="55.0297%" y="949" width="0.0234%" height="15" fill="rgb(226,228,24)"/><text x="55.2797%" y="959.50"></text></g><g><title>alloc::alloc::alloc (25 samples, 0.02%)</title><rect x="55.0297%" y="933" width="0.0234%" height="15" fill="rgb(222,84,9)"/><text x="55.2797%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (28 samples, 0.03%)</title><rect x="55.0297%" y="1013" width="0.0262%" height="15" fill="rgb(234,203,30)"/><text x="55.2797%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (28 samples, 0.03%)</title><rect x="55.0297%" y="997" width="0.0262%" height="15" fill="rgb(238,109,14)"/><text x="55.2797%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (28 samples, 0.03%)</title><rect x="55.0297%" y="981" width="0.0262%" height="15" fill="rgb(233,206,34)"/><text x="55.2797%" y="991.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (66 samples, 0.06%)</title><rect x="55.0026%" y="1141" width="0.0617%" height="15" fill="rgb(220,167,47)"/><text x="55.2526%" y="1151.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (39 samples, 0.04%)</title><rect x="55.0278%" y="1125" width="0.0364%" height="15" fill="rgb(238,105,10)"/><text x="55.2778%" y="1135.50"></text></g><g><title>&lt;model::bitset::BitSet&lt;B&gt; as core::clone::Clone&gt;::clone (37 samples, 0.03%)</title><rect x="55.0297%" y="1109" width="0.0346%" height="15" fill="rgb(213,227,17)"/><text x="55.2797%" y="1119.50"></text></g><g><title>&lt;bit_vec::BitVec&lt;B&gt; as core::clone::Clone&gt;::clone (37 samples, 0.03%)</title><rect x="55.0297%" y="1093" width="0.0346%" height="15" fill="rgb(217,132,38)"/><text x="55.2797%" y="1103.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (37 samples, 0.03%)</title><rect x="55.0297%" y="1077" width="0.0346%" height="15" fill="rgb(242,146,4)"/><text x="55.2797%" y="1087.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (37 samples, 0.03%)</title><rect x="55.0297%" y="1061" width="0.0346%" height="15" fill="rgb(212,61,9)"/><text x="55.2797%" y="1071.50"></text></g><g><title>alloc::slice::hack::to_vec (37 samples, 0.03%)</title><rect x="55.0297%" y="1045" width="0.0346%" height="15" fill="rgb(247,126,22)"/><text x="55.2797%" y="1055.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (37 samples, 0.03%)</title><rect x="55.0297%" y="1029" width="0.0346%" height="15" fill="rgb(220,196,2)"/><text x="55.2797%" y="1039.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (166 samples, 0.16%)</title><rect x="54.9335%" y="1157" width="0.1551%" height="15" fill="rgb(208,46,4)"/><text x="55.1835%" y="1167.50"></text></g><g><title>[libc-2.31.so] (26 samples, 0.02%)</title><rect x="55.0643%" y="1141" width="0.0243%" height="15" fill="rgb(252,104,46)"/><text x="55.3143%" y="1151.50"></text></g><g><title>&lt;model::rho_types::Match as core::clone::Clone&gt;::clone (596 samples, 0.56%)</title><rect x="54.5363%" y="1173" width="0.5570%" height="15" fill="rgb(237,152,48)"/><text x="54.7863%" y="1183.50"></text></g><g><title>__libc_malloc (37 samples, 0.03%)</title><rect x="55.1157%" y="1077" width="0.0346%" height="15" fill="rgb(221,59,37)"/><text x="55.3657%" y="1087.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (56 samples, 0.05%)</title><rect x="55.1082%" y="1125" width="0.0523%" height="15" fill="rgb(209,202,51)"/><text x="55.3582%" y="1135.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (56 samples, 0.05%)</title><rect x="55.1082%" y="1109" width="0.0523%" height="15" fill="rgb(228,81,30)"/><text x="55.3582%" y="1119.50"></text></g><g><title>alloc::alloc::alloc (49 samples, 0.05%)</title><rect x="55.1148%" y="1093" width="0.0458%" height="15" fill="rgb(227,42,39)"/><text x="55.3648%" y="1103.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (81 samples, 0.08%)</title><rect x="55.0998%" y="1173" width="0.0757%" height="15" fill="rgb(221,26,2)"/><text x="55.3498%" y="1183.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (76 samples, 0.07%)</title><rect x="55.1045%" y="1157" width="0.0710%" height="15" fill="rgb(254,61,31)"/><text x="55.3545%" y="1167.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (76 samples, 0.07%)</title><rect x="55.1045%" y="1141" width="0.0710%" height="15" fill="rgb(222,173,38)"/><text x="55.3545%" y="1151.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (733 samples, 0.69%)</title><rect x="54.5082%" y="1237" width="0.6850%" height="15" fill="rgb(218,50,12)"/><text x="54.7582%" y="1247.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (726 samples, 0.68%)</title><rect x="54.5148%" y="1221" width="0.6785%" height="15" fill="rgb(223,88,40)"/><text x="54.7648%" y="1231.50"></text></g><g><title>alloc::slice::hack::to_vec (725 samples, 0.68%)</title><rect x="54.5157%" y="1205" width="0.6775%" height="15" fill="rgb(237,54,19)"/><text x="54.7657%" y="1215.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (725 samples, 0.68%)</title><rect x="54.5157%" y="1189" width="0.6775%" height="15" fill="rgb(251,129,25)"/><text x="54.7657%" y="1199.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (19 samples, 0.02%)</title><rect x="55.1755%" y="1173" width="0.0178%" height="15" fill="rgb(238,97,19)"/><text x="55.4255%" y="1183.50"></text></g><g><title>[libc-2.31.so] (17 samples, 0.02%)</title><rect x="55.1774%" y="1157" width="0.0159%" height="15" fill="rgb(240,169,18)"/><text x="55.4274%" y="1167.50"></text></g><g><title>[libc-2.31.so] (34 samples, 0.03%)</title><rect x="55.2288%" y="1013" width="0.0318%" height="15" fill="rgb(230,187,49)"/><text x="55.4788%" y="1023.50"></text></g><g><title>__libc_malloc (70 samples, 0.07%)</title><rect x="55.1961%" y="1029" width="0.0654%" height="15" fill="rgb(209,44,26)"/><text x="55.4461%" y="1039.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (75 samples, 0.07%)</title><rect x="55.1942%" y="1125" width="0.0701%" height="15" fill="rgb(244,0,6)"/><text x="55.4442%" y="1135.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (75 samples, 0.07%)</title><rect x="55.1942%" y="1109" width="0.0701%" height="15" fill="rgb(248,18,21)"/><text x="55.4442%" y="1119.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (73 samples, 0.07%)</title><rect x="55.1961%" y="1093" width="0.0682%" height="15" fill="rgb(245,180,19)"/><text x="55.4461%" y="1103.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (73 samples, 0.07%)</title><rect x="55.1961%" y="1077" width="0.0682%" height="15" fill="rgb(252,118,36)"/><text x="55.4461%" y="1087.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (73 samples, 0.07%)</title><rect x="55.1961%" y="1061" width="0.0682%" height="15" fill="rgb(210,224,19)"/><text x="55.4461%" y="1071.50"></text></g><g><title>alloc::alloc::alloc (73 samples, 0.07%)</title><rect x="55.1961%" y="1045" width="0.0682%" height="15" fill="rgb(218,30,24)"/><text x="55.4461%" y="1055.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (824 samples, 0.77%)</title><rect x="54.4980%" y="1253" width="0.7701%" height="15" fill="rgb(219,75,50)"/><text x="54.7480%" y="1263.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (80 samples, 0.07%)</title><rect x="55.1933%" y="1237" width="0.0748%" height="15" fill="rgb(234,72,50)"/><text x="55.4433%" y="1247.50"></text></g><g><title>&lt;model::bitset::BitSet&lt;B&gt; as core::clone::Clone&gt;::clone (80 samples, 0.07%)</title><rect x="55.1933%" y="1221" width="0.0748%" height="15" fill="rgb(219,100,48)"/><text x="55.4433%" y="1231.50"></text></g><g><title>&lt;bit_vec::BitVec&lt;B&gt; as core::clone::Clone&gt;::clone (80 samples, 0.07%)</title><rect x="55.1933%" y="1205" width="0.0748%" height="15" fill="rgb(253,5,41)"/><text x="55.4433%" y="1215.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (79 samples, 0.07%)</title><rect x="55.1942%" y="1189" width="0.0738%" height="15" fill="rgb(247,181,11)"/><text x="55.4442%" y="1199.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (79 samples, 0.07%)</title><rect x="55.1942%" y="1173" width="0.0738%" height="15" fill="rgb(222,223,25)"/><text x="55.4442%" y="1183.50"></text></g><g><title>alloc::slice::hack::to_vec (79 samples, 0.07%)</title><rect x="55.1942%" y="1157" width="0.0738%" height="15" fill="rgb(214,198,28)"/><text x="55.4442%" y="1167.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (79 samples, 0.07%)</title><rect x="55.1942%" y="1141" width="0.0738%" height="15" fill="rgb(230,46,43)"/><text x="55.4442%" y="1151.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (847 samples, 0.79%)</title><rect x="54.4952%" y="1269" width="0.7916%" height="15" fill="rgb(233,65,53)"/><text x="54.7452%" y="1279.50"></text></g><g><title>[libc-2.31.so] (20 samples, 0.02%)</title><rect x="55.2680%" y="1253" width="0.0187%" height="15" fill="rgb(221,121,27)"/><text x="55.5180%" y="1263.50"></text></g><g><title>&lt;model::rho_types::ParWithRandom as core::clone::Clone&gt;::clone (866 samples, 0.81%)</title><rect x="54.4896%" y="1285" width="0.8093%" height="15" fill="rgb(247,70,47)"/><text x="54.7396%" y="1295.50"></text></g><g><title>[libc-2.31.so] (13 samples, 0.01%)</title><rect x="55.2867%" y="1269" width="0.0121%" height="15" fill="rgb(228,85,35)"/><text x="55.5367%" y="1279.50"></text></g><g><title>&lt;rho_runtime::storage::TaggedContinuation as core::clone::Clone&gt;::clone (893 samples, 0.83%)</title><rect x="54.4839%" y="1301" width="0.8345%" height="15" fill="rgb(209,50,18)"/><text x="54.7339%" y="1311.50"></text></g><g><title>[libc-2.31.so] (21 samples, 0.02%)</title><rect x="55.2989%" y="1285" width="0.0196%" height="15" fill="rgb(250,19,35)"/><text x="55.5489%" y="1295.50"></text></g><g><title>[libc-2.31.so] (139 samples, 0.13%)</title><rect x="55.3194%" y="1301" width="0.1299%" height="15" fill="rgb(253,107,29)"/><text x="55.5694%" y="1311.50"></text></g><g><title>cfree (11 samples, 0.01%)</title><rect x="55.4577%" y="1285" width="0.0103%" height="15" fill="rgb(252,179,29)"/><text x="55.7077%" y="1295.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="55.4774%" y="1253" width="0.0215%" height="15" fill="rgb(238,194,6)"/><text x="55.7274%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;[model::rho_types::GUnforgeable]&gt; (21 samples, 0.02%)</title><rect x="55.4792%" y="1237" width="0.0196%" height="15" fill="rgb(238,164,29)"/><text x="55.7292%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::GUnforgeable&gt; (20 samples, 0.02%)</title><rect x="55.4802%" y="1221" width="0.0187%" height="15" fill="rgb(224,25,9)"/><text x="55.7302%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;model::rho_types::g_unforgeable::UnfInstance&gt;&gt; (20 samples, 0.02%)</title><rect x="55.4802%" y="1205" width="0.0187%" height="15" fill="rgb(244,153,23)"/><text x="55.7302%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::g_unforgeable::UnfInstance&gt; (16 samples, 0.01%)</title><rect x="55.4839%" y="1189" width="0.0150%" height="15" fill="rgb(212,203,14)"/><text x="55.7339%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::GPrivate&gt; (16 samples, 0.01%)</title><rect x="55.4839%" y="1173" width="0.0150%" height="15" fill="rgb(220,164,20)"/><text x="55.7339%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (16 samples, 0.01%)</title><rect x="55.4839%" y="1157" width="0.0150%" height="15" fill="rgb(222,203,48)"/><text x="55.7339%" y="1167.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="55.4839%" y="1141" width="0.0150%" height="15" fill="rgb(215,159,22)"/><text x="55.7339%" y="1151.50"></text></g><g><title>bytes::bytes::shared_drop (16 samples, 0.01%)</title><rect x="55.4839%" y="1125" width="0.0150%" height="15" fill="rgb(216,183,47)"/><text x="55.7339%" y="1135.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (16 samples, 0.01%)</title><rect x="55.4839%" y="1109" width="0.0150%" height="15" fill="rgb(229,195,25)"/><text x="55.7339%" y="1119.50"></text></g><g><title>bytes::bytes::shared_drop::{{closure}} (16 samples, 0.01%)</title><rect x="55.4839%" y="1093" width="0.0150%" height="15" fill="rgb(224,132,51)"/><text x="55.7339%" y="1103.50"></text></g><g><title>bytes::bytes::release_shared (16 samples, 0.01%)</title><rect x="55.4839%" y="1077" width="0.0150%" height="15" fill="rgb(240,63,7)"/><text x="55.7339%" y="1087.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (16 samples, 0.01%)</title><rect x="55.4839%" y="1061" width="0.0150%" height="15" fill="rgb(249,182,41)"/><text x="55.7339%" y="1071.50"></text></g><g><title>core::sync::atomic::atomic_sub (16 samples, 0.01%)</title><rect x="55.4839%" y="1045" width="0.0150%" height="15" fill="rgb(243,47,26)"/><text x="55.7339%" y="1055.50"></text></g><g><title>[libc-2.31.so] (13 samples, 0.01%)</title><rect x="55.4989%" y="1189" width="0.0121%" height="15" fill="rgb(233,48,2)"/><text x="55.7489%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::GUnforgeable&gt;&gt; (38 samples, 0.04%)</title><rect x="55.4774%" y="1269" width="0.0355%" height="15" fill="rgb(244,165,34)"/><text x="55.7274%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::GUnforgeable&gt;&gt; (15 samples, 0.01%)</title><rect x="55.4989%" y="1253" width="0.0140%" height="15" fill="rgb(207,89,7)"/><text x="55.7489%" y="1263.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="55.4989%" y="1237" width="0.0140%" height="15" fill="rgb(244,117,36)"/><text x="55.7489%" y="1247.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (15 samples, 0.01%)</title><rect x="55.4989%" y="1221" width="0.0140%" height="15" fill="rgb(226,144,34)"/><text x="55.7489%" y="1231.50"></text></g><g><title>alloc::alloc::dealloc (15 samples, 0.01%)</title><rect x="55.4989%" y="1205" width="0.0140%" height="15" fill="rgb(213,23,19)"/><text x="55.7489%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place&lt;(blake3::Hash,model::rho_types::Par)&gt; (80 samples, 0.07%)</title><rect x="55.4493%" y="1301" width="0.0748%" height="15" fill="rgb(217,75,12)"/><text x="55.6993%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Par&gt; (60 samples, 0.06%)</title><rect x="55.4680%" y="1285" width="0.0561%" height="15" fill="rgb(224,159,17)"/><text x="55.7180%" y="1295.50"></text></g><g><title>core::ptr::write (21 samples, 0.02%)</title><rect x="55.5269%" y="1285" width="0.0196%" height="15" fill="rgb(217,118,1)"/><text x="55.7769%" y="1295.50"></text></g><g><title>[libc-2.31.so] (19 samples, 0.02%)</title><rect x="55.5288%" y="1269" width="0.0178%" height="15" fill="rgb(232,180,48)"/><text x="55.7788%" y="1279.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::push (24 samples, 0.02%)</title><rect x="55.5250%" y="1301" width="0.0224%" height="15" fill="rgb(230,27,33)"/><text x="55.7750%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::sync::oneshot::Inner&lt;core::option::Option&lt;smallvec::SmallVec&lt;[(rho_runtime::storage::TaggedContinuation,smallvec::SmallVec&lt;[model::rho_types::ListParWithRandom: 3]&gt;): 3]&gt;&gt;&gt;&gt;&gt; (47 samples, 0.04%)</title><rect x="55.5512%" y="1285" width="0.0439%" height="15" fill="rgb(205,31,21)"/><text x="55.8012%" y="1295.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (47 samples, 0.04%)</title><rect x="55.5512%" y="1269" width="0.0439%" height="15" fill="rgb(253,59,4)"/><text x="55.8012%" y="1279.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (46 samples, 0.04%)</title><rect x="55.5521%" y="1253" width="0.0430%" height="15" fill="rgb(224,201,9)"/><text x="55.8021%" y="1263.50"></text></g><g><title>core::sync::atomic::atomic_sub (46 samples, 0.04%)</title><rect x="55.5521%" y="1237" width="0.0430%" height="15" fill="rgb(229,206,30)"/><text x="55.8021%" y="1247.50"></text></g><g><title>[libc-2.31.so] (97 samples, 0.09%)</title><rect x="55.5951%" y="1253" width="0.0907%" height="15" fill="rgb(212,67,47)"/><text x="55.8451%" y="1263.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (99 samples, 0.09%)</title><rect x="55.5951%" y="1285" width="0.0925%" height="15" fill="rgb(211,96,50)"/><text x="55.8451%" y="1295.50"></text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send::{{closure}} (99 samples, 0.09%)</title><rect x="55.5951%" y="1269" width="0.0925%" height="15" fill="rgb(252,114,18)"/><text x="55.8451%" y="1279.50"></text></g><g><title>tokio::sync::oneshot::State::set_complete (79 samples, 0.07%)</title><rect x="55.6886%" y="1269" width="0.0738%" height="15" fill="rgb(223,58,37)"/><text x="55.9386%" y="1279.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (79 samples, 0.07%)</title><rect x="55.6886%" y="1253" width="0.0738%" height="15" fill="rgb(237,70,4)"/><text x="55.9386%" y="1263.50"></text></g><g><title>core::sync::atomic::atomic_or (79 samples, 0.07%)</title><rect x="55.6886%" y="1237" width="0.0738%" height="15" fill="rgb(244,85,46)"/><text x="55.9386%" y="1247.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule (30 samples, 0.03%)</title><rect x="55.7624%" y="1157" width="0.0280%" height="15" fill="rgb(223,39,52)"/><text x="56.0124%" y="1167.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (30 samples, 0.03%)</title><rect x="55.7624%" y="1141" width="0.0280%" height="15" fill="rgb(218,200,14)"/><text x="56.0124%" y="1151.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule::{{closure}} (30 samples, 0.03%)</title><rect x="55.7624%" y="1125" width="0.0280%" height="15" fill="rgb(208,171,16)"/><text x="56.0124%" y="1135.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (28 samples, 0.03%)</title><rect x="55.7643%" y="1109" width="0.0262%" height="15" fill="rgb(234,200,18)"/><text x="56.0143%" y="1119.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (24 samples, 0.02%)</title><rect x="55.7680%" y="1093" width="0.0224%" height="15" fill="rgb(228,45,11)"/><text x="56.0180%" y="1103.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (22 samples, 0.02%)</title><rect x="55.7699%" y="1077" width="0.0206%" height="15" fill="rgb(237,182,11)"/><text x="56.0199%" y="1087.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule::{{closure}} (13 samples, 0.01%)</title><rect x="55.7783%" y="1061" width="0.0121%" height="15" fill="rgb(241,175,49)"/><text x="56.0283%" y="1071.50"></text></g><g><title>rho_runtime::storage::transit::Transit::produce (1,462 samples, 1.37%)</title><rect x="54.4410%" y="1317" width="1.3663%" height="15" fill="rgb(247,38,35)"/><text x="54.6910%" y="1327.50"></text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send (278 samples, 0.26%)</title><rect x="55.5475%" y="1301" width="0.2598%" height="15" fill="rgb(228,39,49)"/><text x="55.7975%" y="1311.50"></text></g><g><title>tokio::sync::oneshot::Inner&lt;T&gt;::complete (128 samples, 0.12%)</title><rect x="55.6876%" y="1285" width="0.1196%" height="15" fill="rgb(226,101,26)"/><text x="55.9376%" y="1295.50"></text></g><g><title>tokio::sync::oneshot::Task::with_task (48 samples, 0.04%)</title><rect x="55.7624%" y="1269" width="0.0449%" height="15" fill="rgb(206,141,19)"/><text x="56.0124%" y="1279.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (48 samples, 0.04%)</title><rect x="55.7624%" y="1253" width="0.0449%" height="15" fill="rgb(211,200,13)"/><text x="56.0124%" y="1263.50"></text></g><g><title>tokio::sync::oneshot::Task::with_task::{{closure}} (48 samples, 0.04%)</title><rect x="55.7624%" y="1237" width="0.0449%" height="15" fill="rgb(241,121,6)"/><text x="56.0124%" y="1247.50"></text></g><g><title>core::ops::function::FnOnce::call_once (48 samples, 0.04%)</title><rect x="55.7624%" y="1221" width="0.0449%" height="15" fill="rgb(234,221,29)"/><text x="56.0124%" y="1231.50"></text></g><g><title>core::task::wake::Waker::wake_by_ref (48 samples, 0.04%)</title><rect x="55.7624%" y="1205" width="0.0449%" height="15" fill="rgb(229,136,5)"/><text x="56.0124%" y="1215.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (48 samples, 0.04%)</title><rect x="55.7624%" y="1189" width="0.0449%" height="15" fill="rgb(238,36,11)"/><text x="56.0124%" y="1199.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_ref (48 samples, 0.04%)</title><rect x="55.7624%" y="1173" width="0.0449%" height="15" fill="rgb(251,55,41)"/><text x="56.0124%" y="1183.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified (18 samples, 0.02%)</title><rect x="55.7904%" y="1157" width="0.0168%" height="15" fill="rgb(242,34,40)"/><text x="56.0404%" y="1167.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (18 samples, 0.02%)</title><rect x="55.7904%" y="1141" width="0.0168%" height="15" fill="rgb(215,42,17)"/><text x="56.0404%" y="1151.50"></text></g><g><title>core::sync::atomic::atomic_or (18 samples, 0.02%)</title><rect x="55.7904%" y="1125" width="0.0168%" height="15" fill="rgb(207,44,46)"/><text x="56.0404%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::sync::oneshot::Inner&lt;rho_runtime::storage::transit::Transit&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="55.8073%" y="1301" width="0.0150%" height="15" fill="rgb(211,206,28)"/><text x="56.0573%" y="1311.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="55.8073%" y="1285" width="0.0150%" height="15" fill="rgb(237,167,16)"/><text x="56.0573%" y="1295.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (15 samples, 0.01%)</title><rect x="55.8082%" y="1269" width="0.0140%" height="15" fill="rgb(233,66,6)"/><text x="56.0582%" y="1279.50"></text></g><g><title>core::sync::atomic::atomic_sub (15 samples, 0.01%)</title><rect x="55.8082%" y="1253" width="0.0140%" height="15" fill="rgb(246,123,29)"/><text x="56.0582%" y="1263.50"></text></g><g><title>[libc-2.31.so] (178 samples, 0.17%)</title><rect x="55.8231%" y="1269" width="0.1663%" height="15" fill="rgb(209,62,40)"/><text x="56.0731%" y="1279.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (257 samples, 0.24%)</title><rect x="55.8222%" y="1301" width="0.2402%" height="15" fill="rgb(218,4,25)"/><text x="56.0722%" y="1311.50"></text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send::{{closure}} (257 samples, 0.24%)</title><rect x="55.8222%" y="1285" width="0.2402%" height="15" fill="rgb(253,91,49)"/><text x="56.0722%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;rho_runtime::storage::transit::Transit&gt;&gt; (78 samples, 0.07%)</title><rect x="55.9895%" y="1269" width="0.0729%" height="15" fill="rgb(228,155,29)"/><text x="56.2395%" y="1279.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (20,588 samples, 19.24%)</title><rect x="37.3397%" y="1349" width="19.2404%" height="15" fill="rgb(243,57,37)"/><text x="37.5897%" y="1359.50">&lt;core::future::from_generator:..</text></g><g><title>rho_runtime::storage::coordinator::Coordinator::handle_produce::{{closure}} (2,305 samples, 2.15%)</title><rect x="54.4260%" y="1333" width="2.1541%" height="15" fill="rgb(244,167,17)"/><text x="54.6760%" y="1343.50">r..</text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send (827 samples, 0.77%)</title><rect x="55.8073%" y="1317" width="0.7729%" height="15" fill="rgb(207,181,38)"/><text x="56.0573%" y="1327.50"></text></g><g><title>tokio::sync::oneshot::Inner&lt;T&gt;::complete (554 samples, 0.52%)</title><rect x="56.0624%" y="1301" width="0.5177%" height="15" fill="rgb(211,8,23)"/><text x="56.3124%" y="1311.50"></text></g><g><title>tokio::sync::oneshot::State::set_complete (553 samples, 0.52%)</title><rect x="56.0633%" y="1285" width="0.5168%" height="15" fill="rgb(235,11,44)"/><text x="56.3133%" y="1295.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (553 samples, 0.52%)</title><rect x="56.0633%" y="1269" width="0.5168%" height="15" fill="rgb(248,18,52)"/><text x="56.3133%" y="1279.50"></text></g><g><title>core::sync::atomic::atomic_or (553 samples, 0.52%)</title><rect x="56.0633%" y="1253" width="0.5168%" height="15" fill="rgb(208,4,7)"/><text x="56.3133%" y="1263.50"></text></g><g><title>&lt;model::locally_free::ExprInstanceLocallyFree as model::locally_free::HasLocallyFree&lt;model::rho_types::expr::ExprInstance&gt;&gt;::locally_free (13 samples, 0.01%)</title><rect x="56.5885%" y="1349" width="0.0121%" height="15" fill="rgb(240,17,39)"/><text x="56.8385%" y="1359.50"></text></g><g><title>&lt;model::ordering::ScoreTreeIter as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.02%)</title><rect x="56.6007%" y="1349" width="0.0196%" height="15" fill="rgb(207,170,3)"/><text x="56.8507%" y="1359.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (30 samples, 0.03%)</title><rect x="56.6241%" y="1349" width="0.0280%" height="15" fill="rgb(236,100,52)"/><text x="56.8741%" y="1359.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="56.6633%" y="709" width="0.0121%" height="15" fill="rgb(246,78,51)"/><text x="56.9133%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.01%)</title><rect x="56.6652%" y="693" width="0.0103%" height="15" fill="rgb(211,17,15)"/><text x="56.9152%" y="703.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.01%)</title><rect x="56.6652%" y="677" width="0.0103%" height="15" fill="rgb(209,59,46)"/><text x="56.9152%" y="687.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (47 samples, 0.04%)</title><rect x="56.6997%" y="693" width="0.0439%" height="15" fill="rgb(210,92,25)"/><text x="56.9497%" y="703.50"></text></g><g><title>[libc-2.31.so] (16 samples, 0.01%)</title><rect x="56.7287%" y="677" width="0.0150%" height="15" fill="rgb(238,174,52)"/><text x="56.9787%" y="687.50"></text></g><g><title>&lt;model::rho_types::Expr as core::clone::Clone&gt;::clone (95 samples, 0.09%)</title><rect x="56.6755%" y="709" width="0.0888%" height="15" fill="rgb(230,73,7)"/><text x="56.9255%" y="719.50"></text></g><g><title>[libc-2.31.so] (22 samples, 0.02%)</title><rect x="56.7437%" y="693" width="0.0206%" height="15" fill="rgb(243,124,40)"/><text x="56.9937%" y="703.50"></text></g><g><title>__libc_malloc (32 samples, 0.03%)</title><rect x="56.7801%" y="613" width="0.0299%" height="15" fill="rgb(244,170,11)"/><text x="57.0301%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (40 samples, 0.04%)</title><rect x="56.7783%" y="661" width="0.0374%" height="15" fill="rgb(207,114,54)"/><text x="57.0283%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (40 samples, 0.04%)</title><rect x="56.7783%" y="645" width="0.0374%" height="15" fill="rgb(205,42,20)"/><text x="57.0283%" y="655.50"></text></g><g><title>alloc::alloc::alloc (39 samples, 0.04%)</title><rect x="56.7792%" y="629" width="0.0364%" height="15" fill="rgb(230,30,28)"/><text x="57.0292%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (57 samples, 0.05%)</title><rect x="56.7642%" y="709" width="0.0533%" height="15" fill="rgb(205,73,54)"/><text x="57.0142%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (51 samples, 0.05%)</title><rect x="56.7698%" y="693" width="0.0477%" height="15" fill="rgb(254,227,23)"/><text x="57.0198%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (51 samples, 0.05%)</title><rect x="56.7698%" y="677" width="0.0477%" height="15" fill="rgb(228,202,34)"/><text x="57.0198%" y="687.50"></text></g><g><title>&lt;rho_runtime::storage::TaggedContinuation as core::clone::Clone&gt;::clone (226 samples, 0.21%)</title><rect x="56.6540%" y="1349" width="0.2112%" height="15" fill="rgb(222,225,37)"/><text x="56.9040%" y="1359.50"></text></g><g><title>&lt;model::rho_types::ParWithRandom as core::clone::Clone&gt;::clone (223 samples, 0.21%)</title><rect x="56.6568%" y="1333" width="0.2084%" height="15" fill="rgb(221,14,54)"/><text x="56.9068%" y="1343.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (223 samples, 0.21%)</title><rect x="56.6568%" y="1317" width="0.2084%" height="15" fill="rgb(254,102,2)"/><text x="56.9068%" y="1327.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (223 samples, 0.21%)</title><rect x="56.6568%" y="1301" width="0.2084%" height="15" fill="rgb(232,104,17)"/><text x="56.9068%" y="1311.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (223 samples, 0.21%)</title><rect x="56.6568%" y="1285" width="0.2084%" height="15" fill="rgb(250,220,14)"/><text x="56.9068%" y="1295.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (223 samples, 0.21%)</title><rect x="56.6568%" y="1269" width="0.2084%" height="15" fill="rgb(241,158,9)"/><text x="56.9068%" y="1279.50"></text></g><g><title>alloc::slice::hack::to_vec (223 samples, 0.21%)</title><rect x="56.6568%" y="1253" width="0.2084%" height="15" fill="rgb(246,9,43)"/><text x="56.9068%" y="1263.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (223 samples, 0.21%)</title><rect x="56.6568%" y="1237" width="0.2084%" height="15" fill="rgb(206,73,33)"/><text x="56.9068%" y="1247.50"></text></g><g><title>&lt;model::rho_types::Match as core::clone::Clone&gt;::clone (223 samples, 0.21%)</title><rect x="56.6568%" y="1221" width="0.2084%" height="15" fill="rgb(222,79,8)"/><text x="56.9068%" y="1231.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (223 samples, 0.21%)</title><rect x="56.6568%" y="1205" width="0.2084%" height="15" fill="rgb(234,8,54)"/><text x="56.9068%" y="1215.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (223 samples, 0.21%)</title><rect x="56.6568%" y="1189" width="0.2084%" height="15" fill="rgb(209,134,38)"/><text x="56.9068%" y="1199.50"></text></g><g><title>alloc::slice::hack::to_vec (223 samples, 0.21%)</title><rect x="56.6568%" y="1173" width="0.2084%" height="15" fill="rgb(230,127,29)"/><text x="56.9068%" y="1183.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (223 samples, 0.21%)</title><rect x="56.6568%" y="1157" width="0.2084%" height="15" fill="rgb(242,44,41)"/><text x="56.9068%" y="1167.50"></text></g><g><title>&lt;model::rho_types::MatchCase as core::clone::Clone&gt;::clone (223 samples, 0.21%)</title><rect x="56.6568%" y="1141" width="0.2084%" height="15" fill="rgb(222,56,43)"/><text x="56.9068%" y="1151.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (223 samples, 0.21%)</title><rect x="56.6568%" y="1125" width="0.2084%" height="15" fill="rgb(238,39,47)"/><text x="56.9068%" y="1135.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (223 samples, 0.21%)</title><rect x="56.6568%" y="1109" width="0.2084%" height="15" fill="rgb(226,79,43)"/><text x="56.9068%" y="1119.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (223 samples, 0.21%)</title><rect x="56.6568%" y="1093" width="0.2084%" height="15" fill="rgb(242,105,53)"/><text x="56.9068%" y="1103.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (223 samples, 0.21%)</title><rect x="56.6568%" y="1077" width="0.2084%" height="15" fill="rgb(251,132,46)"/><text x="56.9068%" y="1087.50"></text></g><g><title>alloc::slice::hack::to_vec (223 samples, 0.21%)</title><rect x="56.6568%" y="1061" width="0.2084%" height="15" fill="rgb(231,77,14)"/><text x="56.9068%" y="1071.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (223 samples, 0.21%)</title><rect x="56.6568%" y="1045" width="0.2084%" height="15" fill="rgb(240,135,9)"/><text x="56.9068%" y="1055.50"></text></g><g><title>&lt;model::rho_types::Send as core::clone::Clone&gt;::clone (223 samples, 0.21%)</title><rect x="56.6568%" y="1029" width="0.2084%" height="15" fill="rgb(248,109,14)"/><text x="56.9068%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (223 samples, 0.21%)</title><rect x="56.6568%" y="1013" width="0.2084%" height="15" fill="rgb(227,146,52)"/><text x="56.9068%" y="1023.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (223 samples, 0.21%)</title><rect x="56.6568%" y="997" width="0.2084%" height="15" fill="rgb(232,54,3)"/><text x="56.9068%" y="1007.50"></text></g><g><title>alloc::slice::hack::to_vec (223 samples, 0.21%)</title><rect x="56.6568%" y="981" width="0.2084%" height="15" fill="rgb(229,201,43)"/><text x="56.9068%" y="991.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (223 samples, 0.21%)</title><rect x="56.6568%" y="965" width="0.2084%" height="15" fill="rgb(252,161,33)"/><text x="56.9068%" y="975.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (223 samples, 0.21%)</title><rect x="56.6568%" y="949" width="0.2084%" height="15" fill="rgb(226,146,40)"/><text x="56.9068%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (223 samples, 0.21%)</title><rect x="56.6568%" y="933" width="0.2084%" height="15" fill="rgb(219,47,25)"/><text x="56.9068%" y="943.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (223 samples, 0.21%)</title><rect x="56.6568%" y="917" width="0.2084%" height="15" fill="rgb(250,135,13)"/><text x="56.9068%" y="927.50"></text></g><g><title>alloc::slice::hack::to_vec (223 samples, 0.21%)</title><rect x="56.6568%" y="901" width="0.2084%" height="15" fill="rgb(219,229,18)"/><text x="56.9068%" y="911.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (223 samples, 0.21%)</title><rect x="56.6568%" y="885" width="0.2084%" height="15" fill="rgb(217,152,27)"/><text x="56.9068%" y="895.50"></text></g><g><title>&lt;model::rho_types::Expr as core::clone::Clone&gt;::clone (223 samples, 0.21%)</title><rect x="56.6568%" y="869" width="0.2084%" height="15" fill="rgb(225,71,47)"/><text x="56.9068%" y="879.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (223 samples, 0.21%)</title><rect x="56.6568%" y="853" width="0.2084%" height="15" fill="rgb(220,139,14)"/><text x="56.9068%" y="863.50"></text></g><g><title>&lt;model::rho_types::expr::ExprInstance as core::clone::Clone&gt;::clone (223 samples, 0.21%)</title><rect x="56.6568%" y="837" width="0.2084%" height="15" fill="rgb(247,54,32)"/><text x="56.9068%" y="847.50"></text></g><g><title>&lt;model::rho_types::EPlus as core::clone::Clone&gt;::clone (223 samples, 0.21%)</title><rect x="56.6568%" y="821" width="0.2084%" height="15" fill="rgb(252,131,39)"/><text x="56.9068%" y="831.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (223 samples, 0.21%)</title><rect x="56.6568%" y="805" width="0.2084%" height="15" fill="rgb(210,108,39)"/><text x="56.9068%" y="815.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (223 samples, 0.21%)</title><rect x="56.6568%" y="789" width="0.2084%" height="15" fill="rgb(205,23,29)"/><text x="56.9068%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (223 samples, 0.21%)</title><rect x="56.6568%" y="773" width="0.2084%" height="15" fill="rgb(246,139,46)"/><text x="56.9068%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (223 samples, 0.21%)</title><rect x="56.6568%" y="757" width="0.2084%" height="15" fill="rgb(250,81,26)"/><text x="56.9068%" y="767.50"></text></g><g><title>alloc::slice::hack::to_vec (223 samples, 0.21%)</title><rect x="56.6568%" y="741" width="0.2084%" height="15" fill="rgb(214,104,7)"/><text x="56.9068%" y="751.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (223 samples, 0.21%)</title><rect x="56.6568%" y="725" width="0.2084%" height="15" fill="rgb(233,189,8)"/><text x="56.9068%" y="735.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (51 samples, 0.05%)</title><rect x="56.8175%" y="709" width="0.0477%" height="15" fill="rgb(228,141,17)"/><text x="57.0675%" y="719.50"></text></g><g><title>[libc-2.31.so] (26 samples, 0.02%)</title><rect x="56.8409%" y="693" width="0.0243%" height="15" fill="rgb(247,157,1)"/><text x="57.0909%" y="703.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (12 samples, 0.01%)</title><rect x="56.8661%" y="1349" width="0.0112%" height="15" fill="rgb(249,225,5)"/><text x="57.1161%" y="1359.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.01%)</title><rect x="56.8773%" y="1349" width="0.0103%" height="15" fill="rgb(242,55,13)"/><text x="57.1273%" y="1359.50"></text></g><g><title>&lt;rho_runtime::interpreter::reduce::environment::Env&lt;T&gt; as core::clone::Clone&gt;::clone (25 samples, 0.02%)</title><rect x="56.8932%" y="757" width="0.0234%" height="15" fill="rgb(230,49,50)"/><text x="57.1432%" y="767.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::clone::Clone&gt;::clone (25 samples, 0.02%)</title><rect x="56.8932%" y="741" width="0.0234%" height="15" fill="rgb(241,111,38)"/><text x="57.1432%" y="751.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::convert::From&lt;&amp;[&lt;A as smallvec::Array&gt;::Item]&gt;&gt;::from (25 samples, 0.02%)</title><rect x="56.8932%" y="725" width="0.0234%" height="15" fill="rgb(252,155,4)"/><text x="57.1432%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (25 samples, 0.02%)</title><rect x="56.8932%" y="709" width="0.0234%" height="15" fill="rgb(212,69,32)"/><text x="57.1432%" y="719.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::FromIterator&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::from_iter (25 samples, 0.02%)</title><rect x="56.8932%" y="693" width="0.0234%" height="15" fill="rgb(243,107,47)"/><text x="57.1432%" y="703.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (25 samples, 0.02%)</title><rect x="56.8932%" y="677" width="0.0234%" height="15" fill="rgb(247,130,12)"/><text x="57.1432%" y="687.50"></text></g><g><title>core::ptr::write (20 samples, 0.02%)</title><rect x="56.8979%" y="661" width="0.0187%" height="15" fill="rgb(233,74,16)"/><text x="57.1479%" y="671.50"></text></g><g><title>[libc-2.31.so] (20 samples, 0.02%)</title><rect x="56.8979%" y="645" width="0.0187%" height="15" fill="rgb(208,58,18)"/><text x="57.1479%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (11 samples, 0.01%)</title><rect x="56.9184%" y="741" width="0.0103%" height="15" fill="rgb(242,225,1)"/><text x="57.1684%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (11 samples, 0.01%)</title><rect x="56.9184%" y="725" width="0.0103%" height="15" fill="rgb(249,39,40)"/><text x="57.1684%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (16 samples, 0.01%)</title><rect x="56.9287%" y="741" width="0.0150%" height="15" fill="rgb(207,72,44)"/><text x="57.1787%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_or (16 samples, 0.01%)</title><rect x="56.9287%" y="725" width="0.0150%" height="15" fill="rgb(215,193,12)"/><text x="57.1787%" y="735.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (61 samples, 0.06%)</title><rect x="56.8876%" y="1349" width="0.0570%" height="15" fill="rgb(248,41,39)"/><text x="57.1376%" y="1359.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (61 samples, 0.06%)</title><rect x="56.8876%" y="1333" width="0.0570%" height="15" fill="rgb(253,85,4)"/><text x="57.1376%" y="1343.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (61 samples, 0.06%)</title><rect x="56.8876%" y="1317" width="0.0570%" height="15" fill="rgb(243,70,31)"/><text x="57.1376%" y="1327.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (61 samples, 0.06%)</title><rect x="56.8876%" y="1301" width="0.0570%" height="15" fill="rgb(253,195,26)"/><text x="57.1376%" y="1311.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (61 samples, 0.06%)</title><rect x="56.8876%" y="1285" width="0.0570%" height="15" fill="rgb(243,42,11)"/><text x="57.1376%" y="1295.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (61 samples, 0.06%)</title><rect x="56.8876%" y="1269" width="0.0570%" height="15" fill="rgb(239,66,17)"/><text x="57.1376%" y="1279.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (61 samples, 0.06%)</title><rect x="56.8876%" y="1253" width="0.0570%" height="15" fill="rgb(217,132,21)"/><text x="57.1376%" y="1263.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (61 samples, 0.06%)</title><rect x="56.8876%" y="1237" width="0.0570%" height="15" fill="rgb(252,202,21)"/><text x="57.1376%" y="1247.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (61 samples, 0.06%)</title><rect x="56.8876%" y="1221" width="0.0570%" height="15" fill="rgb(233,98,36)"/><text x="57.1376%" y="1231.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (61 samples, 0.06%)</title><rect x="56.8876%" y="1205" width="0.0570%" height="15" fill="rgb(216,153,54)"/><text x="57.1376%" y="1215.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (61 samples, 0.06%)</title><rect x="56.8876%" y="1189" width="0.0570%" height="15" fill="rgb(250,99,7)"/><text x="57.1376%" y="1199.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (61 samples, 0.06%)</title><rect x="56.8876%" y="1173" width="0.0570%" height="15" fill="rgb(207,56,50)"/><text x="57.1376%" y="1183.50"></text></g><g><title>tokio::coop::budget (61 samples, 0.06%)</title><rect x="56.8876%" y="1157" width="0.0570%" height="15" fill="rgb(244,61,34)"/><text x="57.1376%" y="1167.50"></text></g><g><title>tokio::coop::with_budget (61 samples, 0.06%)</title><rect x="56.8876%" y="1141" width="0.0570%" height="15" fill="rgb(241,50,38)"/><text x="57.1376%" y="1151.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (61 samples, 0.06%)</title><rect x="56.8876%" y="1125" width="0.0570%" height="15" fill="rgb(212,166,30)"/><text x="57.1376%" y="1135.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (61 samples, 0.06%)</title><rect x="56.8876%" y="1109" width="0.0570%" height="15" fill="rgb(249,127,32)"/><text x="57.1376%" y="1119.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (61 samples, 0.06%)</title><rect x="56.8876%" y="1093" width="0.0570%" height="15" fill="rgb(209,103,0)"/><text x="57.1376%" y="1103.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (61 samples, 0.06%)</title><rect x="56.8876%" y="1077" width="0.0570%" height="15" fill="rgb(238,209,51)"/><text x="57.1376%" y="1087.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (61 samples, 0.06%)</title><rect x="56.8876%" y="1061" width="0.0570%" height="15" fill="rgb(237,56,23)"/><text x="57.1376%" y="1071.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (61 samples, 0.06%)</title><rect x="56.8876%" y="1045" width="0.0570%" height="15" fill="rgb(215,153,46)"/><text x="57.1376%" y="1055.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (61 samples, 0.06%)</title><rect x="56.8876%" y="1029" width="0.0570%" height="15" fill="rgb(224,49,31)"/><text x="57.1376%" y="1039.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (61 samples, 0.06%)</title><rect x="56.8876%" y="1013" width="0.0570%" height="15" fill="rgb(250,18,42)"/><text x="57.1376%" y="1023.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (61 samples, 0.06%)</title><rect x="56.8876%" y="997" width="0.0570%" height="15" fill="rgb(215,176,39)"/><text x="57.1376%" y="1007.50"></text></g><g><title>std::panic::catch_unwind (61 samples, 0.06%)</title><rect x="56.8876%" y="981" width="0.0570%" height="15" fill="rgb(223,77,29)"/><text x="57.1376%" y="991.50"></text></g><g><title>std::panicking::try (61 samples, 0.06%)</title><rect x="56.8876%" y="965" width="0.0570%" height="15" fill="rgb(234,94,52)"/><text x="57.1376%" y="975.50"></text></g><g><title>std::panicking::try::do_call (61 samples, 0.06%)</title><rect x="56.8876%" y="949" width="0.0570%" height="15" fill="rgb(220,154,50)"/><text x="57.1376%" y="959.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (61 samples, 0.06%)</title><rect x="56.8876%" y="933" width="0.0570%" height="15" fill="rgb(212,11,10)"/><text x="57.1376%" y="943.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (61 samples, 0.06%)</title><rect x="56.8876%" y="917" width="0.0570%" height="15" fill="rgb(205,166,19)"/><text x="57.1376%" y="927.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (61 samples, 0.06%)</title><rect x="56.8876%" y="901" width="0.0570%" height="15" fill="rgb(244,198,16)"/><text x="57.1376%" y="911.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (61 samples, 0.06%)</title><rect x="56.8876%" y="885" width="0.0570%" height="15" fill="rgb(219,69,12)"/><text x="57.1376%" y="895.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (61 samples, 0.06%)</title><rect x="56.8876%" y="869" width="0.0570%" height="15" fill="rgb(245,30,7)"/><text x="57.1376%" y="879.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (61 samples, 0.06%)</title><rect x="56.8876%" y="853" width="0.0570%" height="15" fill="rgb(218,221,48)"/><text x="57.1376%" y="863.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::spawn_evaluation::{{closure}} (61 samples, 0.06%)</title><rect x="56.8876%" y="837" width="0.0570%" height="15" fill="rgb(216,66,15)"/><text x="57.1376%" y="847.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (61 samples, 0.06%)</title><rect x="56.8876%" y="821" width="0.0570%" height="15" fill="rgb(226,122,50)"/><text x="57.1376%" y="831.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (61 samples, 0.06%)</title><rect x="56.8876%" y="805" width="0.0570%" height="15" fill="rgb(239,156,16)"/><text x="57.1376%" y="815.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_par::&lt;impl rho_runtime::interpreter::reduce::AsyncEvaluator&lt;S&gt; for model::rho_types::Par&gt;::evaluate::{{closure}} (55 samples, 0.05%)</title><rect x="56.8932%" y="789" width="0.0514%" height="15" fill="rgb(224,27,38)"/><text x="57.1432%" y="799.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::spawn_evaluation (55 samples, 0.05%)</title><rect x="56.8932%" y="773" width="0.0514%" height="15" fill="rgb(224,39,27)"/><text x="57.1432%" y="783.50"></text></g><g><title>crossbeam_queue::seg_queue::SegQueue&lt;T&gt;::push (30 samples, 0.03%)</title><rect x="56.9166%" y="757" width="0.0280%" height="15" fill="rgb(215,92,29)"/><text x="57.1666%" y="767.50"></text></g><g><title>[libc-2.31.so] (289 samples, 0.27%)</title><rect x="56.9792%" y="1333" width="0.2701%" height="15" fill="rgb(207,159,16)"/><text x="57.2292%" y="1343.50"></text></g><g><title>[libc-2.31.so] (135 samples, 0.13%)</title><rect x="57.2530%" y="1285" width="0.1262%" height="15" fill="rgb(238,163,47)"/><text x="57.5030%" y="1295.50"></text></g><g><title>core::mem::drop (17 samples, 0.02%)</title><rect x="57.3829%" y="1269" width="0.0159%" height="15" fill="rgb(219,91,49)"/><text x="57.6329%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;tokio::sync::oneshot::Inner&lt;rho_runtime::storage::transit::Transit&gt;&gt;&gt; (17 samples, 0.02%)</title><rect x="57.3829%" y="1253" width="0.0159%" height="15" fill="rgb(227,167,31)"/><text x="57.6329%" y="1263.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.02%)</title><rect x="57.3829%" y="1237" width="0.0159%" height="15" fill="rgb(234,80,54)"/><text x="57.6329%" y="1247.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (16 samples, 0.01%)</title><rect x="57.3838%" y="1221" width="0.0150%" height="15" fill="rgb(212,114,2)"/><text x="57.6338%" y="1231.50"></text></g><g><title>core::sync::atomic::atomic_sub (16 samples, 0.01%)</title><rect x="57.3838%" y="1205" width="0.0150%" height="15" fill="rgb(234,50,24)"/><text x="57.6338%" y="1215.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (24 samples, 0.02%)</title><rect x="57.3801%" y="1285" width="0.0224%" height="15" fill="rgb(221,68,8)"/><text x="57.6301%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::sync::oneshot::Inner&lt;rho_runtime::storage::transit::Transit&gt;&gt;&gt;&gt; (260 samples, 0.24%)</title><rect x="57.2502%" y="1333" width="0.2430%" height="15" fill="rgb(254,180,31)"/><text x="57.5002%" y="1343.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::sync::oneshot::Inner&lt;rho_runtime::storage::transit::Transit&gt;&gt;&gt; (260 samples, 0.24%)</title><rect x="57.2502%" y="1317" width="0.2430%" height="15" fill="rgb(247,130,50)"/><text x="57.5002%" y="1327.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (260 samples, 0.24%)</title><rect x="57.2502%" y="1301" width="0.2430%" height="15" fill="rgb(211,109,4)"/><text x="57.5002%" y="1311.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (92 samples, 0.09%)</title><rect x="57.4072%" y="1285" width="0.0860%" height="15" fill="rgb(238,50,21)"/><text x="57.6572%" y="1295.50"></text></g><g><title>core::sync::atomic::atomic_sub (92 samples, 0.09%)</title><rect x="57.4072%" y="1269" width="0.0860%" height="15" fill="rgb(225,57,45)"/><text x="57.6572%" y="1279.50"></text></g><g><title>[libc-2.31.so] (201 samples, 0.19%)</title><rect x="57.5250%" y="1317" width="0.1878%" height="15" fill="rgb(209,196,50)"/><text x="57.7750%" y="1327.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (68 samples, 0.06%)</title><rect x="57.7221%" y="1253" width="0.0635%" height="15" fill="rgb(242,140,13)"/><text x="57.9721%" y="1263.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (68 samples, 0.06%)</title><rect x="57.7221%" y="1237" width="0.0635%" height="15" fill="rgb(217,111,7)"/><text x="57.9721%" y="1247.50"></text></g><g><title>core::mem::replace (68 samples, 0.06%)</title><rect x="57.7221%" y="1221" width="0.0635%" height="15" fill="rgb(253,193,51)"/><text x="57.9721%" y="1231.50"></text></g><g><title>core::mem::swap (68 samples, 0.06%)</title><rect x="57.7221%" y="1205" width="0.0635%" height="15" fill="rgb(252,70,29)"/><text x="57.9721%" y="1215.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (68 samples, 0.06%)</title><rect x="57.7221%" y="1189" width="0.0635%" height="15" fill="rgb(232,127,12)"/><text x="57.9721%" y="1199.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (68 samples, 0.06%)</title><rect x="57.7221%" y="1173" width="0.0635%" height="15" fill="rgb(211,180,21)"/><text x="57.9721%" y="1183.50"></text></g><g><title>tokio::coop::poll_proceed (79 samples, 0.07%)</title><rect x="57.7128%" y="1317" width="0.0738%" height="15" fill="rgb(229,72,13)"/><text x="57.9628%" y="1327.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (79 samples, 0.07%)</title><rect x="57.7128%" y="1301" width="0.0738%" height="15" fill="rgb(240,211,49)"/><text x="57.9628%" y="1311.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (79 samples, 0.07%)</title><rect x="57.7128%" y="1285" width="0.0738%" height="15" fill="rgb(219,149,40)"/><text x="57.9628%" y="1295.50"></text></g><g><title>tokio::coop::poll_proceed::{{closure}} (69 samples, 0.06%)</title><rect x="57.7221%" y="1269" width="0.0645%" height="15" fill="rgb(210,127,46)"/><text x="57.9721%" y="1279.50"></text></g><g><title>tokio::sync::oneshot::Inner&lt;T&gt;::consume_value (282 samples, 0.26%)</title><rect x="57.7866%" y="1317" width="0.2635%" height="15" fill="rgb(220,106,7)"/><text x="58.0366%" y="1327.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (282 samples, 0.26%)</title><rect x="57.7866%" y="1301" width="0.2635%" height="15" fill="rgb(249,31,22)"/><text x="58.0366%" y="1311.50"></text></g><g><title>tokio::sync::oneshot::Inner&lt;T&gt;::consume_value::{{closure}} (282 samples, 0.26%)</title><rect x="57.7866%" y="1285" width="0.2635%" height="15" fill="rgb(253,1,49)"/><text x="58.0366%" y="1295.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (282 samples, 0.26%)</title><rect x="57.7866%" y="1269" width="0.2635%" height="15" fill="rgb(227,144,33)"/><text x="58.0366%" y="1279.50"></text></g><g><title>core::mem::take (282 samples, 0.26%)</title><rect x="57.7866%" y="1253" width="0.2635%" height="15" fill="rgb(249,163,44)"/><text x="58.0366%" y="1263.50"></text></g><g><title>core::mem::replace (282 samples, 0.26%)</title><rect x="57.7866%" y="1237" width="0.2635%" height="15" fill="rgb(234,15,39)"/><text x="58.0366%" y="1247.50"></text></g><g><title>core::mem::swap (282 samples, 0.26%)</title><rect x="57.7866%" y="1221" width="0.2635%" height="15" fill="rgb(207,66,16)"/><text x="58.0366%" y="1231.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (282 samples, 0.26%)</title><rect x="57.7866%" y="1205" width="0.2635%" height="15" fill="rgb(233,112,24)"/><text x="58.0366%" y="1215.50"></text></g><g><title>core::ptr::swap_nonoverlapping (282 samples, 0.26%)</title><rect x="57.7866%" y="1189" width="0.2635%" height="15" fill="rgb(230,90,22)"/><text x="58.0366%" y="1199.50"></text></g><g><title>core::ptr::swap_nonoverlapping_bytes (282 samples, 0.26%)</title><rect x="57.7866%" y="1173" width="0.2635%" height="15" fill="rgb(229,61,13)"/><text x="58.0366%" y="1183.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (249 samples, 0.23%)</title><rect x="57.8175%" y="1157" width="0.2327%" height="15" fill="rgb(225,57,24)"/><text x="58.0675%" y="1167.50"></text></g><g><title>&lt;tokio::sync::oneshot::Receiver&lt;T&gt; as core::future::future::Future&gt;::poll (1,161 samples, 1.09%)</title><rect x="56.9670%" y="1349" width="1.0850%" height="15" fill="rgb(208,169,48)"/><text x="57.2170%" y="1359.50"></text></g><g><title>tokio::sync::oneshot::Inner&lt;T&gt;::poll_recv (598 samples, 0.56%)</title><rect x="57.4932%" y="1333" width="0.5589%" height="15" fill="rgb(244,218,51)"/><text x="57.7432%" y="1343.50"></text></g><g><title>[libc-2.31.so] (389 samples, 0.36%)</title><rect x="58.0520%" y="1349" width="0.3635%" height="15" fill="rgb(214,148,10)"/><text x="58.3020%" y="1359.50"></text></g><g><title>__libc_malloc (64 samples, 0.06%)</title><rect x="58.4212%" y="1349" width="0.0598%" height="15" fill="rgb(225,174,27)"/><text x="58.6712%" y="1359.50"></text></g><g><title>__rdl_alloc (23 samples, 0.02%)</title><rect x="58.4810%" y="1349" width="0.0215%" height="15" fill="rgb(230,96,26)"/><text x="58.7310%" y="1359.50"></text></g><g><title>__rust_probestack (12 samples, 0.01%)</title><rect x="58.5025%" y="1349" width="0.0112%" height="15" fill="rgb(232,10,30)"/><text x="58.7525%" y="1359.50"></text></g><g><title>__sched_yield (11 samples, 0.01%)</title><rect x="58.5137%" y="1349" width="0.0103%" height="15" fill="rgb(222,8,50)"/><text x="58.7637%" y="1359.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (34 samples, 0.03%)</title><rect x="58.5361%" y="1349" width="0.0318%" height="15" fill="rgb(213,81,27)"/><text x="58.7861%" y="1359.50"></text></g><g><title>alloc::slice::merge_sort (22 samples, 0.02%)</title><rect x="58.5679%" y="1349" width="0.0206%" height="15" fill="rgb(245,50,10)"/><text x="58.8179%" y="1359.50"></text></g><g><title>blake3::ChunkState::update (52 samples, 0.05%)</title><rect x="58.5894%" y="1349" width="0.0486%" height="15" fill="rgb(216,100,18)"/><text x="58.8394%" y="1359.50"></text></g><g><title>blake3::ChunkState::fill_buf (17 samples, 0.02%)</title><rect x="58.6221%" y="1333" width="0.0159%" height="15" fill="rgb(236,147,54)"/><text x="58.8721%" y="1343.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (17 samples, 0.02%)</title><rect x="58.6221%" y="1317" width="0.0159%" height="15" fill="rgb(205,143,26)"/><text x="58.8721%" y="1327.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 0.02%)</title><rect x="58.6221%" y="1301" width="0.0159%" height="15" fill="rgb(236,26,9)"/><text x="58.8721%" y="1311.50"></text></g><g><title>blake3::Hasher::update (71 samples, 0.07%)</title><rect x="58.6511%" y="1349" width="0.0664%" height="15" fill="rgb(221,165,53)"/><text x="58.9011%" y="1359.50"></text></g><g><title>blake3::Hasher::update_with_join (22 samples, 0.02%)</title><rect x="58.6969%" y="1333" width="0.0206%" height="15" fill="rgb(214,110,17)"/><text x="58.9469%" y="1343.50"></text></g><g><title>blake3_compress_in_place_avx512 (145 samples, 0.14%)</title><rect x="58.7174%" y="1349" width="0.1355%" height="15" fill="rgb(237,197,12)"/><text x="58.9674%" y="1359.50"></text></g><g><title>cfree (15 samples, 0.01%)</title><rect x="58.8529%" y="1349" width="0.0140%" height="15" fill="rgb(205,84,17)"/><text x="59.1029%" y="1359.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (22 samples, 0.02%)</title><rect x="58.8670%" y="1349" width="0.0206%" height="15" fill="rgb(237,18,45)"/><text x="59.1170%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;&lt;model::rho_types::Par as rho_runtime::interpreter::reduce::eval_expression::AsyncParExpressionEvaluator&lt;rho_runtime::storage::coordinator::AsyncStore&gt;&gt;::evaluate_single_expression::{{closure}}&gt;&gt; (12 samples, 0.01%)</title><rect x="58.8913%" y="1349" width="0.0112%" height="15" fill="rgb(221,87,14)"/><text x="59.1413%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Expr&gt; (12 samples, 0.01%)</title><rect x="58.9212%" y="1349" width="0.0112%" height="15" fill="rgb(238,186,15)"/><text x="59.1712%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Expr&gt;&gt; (26 samples, 0.02%)</title><rect x="58.9576%" y="1333" width="0.0243%" height="15" fill="rgb(208,115,11)"/><text x="59.2076%" y="1343.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::Expr&gt;&gt; (23 samples, 0.02%)</title><rect x="58.9604%" y="1317" width="0.0215%" height="15" fill="rgb(254,175,0)"/><text x="59.2104%" y="1327.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="58.9604%" y="1301" width="0.0215%" height="15" fill="rgb(227,24,42)"/><text x="59.2104%" y="1311.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (23 samples, 0.02%)</title><rect x="58.9604%" y="1285" width="0.0215%" height="15" fill="rgb(223,211,37)"/><text x="59.2104%" y="1295.50"></text></g><g><title>alloc::alloc::dealloc (23 samples, 0.02%)</title><rect x="58.9604%" y="1269" width="0.0215%" height="15" fill="rgb(235,49,27)"/><text x="59.2104%" y="1279.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="58.9819%" y="1317" width="0.0224%" height="15" fill="rgb(254,97,51)"/><text x="59.2319%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place&lt;[model::rho_types::GUnforgeable]&gt; (24 samples, 0.02%)</title><rect x="58.9819%" y="1301" width="0.0224%" height="15" fill="rgb(249,51,40)"/><text x="59.2319%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::GUnforgeable&gt; (24 samples, 0.02%)</title><rect x="58.9819%" y="1285" width="0.0224%" height="15" fill="rgb(210,128,45)"/><text x="59.2319%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;model::rho_types::g_unforgeable::UnfInstance&gt;&gt; (24 samples, 0.02%)</title><rect x="58.9819%" y="1269" width="0.0224%" height="15" fill="rgb(224,137,50)"/><text x="59.2319%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::g_unforgeable::UnfInstance&gt; (24 samples, 0.02%)</title><rect x="58.9819%" y="1253" width="0.0224%" height="15" fill="rgb(242,15,9)"/><text x="59.2319%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::GPrivate&gt; (24 samples, 0.02%)</title><rect x="58.9819%" y="1237" width="0.0224%" height="15" fill="rgb(233,187,41)"/><text x="59.2319%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (24 samples, 0.02%)</title><rect x="58.9819%" y="1221" width="0.0224%" height="15" fill="rgb(227,2,29)"/><text x="59.2319%" y="1231.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="58.9819%" y="1205" width="0.0224%" height="15" fill="rgb(222,70,3)"/><text x="59.2319%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::GUnforgeable&gt;&gt; (25 samples, 0.02%)</title><rect x="58.9819%" y="1333" width="0.0234%" height="15" fill="rgb(213,11,42)"/><text x="59.2319%" y="1343.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Par&gt; (87 samples, 0.08%)</title><rect x="58.9333%" y="1349" width="0.0813%" height="15" fill="rgb(225,150,9)"/><text x="59.1833%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::expr::ExprInstance&gt; (16 samples, 0.01%)</title><rect x="59.0240%" y="1349" width="0.0150%" height="15" fill="rgb(230,162,45)"/><text x="59.2740%" y="1359.50"></text></g><g><title>model::rho_types::Par::append_expr (12 samples, 0.01%)</title><rect x="59.0716%" y="1349" width="0.0112%" height="15" fill="rgb(222,14,52)"/><text x="59.3216%" y="1359.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (41 samples, 0.04%)</title><rect x="59.0828%" y="1349" width="0.0383%" height="15" fill="rgb(254,198,14)"/><text x="59.3328%" y="1359.50"></text></g><g><title>core::ptr::read (28 samples, 0.03%)</title><rect x="59.1623%" y="1317" width="0.0262%" height="15" fill="rgb(220,217,30)"/><text x="59.4123%" y="1327.50"></text></g><g><title>[libc-2.31.so] (22 samples, 0.02%)</title><rect x="59.1679%" y="1301" width="0.0206%" height="15" fill="rgb(215,146,41)"/><text x="59.4179%" y="1311.50"></text></g><g><title>&lt;smallvec::IntoIter&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.03%)</title><rect x="59.1604%" y="1333" width="0.0290%" height="15" fill="rgb(217,27,36)"/><text x="59.4104%" y="1343.50"></text></g><g><title>[libc-2.31.so] (80 samples, 0.07%)</title><rect x="59.1987%" y="1317" width="0.0748%" height="15" fill="rgb(219,218,39)"/><text x="59.4487%" y="1327.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (94 samples, 0.09%)</title><rect x="59.1894%" y="1333" width="0.0878%" height="15" fill="rgb(219,4,42)"/><text x="59.4394%" y="1343.50"></text></g><g><title>[libc-2.31.so] (161 samples, 0.15%)</title><rect x="59.2772%" y="1333" width="0.1505%" height="15" fill="rgb(249,119,36)"/><text x="59.5272%" y="1343.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="59.4529%" y="1253" width="0.0150%" height="15" fill="rgb(209,23,33)"/><text x="59.7029%" y="1263.50"></text></g><g><title>core::ptr::read (13 samples, 0.01%)</title><rect x="59.4557%" y="1237" width="0.0121%" height="15" fill="rgb(211,10,0)"/><text x="59.7057%" y="1247.50"></text></g><g><title>[libc-2.31.so] (13 samples, 0.01%)</title><rect x="59.4557%" y="1221" width="0.0121%" height="15" fill="rgb(208,99,37)"/><text x="59.7057%" y="1231.50"></text></g><g><title>[libc-2.31.so] (17 samples, 0.02%)</title><rect x="59.4735%" y="1253" width="0.0159%" height="15" fill="rgb(213,132,31)"/><text x="59.7235%" y="1263.50"></text></g><g><title>[libc-2.31.so] (11 samples, 0.01%)</title><rect x="59.4912%" y="1109" width="0.0103%" height="15" fill="rgb(243,129,40)"/><text x="59.7412%" y="1119.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (18 samples, 0.02%)</title><rect x="59.4903%" y="1141" width="0.0168%" height="15" fill="rgb(210,66,33)"/><text x="59.7403%" y="1151.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 0.02%)</title><rect x="59.4912%" y="1125" width="0.0159%" height="15" fill="rgb(209,189,4)"/><text x="59.7412%" y="1135.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (75 samples, 0.07%)</title><rect x="59.4380%" y="1285" width="0.0701%" height="15" fill="rgb(214,107,37)"/><text x="59.6880%" y="1295.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (75 samples, 0.07%)</title><rect x="59.4380%" y="1269" width="0.0701%" height="15" fill="rgb(245,88,54)"/><text x="59.6880%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::into_iter::IntoIter&lt;model::rho_types::Par&gt;&gt;&gt; (20 samples, 0.02%)</title><rect x="59.4894%" y="1253" width="0.0187%" height="15" fill="rgb(205,146,20)"/><text x="59.7394%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;model::rho_types::Par&gt;&gt; (20 samples, 0.02%)</title><rect x="59.4894%" y="1237" width="0.0187%" height="15" fill="rgb(220,161,25)"/><text x="59.7394%" y="1247.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.02%)</title><rect x="59.4894%" y="1221" width="0.0187%" height="15" fill="rgb(215,152,15)"/><text x="59.7394%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;model::rho_types::Par,alloc::alloc::Global&gt;&gt; (19 samples, 0.02%)</title><rect x="59.4903%" y="1205" width="0.0178%" height="15" fill="rgb(233,192,44)"/><text x="59.7403%" y="1215.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.02%)</title><rect x="59.4903%" y="1189" width="0.0178%" height="15" fill="rgb(240,170,46)"/><text x="59.7403%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::Par&gt;&gt; (19 samples, 0.02%)</title><rect x="59.4903%" y="1173" width="0.0178%" height="15" fill="rgb(207,104,33)"/><text x="59.7403%" y="1183.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.02%)</title><rect x="59.4903%" y="1157" width="0.0178%" height="15" fill="rgb(219,21,39)"/><text x="59.7403%" y="1167.50"></text></g><g><title>[libc-2.31.so] (21 samples, 0.02%)</title><rect x="59.5090%" y="1285" width="0.0196%" height="15" fill="rgb(214,133,29)"/><text x="59.7590%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::FlatMap&lt;smallvec::IntoIter&lt;[model::rho_types::ListParWithRandom: 3]&gt;,alloc::vec::into_iter::IntoIter&lt;model::rho_types::Par&gt;,rho_runtime::interpreter::InterpreterContext&lt;rho_runtime::storage::coordinator::AsyncStore&gt;::handle_comm_events::{{closure}}&gt;&gt; (15 samples, 0.01%)</title><rect x="59.5286%" y="1285" width="0.0140%" height="15" fill="rgb(226,93,6)"/><text x="59.7786%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::FlattenCompat&lt;core::iter::adapters::map::Map&lt;smallvec::IntoIter&lt;[model::rho_types::ListParWithRandom: 3]&gt;,rho_runtime::interpreter::InterpreterContext&lt;rho_runtime::storage::coordinator::AsyncStore&gt;::handle_comm_events::{{closure}}&gt;,alloc::vec::into_iter::IntoIter&lt;model::rho_types::Par&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="59.5286%" y="1269" width="0.0140%" height="15" fill="rgb(252,222,34)"/><text x="59.7786%" y="1279.50"></text></g><g><title>core::ptr::write (15 samples, 0.01%)</title><rect x="59.5426%" y="1285" width="0.0140%" height="15" fill="rgb(252,92,48)"/><text x="59.7926%" y="1295.50"></text></g><g><title>[libc-2.31.so] (15 samples, 0.01%)</title><rect x="59.5426%" y="1269" width="0.0140%" height="15" fill="rgb(245,223,24)"/><text x="59.7926%" y="1279.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (135 samples, 0.13%)</title><rect x="59.4361%" y="1301" width="0.1262%" height="15" fill="rgb(205,176,3)"/><text x="59.6861%" y="1311.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::FromIterator&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::from_iter (156 samples, 0.15%)</title><rect x="59.4333%" y="1317" width="0.1458%" height="15" fill="rgb(235,151,15)"/><text x="59.6833%" y="1327.50"></text></g><g><title>[libc-2.31.so] (18 samples, 0.02%)</title><rect x="59.5623%" y="1301" width="0.0168%" height="15" fill="rgb(237,209,11)"/><text x="59.8123%" y="1311.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (183 samples, 0.17%)</title><rect x="59.4277%" y="1333" width="0.1710%" height="15" fill="rgb(243,227,24)"/><text x="59.6777%" y="1343.50"></text></g><g><title>[libc-2.31.so] (21 samples, 0.02%)</title><rect x="59.5791%" y="1317" width="0.0196%" height="15" fill="rgb(239,193,16)"/><text x="59.8291%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place&lt;rho_runtime::interpreter::reduce::environment::Env&gt; (55 samples, 0.05%)</title><rect x="59.6006%" y="1333" width="0.0514%" height="15" fill="rgb(231,27,9)"/><text x="59.8506%" y="1343.50"></text></g><g><title>core::ptr::drop_in_place&lt;smallvec::SmallVec&lt;[model::rho_types::Par: 6]&gt;&gt; (55 samples, 0.05%)</title><rect x="59.6006%" y="1317" width="0.0514%" height="15" fill="rgb(219,169,10)"/><text x="59.8506%" y="1327.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::drop::Drop&gt;::drop (53 samples, 0.05%)</title><rect x="59.6024%" y="1301" width="0.0495%" height="15" fill="rgb(244,229,43)"/><text x="59.8524%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;[model::rho_types::Par]&gt; (51 samples, 0.05%)</title><rect x="59.6043%" y="1285" width="0.0477%" height="15" fill="rgb(254,38,20)"/><text x="59.8543%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Par&gt; (32 samples, 0.03%)</title><rect x="59.6221%" y="1269" width="0.0299%" height="15" fill="rgb(250,47,30)"/><text x="59.8721%" y="1279.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (26 samples, 0.02%)</title><rect x="59.6660%" y="1317" width="0.0243%" height="15" fill="rgb(224,124,36)"/><text x="59.9160%" y="1327.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (26 samples, 0.02%)</title><rect x="59.6660%" y="1301" width="0.0243%" height="15" fill="rgb(246,68,51)"/><text x="59.9160%" y="1311.50"></text></g><g><title>core::sync::atomic::atomic_add (26 samples, 0.02%)</title><rect x="59.6660%" y="1285" width="0.0243%" height="15" fill="rgb(253,43,49)"/><text x="59.9160%" y="1295.50"></text></g><g><title>[libc-2.31.so] (20 samples, 0.02%)</title><rect x="59.7043%" y="1173" width="0.0187%" height="15" fill="rgb(219,54,36)"/><text x="59.9543%" y="1183.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (28 samples, 0.03%)</title><rect x="59.7791%" y="1061" width="0.0262%" height="15" fill="rgb(227,133,34)"/><text x="60.0291%" y="1071.50"></text></g><g><title>[libc-2.31.so] (12 samples, 0.01%)</title><rect x="59.7940%" y="1045" width="0.0112%" height="15" fill="rgb(247,227,15)"/><text x="60.0440%" y="1055.50"></text></g><g><title>&lt;model::rho_types::Expr as core::clone::Clone&gt;::clone (57 samples, 0.05%)</title><rect x="59.7707%" y="1077" width="0.0533%" height="15" fill="rgb(229,96,14)"/><text x="60.0207%" y="1087.50"></text></g><g><title>[libc-2.31.so] (20 samples, 0.02%)</title><rect x="59.8052%" y="1061" width="0.0187%" height="15" fill="rgb(220,79,17)"/><text x="60.0552%" y="1071.50"></text></g><g><title>__libc_malloc (181 samples, 0.17%)</title><rect x="59.8408%" y="981" width="0.1692%" height="15" fill="rgb(205,131,53)"/><text x="60.0908%" y="991.50"></text></g><g><title>[libc-2.31.so] (105 samples, 0.10%)</title><rect x="59.9118%" y="965" width="0.0981%" height="15" fill="rgb(209,50,29)"/><text x="60.1618%" y="975.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (184 samples, 0.17%)</title><rect x="59.8398%" y="1029" width="0.1720%" height="15" fill="rgb(245,86,46)"/><text x="60.0898%" y="1039.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (184 samples, 0.17%)</title><rect x="59.8398%" y="1013" width="0.1720%" height="15" fill="rgb(235,66,46)"/><text x="60.0898%" y="1023.50"></text></g><g><title>alloc::alloc::alloc (184 samples, 0.17%)</title><rect x="59.8398%" y="997" width="0.1720%" height="15" fill="rgb(232,148,31)"/><text x="60.0898%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity_from_bytes (13 samples, 0.01%)</title><rect x="60.0118%" y="1029" width="0.0121%" height="15" fill="rgb(217,149,8)"/><text x="60.2618%" y="1039.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (220 samples, 0.21%)</title><rect x="59.8286%" y="1077" width="0.2056%" height="15" fill="rgb(209,183,11)"/><text x="60.0786%" y="1087.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (211 samples, 0.20%)</title><rect x="59.8370%" y="1061" width="0.1972%" height="15" fill="rgb(208,55,20)"/><text x="60.0870%" y="1071.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (211 samples, 0.20%)</title><rect x="59.8370%" y="1045" width="0.1972%" height="15" fill="rgb(218,39,14)"/><text x="60.0870%" y="1055.50"></text></g><g><title>core::alloc::layout::Layout::array (11 samples, 0.01%)</title><rect x="60.0239%" y="1029" width="0.0103%" height="15" fill="rgb(216,169,33)"/><text x="60.2739%" y="1039.50"></text></g><g><title>core::alloc::layout::Layout::repeat (11 samples, 0.01%)</title><rect x="60.0239%" y="1013" width="0.0103%" height="15" fill="rgb(233,80,24)"/><text x="60.2739%" y="1023.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (338 samples, 0.32%)</title><rect x="59.7482%" y="1141" width="0.3159%" height="15" fill="rgb(213,179,31)"/><text x="59.9982%" y="1151.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (333 samples, 0.31%)</title><rect x="59.7529%" y="1125" width="0.3112%" height="15" fill="rgb(209,19,5)"/><text x="60.0029%" y="1135.50"></text></g><g><title>alloc::slice::hack::to_vec (333 samples, 0.31%)</title><rect x="59.7529%" y="1109" width="0.3112%" height="15" fill="rgb(219,18,35)"/><text x="60.0029%" y="1119.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (333 samples, 0.31%)</title><rect x="59.7529%" y="1093" width="0.3112%" height="15" fill="rgb(209,169,16)"/><text x="60.0029%" y="1103.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (32 samples, 0.03%)</title><rect x="60.0342%" y="1077" width="0.0299%" height="15" fill="rgb(245,90,51)"/><text x="60.2842%" y="1087.50"></text></g><g><title>[libc-2.31.so] (19 samples, 0.02%)</title><rect x="60.0464%" y="1061" width="0.0178%" height="15" fill="rgb(220,99,45)"/><text x="60.2964%" y="1071.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (406 samples, 0.38%)</title><rect x="59.6978%" y="1221" width="0.3794%" height="15" fill="rgb(249,89,25)"/><text x="59.9478%" y="1231.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (403 samples, 0.38%)</title><rect x="59.7006%" y="1205" width="0.3766%" height="15" fill="rgb(239,193,0)"/><text x="59.9506%" y="1215.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (403 samples, 0.38%)</title><rect x="59.7006%" y="1189" width="0.3766%" height="15" fill="rgb(231,126,1)"/><text x="59.9506%" y="1199.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned::{{closure}} (379 samples, 0.35%)</title><rect x="59.7230%" y="1173" width="0.3542%" height="15" fill="rgb(243,166,3)"/><text x="59.9730%" y="1183.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (379 samples, 0.35%)</title><rect x="59.7230%" y="1157" width="0.3542%" height="15" fill="rgb(223,22,34)"/><text x="59.9730%" y="1167.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (14 samples, 0.01%)</title><rect x="60.0641%" y="1141" width="0.0131%" height="15" fill="rgb(251,52,51)"/><text x="60.3141%" y="1151.50"></text></g><g><title>&lt;model::bitset::BitSet&lt;B&gt; as core::clone::Clone&gt;::clone (13 samples, 0.01%)</title><rect x="60.0650%" y="1125" width="0.0121%" height="15" fill="rgb(221,165,28)"/><text x="60.3150%" y="1135.50"></text></g><g><title>&lt;bit_vec::BitVec&lt;B&gt; as core::clone::Clone&gt;::clone (13 samples, 0.01%)</title><rect x="60.0650%" y="1109" width="0.0121%" height="15" fill="rgb(218,121,47)"/><text x="60.3150%" y="1119.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (12 samples, 0.01%)</title><rect x="60.0660%" y="1093" width="0.0112%" height="15" fill="rgb(209,120,9)"/><text x="60.3160%" y="1103.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (12 samples, 0.01%)</title><rect x="60.0660%" y="1077" width="0.0112%" height="15" fill="rgb(236,68,12)"/><text x="60.3160%" y="1087.50"></text></g><g><title>alloc::slice::hack::to_vec (12 samples, 0.01%)</title><rect x="60.0660%" y="1061" width="0.0112%" height="15" fill="rgb(225,194,26)"/><text x="60.3160%" y="1071.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (12 samples, 0.01%)</title><rect x="60.0660%" y="1045" width="0.0112%" height="15" fill="rgb(231,84,39)"/><text x="60.3160%" y="1055.50"></text></g><g><title>core::ptr::write (47 samples, 0.04%)</title><rect x="60.0772%" y="1221" width="0.0439%" height="15" fill="rgb(210,11,45)"/><text x="60.3272%" y="1231.50"></text></g><g><title>[libc-2.31.so] (46 samples, 0.04%)</title><rect x="60.0781%" y="1205" width="0.0430%" height="15" fill="rgb(224,54,52)"/><text x="60.3281%" y="1215.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::clone::Clone&gt;::clone (464 samples, 0.43%)</title><rect x="59.6912%" y="1301" width="0.4336%" height="15" fill="rgb(238,102,14)"/><text x="59.9412%" y="1311.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::convert::From&lt;&amp;[&lt;A as smallvec::Array&gt;::Item]&gt;&gt;::from (464 samples, 0.43%)</title><rect x="59.6912%" y="1285" width="0.4336%" height="15" fill="rgb(243,160,52)"/><text x="59.9412%" y="1295.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (464 samples, 0.43%)</title><rect x="59.6912%" y="1269" width="0.4336%" height="15" fill="rgb(216,114,19)"/><text x="59.9412%" y="1279.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::FromIterator&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::from_iter (464 samples, 0.43%)</title><rect x="59.6912%" y="1253" width="0.4336%" height="15" fill="rgb(244,166,37)"/><text x="59.9412%" y="1263.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (462 samples, 0.43%)</title><rect x="59.6931%" y="1237" width="0.4318%" height="15" fill="rgb(246,29,44)"/><text x="59.9431%" y="1247.50"></text></g><g><title>&lt;rho_runtime::interpreter::reduce::environment::Env&lt;T&gt; as core::clone::Clone&gt;::clone (506 samples, 0.47%)</title><rect x="59.6903%" y="1317" width="0.4729%" height="15" fill="rgb(215,56,53)"/><text x="59.9403%" y="1327.50"></text></g><g><title>[libc-2.31.so] (41 samples, 0.04%)</title><rect x="60.1249%" y="1301" width="0.0383%" height="15" fill="rgb(217,60,2)"/><text x="60.3749%" y="1311.50"></text></g><g><title>[libc-2.31.so] (27 samples, 0.03%)</title><rect x="60.1632%" y="1317" width="0.0252%" height="15" fill="rgb(207,26,24)"/><text x="60.4132%" y="1327.50"></text></g><g><title>core::future::from_generator (61 samples, 0.06%)</title><rect x="60.1884%" y="1317" width="0.0570%" height="15" fill="rgb(252,210,15)"/><text x="60.4384%" y="1327.50"></text></g><g><title>[libc-2.31.so] (58 samples, 0.05%)</title><rect x="60.1912%" y="1301" width="0.0542%" height="15" fill="rgb(253,209,26)"/><text x="60.4412%" y="1311.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (17 samples, 0.02%)</title><rect x="60.2501%" y="1301" width="0.0159%" height="15" fill="rgb(238,170,14)"/><text x="60.5001%" y="1311.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (17 samples, 0.02%)</title><rect x="60.2501%" y="1285" width="0.0159%" height="15" fill="rgb(216,178,15)"/><text x="60.5001%" y="1295.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (19 samples, 0.02%)</title><rect x="60.2660%" y="1301" width="0.0178%" height="15" fill="rgb(250,197,2)"/><text x="60.5160%" y="1311.50"></text></g><g><title>core::sync::atomic::atomic_or (19 samples, 0.02%)</title><rect x="60.2660%" y="1285" width="0.0178%" height="15" fill="rgb(212,70,42)"/><text x="60.5160%" y="1295.50"></text></g><g><title>crossbeam_queue::seg_queue::SegQueue&lt;T&gt;::push (42 samples, 0.04%)</title><rect x="60.2454%" y="1317" width="0.0393%" height="15" fill="rgb(227,213,9)"/><text x="60.4954%" y="1327.50"></text></g><g><title>[libc-2.31.so] (48 samples, 0.04%)</title><rect x="60.2865%" y="1301" width="0.0449%" height="15" fill="rgb(245,99,25)"/><text x="60.5365%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::spawner::Spawner&gt; (13 samples, 0.01%)</title><rect x="60.3314%" y="1301" width="0.0121%" height="15" fill="rgb(250,82,29)"/><text x="60.5814%" y="1311.50"></text></g><g><title>tokio::runtime::context::spawn_handle (131 samples, 0.12%)</title><rect x="60.3435%" y="1301" width="0.1224%" height="15" fill="rgb(241,226,54)"/><text x="60.5935%" y="1311.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (131 samples, 0.12%)</title><rect x="60.3435%" y="1285" width="0.1224%" height="15" fill="rgb(221,99,41)"/><text x="60.5935%" y="1295.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (131 samples, 0.12%)</title><rect x="60.3435%" y="1269" width="0.1224%" height="15" fill="rgb(213,90,21)"/><text x="60.5935%" y="1279.50"></text></g><g><title>tokio::runtime::context::spawn_handle::{{closure}} (130 samples, 0.12%)</title><rect x="60.3445%" y="1253" width="0.1215%" height="15" fill="rgb(205,208,24)"/><text x="60.5945%" y="1263.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (128 samples, 0.12%)</title><rect x="60.3463%" y="1237" width="0.1196%" height="15" fill="rgb(246,31,12)"/><text x="60.5963%" y="1247.50"></text></g><g><title>tokio::runtime::context::spawn_handle::{{closure}}::{{closure}} (128 samples, 0.12%)</title><rect x="60.3463%" y="1221" width="0.1196%" height="15" fill="rgb(213,154,6)"/><text x="60.5963%" y="1231.50"></text></g><g><title>&lt;tokio::runtime::spawner::Spawner as core::clone::Clone&gt;::clone (128 samples, 0.12%)</title><rect x="60.3463%" y="1205" width="0.1196%" height="15" fill="rgb(222,163,29)"/><text x="60.5963%" y="1215.50"></text></g><g><title>[libc-2.31.so] (47 samples, 0.04%)</title><rect x="60.4697%" y="1237" width="0.0439%" height="15" fill="rgb(227,201,8)"/><text x="60.7197%" y="1247.50"></text></g><g><title>[libc-2.31.so] (73 samples, 0.07%)</title><rect x="60.5146%" y="1221" width="0.0682%" height="15" fill="rgb(233,9,32)"/><text x="60.7646%" y="1231.50"></text></g><g><title>[libc-2.31.so] (39 samples, 0.04%)</title><rect x="60.5856%" y="1205" width="0.0364%" height="15" fill="rgb(217,54,24)"/><text x="60.8356%" y="1215.50"></text></g><g><title>__libc_malloc (142 samples, 0.13%)</title><rect x="60.6220%" y="1141" width="0.1327%" height="15" fill="rgb(235,192,0)"/><text x="60.8720%" y="1151.50"></text></g><g><title>[libc-2.31.so] (48 samples, 0.04%)</title><rect x="60.7099%" y="1125" width="0.0449%" height="15" fill="rgb(235,45,9)"/><text x="60.9599%" y="1135.50"></text></g><g><title>tokio::runtime::task::joinable (306 samples, 0.29%)</title><rect x="60.4697%" y="1269" width="0.2860%" height="15" fill="rgb(246,42,40)"/><text x="60.7197%" y="1279.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::new (306 samples, 0.29%)</title><rect x="60.4697%" y="1253" width="0.2860%" height="15" fill="rgb(248,111,24)"/><text x="60.7197%" y="1263.50"></text></g><g><title>tokio::runtime::task::core::Cell&lt;T,S&gt;::new (259 samples, 0.24%)</title><rect x="60.5136%" y="1237" width="0.2420%" height="15" fill="rgb(249,65,22)"/><text x="60.7636%" y="1247.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (185 samples, 0.17%)</title><rect x="60.5828%" y="1221" width="0.1729%" height="15" fill="rgb(238,111,51)"/><text x="60.8328%" y="1231.50"></text></g><g><title>alloc::alloc::exchange_malloc (143 samples, 0.13%)</title><rect x="60.6220%" y="1205" width="0.1336%" height="15" fill="rgb(250,118,22)"/><text x="60.8720%" y="1215.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (143 samples, 0.13%)</title><rect x="60.6220%" y="1189" width="0.1336%" height="15" fill="rgb(234,84,26)"/><text x="60.8720%" y="1199.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (143 samples, 0.13%)</title><rect x="60.6220%" y="1173" width="0.1336%" height="15" fill="rgb(243,172,12)"/><text x="60.8720%" y="1183.50"></text></g><g><title>alloc::alloc::alloc (143 samples, 0.13%)</title><rect x="60.6220%" y="1157" width="0.1336%" height="15" fill="rgb(236,150,49)"/><text x="60.8720%" y="1167.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::spawn_evaluation (1,240 samples, 1.16%)</title><rect x="59.6613%" y="1333" width="1.1588%" height="15" fill="rgb(225,197,26)"/><text x="59.9113%" y="1343.50"></text></g><g><title>tokio::task::spawn::spawn (573 samples, 0.54%)</title><rect x="60.2847%" y="1317" width="0.5355%" height="15" fill="rgb(214,17,42)"/><text x="60.5347%" y="1327.50"></text></g><g><title>tokio::runtime::spawner::Spawner::spawn (379 samples, 0.35%)</title><rect x="60.4660%" y="1301" width="0.3542%" height="15" fill="rgb(224,165,40)"/><text x="60.7160%" y="1311.50"></text></g><g><title>tokio::runtime::thread_pool::Spawner::spawn (376 samples, 0.35%)</title><rect x="60.4688%" y="1285" width="0.3514%" height="15" fill="rgb(246,100,4)"/><text x="60.7188%" y="1295.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (69 samples, 0.06%)</title><rect x="60.7557%" y="1269" width="0.0645%" height="15" fill="rgb(222,103,0)"/><text x="61.0057%" y="1279.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (64 samples, 0.06%)</title><rect x="60.7603%" y="1253" width="0.0598%" height="15" fill="rgb(227,189,26)"/><text x="61.0103%" y="1263.50"></text></g><g><title>[libc-2.31.so] (46 samples, 0.04%)</title><rect x="60.8230%" y="1317" width="0.0430%" height="15" fill="rgb(214,202,17)"/><text x="61.0730%" y="1327.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::handle_comm_events (1,862 samples, 1.74%)</title><rect x="59.1305%" y="1349" width="1.7401%" height="15" fill="rgb(229,111,3)"/><text x="59.3805%" y="1359.50"></text></g><g><title>rho_runtime::interpreter::reduce::environment::Env&lt;T&gt;::create (54 samples, 0.05%)</title><rect x="60.8202%" y="1333" width="0.0505%" height="15" fill="rgb(229,172,15)"/><text x="61.0702%" y="1343.50"></text></g><g><title>[libc-2.31.so] (154 samples, 0.14%)</title><rect x="60.8790%" y="1237" width="0.1439%" height="15" fill="rgb(230,224,35)"/><text x="61.1290%" y="1247.50"></text></g><g><title>[libc-2.31.so] (122 samples, 0.11%)</title><rect x="61.0230%" y="1221" width="0.1140%" height="15" fill="rgb(251,141,6)"/><text x="61.2730%" y="1231.50"></text></g><g><title>[libc-2.31.so] (67 samples, 0.06%)</title><rect x="61.2734%" y="1141" width="0.0626%" height="15" fill="rgb(225,208,6)"/><text x="61.5234%" y="1151.50"></text></g><g><title>__libc_malloc (214 samples, 0.20%)</title><rect x="61.1370%" y="1157" width="0.2000%" height="15" fill="rgb(246,181,16)"/><text x="61.3870%" y="1167.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::spawn_evaluation (505 samples, 0.47%)</title><rect x="60.8706%" y="1349" width="0.4719%" height="15" fill="rgb(227,129,36)"/><text x="61.1206%" y="1359.50"></text></g><g><title>tokio::task::spawn::spawn (496 samples, 0.46%)</title><rect x="60.8790%" y="1333" width="0.4635%" height="15" fill="rgb(248,117,24)"/><text x="61.1290%" y="1343.50"></text></g><g><title>tokio::runtime::spawner::Spawner::spawn (496 samples, 0.46%)</title><rect x="60.8790%" y="1317" width="0.4635%" height="15" fill="rgb(214,185,35)"/><text x="61.1290%" y="1327.50"></text></g><g><title>tokio::runtime::thread_pool::Spawner::spawn (496 samples, 0.46%)</title><rect x="60.8790%" y="1301" width="0.4635%" height="15" fill="rgb(236,150,34)"/><text x="61.1290%" y="1311.50"></text></g><g><title>tokio::runtime::task::joinable (496 samples, 0.46%)</title><rect x="60.8790%" y="1285" width="0.4635%" height="15" fill="rgb(243,228,27)"/><text x="61.1290%" y="1295.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::new (496 samples, 0.46%)</title><rect x="60.8790%" y="1269" width="0.4635%" height="15" fill="rgb(245,77,44)"/><text x="61.1290%" y="1279.50"></text></g><g><title>tokio::runtime::task::core::Cell&lt;T,S&gt;::new (496 samples, 0.46%)</title><rect x="60.8790%" y="1253" width="0.4635%" height="15" fill="rgb(235,214,42)"/><text x="61.1290%" y="1263.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (342 samples, 0.32%)</title><rect x="61.0230%" y="1237" width="0.3196%" height="15" fill="rgb(221,74,3)"/><text x="61.2730%" y="1247.50"></text></g><g><title>alloc::alloc::exchange_malloc (220 samples, 0.21%)</title><rect x="61.1370%" y="1221" width="0.2056%" height="15" fill="rgb(206,121,29)"/><text x="61.3870%" y="1231.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (220 samples, 0.21%)</title><rect x="61.1370%" y="1205" width="0.2056%" height="15" fill="rgb(249,131,53)"/><text x="61.3870%" y="1215.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (220 samples, 0.21%)</title><rect x="61.1370%" y="1189" width="0.2056%" height="15" fill="rgb(236,170,29)"/><text x="61.3870%" y="1199.50"></text></g><g><title>alloc::alloc::alloc (220 samples, 0.21%)</title><rect x="61.1370%" y="1173" width="0.2056%" height="15" fill="rgb(247,96,15)"/><text x="61.3870%" y="1183.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.02%)</title><rect x="61.3949%" y="1013" width="0.0234%" height="15" fill="rgb(211,210,7)"/><text x="61.6449%" y="1023.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (51 samples, 0.05%)</title><rect x="61.4295%" y="997" width="0.0477%" height="15" fill="rgb(240,88,50)"/><text x="61.6795%" y="1007.50"></text></g><g><title>[libc-2.31.so] (18 samples, 0.02%)</title><rect x="61.4603%" y="981" width="0.0168%" height="15" fill="rgb(209,229,26)"/><text x="61.7103%" y="991.50"></text></g><g><title>&lt;model::rho_types::Expr as core::clone::Clone&gt;::clone (88 samples, 0.08%)</title><rect x="61.4183%" y="1013" width="0.0822%" height="15" fill="rgb(210,68,23)"/><text x="61.6683%" y="1023.50"></text></g><g><title>[libc-2.31.so] (25 samples, 0.02%)</title><rect x="61.4771%" y="997" width="0.0234%" height="15" fill="rgb(229,180,13)"/><text x="61.7271%" y="1007.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.01%)</title><rect x="61.5669%" y="853" width="0.0103%" height="15" fill="rgb(236,53,44)"/><text x="61.8169%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity_from_bytes (19 samples, 0.02%)</title><rect x="61.7771%" y="645" width="0.0178%" height="15" fill="rgb(244,214,29)"/><text x="62.0271%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (103 samples, 0.10%)</title><rect x="61.7098%" y="757" width="0.0963%" height="15" fill="rgb(220,75,29)"/><text x="61.9598%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (92 samples, 0.09%)</title><rect x="61.7201%" y="741" width="0.0860%" height="15" fill="rgb(214,183,37)"/><text x="61.9701%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (89 samples, 0.08%)</title><rect x="61.7229%" y="725" width="0.0832%" height="15" fill="rgb(239,117,29)"/><text x="61.9729%" y="735.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (89 samples, 0.08%)</title><rect x="61.7229%" y="709" width="0.0832%" height="15" fill="rgb(237,171,35)"/><text x="61.9729%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (57 samples, 0.05%)</title><rect x="61.7528%" y="693" width="0.0533%" height="15" fill="rgb(229,178,53)"/><text x="62.0028%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (47 samples, 0.04%)</title><rect x="61.7622%" y="677" width="0.0439%" height="15" fill="rgb(210,102,19)"/><text x="62.0122%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (47 samples, 0.04%)</title><rect x="61.7622%" y="661" width="0.0439%" height="15" fill="rgb(235,127,22)"/><text x="62.0122%" y="671.50"></text></g><g><title>core::alloc::layout::Layout::array (12 samples, 0.01%)</title><rect x="61.7949%" y="645" width="0.0112%" height="15" fill="rgb(244,31,31)"/><text x="62.0449%" y="655.50"></text></g><g><title>core::alloc::layout::Layout::repeat (12 samples, 0.01%)</title><rect x="61.7949%" y="629" width="0.0112%" height="15" fill="rgb(231,43,21)"/><text x="62.0449%" y="639.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (11 samples, 0.01%)</title><rect x="61.7958%" y="613" width="0.0103%" height="15" fill="rgb(217,131,35)"/><text x="62.0458%" y="623.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (11 samples, 0.01%)</title><rect x="61.7958%" y="597" width="0.0103%" height="15" fill="rgb(221,149,4)"/><text x="62.0458%" y="607.50"></text></g><g><title>__libc_malloc (21 samples, 0.02%)</title><rect x="61.8285%" y="549" width="0.0196%" height="15" fill="rgb(232,170,28)"/><text x="62.0785%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (24 samples, 0.02%)</title><rect x="61.8267%" y="597" width="0.0224%" height="15" fill="rgb(238,56,10)"/><text x="62.0767%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (24 samples, 0.02%)</title><rect x="61.8267%" y="581" width="0.0224%" height="15" fill="rgb(235,196,14)"/><text x="62.0767%" y="591.50"></text></g><g><title>alloc::alloc::alloc (24 samples, 0.02%)</title><rect x="61.8267%" y="565" width="0.0224%" height="15" fill="rgb(216,45,48)"/><text x="62.0767%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (27 samples, 0.03%)</title><rect x="61.8267%" y="645" width="0.0252%" height="15" fill="rgb(238,213,17)"/><text x="62.0767%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (27 samples, 0.03%)</title><rect x="61.8267%" y="629" width="0.0252%" height="15" fill="rgb(212,13,2)"/><text x="62.0767%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (27 samples, 0.03%)</title><rect x="61.8267%" y="613" width="0.0252%" height="15" fill="rgb(240,114,20)"/><text x="62.0767%" y="623.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (228 samples, 0.21%)</title><rect x="61.6407%" y="773" width="0.2131%" height="15" fill="rgb(228,41,40)"/><text x="61.8907%" y="783.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (51 samples, 0.05%)</title><rect x="61.8061%" y="757" width="0.0477%" height="15" fill="rgb(244,132,35)"/><text x="62.0561%" y="767.50"></text></g><g><title>&lt;model::bitset::BitSet&lt;B&gt; as core::clone::Clone&gt;::clone (31 samples, 0.03%)</title><rect x="61.8248%" y="741" width="0.0290%" height="15" fill="rgb(253,189,4)"/><text x="62.0748%" y="751.50"></text></g><g><title>&lt;bit_vec::BitVec&lt;B&gt; as core::clone::Clone&gt;::clone (31 samples, 0.03%)</title><rect x="61.8248%" y="725" width="0.0290%" height="15" fill="rgb(224,37,19)"/><text x="62.0748%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (29 samples, 0.03%)</title><rect x="61.8267%" y="709" width="0.0271%" height="15" fill="rgb(235,223,18)"/><text x="62.0767%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (29 samples, 0.03%)</title><rect x="61.8267%" y="693" width="0.0271%" height="15" fill="rgb(235,163,25)"/><text x="62.0767%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (29 samples, 0.03%)</title><rect x="61.8267%" y="677" width="0.0271%" height="15" fill="rgb(217,145,28)"/><text x="62.0767%" y="687.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (29 samples, 0.03%)</title><rect x="61.8267%" y="661" width="0.0271%" height="15" fill="rgb(223,223,32)"/><text x="62.0767%" y="671.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (279 samples, 0.26%)</title><rect x="61.6183%" y="789" width="0.2607%" height="15" fill="rgb(227,189,39)"/><text x="61.8683%" y="799.50"></text></g><g><title>[libc-2.31.so] (27 samples, 0.03%)</title><rect x="61.8538%" y="773" width="0.0252%" height="15" fill="rgb(248,10,22)"/><text x="62.1038%" y="783.50"></text></g><g><title>&lt;model::rho_types::expr::ExprInstance as core::clone::Clone&gt;::clone (312 samples, 0.29%)</title><rect x="61.6070%" y="821" width="0.2916%" height="15" fill="rgb(248,46,39)"/><text x="61.8570%" y="831.50"></text></g><g><title>&lt;model::rho_types::EPlus as core::clone::Clone&gt;::clone (307 samples, 0.29%)</title><rect x="61.6117%" y="805" width="0.2869%" height="15" fill="rgb(248,113,48)"/><text x="61.8617%" y="815.50"></text></g><g><title>[libc-2.31.so] (21 samples, 0.02%)</title><rect x="61.8790%" y="789" width="0.0196%" height="15" fill="rgb(245,16,25)"/><text x="62.1290%" y="799.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (363 samples, 0.34%)</title><rect x="61.5827%" y="837" width="0.3392%" height="15" fill="rgb(249,152,16)"/><text x="61.8327%" y="847.50"></text></g><g><title>[libc-2.31.so] (25 samples, 0.02%)</title><rect x="61.8986%" y="821" width="0.0234%" height="15" fill="rgb(250,16,1)"/><text x="62.1486%" y="831.50"></text></g><g><title>&lt;model::rho_types::Expr as core::clone::Clone&gt;::clone (419 samples, 0.39%)</title><rect x="61.5771%" y="853" width="0.3916%" height="15" fill="rgb(249,138,3)"/><text x="61.8271%" y="863.50"></text></g><g><title>[libc-2.31.so] (50 samples, 0.05%)</title><rect x="61.9220%" y="837" width="0.0467%" height="15" fill="rgb(227,71,41)"/><text x="62.1720%" y="847.50"></text></g><g><title>__libc_malloc (63 samples, 0.06%)</title><rect x="61.9986%" y="757" width="0.0589%" height="15" fill="rgb(209,184,23)"/><text x="62.2486%" y="767.50"></text></g><g><title>[libc-2.31.so] (39 samples, 0.04%)</title><rect x="62.0210%" y="741" width="0.0364%" height="15" fill="rgb(223,215,31)"/><text x="62.2710%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (77 samples, 0.07%)</title><rect x="61.9874%" y="805" width="0.0720%" height="15" fill="rgb(210,146,28)"/><text x="62.2374%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (77 samples, 0.07%)</title><rect x="61.9874%" y="789" width="0.0720%" height="15" fill="rgb(209,183,41)"/><text x="62.2374%" y="799.50"></text></g><g><title>alloc::alloc::alloc (66 samples, 0.06%)</title><rect x="61.9977%" y="773" width="0.0617%" height="15" fill="rgb(209,224,45)"/><text x="62.2477%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity_from_bytes (12 samples, 0.01%)</title><rect x="62.0594%" y="805" width="0.0112%" height="15" fill="rgb(224,209,51)"/><text x="62.3094%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (116 samples, 0.11%)</title><rect x="61.9696%" y="853" width="0.1084%" height="15" fill="rgb(223,17,39)"/><text x="62.2196%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (103 samples, 0.10%)</title><rect x="61.9818%" y="837" width="0.0963%" height="15" fill="rgb(234,204,37)"/><text x="62.2318%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (103 samples, 0.10%)</title><rect x="61.9818%" y="821" width="0.0963%" height="15" fill="rgb(236,120,5)"/><text x="62.2318%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (652 samples, 0.61%)</title><rect x="61.5276%" y="917" width="0.6093%" height="15" fill="rgb(248,97,27)"/><text x="61.7776%" y="927.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (634 samples, 0.59%)</title><rect x="61.5444%" y="901" width="0.5925%" height="15" fill="rgb(240,66,17)"/><text x="61.7944%" y="911.50"></text></g><g><title>alloc::slice::hack::to_vec (632 samples, 0.59%)</title><rect x="61.5463%" y="885" width="0.5906%" height="15" fill="rgb(210,79,3)"/><text x="61.7963%" y="895.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (632 samples, 0.59%)</title><rect x="61.5463%" y="869" width="0.5906%" height="15" fill="rgb(214,176,27)"/><text x="61.7963%" y="879.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (63 samples, 0.06%)</title><rect x="62.0781%" y="853" width="0.0589%" height="15" fill="rgb(235,185,3)"/><text x="62.3281%" y="863.50"></text></g><g><title>[libc-2.31.so] (35 samples, 0.03%)</title><rect x="62.1042%" y="837" width="0.0327%" height="15" fill="rgb(227,24,12)"/><text x="62.3542%" y="847.50"></text></g><g><title>__libc_malloc (27 samples, 0.03%)</title><rect x="62.1407%" y="709" width="0.0252%" height="15" fill="rgb(252,169,48)"/><text x="62.3907%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (33 samples, 0.03%)</title><rect x="62.1397%" y="757" width="0.0308%" height="15" fill="rgb(212,65,1)"/><text x="62.3897%" y="767.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (33 samples, 0.03%)</title><rect x="62.1397%" y="741" width="0.0308%" height="15" fill="rgb(242,39,24)"/><text x="62.3897%" y="751.50"></text></g><g><title>alloc::alloc::alloc (33 samples, 0.03%)</title><rect x="62.1397%" y="725" width="0.0308%" height="15" fill="rgb(249,32,23)"/><text x="62.3897%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (36 samples, 0.03%)</title><rect x="62.1397%" y="805" width="0.0336%" height="15" fill="rgb(251,195,23)"/><text x="62.3897%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (36 samples, 0.03%)</title><rect x="62.1397%" y="789" width="0.0336%" height="15" fill="rgb(236,174,8)"/><text x="62.3897%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (36 samples, 0.03%)</title><rect x="62.1397%" y="773" width="0.0336%" height="15" fill="rgb(220,197,8)"/><text x="62.3897%" y="783.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (719 samples, 0.67%)</title><rect x="61.5127%" y="933" width="0.6719%" height="15" fill="rgb(240,108,37)"/><text x="61.7627%" y="943.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (51 samples, 0.05%)</title><rect x="62.1369%" y="917" width="0.0477%" height="15" fill="rgb(232,176,24)"/><text x="62.3869%" y="927.50"></text></g><g><title>&lt;model::bitset::BitSet&lt;B&gt; as core::clone::Clone&gt;::clone (50 samples, 0.05%)</title><rect x="62.1379%" y="901" width="0.0467%" height="15" fill="rgb(243,35,29)"/><text x="62.3879%" y="911.50"></text></g><g><title>&lt;bit_vec::BitVec&lt;B&gt; as core::clone::Clone&gt;::clone (50 samples, 0.05%)</title><rect x="62.1379%" y="885" width="0.0467%" height="15" fill="rgb(210,37,18)"/><text x="62.3879%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (48 samples, 0.04%)</title><rect x="62.1397%" y="869" width="0.0449%" height="15" fill="rgb(224,184,40)"/><text x="62.3897%" y="879.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (48 samples, 0.04%)</title><rect x="62.1397%" y="853" width="0.0449%" height="15" fill="rgb(236,39,29)"/><text x="62.3897%" y="863.50"></text></g><g><title>alloc::slice::hack::to_vec (48 samples, 0.04%)</title><rect x="62.1397%" y="837" width="0.0449%" height="15" fill="rgb(232,48,39)"/><text x="62.3897%" y="847.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (48 samples, 0.04%)</title><rect x="62.1397%" y="821" width="0.0449%" height="15" fill="rgb(236,34,42)"/><text x="62.3897%" y="831.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (12 samples, 0.01%)</title><rect x="62.1734%" y="805" width="0.0112%" height="15" fill="rgb(243,106,37)"/><text x="62.4234%" y="815.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.01%)</title><rect x="62.1734%" y="789" width="0.0112%" height="15" fill="rgb(218,96,6)"/><text x="62.4234%" y="799.50"></text></g><g><title>[libc-2.31.so] (11 samples, 0.01%)</title><rect x="62.1743%" y="773" width="0.0103%" height="15" fill="rgb(235,130,12)"/><text x="62.4243%" y="783.50"></text></g><g><title>__libc_malloc (18 samples, 0.02%)</title><rect x="62.1958%" y="837" width="0.0168%" height="15" fill="rgb(231,95,0)"/><text x="62.4458%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (30 samples, 0.03%)</title><rect x="62.1911%" y="885" width="0.0280%" height="15" fill="rgb(228,12,23)"/><text x="62.4411%" y="895.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (30 samples, 0.03%)</title><rect x="62.1911%" y="869" width="0.0280%" height="15" fill="rgb(216,12,1)"/><text x="62.4411%" y="879.50"></text></g><g><title>alloc::alloc::alloc (28 samples, 0.03%)</title><rect x="62.1930%" y="853" width="0.0262%" height="15" fill="rgb(219,59,3)"/><text x="62.4430%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (35 samples, 0.03%)</title><rect x="62.1883%" y="933" width="0.0327%" height="15" fill="rgb(215,208,46)"/><text x="62.4383%" y="943.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (35 samples, 0.03%)</title><rect x="62.1883%" y="917" width="0.0327%" height="15" fill="rgb(254,224,29)"/><text x="62.4383%" y="927.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (35 samples, 0.03%)</title><rect x="62.1883%" y="901" width="0.0327%" height="15" fill="rgb(232,14,29)"/><text x="62.4383%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (813 samples, 0.76%)</title><rect x="61.5061%" y="997" width="0.7598%" height="15" fill="rgb(208,45,52)"/><text x="61.7561%" y="1007.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (813 samples, 0.76%)</title><rect x="61.5061%" y="981" width="0.7598%" height="15" fill="rgb(234,191,28)"/><text x="61.7561%" y="991.50"></text></g><g><title>alloc::slice::hack::to_vec (813 samples, 0.76%)</title><rect x="61.5061%" y="965" width="0.7598%" height="15" fill="rgb(244,67,43)"/><text x="61.7561%" y="975.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (813 samples, 0.76%)</title><rect x="61.5061%" y="949" width="0.7598%" height="15" fill="rgb(236,189,24)"/><text x="61.7561%" y="959.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (48 samples, 0.04%)</title><rect x="62.2210%" y="933" width="0.0449%" height="15" fill="rgb(239,214,33)"/><text x="62.4710%" y="943.50"></text></g><g><title>[libc-2.31.so] (48 samples, 0.04%)</title><rect x="62.2210%" y="917" width="0.0449%" height="15" fill="rgb(226,176,41)"/><text x="62.4710%" y="927.50"></text></g><g><title>__libc_malloc (29 samples, 0.03%)</title><rect x="62.2752%" y="789" width="0.0271%" height="15" fill="rgb(248,47,8)"/><text x="62.5252%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (35 samples, 0.03%)</title><rect x="62.2724%" y="885" width="0.0327%" height="15" fill="rgb(218,81,44)"/><text x="62.5224%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (35 samples, 0.03%)</title><rect x="62.2724%" y="869" width="0.0327%" height="15" fill="rgb(213,98,6)"/><text x="62.5224%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (35 samples, 0.03%)</title><rect x="62.2724%" y="853" width="0.0327%" height="15" fill="rgb(222,85,22)"/><text x="62.5224%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (35 samples, 0.03%)</title><rect x="62.2724%" y="837" width="0.0327%" height="15" fill="rgb(239,46,39)"/><text x="62.5224%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (35 samples, 0.03%)</title><rect x="62.2724%" y="821" width="0.0327%" height="15" fill="rgb(237,12,29)"/><text x="62.5224%" y="831.50"></text></g><g><title>alloc::alloc::alloc (33 samples, 0.03%)</title><rect x="62.2743%" y="805" width="0.0308%" height="15" fill="rgb(214,77,8)"/><text x="62.5243%" y="815.50"></text></g><g><title>&lt;model::bitset::BitSet&lt;B&gt; as core::clone::Clone&gt;::clone (45 samples, 0.04%)</title><rect x="62.2696%" y="981" width="0.0421%" height="15" fill="rgb(217,168,37)"/><text x="62.5196%" y="991.50"></text></g><g><title>&lt;bit_vec::BitVec&lt;B&gt; as core::clone::Clone&gt;::clone (45 samples, 0.04%)</title><rect x="62.2696%" y="965" width="0.0421%" height="15" fill="rgb(221,217,23)"/><text x="62.5196%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (45 samples, 0.04%)</title><rect x="62.2696%" y="949" width="0.0421%" height="15" fill="rgb(243,229,36)"/><text x="62.5196%" y="959.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (42 samples, 0.04%)</title><rect x="62.2724%" y="933" width="0.0393%" height="15" fill="rgb(251,163,40)"/><text x="62.5224%" y="943.50"></text></g><g><title>alloc::slice::hack::to_vec (42 samples, 0.04%)</title><rect x="62.2724%" y="917" width="0.0393%" height="15" fill="rgb(237,222,12)"/><text x="62.5224%" y="927.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (42 samples, 0.04%)</title><rect x="62.2724%" y="901" width="0.0393%" height="15" fill="rgb(248,132,6)"/><text x="62.5224%" y="911.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="62.3537%" y="901" width="0.0140%" height="15" fill="rgb(227,167,50)"/><text x="62.6037%" y="911.50"></text></g><g><title>&lt;model::rho_types::GUnforgeable as core::clone::Clone&gt;::clone (82 samples, 0.08%)</title><rect x="62.3678%" y="901" width="0.0766%" height="15" fill="rgb(242,84,37)"/><text x="62.6178%" y="911.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (74 samples, 0.07%)</title><rect x="62.3752%" y="885" width="0.0692%" height="15" fill="rgb(212,4,50)"/><text x="62.6252%" y="895.50"></text></g><g><title>&lt;model::rho_types::g_unforgeable::UnfInstance as core::clone::Clone&gt;::clone (48 samples, 0.04%)</title><rect x="62.3995%" y="869" width="0.0449%" height="15" fill="rgb(230,228,32)"/><text x="62.6495%" y="879.50"></text></g><g><title>&lt;model::rho_types::GPrivate as core::clone::Clone&gt;::clone (43 samples, 0.04%)</title><rect x="62.4042%" y="853" width="0.0402%" height="15" fill="rgb(248,217,23)"/><text x="62.6542%" y="863.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (43 samples, 0.04%)</title><rect x="62.4042%" y="837" width="0.0402%" height="15" fill="rgb(238,197,32)"/><text x="62.6542%" y="847.50"></text></g><g><title>bytes::bytes::shared_clone (39 samples, 0.04%)</title><rect x="62.4079%" y="821" width="0.0364%" height="15" fill="rgb(236,106,1)"/><text x="62.6579%" y="831.50"></text></g><g><title>bytes::bytes::shallow_clone_arc (39 samples, 0.04%)</title><rect x="62.4079%" y="805" width="0.0364%" height="15" fill="rgb(219,228,13)"/><text x="62.6579%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (36 samples, 0.03%)</title><rect x="62.4108%" y="789" width="0.0336%" height="15" fill="rgb(238,30,35)"/><text x="62.6608%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_add (36 samples, 0.03%)</title><rect x="62.4108%" y="773" width="0.0336%" height="15" fill="rgb(236,70,23)"/><text x="62.6608%" y="783.50"></text></g><g><title>__libc_malloc (18 samples, 0.02%)</title><rect x="62.4724%" y="805" width="0.0168%" height="15" fill="rgb(249,104,48)"/><text x="62.7224%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (32 samples, 0.03%)</title><rect x="62.4659%" y="853" width="0.0299%" height="15" fill="rgb(254,117,50)"/><text x="62.7159%" y="863.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (32 samples, 0.03%)</title><rect x="62.4659%" y="837" width="0.0299%" height="15" fill="rgb(223,152,4)"/><text x="62.7159%" y="847.50"></text></g><g><title>alloc::alloc::alloc (25 samples, 0.02%)</title><rect x="62.4724%" y="821" width="0.0234%" height="15" fill="rgb(245,6,2)"/><text x="62.7224%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity_from_bytes (18 samples, 0.02%)</title><rect x="62.4958%" y="853" width="0.0168%" height="15" fill="rgb(249,150,24)"/><text x="62.7458%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (79 samples, 0.07%)</title><rect x="62.4463%" y="901" width="0.0738%" height="15" fill="rgb(228,185,42)"/><text x="62.6963%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (67 samples, 0.06%)</title><rect x="62.4575%" y="885" width="0.0626%" height="15" fill="rgb(226,39,33)"/><text x="62.7075%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (67 samples, 0.06%)</title><rect x="62.4575%" y="869" width="0.0626%" height="15" fill="rgb(221,166,19)"/><text x="62.7075%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (213 samples, 0.20%)</title><rect x="62.3276%" y="965" width="0.1991%" height="15" fill="rgb(209,109,2)"/><text x="62.5776%" y="975.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (202 samples, 0.19%)</title><rect x="62.3379%" y="949" width="0.1888%" height="15" fill="rgb(252,216,26)"/><text x="62.5879%" y="959.50"></text></g><g><title>alloc::slice::hack::to_vec (201 samples, 0.19%)</title><rect x="62.3388%" y="933" width="0.1878%" height="15" fill="rgb(227,173,36)"/><text x="62.5888%" y="943.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (201 samples, 0.19%)</title><rect x="62.3388%" y="917" width="0.1878%" height="15" fill="rgb(209,90,7)"/><text x="62.5888%" y="927.50"></text></g><g><title>__libc_malloc (61 samples, 0.06%)</title><rect x="62.5294%" y="757" width="0.0570%" height="15" fill="rgb(250,194,11)"/><text x="62.7794%" y="767.50"></text></g><g><title>[libc-2.31.so] (25 samples, 0.02%)</title><rect x="62.5631%" y="741" width="0.0234%" height="15" fill="rgb(220,72,50)"/><text x="62.8131%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (71 samples, 0.07%)</title><rect x="62.5285%" y="805" width="0.0664%" height="15" fill="rgb(222,106,48)"/><text x="62.7785%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (71 samples, 0.07%)</title><rect x="62.5285%" y="789" width="0.0664%" height="15" fill="rgb(216,220,45)"/><text x="62.7785%" y="799.50"></text></g><g><title>alloc::alloc::alloc (71 samples, 0.07%)</title><rect x="62.5285%" y="773" width="0.0664%" height="15" fill="rgb(234,112,18)"/><text x="62.7785%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (73 samples, 0.07%)</title><rect x="62.5285%" y="853" width="0.0682%" height="15" fill="rgb(206,179,9)"/><text x="62.7785%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (73 samples, 0.07%)</title><rect x="62.5285%" y="837" width="0.0682%" height="15" fill="rgb(215,115,40)"/><text x="62.7785%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (73 samples, 0.07%)</title><rect x="62.5285%" y="821" width="0.0682%" height="15" fill="rgb(222,69,34)"/><text x="62.7785%" y="831.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (80 samples, 0.07%)</title><rect x="62.5266%" y="965" width="0.0748%" height="15" fill="rgb(209,161,10)"/><text x="62.7766%" y="975.50"></text></g><g><title>&lt;model::bitset::BitSet&lt;B&gt; as core::clone::Clone&gt;::clone (80 samples, 0.07%)</title><rect x="62.5266%" y="949" width="0.0748%" height="15" fill="rgb(217,6,38)"/><text x="62.7766%" y="959.50"></text></g><g><title>&lt;bit_vec::BitVec&lt;B&gt; as core::clone::Clone&gt;::clone (80 samples, 0.07%)</title><rect x="62.5266%" y="933" width="0.0748%" height="15" fill="rgb(229,229,48)"/><text x="62.7766%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (79 samples, 0.07%)</title><rect x="62.5276%" y="917" width="0.0738%" height="15" fill="rgb(225,21,28)"/><text x="62.7776%" y="927.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (78 samples, 0.07%)</title><rect x="62.5285%" y="901" width="0.0729%" height="15" fill="rgb(206,33,13)"/><text x="62.7785%" y="911.50"></text></g><g><title>alloc::slice::hack::to_vec (78 samples, 0.07%)</title><rect x="62.5285%" y="885" width="0.0729%" height="15" fill="rgb(242,178,17)"/><text x="62.7785%" y="895.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (78 samples, 0.07%)</title><rect x="62.5285%" y="869" width="0.0729%" height="15" fill="rgb(220,162,5)"/><text x="62.7785%" y="879.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (311 samples, 0.29%)</title><rect x="62.3117%" y="981" width="0.2906%" height="15" fill="rgb(210,33,43)"/><text x="62.5617%" y="991.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (381 samples, 0.36%)</title><rect x="62.2659%" y="997" width="0.3561%" height="15" fill="rgb(216,116,54)"/><text x="62.5159%" y="1007.50"></text></g><g><title>[libc-2.31.so] (21 samples, 0.02%)</title><rect x="62.6023%" y="981" width="0.0196%" height="15" fill="rgb(249,92,24)"/><text x="62.8523%" y="991.50"></text></g><g><title>&lt;model::rho_types::Send as core::clone::Clone&gt;::clone (1,208 samples, 1.13%)</title><rect x="61.5005%" y="1013" width="1.1289%" height="15" fill="rgb(231,189,14)"/><text x="61.7505%" y="1023.50"></text></g><g><title>__libc_malloc (124 samples, 0.12%)</title><rect x="62.6967%" y="917" width="0.1159%" height="15" fill="rgb(230,8,41)"/><text x="62.9467%" y="927.50"></text></g><g><title>[libc-2.31.so] (27 samples, 0.03%)</title><rect x="62.7874%" y="901" width="0.0252%" height="15" fill="rgb(249,7,27)"/><text x="63.0374%" y="911.50"></text></g><g><title>__rdl_alloc (11 samples, 0.01%)</title><rect x="62.8126%" y="917" width="0.0103%" height="15" fill="rgb(232,86,5)"/><text x="63.0626%" y="927.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (11 samples, 0.01%)</title><rect x="62.8126%" y="901" width="0.0103%" height="15" fill="rgb(224,175,18)"/><text x="63.0626%" y="911.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (165 samples, 0.15%)</title><rect x="62.6715%" y="965" width="0.1542%" height="15" fill="rgb(220,129,12)"/><text x="62.9215%" y="975.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (165 samples, 0.15%)</title><rect x="62.6715%" y="949" width="0.1542%" height="15" fill="rgb(210,19,36)"/><text x="62.9215%" y="959.50"></text></g><g><title>alloc::alloc::alloc (144 samples, 0.13%)</title><rect x="62.6911%" y="933" width="0.1346%" height="15" fill="rgb(219,96,14)"/><text x="62.9411%" y="943.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity_from_bytes (34 samples, 0.03%)</title><rect x="62.8257%" y="965" width="0.0318%" height="15" fill="rgb(249,106,1)"/><text x="63.0757%" y="975.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (256 samples, 0.24%)</title><rect x="62.6378%" y="1013" width="0.2392%" height="15" fill="rgb(249,155,20)"/><text x="62.8878%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (236 samples, 0.22%)</title><rect x="62.6565%" y="997" width="0.2206%" height="15" fill="rgb(244,168,9)"/><text x="62.9065%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (236 samples, 0.22%)</title><rect x="62.6565%" y="981" width="0.2206%" height="15" fill="rgb(216,23,50)"/><text x="62.9065%" y="991.50"></text></g><g><title>core::alloc::layout::Layout::array (21 samples, 0.02%)</title><rect x="62.8575%" y="965" width="0.0196%" height="15" fill="rgb(224,219,20)"/><text x="63.1075%" y="975.50"></text></g><g><title>core::alloc::layout::Layout::repeat (21 samples, 0.02%)</title><rect x="62.8575%" y="949" width="0.0196%" height="15" fill="rgb(222,156,15)"/><text x="63.1075%" y="959.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (19 samples, 0.02%)</title><rect x="62.8593%" y="933" width="0.0178%" height="15" fill="rgb(231,97,17)"/><text x="63.1093%" y="943.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (19 samples, 0.02%)</title><rect x="62.8593%" y="917" width="0.0178%" height="15" fill="rgb(218,70,48)"/><text x="63.1093%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,727 samples, 1.61%)</title><rect x="61.3622%" y="1189" width="1.6140%" height="15" fill="rgb(212,196,52)"/><text x="61.6122%" y="1199.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,727 samples, 1.61%)</title><rect x="61.3622%" y="1173" width="1.6140%" height="15" fill="rgb(243,203,18)"/><text x="61.6122%" y="1183.50"></text></g><g><title>alloc::slice::hack::to_vec (1,727 samples, 1.61%)</title><rect x="61.3622%" y="1157" width="1.6140%" height="15" fill="rgb(252,125,41)"/><text x="61.6122%" y="1167.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,727 samples, 1.61%)</title><rect x="61.3622%" y="1141" width="1.6140%" height="15" fill="rgb(223,180,33)"/><text x="61.6122%" y="1151.50"></text></g><g><title>&lt;model::rho_types::MatchCase as core::clone::Clone&gt;::clone (1,727 samples, 1.61%)</title><rect x="61.3622%" y="1125" width="1.6140%" height="15" fill="rgb(254,159,46)"/><text x="61.6122%" y="1135.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1,727 samples, 1.61%)</title><rect x="61.3622%" y="1109" width="1.6140%" height="15" fill="rgb(254,38,10)"/><text x="61.6122%" y="1119.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (1,727 samples, 1.61%)</title><rect x="61.3622%" y="1093" width="1.6140%" height="15" fill="rgb(208,217,32)"/><text x="61.6122%" y="1103.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,727 samples, 1.61%)</title><rect x="61.3622%" y="1077" width="1.6140%" height="15" fill="rgb(221,120,13)"/><text x="61.6122%" y="1087.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,721 samples, 1.61%)</title><rect x="61.3678%" y="1061" width="1.6084%" height="15" fill="rgb(246,54,52)"/><text x="61.6178%" y="1071.50"></text></g><g><title>alloc::slice::hack::to_vec (1,720 samples, 1.61%)</title><rect x="61.3687%" y="1045" width="1.6074%" height="15" fill="rgb(242,34,25)"/><text x="61.6187%" y="1055.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,720 samples, 1.61%)</title><rect x="61.3687%" y="1029" width="1.6074%" height="15" fill="rgb(247,209,9)"/><text x="61.6187%" y="1039.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (106 samples, 0.10%)</title><rect x="62.8771%" y="1013" width="0.0991%" height="15" fill="rgb(228,71,26)"/><text x="63.1271%" y="1023.50"></text></g><g><title>[libc-2.31.so] (78 samples, 0.07%)</title><rect x="62.9033%" y="997" width="0.0729%" height="15" fill="rgb(222,145,49)"/><text x="63.1533%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (21 samples, 0.02%)</title><rect x="63.1004%" y="981" width="0.0196%" height="15" fill="rgb(218,121,17)"/><text x="63.3504%" y="991.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.02%)</title><rect x="63.1341%" y="933" width="0.0187%" height="15" fill="rgb(244,50,7)"/><text x="63.3841%" y="943.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (109 samples, 0.10%)</title><rect x="63.1640%" y="917" width="0.1019%" height="15" fill="rgb(246,229,37)"/><text x="63.4140%" y="927.50"></text></g><g><title>[libc-2.31.so] (70 samples, 0.07%)</title><rect x="63.2004%" y="901" width="0.0654%" height="15" fill="rgb(225,18,5)"/><text x="63.4504%" y="911.50"></text></g><g><title>&lt;model::rho_types::Expr as core::clone::Clone&gt;::clone (145 samples, 0.14%)</title><rect x="63.1528%" y="933" width="0.1355%" height="15" fill="rgb(213,204,8)"/><text x="63.4028%" y="943.50"></text></g><g><title>[libc-2.31.so] (24 samples, 0.02%)</title><rect x="63.2659%" y="917" width="0.0224%" height="15" fill="rgb(238,103,6)"/><text x="63.5159%" y="927.50"></text></g><g><title>__libc_malloc (42 samples, 0.04%)</title><rect x="63.3238%" y="837" width="0.0393%" height="15" fill="rgb(222,25,35)"/><text x="63.5738%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (57 samples, 0.05%)</title><rect x="63.3145%" y="885" width="0.0533%" height="15" fill="rgb(213,203,35)"/><text x="63.5645%" y="895.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (57 samples, 0.05%)</title><rect x="63.3145%" y="869" width="0.0533%" height="15" fill="rgb(221,79,53)"/><text x="63.5645%" y="879.50"></text></g><g><title>alloc::alloc::alloc (47 samples, 0.04%)</title><rect x="63.3238%" y="853" width="0.0439%" height="15" fill="rgb(243,200,35)"/><text x="63.5738%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity_from_bytes (14 samples, 0.01%)</title><rect x="63.3677%" y="885" width="0.0131%" height="15" fill="rgb(248,60,25)"/><text x="63.6177%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (117 samples, 0.11%)</title><rect x="63.2902%" y="933" width="0.1093%" height="15" fill="rgb(227,53,46)"/><text x="63.5402%" y="943.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (94 samples, 0.09%)</title><rect x="63.3117%" y="917" width="0.0878%" height="15" fill="rgb(216,120,32)"/><text x="63.5617%" y="927.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (94 samples, 0.09%)</title><rect x="63.3117%" y="901" width="0.0878%" height="15" fill="rgb(220,134,1)"/><text x="63.5617%" y="911.50"></text></g><g><title>core::alloc::layout::Layout::array (20 samples, 0.02%)</title><rect x="63.3808%" y="885" width="0.0187%" height="15" fill="rgb(237,168,5)"/><text x="63.6308%" y="895.50"></text></g><g><title>core::alloc::layout::Layout::repeat (20 samples, 0.02%)</title><rect x="63.3808%" y="869" width="0.0187%" height="15" fill="rgb(231,100,33)"/><text x="63.6308%" y="879.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (19 samples, 0.02%)</title><rect x="63.3817%" y="853" width="0.0178%" height="15" fill="rgb(236,177,47)"/><text x="63.6317%" y="863.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (19 samples, 0.02%)</title><rect x="63.3817%" y="837" width="0.0178%" height="15" fill="rgb(235,7,49)"/><text x="63.6317%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (374 samples, 0.35%)</title><rect x="63.0967%" y="997" width="0.3495%" height="15" fill="rgb(232,119,22)"/><text x="63.3467%" y="1007.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (349 samples, 0.33%)</title><rect x="63.1201%" y="981" width="0.3262%" height="15" fill="rgb(254,73,53)"/><text x="63.3701%" y="991.50"></text></g><g><title>alloc::slice::hack::to_vec (349 samples, 0.33%)</title><rect x="63.1201%" y="965" width="0.3262%" height="15" fill="rgb(251,35,20)"/><text x="63.3701%" y="975.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (349 samples, 0.33%)</title><rect x="63.1201%" y="949" width="0.3262%" height="15" fill="rgb(241,119,20)"/><text x="63.3701%" y="959.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (50 samples, 0.05%)</title><rect x="63.3995%" y="933" width="0.0467%" height="15" fill="rgb(207,102,14)"/><text x="63.6495%" y="943.50"></text></g><g><title>[libc-2.31.so] (21 samples, 0.02%)</title><rect x="63.4266%" y="917" width="0.0196%" height="15" fill="rgb(248,201,50)"/><text x="63.6766%" y="927.50"></text></g><g><title>__libc_malloc (22 samples, 0.02%)</title><rect x="63.4500%" y="789" width="0.0206%" height="15" fill="rgb(222,185,44)"/><text x="63.7000%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (24 samples, 0.02%)</title><rect x="63.4490%" y="837" width="0.0224%" height="15" fill="rgb(218,107,18)"/><text x="63.6990%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (24 samples, 0.02%)</title><rect x="63.4490%" y="821" width="0.0224%" height="15" fill="rgb(237,177,39)"/><text x="63.6990%" y="831.50"></text></g><g><title>alloc::alloc::alloc (24 samples, 0.02%)</title><rect x="63.4490%" y="805" width="0.0224%" height="15" fill="rgb(246,69,6)"/><text x="63.6990%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (25 samples, 0.02%)</title><rect x="63.4490%" y="885" width="0.0234%" height="15" fill="rgb(234,208,37)"/><text x="63.6990%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (25 samples, 0.02%)</title><rect x="63.4490%" y="869" width="0.0234%" height="15" fill="rgb(225,4,6)"/><text x="63.6990%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (25 samples, 0.02%)</title><rect x="63.4490%" y="853" width="0.0234%" height="15" fill="rgb(233,45,0)"/><text x="63.6990%" y="863.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (475 samples, 0.44%)</title><rect x="63.0378%" y="1013" width="0.4439%" height="15" fill="rgb(226,136,5)"/><text x="63.2878%" y="1023.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (38 samples, 0.04%)</title><rect x="63.4462%" y="997" width="0.0355%" height="15" fill="rgb(211,91,47)"/><text x="63.6962%" y="1007.50"></text></g><g><title>&lt;model::bitset::BitSet&lt;B&gt; as core::clone::Clone&gt;::clone (36 samples, 0.03%)</title><rect x="63.4481%" y="981" width="0.0336%" height="15" fill="rgb(242,88,51)"/><text x="63.6981%" y="991.50"></text></g><g><title>&lt;bit_vec::BitVec&lt;B&gt; as core::clone::Clone&gt;::clone (36 samples, 0.03%)</title><rect x="63.4481%" y="965" width="0.0336%" height="15" fill="rgb(230,91,28)"/><text x="63.6981%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (36 samples, 0.03%)</title><rect x="63.4481%" y="949" width="0.0336%" height="15" fill="rgb(254,186,29)"/><text x="63.6981%" y="959.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (35 samples, 0.03%)</title><rect x="63.4490%" y="933" width="0.0327%" height="15" fill="rgb(238,6,4)"/><text x="63.6990%" y="943.50"></text></g><g><title>alloc::slice::hack::to_vec (35 samples, 0.03%)</title><rect x="63.4490%" y="917" width="0.0327%" height="15" fill="rgb(221,151,16)"/><text x="63.6990%" y="927.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (35 samples, 0.03%)</title><rect x="63.4490%" y="901" width="0.0327%" height="15" fill="rgb(251,143,52)"/><text x="63.6990%" y="911.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (507 samples, 0.47%)</title><rect x="63.0266%" y="1029" width="0.4738%" height="15" fill="rgb(206,90,15)"/><text x="63.2766%" y="1039.50"></text></g><g><title>[libc-2.31.so] (20 samples, 0.02%)</title><rect x="63.4817%" y="1013" width="0.0187%" height="15" fill="rgb(218,35,8)"/><text x="63.7317%" y="1023.50"></text></g><g><title>&lt;model::rho_types::expr::ExprInstance as core::clone::Clone&gt;::clone (528 samples, 0.49%)</title><rect x="63.0163%" y="1061" width="0.4934%" height="15" fill="rgb(239,215,6)"/><text x="63.2663%" y="1071.50"></text></g><g><title>&lt;model::rho_types::ELt as core::clone::Clone&gt;::clone (526 samples, 0.49%)</title><rect x="63.0182%" y="1045" width="0.4916%" height="15" fill="rgb(245,116,39)"/><text x="63.2682%" y="1055.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (555 samples, 0.52%)</title><rect x="63.0014%" y="1077" width="0.5187%" height="15" fill="rgb(242,65,28)"/><text x="63.2514%" y="1087.50"></text></g><g><title>[libc-2.31.so] (11 samples, 0.01%)</title><rect x="63.5098%" y="1061" width="0.0103%" height="15" fill="rgb(252,132,53)"/><text x="63.7598%" y="1071.50"></text></g><g><title>&lt;model::rho_types::Expr as core::clone::Clone&gt;::clone (577 samples, 0.54%)</title><rect x="62.9911%" y="1093" width="0.5392%" height="15" fill="rgb(224,159,50)"/><text x="63.2411%" y="1103.50"></text></g><g><title>[libc-2.31.so] (11 samples, 0.01%)</title><rect x="63.5201%" y="1077" width="0.0103%" height="15" fill="rgb(224,93,4)"/><text x="63.7701%" y="1087.50"></text></g><g><title>__libc_malloc (17 samples, 0.02%)</title><rect x="63.5453%" y="997" width="0.0159%" height="15" fill="rgb(208,81,34)"/><text x="63.7953%" y="1007.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (21 samples, 0.02%)</title><rect x="63.5425%" y="1045" width="0.0196%" height="15" fill="rgb(233,92,54)"/><text x="63.7925%" y="1055.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (21 samples, 0.02%)</title><rect x="63.5425%" y="1029" width="0.0196%" height="15" fill="rgb(237,21,14)"/><text x="63.7925%" y="1039.50"></text></g><g><title>alloc::alloc::alloc (18 samples, 0.02%)</title><rect x="63.5453%" y="1013" width="0.0168%" height="15" fill="rgb(249,128,51)"/><text x="63.7953%" y="1023.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (42 samples, 0.04%)</title><rect x="63.5313%" y="1093" width="0.0393%" height="15" fill="rgb(223,129,24)"/><text x="63.7813%" y="1103.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (34 samples, 0.03%)</title><rect x="63.5387%" y="1077" width="0.0318%" height="15" fill="rgb(231,168,25)"/><text x="63.7887%" y="1087.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (34 samples, 0.03%)</title><rect x="63.5387%" y="1061" width="0.0318%" height="15" fill="rgb(224,39,20)"/><text x="63.7887%" y="1071.50"></text></g><g><title>rho_runtime::storage::transit::Transit::produce (2,394 samples, 2.24%)</title><rect x="61.3622%" y="1349" width="2.2373%" height="15" fill="rgb(225,152,53)"/><text x="61.6122%" y="1359.50">r..</text></g><g><title>&lt;rho_runtime::storage::TaggedContinuation as core::clone::Clone&gt;::clone (2,394 samples, 2.24%)</title><rect x="61.3622%" y="1333" width="2.2373%" height="15" fill="rgb(252,17,24)"/><text x="61.6122%" y="1343.50">&lt;..</text></g><g><title>&lt;model::rho_types::ParWithRandom as core::clone::Clone&gt;::clone (2,394 samples, 2.24%)</title><rect x="61.3622%" y="1317" width="2.2373%" height="15" fill="rgb(250,114,30)"/><text x="61.6122%" y="1327.50">&lt;..</text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (2,394 samples, 2.24%)</title><rect x="61.3622%" y="1301" width="2.2373%" height="15" fill="rgb(229,5,4)"/><text x="61.6122%" y="1311.50">&lt;..</text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (2,394 samples, 2.24%)</title><rect x="61.3622%" y="1285" width="2.2373%" height="15" fill="rgb(225,176,49)"/><text x="61.6122%" y="1295.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,394 samples, 2.24%)</title><rect x="61.3622%" y="1269" width="2.2373%" height="15" fill="rgb(224,221,49)"/><text x="61.6122%" y="1279.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,394 samples, 2.24%)</title><rect x="61.3622%" y="1253" width="2.2373%" height="15" fill="rgb(253,169,27)"/><text x="61.6122%" y="1263.50">a..</text></g><g><title>alloc::slice::hack::to_vec (2,394 samples, 2.24%)</title><rect x="61.3622%" y="1237" width="2.2373%" height="15" fill="rgb(211,206,16)"/><text x="61.6122%" y="1247.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2,394 samples, 2.24%)</title><rect x="61.3622%" y="1221" width="2.2373%" height="15" fill="rgb(244,87,35)"/><text x="61.6122%" y="1231.50">&lt;..</text></g><g><title>&lt;model::rho_types::Match as core::clone::Clone&gt;::clone (2,394 samples, 2.24%)</title><rect x="61.3622%" y="1205" width="2.2373%" height="15" fill="rgb(246,28,10)"/><text x="61.6122%" y="1215.50">&lt;..</text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (667 samples, 0.62%)</title><rect x="62.9762%" y="1189" width="0.6233%" height="15" fill="rgb(229,12,44)"/><text x="63.2262%" y="1199.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (667 samples, 0.62%)</title><rect x="62.9762%" y="1173" width="0.6233%" height="15" fill="rgb(210,145,37)"/><text x="63.2262%" y="1183.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (667 samples, 0.62%)</title><rect x="62.9762%" y="1157" width="0.6233%" height="15" fill="rgb(227,112,52)"/><text x="63.2262%" y="1167.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (664 samples, 0.62%)</title><rect x="62.9790%" y="1141" width="0.6205%" height="15" fill="rgb(238,155,34)"/><text x="63.2290%" y="1151.50"></text></g><g><title>alloc::slice::hack::to_vec (663 samples, 0.62%)</title><rect x="62.9799%" y="1125" width="0.6196%" height="15" fill="rgb(239,226,36)"/><text x="63.2299%" y="1135.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (663 samples, 0.62%)</title><rect x="62.9799%" y="1109" width="0.6196%" height="15" fill="rgb(230,16,23)"/><text x="63.2299%" y="1119.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (31 samples, 0.03%)</title><rect x="63.5705%" y="1093" width="0.0290%" height="15" fill="rgb(236,171,36)"/><text x="63.8205%" y="1103.50"></text></g><g><title>[libc-2.31.so] (18 samples, 0.02%)</title><rect x="63.5827%" y="1077" width="0.0168%" height="15" fill="rgb(221,22,14)"/><text x="63.8327%" y="1087.50"></text></g><g><title>[libc-2.31.so] (149 samples, 0.14%)</title><rect x="63.6107%" y="485" width="0.1392%" height="15" fill="rgb(242,43,11)"/><text x="63.8607%" y="495.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::drop_future_or_output (153 samples, 0.14%)</title><rect x="63.6088%" y="549" width="0.1430%" height="15" fill="rgb(232,69,23)"/><text x="63.8588%" y="559.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::set_stage (153 samples, 0.14%)</title><rect x="63.6088%" y="533" width="0.1430%" height="15" fill="rgb(216,180,54)"/><text x="63.8588%" y="543.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (153 samples, 0.14%)</title><rect x="63.6088%" y="517" width="0.1430%" height="15" fill="rgb(216,5,24)"/><text x="63.8588%" y="527.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::set_stage::{{closure}} (153 samples, 0.14%)</title><rect x="63.6088%" y="501" width="0.1430%" height="15" fill="rgb(225,89,9)"/><text x="63.8588%" y="511.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_reference (59 samples, 0.06%)</title><rect x="63.7518%" y="549" width="0.0551%" height="15" fill="rgb(243,75,33)"/><text x="64.0018%" y="559.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (59 samples, 0.06%)</title><rect x="63.7518%" y="533" width="0.0551%" height="15" fill="rgb(247,141,45)"/><text x="64.0018%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (51 samples, 0.05%)</title><rect x="63.7593%" y="517" width="0.0477%" height="15" fill="rgb(232,177,36)"/><text x="64.0093%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_sub (51 samples, 0.05%)</title><rect x="63.7593%" y="501" width="0.0477%" height="15" fill="rgb(219,125,36)"/><text x="64.0093%" y="511.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (227 samples, 0.21%)</title><rect x="63.6079%" y="709" width="0.2121%" height="15" fill="rgb(227,94,9)"/><text x="63.8579%" y="719.50"></text></g><g><title>rho_runtime::run::{{closure}}::{{closure}} (227 samples, 0.21%)</title><rect x="63.6079%" y="693" width="0.2121%" height="15" fill="rgb(240,34,52)"/><text x="63.8579%" y="703.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (227 samples, 0.21%)</title><rect x="63.6079%" y="677" width="0.2121%" height="15" fill="rgb(216,45,12)"/><text x="63.8579%" y="687.50"></text></g><g><title>rho_runtime::test::{{closure}} (227 samples, 0.21%)</title><rect x="63.6079%" y="661" width="0.2121%" height="15" fill="rgb(246,21,19)"/><text x="63.8579%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (227 samples, 0.21%)</title><rect x="63.6079%" y="645" width="0.2121%" height="15" fill="rgb(213,98,42)"/><text x="63.8579%" y="655.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::evaludate::{{closure}} (227 samples, 0.21%)</title><rect x="63.6079%" y="629" width="0.2121%" height="15" fill="rgb(250,136,47)"/><text x="63.8579%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::join::JoinHandle&lt;core::result::Result&lt;(),model::rho_types::ExecutionError&gt;&gt;&gt; (227 samples, 0.21%)</title><rect x="63.6079%" y="613" width="0.2121%" height="15" fill="rgb(251,124,27)"/><text x="63.8579%" y="623.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::ops::drop::Drop&gt;::drop (227 samples, 0.21%)</title><rect x="63.6079%" y="597" width="0.2121%" height="15" fill="rgb(229,180,14)"/><text x="63.8579%" y="607.50"></text></g><g><title>tokio::runtime::task::raw::drop_join_handle_slow (227 samples, 0.21%)</title><rect x="63.6079%" y="581" width="0.2121%" height="15" fill="rgb(245,216,25)"/><text x="63.8579%" y="591.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (227 samples, 0.21%)</title><rect x="63.6079%" y="565" width="0.2121%" height="15" fill="rgb(251,43,5)"/><text x="63.8579%" y="575.50"></text></g><g><title>tokio::runtime::task::state::State::unset_join_interested (14 samples, 0.01%)</title><rect x="63.8070%" y="549" width="0.0131%" height="15" fill="rgb(250,128,24)"/><text x="64.0570%" y="559.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update (14 samples, 0.01%)</title><rect x="63.8070%" y="533" width="0.0131%" height="15" fill="rgb(217,117,27)"/><text x="64.0570%" y="543.50"></text></g><g><title>tokio::runtime::task::state::State::load (13 samples, 0.01%)</title><rect x="63.8079%" y="517" width="0.0121%" height="15" fill="rgb(245,147,4)"/><text x="64.0579%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (13 samples, 0.01%)</title><rect x="63.8079%" y="501" width="0.0121%" height="15" fill="rgb(242,201,35)"/><text x="64.0579%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_load (13 samples, 0.01%)</title><rect x="63.8079%" y="485" width="0.0121%" height="15" fill="rgb(218,181,1)"/><text x="64.0579%" y="495.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (39 samples, 0.04%)</title><rect x="63.8238%" y="581" width="0.0364%" height="15" fill="rgb(222,6,29)"/><text x="64.0738%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (37 samples, 0.03%)</title><rect x="63.8257%" y="565" width="0.0346%" height="15" fill="rgb(208,186,3)"/><text x="64.0757%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_add (37 samples, 0.03%)</title><rect x="63.8257%" y="549" width="0.0346%" height="15" fill="rgb(216,36,26)"/><text x="64.0757%" y="559.50"></text></g><g><title>&lt;rho_runtime::interpreter::reduce::environment::Env&lt;T&gt; as core::clone::Clone&gt;::clone (31 samples, 0.03%)</title><rect x="63.8602%" y="581" width="0.0290%" height="15" fill="rgb(248,201,23)"/><text x="64.1102%" y="591.50"></text></g><g><title>[libc-2.31.so] (30 samples, 0.03%)</title><rect x="63.8612%" y="565" width="0.0280%" height="15" fill="rgb(251,170,31)"/><text x="64.1112%" y="575.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (365 samples, 0.34%)</title><rect x="63.6079%" y="1349" width="0.3411%" height="15" fill="rgb(207,110,25)"/><text x="63.8579%" y="1359.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (365 samples, 0.34%)</title><rect x="63.6079%" y="1333" width="0.3411%" height="15" fill="rgb(250,54,15)"/><text x="63.8579%" y="1343.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (365 samples, 0.34%)</title><rect x="63.6079%" y="1317" width="0.3411%" height="15" fill="rgb(227,68,33)"/><text x="63.8579%" y="1327.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (365 samples, 0.34%)</title><rect x="63.6079%" y="1301" width="0.3411%" height="15" fill="rgb(238,34,41)"/><text x="63.8579%" y="1311.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (365 samples, 0.34%)</title><rect x="63.6079%" y="1285" width="0.3411%" height="15" fill="rgb(220,11,15)"/><text x="63.8579%" y="1295.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (365 samples, 0.34%)</title><rect x="63.6079%" y="1269" width="0.3411%" height="15" fill="rgb(246,111,35)"/><text x="63.8579%" y="1279.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (365 samples, 0.34%)</title><rect x="63.6079%" y="1253" width="0.3411%" height="15" fill="rgb(209,88,53)"/><text x="63.8579%" y="1263.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (365 samples, 0.34%)</title><rect x="63.6079%" y="1237" width="0.3411%" height="15" fill="rgb(231,185,47)"/><text x="63.8579%" y="1247.50"></text></g><g><title>std::panic::catch_unwind (365 samples, 0.34%)</title><rect x="63.6079%" y="1221" width="0.3411%" height="15" fill="rgb(233,154,1)"/><text x="63.8579%" y="1231.50"></text></g><g><title>std::panicking::try (365 samples, 0.34%)</title><rect x="63.6079%" y="1205" width="0.3411%" height="15" fill="rgb(225,15,46)"/><text x="63.8579%" y="1215.50"></text></g><g><title>std::panicking::try::do_call (365 samples, 0.34%)</title><rect x="63.6079%" y="1189" width="0.3411%" height="15" fill="rgb(211,135,41)"/><text x="63.8579%" y="1199.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (365 samples, 0.34%)</title><rect x="63.6079%" y="1173" width="0.3411%" height="15" fill="rgb(208,54,0)"/><text x="63.8579%" y="1183.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (365 samples, 0.34%)</title><rect x="63.6079%" y="1157" width="0.3411%" height="15" fill="rgb(244,136,14)"/><text x="63.8579%" y="1167.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (365 samples, 0.34%)</title><rect x="63.6079%" y="1141" width="0.3411%" height="15" fill="rgb(241,56,14)"/><text x="63.8579%" y="1151.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (365 samples, 0.34%)</title><rect x="63.6079%" y="1125" width="0.3411%" height="15" fill="rgb(205,80,24)"/><text x="63.8579%" y="1135.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (365 samples, 0.34%)</title><rect x="63.6079%" y="1109" width="0.3411%" height="15" fill="rgb(220,57,4)"/><text x="63.8579%" y="1119.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (365 samples, 0.34%)</title><rect x="63.6079%" y="1093" width="0.3411%" height="15" fill="rgb(226,193,50)"/><text x="63.8579%" y="1103.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (365 samples, 0.34%)</title><rect x="63.6079%" y="1077" width="0.3411%" height="15" fill="rgb(231,168,22)"/><text x="63.8579%" y="1087.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (365 samples, 0.34%)</title><rect x="63.6079%" y="1061" width="0.3411%" height="15" fill="rgb(254,215,14)"/><text x="63.8579%" y="1071.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (365 samples, 0.34%)</title><rect x="63.6079%" y="1045" width="0.3411%" height="15" fill="rgb(211,115,16)"/><text x="63.8579%" y="1055.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (365 samples, 0.34%)</title><rect x="63.6079%" y="1029" width="0.3411%" height="15" fill="rgb(236,210,16)"/><text x="63.8579%" y="1039.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (365 samples, 0.34%)</title><rect x="63.6079%" y="1013" width="0.3411%" height="15" fill="rgb(221,94,12)"/><text x="63.8579%" y="1023.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (365 samples, 0.34%)</title><rect x="63.6079%" y="997" width="0.3411%" height="15" fill="rgb(235,218,49)"/><text x="63.8579%" y="1007.50"></text></g><g><title>tokio::coop::budget (365 samples, 0.34%)</title><rect x="63.6079%" y="981" width="0.3411%" height="15" fill="rgb(217,114,14)"/><text x="63.8579%" y="991.50"></text></g><g><title>tokio::coop::with_budget (365 samples, 0.34%)</title><rect x="63.6079%" y="965" width="0.3411%" height="15" fill="rgb(216,145,22)"/><text x="63.8579%" y="975.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (365 samples, 0.34%)</title><rect x="63.6079%" y="949" width="0.3411%" height="15" fill="rgb(217,112,39)"/><text x="63.8579%" y="959.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (365 samples, 0.34%)</title><rect x="63.6079%" y="933" width="0.3411%" height="15" fill="rgb(225,85,32)"/><text x="63.8579%" y="943.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (365 samples, 0.34%)</title><rect x="63.6079%" y="917" width="0.3411%" height="15" fill="rgb(245,209,47)"/><text x="63.8579%" y="927.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (365 samples, 0.34%)</title><rect x="63.6079%" y="901" width="0.3411%" height="15" fill="rgb(218,220,15)"/><text x="63.8579%" y="911.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (365 samples, 0.34%)</title><rect x="63.6079%" y="885" width="0.3411%" height="15" fill="rgb(222,202,31)"/><text x="63.8579%" y="895.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (365 samples, 0.34%)</title><rect x="63.6079%" y="869" width="0.3411%" height="15" fill="rgb(243,203,4)"/><text x="63.8579%" y="879.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (365 samples, 0.34%)</title><rect x="63.6079%" y="853" width="0.3411%" height="15" fill="rgb(237,92,17)"/><text x="63.8579%" y="863.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (365 samples, 0.34%)</title><rect x="63.6079%" y="837" width="0.3411%" height="15" fill="rgb(231,119,7)"/><text x="63.8579%" y="847.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (365 samples, 0.34%)</title><rect x="63.6079%" y="821" width="0.3411%" height="15" fill="rgb(237,82,41)"/><text x="63.8579%" y="831.50"></text></g><g><title>std::panic::catch_unwind (365 samples, 0.34%)</title><rect x="63.6079%" y="805" width="0.3411%" height="15" fill="rgb(226,81,48)"/><text x="63.8579%" y="815.50"></text></g><g><title>std::panicking::try (365 samples, 0.34%)</title><rect x="63.6079%" y="789" width="0.3411%" height="15" fill="rgb(234,70,51)"/><text x="63.8579%" y="799.50"></text></g><g><title>std::panicking::try::do_call (365 samples, 0.34%)</title><rect x="63.6079%" y="773" width="0.3411%" height="15" fill="rgb(251,86,4)"/><text x="63.8579%" y="783.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (365 samples, 0.34%)</title><rect x="63.6079%" y="757" width="0.3411%" height="15" fill="rgb(244,144,28)"/><text x="63.8579%" y="767.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (365 samples, 0.34%)</title><rect x="63.6079%" y="741" width="0.3411%" height="15" fill="rgb(232,161,39)"/><text x="63.8579%" y="751.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (365 samples, 0.34%)</title><rect x="63.6079%" y="725" width="0.3411%" height="15" fill="rgb(247,34,51)"/><text x="63.8579%" y="735.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (138 samples, 0.13%)</title><rect x="63.8200%" y="709" width="0.1290%" height="15" fill="rgb(225,132,2)"/><text x="64.0700%" y="719.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (138 samples, 0.13%)</title><rect x="63.8200%" y="693" width="0.1290%" height="15" fill="rgb(209,159,44)"/><text x="64.0700%" y="703.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (138 samples, 0.13%)</title><rect x="63.8200%" y="677" width="0.1290%" height="15" fill="rgb(251,214,1)"/><text x="64.0700%" y="687.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::spawn_evaluation::{{closure}} (138 samples, 0.13%)</title><rect x="63.8200%" y="661" width="0.1290%" height="15" fill="rgb(247,84,47)"/><text x="64.0700%" y="671.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (138 samples, 0.13%)</title><rect x="63.8200%" y="645" width="0.1290%" height="15" fill="rgb(240,111,43)"/><text x="64.0700%" y="655.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (138 samples, 0.13%)</title><rect x="63.8200%" y="629" width="0.1290%" height="15" fill="rgb(215,214,35)"/><text x="64.0700%" y="639.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_par::&lt;impl rho_runtime::interpreter::reduce::AsyncEvaluator&lt;S&gt; for model::rho_types::Par&gt;::evaluate::{{closure}} (138 samples, 0.13%)</title><rect x="63.8200%" y="613" width="0.1290%" height="15" fill="rgb(248,207,23)"/><text x="64.0700%" y="623.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::spawn_evaluation (138 samples, 0.13%)</title><rect x="63.8200%" y="597" width="0.1290%" height="15" fill="rgb(214,186,4)"/><text x="64.0700%" y="607.50"></text></g><g><title>core::future::from_generator (56 samples, 0.05%)</title><rect x="63.8967%" y="581" width="0.0523%" height="15" fill="rgb(220,133,22)"/><text x="64.1467%" y="591.50"></text></g><g><title>[libc-2.31.so] (55 samples, 0.05%)</title><rect x="63.8976%" y="565" width="0.0514%" height="15" fill="rgb(239,134,19)"/><text x="64.1476%" y="575.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (19 samples, 0.02%)</title><rect x="63.9490%" y="1349" width="0.0178%" height="15" fill="rgb(250,140,9)"/><text x="64.1990%" y="1359.50"></text></g><g><title>tokio::coop::CURRENT::__getit (12 samples, 0.01%)</title><rect x="63.9789%" y="1349" width="0.0112%" height="15" fill="rgb(225,59,14)"/><text x="64.2289%" y="1359.50"></text></g><g><title>rho_runtime::run::{{closure}}::{{closure}} (12 samples, 0.01%)</title><rect x="64.0107%" y="725" width="0.0112%" height="15" fill="rgb(214,152,51)"/><text x="64.2607%" y="735.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12 samples, 0.01%)</title><rect x="64.0107%" y="709" width="0.0112%" height="15" fill="rgb(251,227,43)"/><text x="64.2607%" y="719.50"></text></g><g><title>rho_runtime::test::{{closure}} (12 samples, 0.01%)</title><rect x="64.0107%" y="693" width="0.0112%" height="15" fill="rgb(241,96,17)"/><text x="64.2607%" y="703.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12 samples, 0.01%)</title><rect x="64.0107%" y="677" width="0.0112%" height="15" fill="rgb(234,198,43)"/><text x="64.2607%" y="687.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::evaludate::{{closure}} (12 samples, 0.01%)</title><rect x="64.0107%" y="661" width="0.0112%" height="15" fill="rgb(220,108,29)"/><text x="64.2607%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::join::JoinHandle&lt;core::result::Result&lt;(),model::rho_types::ExecutionError&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="64.0107%" y="645" width="0.0112%" height="15" fill="rgb(226,163,33)"/><text x="64.2607%" y="655.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="64.0107%" y="629" width="0.0112%" height="15" fill="rgb(205,194,45)"/><text x="64.2607%" y="639.50"></text></g><g><title>tokio::runtime::task::raw::drop_join_handle_slow (12 samples, 0.01%)</title><rect x="64.0107%" y="613" width="0.0112%" height="15" fill="rgb(206,143,44)"/><text x="64.2607%" y="623.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (12 samples, 0.01%)</title><rect x="64.0107%" y="597" width="0.0112%" height="15" fill="rgb(236,136,36)"/><text x="64.2607%" y="607.50"></text></g><g><title>tokio::runtime::task::state::State::unset_join_interested (11 samples, 0.01%)</title><rect x="64.0116%" y="581" width="0.0103%" height="15" fill="rgb(249,172,42)"/><text x="64.2616%" y="591.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update (11 samples, 0.01%)</title><rect x="64.0116%" y="565" width="0.0103%" height="15" fill="rgb(216,139,23)"/><text x="64.2616%" y="575.50"></text></g><g><title>[libc-2.31.so] (350 samples, 0.33%)</title><rect x="64.0855%" y="709" width="0.3271%" height="15" fill="rgb(207,166,20)"/><text x="64.3355%" y="719.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (437 samples, 0.41%)</title><rect x="64.0051%" y="1349" width="0.4084%" height="15" fill="rgb(210,209,22)"/><text x="64.2551%" y="1359.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (437 samples, 0.41%)</title><rect x="64.0051%" y="1333" width="0.4084%" height="15" fill="rgb(232,118,20)"/><text x="64.2551%" y="1343.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (437 samples, 0.41%)</title><rect x="64.0051%" y="1317" width="0.4084%" height="15" fill="rgb(238,113,42)"/><text x="64.2551%" y="1327.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (437 samples, 0.41%)</title><rect x="64.0051%" y="1301" width="0.4084%" height="15" fill="rgb(231,42,5)"/><text x="64.2551%" y="1311.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (437 samples, 0.41%)</title><rect x="64.0051%" y="1285" width="0.4084%" height="15" fill="rgb(243,166,24)"/><text x="64.2551%" y="1295.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (437 samples, 0.41%)</title><rect x="64.0051%" y="1269" width="0.4084%" height="15" fill="rgb(237,226,12)"/><text x="64.2551%" y="1279.50"></text></g><g><title>std::panic::catch_unwind (437 samples, 0.41%)</title><rect x="64.0051%" y="1253" width="0.4084%" height="15" fill="rgb(229,133,24)"/><text x="64.2551%" y="1263.50"></text></g><g><title>std::panicking::try (437 samples, 0.41%)</title><rect x="64.0051%" y="1237" width="0.4084%" height="15" fill="rgb(238,33,43)"/><text x="64.2551%" y="1247.50"></text></g><g><title>std::panicking::try::do_call (437 samples, 0.41%)</title><rect x="64.0051%" y="1221" width="0.4084%" height="15" fill="rgb(227,59,38)"/><text x="64.2551%" y="1231.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (437 samples, 0.41%)</title><rect x="64.0051%" y="1205" width="0.4084%" height="15" fill="rgb(230,97,0)"/><text x="64.2551%" y="1215.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (437 samples, 0.41%)</title><rect x="64.0051%" y="1189" width="0.4084%" height="15" fill="rgb(250,173,50)"/><text x="64.2551%" y="1199.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (437 samples, 0.41%)</title><rect x="64.0051%" y="1173" width="0.4084%" height="15" fill="rgb(240,15,50)"/><text x="64.2551%" y="1183.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (437 samples, 0.41%)</title><rect x="64.0051%" y="1157" width="0.4084%" height="15" fill="rgb(221,93,22)"/><text x="64.2551%" y="1167.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (437 samples, 0.41%)</title><rect x="64.0051%" y="1141" width="0.4084%" height="15" fill="rgb(245,180,53)"/><text x="64.2551%" y="1151.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (437 samples, 0.41%)</title><rect x="64.0051%" y="1125" width="0.4084%" height="15" fill="rgb(231,88,51)"/><text x="64.2551%" y="1135.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (437 samples, 0.41%)</title><rect x="64.0051%" y="1109" width="0.4084%" height="15" fill="rgb(240,58,21)"/><text x="64.2551%" y="1119.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (437 samples, 0.41%)</title><rect x="64.0051%" y="1093" width="0.4084%" height="15" fill="rgb(237,21,10)"/><text x="64.2551%" y="1103.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (437 samples, 0.41%)</title><rect x="64.0051%" y="1077" width="0.4084%" height="15" fill="rgb(218,43,11)"/><text x="64.2551%" y="1087.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (437 samples, 0.41%)</title><rect x="64.0051%" y="1061" width="0.4084%" height="15" fill="rgb(218,221,29)"/><text x="64.2551%" y="1071.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (437 samples, 0.41%)</title><rect x="64.0051%" y="1045" width="0.4084%" height="15" fill="rgb(214,118,42)"/><text x="64.2551%" y="1055.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (437 samples, 0.41%)</title><rect x="64.0051%" y="1029" width="0.4084%" height="15" fill="rgb(251,200,26)"/><text x="64.2551%" y="1039.50"></text></g><g><title>tokio::coop::budget (437 samples, 0.41%)</title><rect x="64.0051%" y="1013" width="0.4084%" height="15" fill="rgb(237,101,39)"/><text x="64.2551%" y="1023.50"></text></g><g><title>tokio::coop::with_budget (437 samples, 0.41%)</title><rect x="64.0051%" y="997" width="0.4084%" height="15" fill="rgb(251,117,11)"/><text x="64.2551%" y="1007.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (437 samples, 0.41%)</title><rect x="64.0051%" y="981" width="0.4084%" height="15" fill="rgb(216,223,23)"/><text x="64.2551%" y="991.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (437 samples, 0.41%)</title><rect x="64.0051%" y="965" width="0.4084%" height="15" fill="rgb(251,54,12)"/><text x="64.2551%" y="975.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (437 samples, 0.41%)</title><rect x="64.0051%" y="949" width="0.4084%" height="15" fill="rgb(254,176,54)"/><text x="64.2551%" y="959.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (437 samples, 0.41%)</title><rect x="64.0051%" y="933" width="0.4084%" height="15" fill="rgb(210,32,8)"/><text x="64.2551%" y="943.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (437 samples, 0.41%)</title><rect x="64.0051%" y="917" width="0.4084%" height="15" fill="rgb(235,52,38)"/><text x="64.2551%" y="927.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (437 samples, 0.41%)</title><rect x="64.0051%" y="901" width="0.4084%" height="15" fill="rgb(231,4,44)"/><text x="64.2551%" y="911.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (437 samples, 0.41%)</title><rect x="64.0051%" y="885" width="0.4084%" height="15" fill="rgb(249,2,32)"/><text x="64.2551%" y="895.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (437 samples, 0.41%)</title><rect x="64.0051%" y="869" width="0.4084%" height="15" fill="rgb(224,65,26)"/><text x="64.2551%" y="879.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (437 samples, 0.41%)</title><rect x="64.0051%" y="853" width="0.4084%" height="15" fill="rgb(250,73,40)"/><text x="64.2551%" y="863.50"></text></g><g><title>std::panic::catch_unwind (437 samples, 0.41%)</title><rect x="64.0051%" y="837" width="0.4084%" height="15" fill="rgb(253,177,16)"/><text x="64.2551%" y="847.50"></text></g><g><title>std::panicking::try (437 samples, 0.41%)</title><rect x="64.0051%" y="821" width="0.4084%" height="15" fill="rgb(217,32,34)"/><text x="64.2551%" y="831.50"></text></g><g><title>std::panicking::try::do_call (437 samples, 0.41%)</title><rect x="64.0051%" y="805" width="0.4084%" height="15" fill="rgb(212,7,10)"/><text x="64.2551%" y="815.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (437 samples, 0.41%)</title><rect x="64.0051%" y="789" width="0.4084%" height="15" fill="rgb(245,89,8)"/><text x="64.2551%" y="799.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (437 samples, 0.41%)</title><rect x="64.0051%" y="773" width="0.4084%" height="15" fill="rgb(237,16,53)"/><text x="64.2551%" y="783.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (437 samples, 0.41%)</title><rect x="64.0051%" y="757" width="0.4084%" height="15" fill="rgb(250,204,30)"/><text x="64.2551%" y="767.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (437 samples, 0.41%)</title><rect x="64.0051%" y="741" width="0.4084%" height="15" fill="rgb(208,77,27)"/><text x="64.2551%" y="751.50"></text></g><g><title>rho_runtime::storage::coordinator::Coordinator::handle_produce::{{closure}} (419 samples, 0.39%)</title><rect x="64.0219%" y="725" width="0.3916%" height="15" fill="rgb(250,204,28)"/><text x="64.2719%" y="735.50"></text></g><g><title>tokio::runtime::queue::Steal&lt;T&gt;::steal_into (56 samples, 0.05%)</title><rect x="64.4135%" y="1349" width="0.0523%" height="15" fill="rgb(244,63,21)"/><text x="64.6635%" y="1359.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (18 samples, 0.02%)</title><rect x="64.4686%" y="1349" width="0.0168%" height="15" fill="rgb(236,85,44)"/><text x="64.7186%" y="1359.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (41 samples, 0.04%)</title><rect x="64.4854%" y="1349" width="0.0383%" height="15" fill="rgb(215,98,4)"/><text x="64.7354%" y="1359.50"></text></g><g><title>tokio::runtime::task::harness::can_read_output (14 samples, 0.01%)</title><rect x="64.5256%" y="1349" width="0.0131%" height="15" fill="rgb(235,38,11)"/><text x="64.7756%" y="1359.50"></text></g><g><title>[libc-2.31.so] (221 samples, 0.21%)</title><rect x="64.7649%" y="1045" width="0.2065%" height="15" fill="rgb(254,186,25)"/><text x="65.0149%" y="1055.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::take_output (913 samples, 0.85%)</title><rect x="64.5976%" y="1109" width="0.8532%" height="15" fill="rgb(225,55,31)"/><text x="64.8476%" y="1119.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (913 samples, 0.85%)</title><rect x="64.5976%" y="1093" width="0.8532%" height="15" fill="rgb(211,15,21)"/><text x="64.8476%" y="1103.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::take_output::{{closure}} (913 samples, 0.85%)</title><rect x="64.5976%" y="1077" width="0.8532%" height="15" fill="rgb(215,187,41)"/><text x="64.8476%" y="1087.50"></text></g><g><title>core::mem::replace (734 samples, 0.69%)</title><rect x="64.7649%" y="1061" width="0.6860%" height="15" fill="rgb(248,69,32)"/><text x="65.0149%" y="1071.50"></text></g><g><title>core::mem::swap (513 samples, 0.48%)</title><rect x="64.9714%" y="1045" width="0.4794%" height="15" fill="rgb(252,102,52)"/><text x="65.2214%" y="1055.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (513 samples, 0.48%)</title><rect x="64.9714%" y="1029" width="0.4794%" height="15" fill="rgb(253,140,32)"/><text x="65.2214%" y="1039.50"></text></g><g><title>core::ptr::swap_nonoverlapping (513 samples, 0.48%)</title><rect x="64.9714%" y="1013" width="0.4794%" height="15" fill="rgb(216,56,42)"/><text x="65.2214%" y="1023.50"></text></g><g><title>core::ptr::swap_nonoverlapping_bytes (513 samples, 0.48%)</title><rect x="64.9714%" y="997" width="0.4794%" height="15" fill="rgb(216,184,14)"/><text x="65.2214%" y="1007.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (445 samples, 0.42%)</title><rect x="65.0350%" y="981" width="0.4159%" height="15" fill="rgb(237,187,27)"/><text x="65.2850%" y="991.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (63 samples, 0.06%)</title><rect x="65.4779%" y="1045" width="0.0589%" height="15" fill="rgb(219,65,3)"/><text x="65.7279%" y="1055.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (63 samples, 0.06%)</title><rect x="65.4779%" y="1029" width="0.0589%" height="15" fill="rgb(245,83,25)"/><text x="65.7279%" y="1039.50"></text></g><g><title>tokio::runtime::task::harness::set_join_waker (82 samples, 0.08%)</title><rect x="65.4611%" y="1093" width="0.0766%" height="15" fill="rgb(214,205,45)"/><text x="65.7111%" y="1103.50"></text></g><g><title>tokio::runtime::task::state::State::set_join_waker (66 samples, 0.06%)</title><rect x="65.4761%" y="1077" width="0.0617%" height="15" fill="rgb(241,20,18)"/><text x="65.7261%" y="1087.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update (66 samples, 0.06%)</title><rect x="65.4761%" y="1061" width="0.0617%" height="15" fill="rgb(232,163,23)"/><text x="65.7261%" y="1071.50"></text></g><g><title>tokio::runtime::task::state::State::ref_inc (43 samples, 0.04%)</title><rect x="65.5405%" y="1077" width="0.0402%" height="15" fill="rgb(214,5,46)"/><text x="65.7905%" y="1087.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (41 samples, 0.04%)</title><rect x="65.5424%" y="1061" width="0.0383%" height="15" fill="rgb(229,78,17)"/><text x="65.7924%" y="1071.50"></text></g><g><title>core::sync::atomic::atomic_add (41 samples, 0.04%)</title><rect x="65.5424%" y="1045" width="0.0383%" height="15" fill="rgb(248,89,10)"/><text x="65.7924%" y="1055.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,079 samples, 1.01%)</title><rect x="64.5780%" y="1237" width="1.0084%" height="15" fill="rgb(248,54,15)"/><text x="64.8280%" y="1247.50"></text></g><g><title>rho_runtime::run::{{closure}}::{{closure}} (1,079 samples, 1.01%)</title><rect x="64.5780%" y="1221" width="1.0084%" height="15" fill="rgb(223,116,6)"/><text x="64.8280%" y="1231.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,079 samples, 1.01%)</title><rect x="64.5780%" y="1205" width="1.0084%" height="15" fill="rgb(205,125,38)"/><text x="64.8280%" y="1215.50"></text></g><g><title>rho_runtime::test::{{closure}} (1,079 samples, 1.01%)</title><rect x="64.5780%" y="1189" width="1.0084%" height="15" fill="rgb(251,78,38)"/><text x="64.8280%" y="1199.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,079 samples, 1.01%)</title><rect x="64.5780%" y="1173" width="1.0084%" height="15" fill="rgb(253,78,28)"/><text x="64.8280%" y="1183.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::evaludate::{{closure}} (1,079 samples, 1.01%)</title><rect x="64.5780%" y="1157" width="1.0084%" height="15" fill="rgb(209,120,3)"/><text x="64.8280%" y="1167.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (1,079 samples, 1.01%)</title><rect x="64.5780%" y="1141" width="1.0084%" height="15" fill="rgb(238,229,9)"/><text x="64.8280%" y="1151.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::try_read_output (1,079 samples, 1.01%)</title><rect x="64.5780%" y="1125" width="1.0084%" height="15" fill="rgb(253,159,18)"/><text x="64.8280%" y="1135.50"></text></g><g><title>tokio::runtime::task::harness::can_read_output (145 samples, 0.14%)</title><rect x="65.4508%" y="1109" width="0.1355%" height="15" fill="rgb(244,42,34)"/><text x="65.7008%" y="1119.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (49 samples, 0.05%)</title><rect x="65.5405%" y="1093" width="0.0458%" height="15" fill="rgb(224,8,7)"/><text x="65.7905%" y="1103.50"></text></g><g><title>[libc-2.31.so] (20 samples, 0.02%)</title><rect x="65.6835%" y="1077" width="0.0187%" height="15" fill="rgb(210,201,45)"/><text x="65.9335%" y="1087.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (33 samples, 0.03%)</title><rect x="65.7022%" y="1077" width="0.0308%" height="15" fill="rgb(252,185,21)"/><text x="65.9522%" y="1087.50"></text></g><g><title>core::ptr::read (27 samples, 0.03%)</title><rect x="65.7078%" y="1061" width="0.0252%" height="15" fill="rgb(223,131,1)"/><text x="65.9578%" y="1071.50"></text></g><g><title>[libc-2.31.so] (26 samples, 0.02%)</title><rect x="65.7088%" y="1045" width="0.0243%" height="15" fill="rgb(245,141,16)"/><text x="65.9588%" y="1055.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (73 samples, 0.07%)</title><rect x="65.6704%" y="1125" width="0.0682%" height="15" fill="rgb(229,55,45)"/><text x="65.9204%" y="1135.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (72 samples, 0.07%)</title><rect x="65.6714%" y="1109" width="0.0673%" height="15" fill="rgb(208,92,15)"/><text x="65.9214%" y="1119.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_par::&lt;impl rho_runtime::interpreter::reduce::AsyncEvaluator&lt;S&gt; for model::rho_types::Par&gt;::evaluate::{{closure}} (69 samples, 0.06%)</title><rect x="65.6742%" y="1093" width="0.0645%" height="15" fill="rgb(234,185,47)"/><text x="65.9242%" y="1103.50"></text></g><g><title>[libc-2.31.so] (159 samples, 0.15%)</title><rect x="65.7461%" y="1093" width="0.1486%" height="15" fill="rgb(253,104,50)"/><text x="65.9961%" y="1103.50"></text></g><g><title>__libc_malloc (114 samples, 0.11%)</title><rect x="65.8947%" y="1029" width="0.1065%" height="15" fill="rgb(205,70,7)"/><text x="66.1447%" y="1039.50"></text></g><g><title>[libc-2.31.so] (57 samples, 0.05%)</title><rect x="65.9480%" y="1013" width="0.0533%" height="15" fill="rgb(240,178,43)"/><text x="66.1980%" y="1023.50"></text></g><g><title>&lt;model::rho_types::Par as rho_runtime::interpreter::reduce::eval_expression::AsyncParExpressionEvaluator&lt;S&gt;&gt;::evaluate_nested_expressions (277 samples, 0.26%)</title><rect x="65.7433%" y="1125" width="0.2589%" height="15" fill="rgb(214,112,2)"/><text x="65.9933%" y="1135.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (277 samples, 0.26%)</title><rect x="65.7433%" y="1109" width="0.2589%" height="15" fill="rgb(206,46,17)"/><text x="65.9933%" y="1119.50"></text></g><g><title>alloc::alloc::exchange_malloc (115 samples, 0.11%)</title><rect x="65.8947%" y="1093" width="0.1075%" height="15" fill="rgb(225,220,16)"/><text x="66.1447%" y="1103.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (115 samples, 0.11%)</title><rect x="65.8947%" y="1077" width="0.1075%" height="15" fill="rgb(238,65,40)"/><text x="66.1447%" y="1087.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (115 samples, 0.11%)</title><rect x="65.8947%" y="1061" width="0.1075%" height="15" fill="rgb(230,151,21)"/><text x="66.1447%" y="1071.50"></text></g><g><title>alloc::alloc::alloc (115 samples, 0.11%)</title><rect x="65.8947%" y="1045" width="0.1075%" height="15" fill="rgb(218,58,49)"/><text x="66.1447%" y="1055.50"></text></g><g><title>[libc-2.31.so] (41 samples, 0.04%)</title><rect x="66.0022%" y="1125" width="0.0383%" height="15" fill="rgb(219,179,14)"/><text x="66.2522%" y="1135.50"></text></g><g><title>[libc-2.31.so] (57 samples, 0.05%)</title><rect x="66.0564%" y="1045" width="0.0533%" height="15" fill="rgb(223,72,1)"/><text x="66.3064%" y="1055.50"></text></g><g><title>alloc::alloc::box_free (70 samples, 0.07%)</title><rect x="66.0564%" y="1093" width="0.0654%" height="15" fill="rgb(238,126,10)"/><text x="66.3064%" y="1103.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (70 samples, 0.07%)</title><rect x="66.0564%" y="1077" width="0.0654%" height="15" fill="rgb(224,206,38)"/><text x="66.3064%" y="1087.50"></text></g><g><title>alloc::alloc::dealloc (70 samples, 0.07%)</title><rect x="66.0564%" y="1061" width="0.0654%" height="15" fill="rgb(212,201,54)"/><text x="66.3064%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),model::rho_types::ExecutionError&gt;+core::marker::Send&gt;&gt;&gt; (75 samples, 0.07%)</title><rect x="66.0527%" y="1125" width="0.0701%" height="15" fill="rgb(218,154,48)"/><text x="66.3027%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),model::rho_types::ExecutionError&gt;+core::marker::Send&gt;&gt; (75 samples, 0.07%)</title><rect x="66.0527%" y="1109" width="0.0701%" height="15" fill="rgb(232,93,24)"/><text x="66.3027%" y="1119.50"></text></g><g><title>[libc-2.31.so] (11 samples, 0.01%)</title><rect x="66.1377%" y="1029" width="0.0103%" height="15" fill="rgb(245,30,21)"/><text x="66.3877%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Send&gt;&gt; (21 samples, 0.02%)</title><rect x="66.1330%" y="1109" width="0.0196%" height="15" fill="rgb(242,148,29)"/><text x="66.3830%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::Send&gt;&gt; (18 samples, 0.02%)</title><rect x="66.1358%" y="1093" width="0.0168%" height="15" fill="rgb(244,153,54)"/><text x="66.3858%" y="1103.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.02%)</title><rect x="66.1358%" y="1077" width="0.0168%" height="15" fill="rgb(252,87,22)"/><text x="66.3858%" y="1087.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (18 samples, 0.02%)</title><rect x="66.1358%" y="1061" width="0.0168%" height="15" fill="rgb(210,51,29)"/><text x="66.3858%" y="1071.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.01%)</title><rect x="66.1377%" y="1045" width="0.0150%" height="15" fill="rgb(242,136,47)"/><text x="66.3877%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Par&gt; (33 samples, 0.03%)</title><rect x="66.1228%" y="1125" width="0.0308%" height="15" fill="rgb(238,68,4)"/><text x="66.3728%" y="1135.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_par::&lt;impl rho_runtime::interpreter::reduce::AsyncEvaluator&lt;S&gt; for model::rho_types::Par&gt;::evaluate (11 samples, 0.01%)</title><rect x="66.1536%" y="1125" width="0.0103%" height="15" fill="rgb(242,161,30)"/><text x="66.4036%" y="1135.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (11 samples, 0.01%)</title><rect x="66.1536%" y="1109" width="0.0103%" height="15" fill="rgb(218,58,44)"/><text x="66.4036%" y="1119.50"></text></g><g><title>model::ordering::sort_par::&lt;impl model::ordering::Sortable for model::rho_types::Par&gt;::sort (31 samples, 0.03%)</title><rect x="66.1686%" y="1109" width="0.0290%" height="15" fill="rgb(252,125,32)"/><text x="66.4186%" y="1119.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by (13 samples, 0.01%)</title><rect x="66.1854%" y="1093" width="0.0121%" height="15" fill="rgb(219,178,0)"/><text x="66.4354%" y="1103.50"></text></g><g><title>alloc::slice::merge_sort (13 samples, 0.01%)</title><rect x="66.1854%" y="1077" width="0.0121%" height="15" fill="rgb(213,152,7)"/><text x="66.4354%" y="1087.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_match::&lt;impl rho_runtime::interpreter::reduce::AsyncEvaluator&lt;S&gt; for model::rho_types::Match&gt;::evaluate::{{closure}} (677 samples, 0.63%)</title><rect x="65.5910%" y="1141" width="0.6327%" height="15" fill="rgb(249,109,34)"/><text x="65.8410%" y="1151.50"></text></g><g><title>rho_runtime::interpreter::reduce::substitute::sub_par::&lt;impl rho_runtime::interpreter::reduce::substitute::Substitutable&lt;S&gt; for model::rho_types::Par&gt;::substitute (64 samples, 0.06%)</title><rect x="66.1639%" y="1125" width="0.0598%" height="15" fill="rgb(232,96,21)"/><text x="66.4139%" y="1135.50"></text></g><g><title>rho_runtime::interpreter::reduce::substitute::sub_par::&lt;impl rho_runtime::interpreter::reduce::substitute::Substitutable&lt;S&gt; for model::rho_types::Par&gt;::substitute_no_sort (28 samples, 0.03%)</title><rect x="66.1975%" y="1109" width="0.0262%" height="15" fill="rgb(228,27,39)"/><text x="66.4475%" y="1119.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (16 samples, 0.01%)</title><rect x="66.2657%" y="853" width="0.0150%" height="15" fill="rgb(211,182,52)"/><text x="66.5157%" y="863.50"></text></g><g><title>&lt;model::rho_types::Expr as core::clone::Clone&gt;::clone (53 samples, 0.05%)</title><rect x="66.2527%" y="869" width="0.0495%" height="15" fill="rgb(234,178,38)"/><text x="66.5027%" y="879.50"></text></g><g><title>[libc-2.31.so] (23 samples, 0.02%)</title><rect x="66.2807%" y="853" width="0.0215%" height="15" fill="rgb(221,111,3)"/><text x="66.5307%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13 samples, 0.01%)</title><rect x="66.3143%" y="821" width="0.0121%" height="15" fill="rgb(228,175,21)"/><text x="66.5643%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 0.01%)</title><rect x="66.3143%" y="805" width="0.0121%" height="15" fill="rgb(228,174,43)"/><text x="66.5643%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (35 samples, 0.03%)</title><rect x="66.3031%" y="869" width="0.0327%" height="15" fill="rgb(211,191,0)"/><text x="66.5531%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (33 samples, 0.03%)</title><rect x="66.3050%" y="853" width="0.0308%" height="15" fill="rgb(253,117,3)"/><text x="66.5550%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (33 samples, 0.03%)</title><rect x="66.3050%" y="837" width="0.0308%" height="15" fill="rgb(241,127,19)"/><text x="66.5550%" y="847.50"></text></g><g><title>&lt;rho_runtime::interpreter::reduce::environment::Env&lt;T&gt; as core::clone::Clone&gt;::clone (151 samples, 0.14%)</title><rect x="66.2237%" y="1109" width="0.1411%" height="15" fill="rgb(218,103,12)"/><text x="66.4737%" y="1119.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::clone::Clone&gt;::clone (151 samples, 0.14%)</title><rect x="66.2237%" y="1093" width="0.1411%" height="15" fill="rgb(236,214,43)"/><text x="66.4737%" y="1103.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::convert::From&lt;&amp;[&lt;A as smallvec::Array&gt;::Item]&gt;&gt;::from (151 samples, 0.14%)</title><rect x="66.2237%" y="1077" width="0.1411%" height="15" fill="rgb(244,144,19)"/><text x="66.4737%" y="1087.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (151 samples, 0.14%)</title><rect x="66.2237%" y="1061" width="0.1411%" height="15" fill="rgb(246,188,10)"/><text x="66.4737%" y="1071.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::FromIterator&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::from_iter (151 samples, 0.14%)</title><rect x="66.2237%" y="1045" width="0.1411%" height="15" fill="rgb(212,193,33)"/><text x="66.4737%" y="1055.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (151 samples, 0.14%)</title><rect x="66.2237%" y="1029" width="0.1411%" height="15" fill="rgb(241,51,29)"/><text x="66.4737%" y="1039.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (151 samples, 0.14%)</title><rect x="66.2237%" y="1013" width="0.1411%" height="15" fill="rgb(211,58,19)"/><text x="66.4737%" y="1023.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (151 samples, 0.14%)</title><rect x="66.2237%" y="997" width="0.1411%" height="15" fill="rgb(229,111,26)"/><text x="66.4737%" y="1007.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (151 samples, 0.14%)</title><rect x="66.2237%" y="981" width="0.1411%" height="15" fill="rgb(213,115,40)"/><text x="66.4737%" y="991.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned::{{closure}} (151 samples, 0.14%)</title><rect x="66.2237%" y="965" width="0.1411%" height="15" fill="rgb(209,56,44)"/><text x="66.4737%" y="975.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (151 samples, 0.14%)</title><rect x="66.2237%" y="949" width="0.1411%" height="15" fill="rgb(230,108,32)"/><text x="66.4737%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (151 samples, 0.14%)</title><rect x="66.2237%" y="933" width="0.1411%" height="15" fill="rgb(216,165,31)"/><text x="66.4737%" y="943.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (147 samples, 0.14%)</title><rect x="66.2274%" y="917" width="0.1374%" height="15" fill="rgb(218,122,21)"/><text x="66.4774%" y="927.50"></text></g><g><title>alloc::slice::hack::to_vec (145 samples, 0.14%)</title><rect x="66.2293%" y="901" width="0.1355%" height="15" fill="rgb(223,224,47)"/><text x="66.4793%" y="911.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (145 samples, 0.14%)</title><rect x="66.2293%" y="885" width="0.1355%" height="15" fill="rgb(238,102,44)"/><text x="66.4793%" y="895.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (31 samples, 0.03%)</title><rect x="66.3358%" y="869" width="0.0290%" height="15" fill="rgb(236,46,40)"/><text x="66.5858%" y="879.50"></text></g><g><title>[libc-2.31.so] (18 samples, 0.02%)</title><rect x="66.3480%" y="853" width="0.0168%" height="15" fill="rgb(247,202,50)"/><text x="66.5980%" y="863.50"></text></g><g><title>[libc-2.31.so] (49 samples, 0.05%)</title><rect x="66.3657%" y="1093" width="0.0458%" height="15" fill="rgb(209,99,20)"/><text x="66.6157%" y="1103.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (918 samples, 0.86%)</title><rect x="65.5863%" y="1237" width="0.8579%" height="15" fill="rgb(252,27,34)"/><text x="65.8363%" y="1247.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (918 samples, 0.86%)</title><rect x="65.5863%" y="1221" width="0.8579%" height="15" fill="rgb(215,206,23)"/><text x="65.8363%" y="1231.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (918 samples, 0.86%)</title><rect x="65.5863%" y="1205" width="0.8579%" height="15" fill="rgb(212,135,36)"/><text x="65.8363%" y="1215.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::spawn_evaluation::{{closure}} (918 samples, 0.86%)</title><rect x="65.5863%" y="1189" width="0.8579%" height="15" fill="rgb(240,189,1)"/><text x="65.8363%" y="1199.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (918 samples, 0.86%)</title><rect x="65.5863%" y="1173" width="0.8579%" height="15" fill="rgb(242,56,20)"/><text x="65.8363%" y="1183.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (918 samples, 0.86%)</title><rect x="65.5863%" y="1157" width="0.8579%" height="15" fill="rgb(247,132,33)"/><text x="65.8363%" y="1167.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_par::&lt;impl rho_runtime::interpreter::reduce::AsyncEvaluator&lt;S&gt; for model::rho_types::Par&gt;::evaluate::{{closure}} (236 samples, 0.22%)</title><rect x="66.2237%" y="1141" width="0.2206%" height="15" fill="rgb(208,149,11)"/><text x="66.4737%" y="1151.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::spawn_evaluation (236 samples, 0.22%)</title><rect x="66.2237%" y="1125" width="0.2206%" height="15" fill="rgb(211,33,11)"/><text x="66.4737%" y="1135.50"></text></g><g><title>tokio::task::spawn::spawn (85 samples, 0.08%)</title><rect x="66.3648%" y="1109" width="0.0794%" height="15" fill="rgb(221,29,38)"/><text x="66.6148%" y="1119.50"></text></g><g><title>tokio::runtime::context::spawn_handle (25 samples, 0.02%)</title><rect x="66.4209%" y="1093" width="0.0234%" height="15" fill="rgb(206,182,49)"/><text x="66.6709%" y="1103.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (25 samples, 0.02%)</title><rect x="66.4209%" y="1077" width="0.0234%" height="15" fill="rgb(216,140,1)"/><text x="66.6709%" y="1087.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (25 samples, 0.02%)</title><rect x="66.4209%" y="1061" width="0.0234%" height="15" fill="rgb(232,57,40)"/><text x="66.6709%" y="1071.50"></text></g><g><title>tokio::runtime::context::spawn_handle::{{closure}} (22 samples, 0.02%)</title><rect x="66.4237%" y="1045" width="0.0206%" height="15" fill="rgb(224,186,18)"/><text x="66.6737%" y="1055.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (19 samples, 0.02%)</title><rect x="66.4265%" y="1029" width="0.0178%" height="15" fill="rgb(215,121,11)"/><text x="66.6765%" y="1039.50"></text></g><g><title>tokio::runtime::context::spawn_handle::{{closure}}::{{closure}} (19 samples, 0.02%)</title><rect x="66.4265%" y="1013" width="0.0178%" height="15" fill="rgb(245,147,10)"/><text x="66.6765%" y="1023.50"></text></g><g><title>&lt;tokio::runtime::spawner::Spawner as core::clone::Clone&gt;::clone (19 samples, 0.02%)</title><rect x="66.4265%" y="997" width="0.0178%" height="15" fill="rgb(238,153,13)"/><text x="66.6765%" y="1007.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (2,043 samples, 1.91%)</title><rect x="64.5387%" y="1349" width="1.9093%" height="15" fill="rgb(233,108,0)"/><text x="64.7887%" y="1359.50">t..</text></g><g><title>std::panic::catch_unwind (2,006 samples, 1.87%)</title><rect x="64.5733%" y="1333" width="1.8747%" height="15" fill="rgb(212,157,17)"/><text x="64.8233%" y="1343.50">s..</text></g><g><title>std::panicking::try (2,006 samples, 1.87%)</title><rect x="64.5733%" y="1317" width="1.8747%" height="15" fill="rgb(225,213,38)"/><text x="64.8233%" y="1327.50">s..</text></g><g><title>std::panicking::try::do_call (2,006 samples, 1.87%)</title><rect x="64.5733%" y="1301" width="1.8747%" height="15" fill="rgb(248,16,11)"/><text x="64.8233%" y="1311.50">s..</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2,006 samples, 1.87%)</title><rect x="64.5733%" y="1285" width="1.8747%" height="15" fill="rgb(241,33,4)"/><text x="64.8233%" y="1295.50">&lt;..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (2,006 samples, 1.87%)</title><rect x="64.5733%" y="1269" width="1.8747%" height="15" fill="rgb(222,26,43)"/><text x="64.8233%" y="1279.50">t..</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (2,006 samples, 1.87%)</title><rect x="64.5733%" y="1253" width="1.8747%" height="15" fill="rgb(243,29,36)"/><text x="64.8233%" y="1263.50">t..</text></g><g><title>tokio::runtime::task::state::State::ref_inc (16 samples, 0.01%)</title><rect x="66.4807%" y="1349" width="0.0150%" height="15" fill="rgb(241,9,27)"/><text x="66.7307%" y="1359.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (16 samples, 0.01%)</title><rect x="66.5041%" y="1349" width="0.0150%" height="15" fill="rgb(205,117,26)"/><text x="66.7541%" y="1359.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (51 samples, 0.05%)</title><rect x="66.5190%" y="1349" width="0.0477%" height="15" fill="rgb(209,80,39)"/><text x="66.7690%" y="1359.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (20 samples, 0.02%)</title><rect x="66.5723%" y="1349" width="0.0187%" height="15" fill="rgb(239,155,6)"/><text x="66.8223%" y="1359.50"></text></g><g><title>[libc-2.31.so] (14 samples, 0.01%)</title><rect x="66.6003%" y="773" width="0.0131%" height="15" fill="rgb(212,104,12)"/><text x="66.8503%" y="783.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (14 samples, 0.01%)</title><rect x="66.6498%" y="741" width="0.0131%" height="15" fill="rgb(234,204,3)"/><text x="66.8998%" y="751.50"></text></g><g><title>&lt;model::bitset::BitSet&lt;B&gt; as core::clone::Clone&gt;::clone (13 samples, 0.01%)</title><rect x="66.6508%" y="725" width="0.0121%" height="15" fill="rgb(251,218,7)"/><text x="66.9008%" y="735.50"></text></g><g><title>&lt;bit_vec::BitVec&lt;B&gt; as core::clone::Clone&gt;::clone (13 samples, 0.01%)</title><rect x="66.6508%" y="709" width="0.0121%" height="15" fill="rgb(221,81,32)"/><text x="66.9008%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (11 samples, 0.01%)</title><rect x="66.6526%" y="693" width="0.0103%" height="15" fill="rgb(214,152,26)"/><text x="66.9026%" y="703.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (71 samples, 0.07%)</title><rect x="66.5975%" y="1349" width="0.0664%" height="15" fill="rgb(223,22,3)"/><text x="66.8475%" y="1359.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (71 samples, 0.07%)</title><rect x="66.5975%" y="1333" width="0.0664%" height="15" fill="rgb(207,174,7)"/><text x="66.8475%" y="1343.50"></text></g><g><title>tokio::coop::budget (71 samples, 0.07%)</title><rect x="66.5975%" y="1317" width="0.0664%" height="15" fill="rgb(224,19,52)"/><text x="66.8475%" y="1327.50"></text></g><g><title>tokio::coop::with_budget (71 samples, 0.07%)</title><rect x="66.5975%" y="1301" width="0.0664%" height="15" fill="rgb(228,24,14)"/><text x="66.8475%" y="1311.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (71 samples, 0.07%)</title><rect x="66.5975%" y="1285" width="0.0664%" height="15" fill="rgb(230,153,43)"/><text x="66.8475%" y="1295.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (71 samples, 0.07%)</title><rect x="66.5975%" y="1269" width="0.0664%" height="15" fill="rgb(231,106,12)"/><text x="66.8475%" y="1279.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (71 samples, 0.07%)</title><rect x="66.5975%" y="1253" width="0.0664%" height="15" fill="rgb(215,92,2)"/><text x="66.8475%" y="1263.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (71 samples, 0.07%)</title><rect x="66.5975%" y="1237" width="0.0664%" height="15" fill="rgb(249,143,25)"/><text x="66.8475%" y="1247.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (71 samples, 0.07%)</title><rect x="66.5975%" y="1221" width="0.0664%" height="15" fill="rgb(252,7,35)"/><text x="66.8475%" y="1231.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (71 samples, 0.07%)</title><rect x="66.5975%" y="1205" width="0.0664%" height="15" fill="rgb(216,69,40)"/><text x="66.8475%" y="1215.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (71 samples, 0.07%)</title><rect x="66.5975%" y="1189" width="0.0664%" height="15" fill="rgb(240,36,33)"/><text x="66.8475%" y="1199.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (71 samples, 0.07%)</title><rect x="66.5975%" y="1173" width="0.0664%" height="15" fill="rgb(231,128,14)"/><text x="66.8475%" y="1183.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (71 samples, 0.07%)</title><rect x="66.5975%" y="1157" width="0.0664%" height="15" fill="rgb(245,143,14)"/><text x="66.8475%" y="1167.50"></text></g><g><title>std::panic::catch_unwind (71 samples, 0.07%)</title><rect x="66.5975%" y="1141" width="0.0664%" height="15" fill="rgb(222,130,28)"/><text x="66.8475%" y="1151.50"></text></g><g><title>std::panicking::try (71 samples, 0.07%)</title><rect x="66.5975%" y="1125" width="0.0664%" height="15" fill="rgb(212,10,48)"/><text x="66.8475%" y="1135.50"></text></g><g><title>std::panicking::try::do_call (71 samples, 0.07%)</title><rect x="66.5975%" y="1109" width="0.0664%" height="15" fill="rgb(254,118,45)"/><text x="66.8475%" y="1119.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (71 samples, 0.07%)</title><rect x="66.5975%" y="1093" width="0.0664%" height="15" fill="rgb(228,6,45)"/><text x="66.8475%" y="1103.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (71 samples, 0.07%)</title><rect x="66.5975%" y="1077" width="0.0664%" height="15" fill="rgb(241,18,35)"/><text x="66.8475%" y="1087.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (71 samples, 0.07%)</title><rect x="66.5975%" y="1061" width="0.0664%" height="15" fill="rgb(227,214,53)"/><text x="66.8475%" y="1071.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (71 samples, 0.07%)</title><rect x="66.5975%" y="1045" width="0.0664%" height="15" fill="rgb(224,107,51)"/><text x="66.8475%" y="1055.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (71 samples, 0.07%)</title><rect x="66.5975%" y="1029" width="0.0664%" height="15" fill="rgb(248,60,28)"/><text x="66.8475%" y="1039.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (71 samples, 0.07%)</title><rect x="66.5975%" y="1013" width="0.0664%" height="15" fill="rgb(249,101,23)"/><text x="66.8475%" y="1023.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::spawn_evaluation::{{closure}} (71 samples, 0.07%)</title><rect x="66.5975%" y="997" width="0.0664%" height="15" fill="rgb(228,51,19)"/><text x="66.8475%" y="1007.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (71 samples, 0.07%)</title><rect x="66.5975%" y="981" width="0.0664%" height="15" fill="rgb(213,20,6)"/><text x="66.8475%" y="991.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (71 samples, 0.07%)</title><rect x="66.5975%" y="965" width="0.0664%" height="15" fill="rgb(212,124,10)"/><text x="66.8475%" y="975.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_par::&lt;impl rho_runtime::interpreter::reduce::AsyncEvaluator&lt;S&gt; for model::rho_types::Par&gt;::evaluate::{{closure}} (71 samples, 0.07%)</title><rect x="66.5975%" y="949" width="0.0664%" height="15" fill="rgb(248,3,40)"/><text x="66.8475%" y="959.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::spawn_evaluation (71 samples, 0.07%)</title><rect x="66.5975%" y="933" width="0.0664%" height="15" fill="rgb(223,178,23)"/><text x="66.8475%" y="943.50"></text></g><g><title>&lt;rho_runtime::interpreter::reduce::environment::Env&lt;T&gt; as core::clone::Clone&gt;::clone (71 samples, 0.07%)</title><rect x="66.5975%" y="917" width="0.0664%" height="15" fill="rgb(240,132,45)"/><text x="66.8475%" y="927.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::clone::Clone&gt;::clone (71 samples, 0.07%)</title><rect x="66.5975%" y="901" width="0.0664%" height="15" fill="rgb(245,164,36)"/><text x="66.8475%" y="911.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::convert::From&lt;&amp;[&lt;A as smallvec::Array&gt;::Item]&gt;&gt;::from (71 samples, 0.07%)</title><rect x="66.5975%" y="885" width="0.0664%" height="15" fill="rgb(231,188,53)"/><text x="66.8475%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (71 samples, 0.07%)</title><rect x="66.5975%" y="869" width="0.0664%" height="15" fill="rgb(237,198,39)"/><text x="66.8475%" y="879.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::FromIterator&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::from_iter (71 samples, 0.07%)</title><rect x="66.5975%" y="853" width="0.0664%" height="15" fill="rgb(223,120,35)"/><text x="66.8475%" y="863.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (71 samples, 0.07%)</title><rect x="66.5975%" y="837" width="0.0664%" height="15" fill="rgb(253,107,49)"/><text x="66.8475%" y="847.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (71 samples, 0.07%)</title><rect x="66.5975%" y="821" width="0.0664%" height="15" fill="rgb(216,44,31)"/><text x="66.8475%" y="831.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (71 samples, 0.07%)</title><rect x="66.5975%" y="805" width="0.0664%" height="15" fill="rgb(253,87,21)"/><text x="66.8475%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (71 samples, 0.07%)</title><rect x="66.5975%" y="789" width="0.0664%" height="15" fill="rgb(226,18,2)"/><text x="66.8475%" y="799.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned::{{closure}} (54 samples, 0.05%)</title><rect x="66.6134%" y="773" width="0.0505%" height="15" fill="rgb(216,8,46)"/><text x="66.8634%" y="783.50"></text></g><g><title>&lt;model::rho_types::Par as core::clone::Clone&gt;::clone (54 samples, 0.05%)</title><rect x="66.6134%" y="757" width="0.0505%" height="15" fill="rgb(226,140,39)"/><text x="66.8634%" y="767.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (19 samples, 0.02%)</title><rect x="66.6639%" y="1349" width="0.0178%" height="15" fill="rgb(221,194,54)"/><text x="66.9139%" y="1359.50"></text></g><g><title>__sched_yield (26 samples, 0.02%)</title><rect x="66.7807%" y="1333" width="0.0243%" height="15" fill="rgb(213,92,11)"/><text x="67.0307%" y="1343.50"></text></g><g><title>[unknown] (24 samples, 0.02%)</title><rect x="66.7826%" y="1317" width="0.0224%" height="15" fill="rgb(229,162,46)"/><text x="67.0326%" y="1327.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="66.7844%" y="1301" width="0.0206%" height="15" fill="rgb(214,111,36)"/><text x="67.0344%" y="1311.50"></text></g><g><title>[unknown] (21 samples, 0.02%)</title><rect x="66.7854%" y="1285" width="0.0196%" height="15" fill="rgb(207,6,21)"/><text x="67.0354%" y="1295.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="66.7872%" y="1269" width="0.0178%" height="15" fill="rgb(213,127,38)"/><text x="67.0372%" y="1279.50"></text></g><g><title>[unknown] (17 samples, 0.02%)</title><rect x="66.7891%" y="1253" width="0.0159%" height="15" fill="rgb(238,118,32)"/><text x="67.0391%" y="1263.50"></text></g><g><title>[unknown] (17 samples, 0.02%)</title><rect x="66.7891%" y="1237" width="0.0159%" height="15" fill="rgb(240,139,39)"/><text x="67.0391%" y="1247.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="66.7919%" y="1221" width="0.0131%" height="15" fill="rgb(235,10,37)"/><text x="67.0419%" y="1231.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (124 samples, 0.12%)</title><rect x="66.6928%" y="1349" width="0.1159%" height="15" fill="rgb(249,171,38)"/><text x="66.9428%" y="1359.50"></text></g><g><title>tokio::sync::oneshot::Task::set_task (27 samples, 0.03%)</title><rect x="66.8143%" y="1349" width="0.0252%" height="15" fill="rgb(242,144,32)"/><text x="67.0643%" y="1359.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (14 samples, 0.01%)</title><rect x="66.8265%" y="1333" width="0.0131%" height="15" fill="rgb(217,117,21)"/><text x="67.0765%" y="1343.50"></text></g><g><title>tokio::sync::oneshot::Task::set_task::{{closure}} (14 samples, 0.01%)</title><rect x="66.8265%" y="1317" width="0.0131%" height="15" fill="rgb(249,87,1)"/><text x="67.0765%" y="1327.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (14 samples, 0.01%)</title><rect x="66.8265%" y="1301" width="0.0131%" height="15" fill="rgb(248,196,48)"/><text x="67.0765%" y="1311.50"></text></g><g><title>[unknown] (32,093 samples, 29.99%)</title><rect x="36.8538%" y="1365" width="29.9923%" height="15" fill="rgb(251,206,33)"/><text x="37.1038%" y="1375.50">[unknown]</text></g><g><title>__libc_malloc (17 samples, 0.02%)</title><rect x="66.8461%" y="1365" width="0.0159%" height="15" fill="rgb(232,141,28)"/><text x="67.0961%" y="1375.50"></text></g><g><title>anon.c55acc8c63e1b94af5529338c5583af3.57.llvm.15931263407713334931 (15 samples, 0.01%)</title><rect x="66.8788%" y="1365" width="0.0140%" height="15" fill="rgb(209,167,14)"/><text x="67.1288%" y="1375.50"></text></g><g><title>tokio::runtime::spawner::Spawner::spawn (15 samples, 0.01%)</title><rect x="66.8788%" y="1349" width="0.0140%" height="15" fill="rgb(225,11,50)"/><text x="67.1288%" y="1359.50"></text></g><g><title>tokio::runtime::thread_pool::Spawner::spawn (14 samples, 0.01%)</title><rect x="66.8797%" y="1333" width="0.0131%" height="15" fill="rgb(209,50,20)"/><text x="67.1297%" y="1343.50"></text></g><g><title>tokio::runtime::task::joinable (11 samples, 0.01%)</title><rect x="66.8825%" y="1317" width="0.0103%" height="15" fill="rgb(212,17,46)"/><text x="67.1325%" y="1327.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::new (11 samples, 0.01%)</title><rect x="66.8825%" y="1301" width="0.0103%" height="15" fill="rgb(216,101,39)"/><text x="67.1325%" y="1311.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (15 samples, 0.01%)</title><rect x="66.8975%" y="1349" width="0.0140%" height="15" fill="rgb(212,228,48)"/><text x="67.1475%" y="1359.50"></text></g><g><title>anon.ff7fd81b8d6f221f67d075658d85a514.57.llvm.13947084464035088480 (25 samples, 0.02%)</title><rect x="66.8928%" y="1365" width="0.0234%" height="15" fill="rgb(250,6,50)"/><text x="67.1428%" y="1375.50"></text></g><g><title>blake3::ChunkState::update (26 samples, 0.02%)</title><rect x="66.9162%" y="1365" width="0.0243%" height="15" fill="rgb(250,160,48)"/><text x="67.1662%" y="1375.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (15 samples, 0.01%)</title><rect x="66.9592%" y="1125" width="0.0140%" height="15" fill="rgb(244,216,33)"/><text x="67.2092%" y="1135.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (15 samples, 0.01%)</title><rect x="66.9592%" y="1109" width="0.0140%" height="15" fill="rgb(207,157,5)"/><text x="67.2092%" y="1119.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (15 samples, 0.01%)</title><rect x="66.9592%" y="1093" width="0.0140%" height="15" fill="rgb(228,199,8)"/><text x="67.2092%" y="1103.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (15 samples, 0.01%)</title><rect x="66.9592%" y="1077" width="0.0140%" height="15" fill="rgb(227,80,20)"/><text x="67.2092%" y="1087.50"></text></g><g><title>parking_lot_core::parking_lot::park (15 samples, 0.01%)</title><rect x="66.9592%" y="1061" width="0.0140%" height="15" fill="rgb(222,9,33)"/><text x="67.2092%" y="1071.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (15 samples, 0.01%)</title><rect x="66.9592%" y="1045" width="0.0140%" height="15" fill="rgb(239,44,28)"/><text x="67.2092%" y="1055.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (15 samples, 0.01%)</title><rect x="66.9592%" y="1029" width="0.0140%" height="15" fill="rgb(249,187,43)"/><text x="67.2092%" y="1039.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (15 samples, 0.01%)</title><rect x="66.9592%" y="1013" width="0.0140%" height="15" fill="rgb(216,141,28)"/><text x="67.2092%" y="1023.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (15 samples, 0.01%)</title><rect x="66.9592%" y="997" width="0.0140%" height="15" fill="rgb(230,154,53)"/><text x="67.2092%" y="1007.50"></text></g><g><title>syscall (15 samples, 0.01%)</title><rect x="66.9592%" y="981" width="0.0140%" height="15" fill="rgb(227,82,4)"/><text x="67.2092%" y="991.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="66.9592%" y="965" width="0.0140%" height="15" fill="rgb(220,107,16)"/><text x="67.2092%" y="975.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="66.9592%" y="949" width="0.0140%" height="15" fill="rgb(207,187,2)"/><text x="67.2092%" y="959.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="66.9592%" y="933" width="0.0140%" height="15" fill="rgb(210,162,52)"/><text x="67.2092%" y="943.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="66.9592%" y="917" width="0.0140%" height="15" fill="rgb(217,216,49)"/><text x="67.2092%" y="927.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="66.9592%" y="901" width="0.0140%" height="15" fill="rgb(218,146,49)"/><text x="67.2092%" y="911.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="66.9592%" y="885" width="0.0140%" height="15" fill="rgb(216,55,40)"/><text x="67.2092%" y="895.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="66.9592%" y="869" width="0.0140%" height="15" fill="rgb(208,196,21)"/><text x="67.2092%" y="879.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="66.9592%" y="853" width="0.0140%" height="15" fill="rgb(242,117,42)"/><text x="67.2092%" y="863.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="66.9592%" y="837" width="0.0140%" height="15" fill="rgb(210,11,23)"/><text x="67.2092%" y="847.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="66.9592%" y="821" width="0.0140%" height="15" fill="rgb(217,110,2)"/><text x="67.2092%" y="831.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="66.9592%" y="805" width="0.0140%" height="15" fill="rgb(229,77,54)"/><text x="67.2092%" y="815.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="66.9592%" y="789" width="0.0140%" height="15" fill="rgb(218,53,16)"/><text x="67.2092%" y="799.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="66.9592%" y="773" width="0.0140%" height="15" fill="rgb(215,38,13)"/><text x="67.2092%" y="783.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="66.9592%" y="757" width="0.0140%" height="15" fill="rgb(235,42,18)"/><text x="67.2092%" y="767.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (12 samples, 0.01%)</title><rect x="67.1480%" y="805" width="0.0112%" height="15" fill="rgb(219,66,54)"/><text x="67.3980%" y="815.50"></text></g><g><title>tokio::runtime::task::stack::TransferStack&lt;T&gt;::drain (11 samples, 0.01%)</title><rect x="67.1648%" y="773" width="0.0103%" height="15" fill="rgb(222,205,4)"/><text x="67.4148%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::swap (11 samples, 0.01%)</title><rect x="67.1648%" y="757" width="0.0103%" height="15" fill="rgb(227,213,46)"/><text x="67.4148%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_swap (11 samples, 0.01%)</title><rect x="67.1648%" y="741" width="0.0103%" height="15" fill="rgb(250,145,42)"/><text x="67.4148%" y="751.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::maintenance (43 samples, 0.04%)</title><rect x="67.1358%" y="821" width="0.0402%" height="15" fill="rgb(219,15,2)"/><text x="67.3858%" y="831.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::maintenance (18 samples, 0.02%)</title><rect x="67.1592%" y="805" width="0.0168%" height="15" fill="rgb(231,181,52)"/><text x="67.4092%" y="815.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::drain_pending_drop (13 samples, 0.01%)</title><rect x="67.1638%" y="789" width="0.0121%" height="15" fill="rgb(235,1,42)"/><text x="67.4138%" y="799.50"></text></g><g><title>__sched_yield (5,303 samples, 4.96%)</title><rect x="67.3825%" y="757" width="4.9559%" height="15" fill="rgb(249,88,27)"/><text x="67.6325%" y="767.50">__sche..</text></g><g><title>[unknown] (4,944 samples, 4.62%)</title><rect x="67.7180%" y="741" width="4.6204%" height="15" fill="rgb(235,145,16)"/><text x="67.9680%" y="751.50">[unkn..</text></g><g><title>[unknown] (4,339 samples, 4.05%)</title><rect x="68.2834%" y="725" width="4.0550%" height="15" fill="rgb(237,114,19)"/><text x="68.5334%" y="735.50">[unk..</text></g><g><title>[unknown] (4,208 samples, 3.93%)</title><rect x="68.4059%" y="709" width="3.9326%" height="15" fill="rgb(238,51,50)"/><text x="68.6559%" y="719.50">[unk..</text></g><g><title>[unknown] (4,116 samples, 3.85%)</title><rect x="68.4918%" y="693" width="3.8466%" height="15" fill="rgb(205,194,25)"/><text x="68.7418%" y="703.50">[unk..</text></g><g><title>[unknown] (3,619 samples, 3.38%)</title><rect x="68.9563%" y="677" width="3.3821%" height="15" fill="rgb(215,203,17)"/><text x="69.2063%" y="687.50">[un..</text></g><g><title>[unknown] (3,400 samples, 3.18%)</title><rect x="69.1610%" y="661" width="3.1775%" height="15" fill="rgb(233,112,49)"/><text x="69.4110%" y="671.50">[un..</text></g><g><title>[unknown] (2,313 samples, 2.16%)</title><rect x="70.1768%" y="645" width="2.1616%" height="15" fill="rgb(241,130,26)"/><text x="70.4268%" y="655.50">[..</text></g><g><title>[unknown] (1,815 samples, 1.70%)</title><rect x="70.6422%" y="629" width="1.6962%" height="15" fill="rgb(252,223,19)"/><text x="70.8922%" y="639.50"></text></g><g><title>[unknown] (1,011 samples, 0.94%)</title><rect x="71.3936%" y="613" width="0.9448%" height="15" fill="rgb(211,95,25)"/><text x="71.6436%" y="623.50"></text></g><g><title>[unknown] (32 samples, 0.03%)</title><rect x="72.3085%" y="597" width="0.0299%" height="15" fill="rgb(251,182,27)"/><text x="72.5585%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (229 samples, 0.21%)</title><rect x="72.3384%" y="757" width="0.2140%" height="15" fill="rgb(238,24,4)"/><text x="72.5884%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (229 samples, 0.21%)</title><rect x="72.3384%" y="741" width="0.2140%" height="15" fill="rgb(224,220,25)"/><text x="72.5884%" y="751.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (51 samples, 0.05%)</title><rect x="72.5524%" y="757" width="0.0477%" height="15" fill="rgb(239,133,26)"/><text x="72.8024%" y="767.50"></text></g><g><title>parking_lot_core::parking_lot::park (51 samples, 0.05%)</title><rect x="72.5524%" y="741" width="0.0477%" height="15" fill="rgb(211,94,48)"/><text x="72.8024%" y="751.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (51 samples, 0.05%)</title><rect x="72.5524%" y="725" width="0.0477%" height="15" fill="rgb(239,87,6)"/><text x="72.8024%" y="735.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (51 samples, 0.05%)</title><rect x="72.5524%" y="709" width="0.0477%" height="15" fill="rgb(227,62,0)"/><text x="72.8024%" y="719.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (51 samples, 0.05%)</title><rect x="72.5524%" y="693" width="0.0477%" height="15" fill="rgb(211,226,4)"/><text x="72.8024%" y="703.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (51 samples, 0.05%)</title><rect x="72.5524%" y="677" width="0.0477%" height="15" fill="rgb(253,38,52)"/><text x="72.8024%" y="687.50"></text></g><g><title>syscall (51 samples, 0.05%)</title><rect x="72.5524%" y="661" width="0.0477%" height="15" fill="rgb(229,126,40)"/><text x="72.8024%" y="671.50"></text></g><g><title>[unknown] (51 samples, 0.05%)</title><rect x="72.5524%" y="645" width="0.0477%" height="15" fill="rgb(229,165,44)"/><text x="72.8024%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,()&gt;&gt; (58 samples, 0.05%)</title><rect x="72.6057%" y="741" width="0.0542%" height="15" fill="rgb(247,95,47)"/><text x="72.8557%" y="751.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (58 samples, 0.05%)</title><rect x="72.6057%" y="725" width="0.0542%" height="15" fill="rgb(216,140,30)"/><text x="72.8557%" y="735.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (58 samples, 0.05%)</title><rect x="72.6057%" y="709" width="0.0542%" height="15" fill="rgb(246,214,8)"/><text x="72.8557%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (54 samples, 0.05%)</title><rect x="72.6094%" y="693" width="0.0505%" height="15" fill="rgb(227,224,15)"/><text x="72.8594%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (54 samples, 0.05%)</title><rect x="72.6094%" y="677" width="0.0505%" height="15" fill="rgb(233,175,4)"/><text x="72.8594%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (235 samples, 0.22%)</title><rect x="72.6599%" y="741" width="0.2196%" height="15" fill="rgb(221,66,45)"/><text x="72.9099%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (235 samples, 0.22%)</title><rect x="72.6599%" y="725" width="0.2196%" height="15" fill="rgb(221,178,18)"/><text x="72.9099%" y="735.50"></text></g><g><title>__sched_yield (53 samples, 0.05%)</title><rect x="72.8823%" y="709" width="0.0495%" height="15" fill="rgb(213,81,29)"/><text x="73.1323%" y="719.50"></text></g><g><title>[unknown] (53 samples, 0.05%)</title><rect x="72.8823%" y="693" width="0.0495%" height="15" fill="rgb(220,89,49)"/><text x="73.1323%" y="703.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (101 samples, 0.09%)</title><rect x="72.9412%" y="693" width="0.0944%" height="15" fill="rgb(227,60,33)"/><text x="73.1912%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (97 samples, 0.09%)</title><rect x="72.9449%" y="677" width="0.0907%" height="15" fill="rgb(205,113,12)"/><text x="73.1949%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (97 samples, 0.09%)</title><rect x="72.9449%" y="661" width="0.0907%" height="15" fill="rgb(211,32,1)"/><text x="73.1949%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicI32::load (570 samples, 0.53%)</title><rect x="73.0646%" y="629" width="0.5327%" height="15" fill="rgb(246,2,12)"/><text x="73.3146%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_load (570 samples, 0.53%)</title><rect x="73.0646%" y="613" width="0.5327%" height="15" fill="rgb(243,37,27)"/><text x="73.3146%" y="623.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (10,109 samples, 9.45%)</title><rect x="73.0618%" y="645" width="9.4473%" height="15" fill="rgb(248,211,31)"/><text x="73.3118%" y="655.50">&lt;parking_lot_c..</text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (9,536 samples, 8.91%)</title><rect x="73.5972%" y="629" width="8.9118%" height="15" fill="rgb(242,146,47)"/><text x="73.8472%" y="639.50">parking_lot_c..</text></g><g><title>syscall (9,533 samples, 8.91%)</title><rect x="73.6001%" y="613" width="8.9090%" height="15" fill="rgb(206,70,20)"/><text x="73.8501%" y="623.50">syscall</text></g><g><title>[unknown] (9,339 samples, 8.73%)</title><rect x="73.7814%" y="597" width="8.7277%" height="15" fill="rgb(215,10,51)"/><text x="74.0314%" y="607.50">[unknown]</text></g><g><title>[unknown] (8,857 samples, 8.28%)</title><rect x="74.2318%" y="581" width="8.2773%" height="15" fill="rgb(243,178,53)"/><text x="74.4818%" y="591.50">[unknown]</text></g><g><title>[unknown] (8,718 samples, 8.15%)</title><rect x="74.3617%" y="565" width="8.1474%" height="15" fill="rgb(233,221,20)"/><text x="74.6117%" y="575.50">[unknown]</text></g><g><title>[unknown] (8,560 samples, 8.00%)</title><rect x="74.5094%" y="549" width="7.9997%" height="15" fill="rgb(218,95,35)"/><text x="74.7594%" y="559.50">[unknown]</text></g><g><title>[unknown] (8,370 samples, 7.82%)</title><rect x="74.6869%" y="533" width="7.8221%" height="15" fill="rgb(229,13,5)"/><text x="74.9369%" y="543.50">[unknown]</text></g><g><title>[unknown] (7,821 samples, 7.31%)</title><rect x="75.2000%" y="517" width="7.3091%" height="15" fill="rgb(252,164,30)"/><text x="75.4500%" y="527.50">[unknown]</text></g><g><title>[unknown] (6,633 samples, 6.20%)</title><rect x="76.3102%" y="501" width="6.1988%" height="15" fill="rgb(232,68,36)"/><text x="76.5602%" y="511.50">[unknown]</text></g><g><title>[unknown] (5,940 samples, 5.55%)</title><rect x="76.9579%" y="485" width="5.5512%" height="15" fill="rgb(219,59,54)"/><text x="77.2079%" y="495.50">[unknow..</text></g><g><title>[unknown] (5,244 samples, 4.90%)</title><rect x="77.6083%" y="469" width="4.9008%" height="15" fill="rgb(250,92,33)"/><text x="77.8583%" y="479.50">[unkno..</text></g><g><title>[unknown] (4,006 samples, 3.74%)</title><rect x="78.7653%" y="453" width="3.7438%" height="15" fill="rgb(229,162,54)"/><text x="79.0153%" y="463.50">[unk..</text></g><g><title>[unknown] (2,785 samples, 2.60%)</title><rect x="79.9064%" y="437" width="2.6027%" height="15" fill="rgb(244,114,52)"/><text x="80.1564%" y="447.50">[u..</text></g><g><title>[unknown] (1,997 samples, 1.87%)</title><rect x="80.6428%" y="421" width="1.8663%" height="15" fill="rgb(212,211,43)"/><text x="80.8928%" y="431.50">[..</text></g><g><title>[unknown] (1,126 samples, 1.05%)</title><rect x="81.4568%" y="405" width="1.0523%" height="15" fill="rgb(226,147,8)"/><text x="81.7068%" y="415.50"></text></g><g><title>[unknown] (708 samples, 0.66%)</title><rect x="81.8474%" y="389" width="0.6617%" height="15" fill="rgb(226,23,13)"/><text x="82.0974%" y="399.50"></text></g><g><title>[unknown] (30 samples, 0.03%)</title><rect x="82.4810%" y="373" width="0.0280%" height="15" fill="rgb(240,63,4)"/><text x="82.7310%" y="383.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="82.4979%" y="357" width="0.0112%" height="15" fill="rgb(221,1,32)"/><text x="82.7479%" y="367.50"></text></g><g><title>[unknown] (11 samples, 0.01%)</title><rect x="82.4988%" y="341" width="0.0103%" height="15" fill="rgb(242,117,10)"/><text x="82.7488%" y="351.50"></text></g><g><title>core::ops::function::FnOnce::call_once (64 samples, 0.06%)</title><rect x="82.5165%" y="645" width="0.0598%" height="15" fill="rgb(249,172,44)"/><text x="82.7665%" y="655.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal::{{closure}} (64 samples, 0.06%)</title><rect x="82.5165%" y="629" width="0.0598%" height="15" fill="rgb(244,46,45)"/><text x="82.7665%" y="639.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (59 samples, 0.06%)</title><rect x="82.5212%" y="613" width="0.0551%" height="15" fill="rgb(206,43,17)"/><text x="82.7712%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (59 samples, 0.06%)</title><rect x="82.5212%" y="597" width="0.0551%" height="15" fill="rgb(239,218,39)"/><text x="82.7712%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (59 samples, 0.06%)</title><rect x="82.5212%" y="581" width="0.0551%" height="15" fill="rgb(208,169,54)"/><text x="82.7712%" y="591.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket (341 samples, 0.32%)</title><rect x="82.5782%" y="645" width="0.3187%" height="15" fill="rgb(247,25,42)"/><text x="82.8282%" y="655.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (321 samples, 0.30%)</title><rect x="82.5969%" y="629" width="0.3000%" height="15" fill="rgb(226,23,31)"/><text x="82.8469%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (315 samples, 0.29%)</title><rect x="82.6025%" y="613" width="0.2944%" height="15" fill="rgb(247,16,28)"/><text x="82.8525%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (315 samples, 0.29%)</title><rect x="82.6025%" y="597" width="0.2944%" height="15" fill="rgb(231,147,38)"/><text x="82.8525%" y="607.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (10,689 samples, 9.99%)</title><rect x="73.0431%" y="661" width="9.9893%" height="15" fill="rgb(253,81,48)"/><text x="73.2931%" y="671.50">parking_lot_co..</text></g><g><title>parking_lot_core::word_lock::WordLock::unlock (145 samples, 0.14%)</title><rect x="82.8969%" y="645" width="0.1355%" height="15" fill="rgb(249,222,43)"/><text x="83.1469%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (144 samples, 0.13%)</title><rect x="82.8978%" y="629" width="0.1346%" height="15" fill="rgb(221,3,27)"/><text x="83.1478%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_sub (144 samples, 0.13%)</title><rect x="82.8978%" y="613" width="0.1346%" height="15" fill="rgb(228,180,5)"/><text x="83.1478%" y="623.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (10,871 samples, 10.16%)</title><rect x="72.8795%" y="741" width="10.1594%" height="15" fill="rgb(227,131,42)"/><text x="73.1295%" y="751.50">tokio::loom::st..</text></g><g><title>parking_lot::condvar::Condvar::wait (10,871 samples, 10.16%)</title><rect x="72.8795%" y="725" width="10.1594%" height="15" fill="rgb(212,3,39)"/><text x="73.1295%" y="735.50">parking_lot::co..</text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (10,815 samples, 10.11%)</title><rect x="72.9319%" y="709" width="10.1071%" height="15" fill="rgb(226,45,5)"/><text x="73.1819%" y="719.50">parking_lot::co..</text></g><g><title>parking_lot_core::parking_lot::park (10,704 samples, 10.00%)</title><rect x="73.0356%" y="693" width="10.0034%" height="15" fill="rgb(215,167,45)"/><text x="73.2856%" y="703.50">parking_lot_co..</text></g><g><title>parking_lot_core::parking_lot::with_thread_data (10,704 samples, 10.00%)</title><rect x="73.0356%" y="677" width="10.0034%" height="15" fill="rgb(250,218,53)"/><text x="73.2856%" y="687.50">parking_lot_co..</text></g><g><title>tokio::runtime::park::Inner::park_condvar (11,226 samples, 10.49%)</title><rect x="72.6048%" y="757" width="10.4912%" height="15" fill="rgb(207,140,0)"/><text x="72.8548%" y="767.50">tokio::runtime:..</text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (61 samples, 0.06%)</title><rect x="83.0390%" y="741" width="0.0570%" height="15" fill="rgb(238,133,51)"/><text x="83.2890%" y="751.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (61 samples, 0.06%)</title><rect x="83.0390%" y="725" width="0.0570%" height="15" fill="rgb(218,203,53)"/><text x="83.2890%" y="735.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (61 samples, 0.06%)</title><rect x="83.0390%" y="709" width="0.0570%" height="15" fill="rgb(226,184,25)"/><text x="83.2890%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (59 samples, 0.06%)</title><rect x="83.0408%" y="693" width="0.0551%" height="15" fill="rgb(231,121,21)"/><text x="83.2908%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (59 samples, 0.06%)</title><rect x="83.0408%" y="677" width="0.0551%" height="15" fill="rgb(251,14,34)"/><text x="83.2908%" y="687.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (17,109 samples, 15.99%)</title><rect x="67.3274%" y="789" width="15.9891%" height="15" fill="rgb(249,193,11)"/><text x="67.5774%" y="799.50">&lt;tokio::runtime::park::Pa..</text></g><g><title>tokio::runtime::park::Inner::park (17,107 samples, 15.99%)</title><rect x="67.3293%" y="773" width="15.9873%" height="15" fill="rgb(220,172,37)"/><text x="67.5793%" y="783.50">tokio::runtime::park::Inn..</text></g><g><title>tokio::util::try_lock::TryLock&lt;T&gt;::try_lock (236 samples, 0.22%)</title><rect x="83.0960%" y="757" width="0.2206%" height="15" fill="rgb(231,229,43)"/><text x="83.3460%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (231 samples, 0.22%)</title><rect x="83.1006%" y="741" width="0.2159%" height="15" fill="rgb(250,161,5)"/><text x="83.3506%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (231 samples, 0.22%)</title><rect x="83.1006%" y="725" width="0.2159%" height="15" fill="rgb(218,225,18)"/><text x="83.3506%" y="735.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (51 samples, 0.05%)</title><rect x="83.3165%" y="789" width="0.0477%" height="15" fill="rgb(245,45,42)"/><text x="83.5665%" y="799.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (51 samples, 0.05%)</title><rect x="83.3165%" y="773" width="0.0477%" height="15" fill="rgb(211,115,1)"/><text x="83.5665%" y="783.50"></text></g><g><title>core::cell::BorrowRefMut::new (51 samples, 0.05%)</title><rect x="83.3165%" y="757" width="0.0477%" height="15" fill="rgb(248,133,52)"/><text x="83.5665%" y="767.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (27 samples, 0.03%)</title><rect x="83.3389%" y="741" width="0.0252%" height="15" fill="rgb(238,100,21)"/><text x="83.5889%" y="751.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (27 samples, 0.03%)</title><rect x="83.3389%" y="725" width="0.0252%" height="15" fill="rgb(247,144,11)"/><text x="83.5889%" y="735.50"></text></g><g><title>core::mem::replace (27 samples, 0.03%)</title><rect x="83.3389%" y="709" width="0.0252%" height="15" fill="rgb(206,164,16)"/><text x="83.5889%" y="719.50"></text></g><g><title>core::mem::swap (27 samples, 0.03%)</title><rect x="83.3389%" y="693" width="0.0252%" height="15" fill="rgb(222,34,3)"/><text x="83.5889%" y="703.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (27 samples, 0.03%)</title><rect x="83.3389%" y="677" width="0.0252%" height="15" fill="rgb(248,82,4)"/><text x="83.5889%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (27 samples, 0.03%)</title><rect x="83.3389%" y="661" width="0.0252%" height="15" fill="rgb(228,81,46)"/><text x="83.5889%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tokio::runtime::park::Parker&gt;&gt; (117 samples, 0.11%)</title><rect x="83.3716%" y="789" width="0.1093%" height="15" fill="rgb(227,67,47)"/><text x="83.6216%" y="799.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (138 samples, 0.13%)</title><rect x="83.4810%" y="789" width="0.1290%" height="15" fill="rgb(215,93,53)"/><text x="83.7310%" y="799.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (17,473 samples, 16.33%)</title><rect x="67.3171%" y="805" width="16.3293%" height="15" fill="rgb(248,194,39)"/><text x="67.5671%" y="815.50">tokio::runtime::thread_po..</text></g><g><title>tokio::runtime::queue::Local&lt;T&gt;::is_stealable (39 samples, 0.04%)</title><rect x="83.6100%" y="789" width="0.0364%" height="15" fill="rgb(215,5,19)"/><text x="83.8600%" y="799.50"></text></g><g><title>tokio::runtime::queue::Inner&lt;T&gt;::is_empty (33 samples, 0.03%)</title><rect x="83.6156%" y="773" width="0.0308%" height="15" fill="rgb(226,215,51)"/><text x="83.8656%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (25 samples, 0.02%)</title><rect x="83.6230%" y="757" width="0.0234%" height="15" fill="rgb(225,56,26)"/><text x="83.8730%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_load (25 samples, 0.02%)</title><rect x="83.6230%" y="741" width="0.0234%" height="15" fill="rgb(222,75,29)"/><text x="83.8730%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::queue::Pointers&gt;&gt; (75 samples, 0.07%)</title><rect x="83.6483%" y="773" width="0.0701%" height="15" fill="rgb(236,139,6)"/><text x="83.8983%" y="783.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (75 samples, 0.07%)</title><rect x="83.6483%" y="757" width="0.0701%" height="15" fill="rgb(223,137,36)"/><text x="83.8983%" y="767.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (75 samples, 0.07%)</title><rect x="83.6483%" y="741" width="0.0701%" height="15" fill="rgb(226,99,2)"/><text x="83.8983%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (71 samples, 0.07%)</title><rect x="83.6520%" y="725" width="0.0664%" height="15" fill="rgb(206,133,23)"/><text x="83.9020%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (71 samples, 0.07%)</title><rect x="83.6520%" y="709" width="0.0664%" height="15" fill="rgb(243,173,15)"/><text x="83.9020%" y="719.50"></text></g><g><title>tokio::runtime::queue::Inject&lt;T&gt;::is_closed (140 samples, 0.13%)</title><rect x="83.6483%" y="789" width="0.1308%" height="15" fill="rgb(228,69,28)"/><text x="83.8983%" y="799.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (65 samples, 0.06%)</title><rect x="83.7184%" y="773" width="0.0607%" height="15" fill="rgb(212,51,22)"/><text x="83.9684%" y="783.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (65 samples, 0.06%)</title><rect x="83.7184%" y="757" width="0.0607%" height="15" fill="rgb(227,113,0)"/><text x="83.9684%" y="767.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (65 samples, 0.06%)</title><rect x="83.7184%" y="741" width="0.0607%" height="15" fill="rgb(252,84,27)"/><text x="83.9684%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (63 samples, 0.06%)</title><rect x="83.7202%" y="725" width="0.0589%" height="15" fill="rgb(223,145,39)"/><text x="83.9702%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (63 samples, 0.06%)</title><rect x="83.7202%" y="709" width="0.0589%" height="15" fill="rgb(239,219,30)"/><text x="83.9702%" y="719.50"></text></g><g><title>tokio::runtime::task::stack::TransferStack&lt;T&gt;::drain (436 samples, 0.41%)</title><rect x="83.7847%" y="773" width="0.4075%" height="15" fill="rgb(224,196,39)"/><text x="84.0347%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::swap (436 samples, 0.41%)</title><rect x="83.7847%" y="757" width="0.4075%" height="15" fill="rgb(205,35,43)"/><text x="84.0347%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_swap (436 samples, 0.41%)</title><rect x="83.7847%" y="741" width="0.4075%" height="15" fill="rgb(228,201,21)"/><text x="84.0347%" y="751.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Worker::remote (309 samples, 0.29%)</title><rect x="84.1922%" y="773" width="0.2888%" height="15" fill="rgb(237,118,16)"/><text x="84.4422%" y="783.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::drain_pending_drop (752 samples, 0.70%)</title><rect x="83.7791%" y="789" width="0.7028%" height="15" fill="rgb(241,17,19)"/><text x="84.0291%" y="799.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::maintenance (898 samples, 0.84%)</title><rect x="83.6464%" y="805" width="0.8392%" height="15" fill="rgb(214,10,25)"/><text x="83.8964%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,alloc::vec::Vec&lt;usize&gt;&gt;&gt; (46 samples, 0.04%)</title><rect x="84.4922%" y="773" width="0.0430%" height="15" fill="rgb(238,37,29)"/><text x="84.7422%" y="783.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 0.04%)</title><rect x="84.4922%" y="757" width="0.0430%" height="15" fill="rgb(253,83,25)"/><text x="84.7422%" y="767.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (46 samples, 0.04%)</title><rect x="84.4922%" y="741" width="0.0430%" height="15" fill="rgb(234,192,12)"/><text x="84.7422%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (42 samples, 0.04%)</title><rect x="84.4959%" y="725" width="0.0393%" height="15" fill="rgb(241,216,45)"/><text x="84.7459%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (42 samples, 0.04%)</title><rect x="84.4959%" y="709" width="0.0393%" height="15" fill="rgb(242,22,33)"/><text x="84.7459%" y="719.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (29 samples, 0.03%)</title><rect x="84.5585%" y="725" width="0.0271%" height="15" fill="rgb(231,105,49)"/><text x="84.8085%" y="735.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (29 samples, 0.03%)</title><rect x="84.5585%" y="709" width="0.0271%" height="15" fill="rgb(218,204,15)"/><text x="84.8085%" y="719.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (58 samples, 0.05%)</title><rect x="84.5352%" y="773" width="0.0542%" height="15" fill="rgb(235,138,41)"/><text x="84.7852%" y="783.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (58 samples, 0.05%)</title><rect x="84.5352%" y="757" width="0.0542%" height="15" fill="rgb(246,0,9)"/><text x="84.7852%" y="767.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (58 samples, 0.05%)</title><rect x="84.5352%" y="741" width="0.0542%" height="15" fill="rgb(210,74,4)"/><text x="84.7852%" y="751.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::transition_from_parked (191 samples, 0.18%)</title><rect x="84.4856%" y="805" width="0.1785%" height="15" fill="rgb(250,60,41)"/><text x="84.7356%" y="815.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::is_parked (184 samples, 0.17%)</title><rect x="84.4922%" y="789" width="0.1720%" height="15" fill="rgb(220,115,12)"/><text x="84.7422%" y="799.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (80 samples, 0.07%)</title><rect x="84.5894%" y="773" width="0.0748%" height="15" fill="rgb(237,100,13)"/><text x="84.8394%" y="783.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (80 samples, 0.07%)</title><rect x="84.5894%" y="757" width="0.0748%" height="15" fill="rgb(213,55,26)"/><text x="84.8394%" y="767.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (80 samples, 0.07%)</title><rect x="84.5894%" y="741" width="0.0748%" height="15" fill="rgb(216,17,4)"/><text x="84.8394%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (77 samples, 0.07%)</title><rect x="84.5922%" y="725" width="0.0720%" height="15" fill="rgb(220,153,47)"/><text x="84.8422%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (77 samples, 0.07%)</title><rect x="84.5922%" y="709" width="0.0720%" height="15" fill="rgb(215,131,9)"/><text x="84.8422%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,alloc::vec::Vec&lt;usize&gt;&gt;&gt; (203 samples, 0.19%)</title><rect x="84.6707%" y="773" width="0.1897%" height="15" fill="rgb(233,46,42)"/><text x="84.9207%" y="783.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (203 samples, 0.19%)</title><rect x="84.6707%" y="757" width="0.1897%" height="15" fill="rgb(226,86,7)"/><text x="84.9207%" y="767.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (203 samples, 0.19%)</title><rect x="84.6707%" y="741" width="0.1897%" height="15" fill="rgb(239,226,21)"/><text x="84.9207%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (201 samples, 0.19%)</title><rect x="84.6725%" y="725" width="0.1878%" height="15" fill="rgb(244,137,22)"/><text x="84.9225%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (201 samples, 0.19%)</title><rect x="84.6725%" y="709" width="0.1878%" height="15" fill="rgb(211,139,35)"/><text x="84.9225%" y="719.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (48 samples, 0.04%)</title><rect x="84.8604%" y="773" width="0.0449%" height="15" fill="rgb(214,62,50)"/><text x="85.1104%" y="783.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (48 samples, 0.04%)</title><rect x="84.8604%" y="757" width="0.0449%" height="15" fill="rgb(212,113,44)"/><text x="85.1104%" y="767.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (48 samples, 0.04%)</title><rect x="84.8604%" y="741" width="0.0449%" height="15" fill="rgb(226,150,43)"/><text x="85.1104%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (46 samples, 0.04%)</title><rect x="84.8622%" y="725" width="0.0430%" height="15" fill="rgb(250,71,37)"/><text x="85.1122%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (46 samples, 0.04%)</title><rect x="84.8622%" y="709" width="0.0430%" height="15" fill="rgb(219,76,19)"/><text x="85.1122%" y="719.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::transition_worker_to_parked (322 samples, 0.30%)</title><rect x="84.6641%" y="789" width="0.3009%" height="15" fill="rgb(250,39,11)"/><text x="84.9141%" y="799.50"></text></g><g><title>tokio::runtime::thread_pool::idle::State::dec_num_unparked (64 samples, 0.06%)</title><rect x="84.9052%" y="773" width="0.0598%" height="15" fill="rgb(230,64,31)"/><text x="85.1552%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (57 samples, 0.05%)</title><rect x="84.9118%" y="757" width="0.0533%" height="15" fill="rgb(208,222,23)"/><text x="85.1618%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_sub (57 samples, 0.05%)</title><rect x="84.9118%" y="741" width="0.0533%" height="15" fill="rgb(227,125,18)"/><text x="85.1618%" y="751.50"></text></g><g><title>tokio::runtime::queue::Steal&lt;T&gt;::is_empty (28 samples, 0.03%)</title><rect x="85.0034%" y="773" width="0.0262%" height="15" fill="rgb(234,210,9)"/><text x="85.2534%" y="783.50"></text></g><g><title>tokio::runtime::queue::Inner&lt;T&gt;::is_empty (27 samples, 0.03%)</title><rect x="85.0043%" y="757" width="0.0252%" height="15" fill="rgb(217,127,24)"/><text x="85.2543%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU16::load (27 samples, 0.03%)</title><rect x="85.0043%" y="741" width="0.0252%" height="15" fill="rgb(239,141,48)"/><text x="85.2543%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_load (27 samples, 0.03%)</title><rect x="85.0043%" y="725" width="0.0252%" height="15" fill="rgb(227,109,8)"/><text x="85.2543%" y="735.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (19,105 samples, 17.85%)</title><rect x="67.1760%" y="821" width="17.8545%" height="15" fill="rgb(235,184,23)"/><text x="67.4260%" y="831.50">tokio::runtime::thread_pool:..</text></g><g><title>tokio::runtime::thread_pool::worker::Core::transition_to_parked (392 samples, 0.37%)</title><rect x="84.6641%" y="805" width="0.3663%" height="15" fill="rgb(227,226,48)"/><text x="84.9141%" y="815.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::notify_if_work_pending (70 samples, 0.07%)</title><rect x="84.9650%" y="789" width="0.0654%" height="15" fill="rgb(206,150,11)"/><text x="85.2150%" y="799.50"></text></g><g><title>tokio::coop::CURRENT::__getit (11 samples, 0.01%)</title><rect x="85.1164%" y="741" width="0.0103%" height="15" fill="rgb(254,2,33)"/><text x="85.3664%" y="751.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (11 samples, 0.01%)</title><rect x="85.1164%" y="725" width="0.0103%" height="15" fill="rgb(243,160,20)"/><text x="85.3664%" y="735.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (67 samples, 0.06%)</title><rect x="85.2146%" y="709" width="0.0626%" height="15" fill="rgb(218,208,30)"/><text x="85.4646%" y="719.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (67 samples, 0.06%)</title><rect x="85.2146%" y="693" width="0.0626%" height="15" fill="rgb(224,120,49)"/><text x="85.4646%" y="703.50"></text></g><g><title>core::cell::BorrowRefMut::new (67 samples, 0.06%)</title><rect x="85.2146%" y="677" width="0.0626%" height="15" fill="rgb(246,12,2)"/><text x="85.4646%" y="687.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (14 samples, 0.01%)</title><rect x="85.2641%" y="661" width="0.0131%" height="15" fill="rgb(236,117,3)"/><text x="85.5141%" y="671.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (14 samples, 0.01%)</title><rect x="85.2641%" y="645" width="0.0131%" height="15" fill="rgb(216,128,52)"/><text x="85.5141%" y="655.50"></text></g><g><title>core::mem::replace (14 samples, 0.01%)</title><rect x="85.2641%" y="629" width="0.0131%" height="15" fill="rgb(246,145,19)"/><text x="85.5141%" y="639.50"></text></g><g><title>core::mem::swap (14 samples, 0.01%)</title><rect x="85.2641%" y="613" width="0.0131%" height="15" fill="rgb(222,11,46)"/><text x="85.5141%" y="623.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (14 samples, 0.01%)</title><rect x="85.2641%" y="597" width="0.0131%" height="15" fill="rgb(245,82,36)"/><text x="85.5141%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.01%)</title><rect x="85.2641%" y="581" width="0.0131%" height="15" fill="rgb(250,73,51)"/><text x="85.5141%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (34 samples, 0.03%)</title><rect x="85.2772%" y="709" width="0.0318%" height="15" fill="rgb(221,189,23)"/><text x="85.5272%" y="719.50"></text></g><g><title>core::mem::take (34 samples, 0.03%)</title><rect x="85.2772%" y="693" width="0.0318%" height="15" fill="rgb(210,33,7)"/><text x="85.5272%" y="703.50"></text></g><g><title>core::mem::replace (34 samples, 0.03%)</title><rect x="85.2772%" y="677" width="0.0318%" height="15" fill="rgb(210,107,22)"/><text x="85.5272%" y="687.50"></text></g><g><title>core::mem::swap (34 samples, 0.03%)</title><rect x="85.2772%" y="661" width="0.0318%" height="15" fill="rgb(222,116,37)"/><text x="85.5272%" y="671.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (34 samples, 0.03%)</title><rect x="85.2772%" y="645" width="0.0318%" height="15" fill="rgb(254,17,48)"/><text x="85.5272%" y="655.50"></text></g><g><title>core::ptr::read (31 samples, 0.03%)</title><rect x="85.2800%" y="629" width="0.0290%" height="15" fill="rgb(224,36,32)"/><text x="85.5300%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (31 samples, 0.03%)</title><rect x="85.2800%" y="613" width="0.0290%" height="15" fill="rgb(232,90,46)"/><text x="85.5300%" y="623.50"></text></g><g><title>tokio::coop::has_budget_remaining (18 samples, 0.02%)</title><rect x="85.3202%" y="709" width="0.0168%" height="15" fill="rgb(241,66,40)"/><text x="85.5702%" y="719.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (18 samples, 0.02%)</title><rect x="85.3202%" y="693" width="0.0168%" height="15" fill="rgb(249,184,29)"/><text x="85.5702%" y="703.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (18 samples, 0.02%)</title><rect x="85.3202%" y="677" width="0.0168%" height="15" fill="rgb(231,181,1)"/><text x="85.5702%" y="687.50"></text></g><g><title>tokio::coop::CURRENT::__getit (18 samples, 0.02%)</title><rect x="85.3202%" y="661" width="0.0168%" height="15" fill="rgb(224,94,2)"/><text x="85.5702%" y="671.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (18 samples, 0.02%)</title><rect x="85.3202%" y="645" width="0.0168%" height="15" fill="rgb(229,170,15)"/><text x="85.5702%" y="655.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (14 samples, 0.01%)</title><rect x="85.3239%" y="629" width="0.0131%" height="15" fill="rgb(240,127,35)"/><text x="85.5739%" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (14 samples, 0.01%)</title><rect x="85.3239%" y="613" width="0.0131%" height="15" fill="rgb(248,196,34)"/><text x="85.5739%" y="623.50"></text></g><g><title>[libc-2.31.so] (117 samples, 0.11%)</title><rect x="85.5005%" y="645" width="0.1093%" height="15" fill="rgb(236,137,7)"/><text x="85.7505%" y="655.50"></text></g><g><title>[libc-2.31.so] (138 samples, 0.13%)</title><rect x="85.6491%" y="581" width="0.1290%" height="15" fill="rgb(235,127,16)"/><text x="85.8991%" y="591.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::store_output (174 samples, 0.16%)</title><rect x="85.6192%" y="645" width="0.1626%" height="15" fill="rgb(250,192,54)"/><text x="85.8692%" y="655.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::set_stage (174 samples, 0.16%)</title><rect x="85.6192%" y="629" width="0.1626%" height="15" fill="rgb(218,98,20)"/><text x="85.8692%" y="639.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (174 samples, 0.16%)</title><rect x="85.6192%" y="613" width="0.1626%" height="15" fill="rgb(230,176,47)"/><text x="85.8692%" y="623.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::set_stage::{{closure}} (174 samples, 0.16%)</title><rect x="85.6192%" y="597" width="0.1626%" height="15" fill="rgb(244,2,33)"/><text x="85.8692%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Core&lt;core::future::from_generator::GenFuture&lt;rho_runtime::storage::coordinator::Coordinator::handle_produce::{{closure}}&gt;,alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="85.7828%" y="581" width="0.0140%" height="15" fill="rgb(231,100,17)"/><text x="86.0328%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Scheduler&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="85.7828%" y="565" width="0.0140%" height="15" fill="rgb(245,23,12)"/><text x="86.0328%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::unsafe_cell::UnsafeCell&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="85.7828%" y="549" width="0.0140%" height="15" fill="rgb(249,55,22)"/><text x="86.0328%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="85.7828%" y="533" width="0.0140%" height="15" fill="rgb(207,134,9)"/><text x="86.0328%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="85.7828%" y="517" width="0.0140%" height="15" fill="rgb(218,134,0)"/><text x="86.0328%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt; (15 samples, 0.01%)</title><rect x="85.7828%" y="501" width="0.0140%" height="15" fill="rgb(213,212,33)"/><text x="86.0328%" y="511.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="85.7828%" y="485" width="0.0140%" height="15" fill="rgb(252,106,18)"/><text x="86.0328%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (15 samples, 0.01%)</title><rect x="85.7828%" y="469" width="0.0140%" height="15" fill="rgb(208,126,42)"/><text x="86.0328%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_sub (15 samples, 0.01%)</title><rect x="85.7828%" y="453" width="0.0140%" height="15" fill="rgb(246,175,29)"/><text x="86.0328%" y="463.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::dealloc (17 samples, 0.02%)</title><rect x="85.7818%" y="645" width="0.0159%" height="15" fill="rgb(215,13,50)"/><text x="86.0318%" y="655.50"></text></g><g><title>core::mem::drop (17 samples, 0.02%)</title><rect x="85.7818%" y="629" width="0.0159%" height="15" fill="rgb(216,172,15)"/><text x="86.0318%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;tokio::runtime::task::core::Cell&lt;core::future::from_generator::GenFuture&lt;rho_runtime::storage::coordinator::Coordinator::handle_produce::{{closure}}&gt;,alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt;&gt; (17 samples, 0.02%)</title><rect x="85.7818%" y="613" width="0.0159%" height="15" fill="rgb(212,103,13)"/><text x="86.0318%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Cell&lt;core::future::from_generator::GenFuture&lt;rho_runtime::storage::coordinator::Coordinator::handle_produce::{{closure}}&gt;,alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="85.7828%" y="597" width="0.0150%" height="15" fill="rgb(231,171,36)"/><text x="86.0328%" y="607.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::is_bound (40 samples, 0.04%)</title><rect x="85.8043%" y="629" width="0.0374%" height="15" fill="rgb(250,123,20)"/><text x="86.0543%" y="639.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (40 samples, 0.04%)</title><rect x="85.8043%" y="613" width="0.0374%" height="15" fill="rgb(212,53,50)"/><text x="86.0543%" y="623.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::is_bound::{{closure}} (40 samples, 0.04%)</title><rect x="85.8043%" y="597" width="0.0374%" height="15" fill="rgb(243,54,12)"/><text x="86.0543%" y="607.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (40 samples, 0.04%)</title><rect x="85.8043%" y="581" width="0.0374%" height="15" fill="rgb(234,101,34)"/><text x="86.0543%" y="591.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Worker::eq (19 samples, 0.02%)</title><rect x="85.8828%" y="533" width="0.0178%" height="15" fill="rgb(254,67,22)"/><text x="86.1328%" y="543.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::release (84 samples, 0.08%)</title><rect x="85.8417%" y="629" width="0.0785%" height="15" fill="rgb(250,35,47)"/><text x="86.0917%" y="639.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (77 samples, 0.07%)</title><rect x="85.8482%" y="613" width="0.0720%" height="15" fill="rgb(226,126,38)"/><text x="86.0982%" y="623.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::release::{{closure}} (77 samples, 0.07%)</title><rect x="85.8482%" y="597" width="0.0720%" height="15" fill="rgb(216,138,53)"/><text x="86.0982%" y="607.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::release (68 samples, 0.06%)</title><rect x="85.8566%" y="581" width="0.0635%" height="15" fill="rgb(246,199,43)"/><text x="86.1066%" y="591.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (59 samples, 0.06%)</title><rect x="85.8650%" y="565" width="0.0551%" height="15" fill="rgb(232,125,11)"/><text x="86.1150%" y="575.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::release::{{closure}} (48 samples, 0.04%)</title><rect x="85.8753%" y="549" width="0.0449%" height="15" fill="rgb(218,219,45)"/><text x="86.1253%" y="559.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (21 samples, 0.02%)</title><rect x="85.9005%" y="533" width="0.0196%" height="15" fill="rgb(216,102,54)"/><text x="86.1505%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (59 samples, 0.06%)</title><rect x="85.9342%" y="597" width="0.0551%" height="15" fill="rgb(250,228,7)"/><text x="86.1842%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (59 samples, 0.06%)</title><rect x="85.9342%" y="581" width="0.0551%" height="15" fill="rgb(226,125,25)"/><text x="86.1842%" y="591.50"></text></g><g><title>tokio::runtime::task::harness::SchedulerView&lt;S&gt;::transition_to_terminal (216 samples, 0.20%)</title><rect x="85.7977%" y="645" width="0.2019%" height="15" fill="rgb(224,165,27)"/><text x="86.0477%" y="655.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_terminal (78 samples, 0.07%)</title><rect x="85.9267%" y="629" width="0.0729%" height="15" fill="rgb(233,86,3)"/><text x="86.1767%" y="639.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update (78 samples, 0.07%)</title><rect x="85.9267%" y="613" width="0.0729%" height="15" fill="rgb(228,116,20)"/><text x="86.1767%" y="623.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_terminal::{{closure}} (11 samples, 0.01%)</title><rect x="85.9893%" y="597" width="0.0103%" height="15" fill="rgb(209,192,17)"/><text x="86.2393%" y="607.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_complete (56 samples, 0.05%)</title><rect x="86.0061%" y="629" width="0.0523%" height="15" fill="rgb(224,88,34)"/><text x="86.2561%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_xor (56 samples, 0.05%)</title><rect x="86.0061%" y="613" width="0.0523%" height="15" fill="rgb(233,38,6)"/><text x="86.2561%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_xor (56 samples, 0.05%)</title><rect x="86.0061%" y="597" width="0.0523%" height="15" fill="rgb(212,59,30)"/><text x="86.2561%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;core::option::Option&lt;alloc::boxed::Box&lt;tokio::runtime::thread_pool::worker::Core&gt;&gt;&gt;&gt; (18 samples, 0.02%)</title><rect x="86.1136%" y="485" width="0.0168%" height="15" fill="rgb(213,80,3)"/><text x="86.3636%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (18 samples, 0.02%)</title><rect x="86.1136%" y="469" width="0.0168%" height="15" fill="rgb(251,178,7)"/><text x="86.3636%" y="479.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (18 samples, 0.02%)</title><rect x="86.1136%" y="453" width="0.0168%" height="15" fill="rgb(213,154,26)"/><text x="86.3636%" y="463.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (18 samples, 0.02%)</title><rect x="86.1136%" y="437" width="0.0168%" height="15" fill="rgb(238,165,49)"/><text x="86.3636%" y="447.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (18 samples, 0.02%)</title><rect x="86.1136%" y="421" width="0.0168%" height="15" fill="rgb(248,91,46)"/><text x="86.3636%" y="431.50"></text></g><g><title>core::mem::replace (18 samples, 0.02%)</title><rect x="86.1136%" y="405" width="0.0168%" height="15" fill="rgb(244,21,52)"/><text x="86.3636%" y="415.50"></text></g><g><title>core::mem::swap (18 samples, 0.02%)</title><rect x="86.1136%" y="389" width="0.0168%" height="15" fill="rgb(247,122,20)"/><text x="86.3636%" y="399.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (18 samples, 0.02%)</title><rect x="86.1136%" y="373" width="0.0168%" height="15" fill="rgb(218,27,9)"/><text x="86.3636%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (18 samples, 0.02%)</title><rect x="86.1136%" y="357" width="0.0168%" height="15" fill="rgb(246,7,6)"/><text x="86.3636%" y="367.50"></text></g><g><title>tokio::runtime::queue::Local&lt;T&gt;::push_back (26 samples, 0.02%)</title><rect x="86.1426%" y="469" width="0.0243%" height="15" fill="rgb(227,135,54)"/><text x="86.3926%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (258 samples, 0.24%)</title><rect x="86.3500%" y="421" width="0.2411%" height="15" fill="rgb(247,14,11)"/><text x="86.6000%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_swap (258 samples, 0.24%)</title><rect x="86.3500%" y="405" width="0.2411%" height="15" fill="rgb(206,149,34)"/><text x="86.6000%" y="415.50"></text></g><g><title>core::mem::drop (38 samples, 0.04%)</title><rect x="86.5912%" y="405" width="0.0355%" height="15" fill="rgb(227,228,4)"/><text x="86.8412%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,()&gt;&gt; (38 samples, 0.04%)</title><rect x="86.5912%" y="389" width="0.0355%" height="15" fill="rgb(238,218,28)"/><text x="86.8412%" y="399.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.04%)</title><rect x="86.5912%" y="373" width="0.0355%" height="15" fill="rgb(252,86,40)"/><text x="86.8412%" y="383.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (38 samples, 0.04%)</title><rect x="86.5912%" y="357" width="0.0355%" height="15" fill="rgb(251,225,11)"/><text x="86.8412%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (35 samples, 0.03%)</title><rect x="86.5940%" y="341" width="0.0327%" height="15" fill="rgb(206,46,49)"/><text x="86.8440%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (35 samples, 0.03%)</title><rect x="86.5940%" y="325" width="0.0327%" height="15" fill="rgb(245,128,24)"/><text x="86.8440%" y="335.50"></text></g><g><title>&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (515 samples, 0.48%)</title><rect x="86.1725%" y="453" width="0.4813%" height="15" fill="rgb(219,177,34)"/><text x="86.4225%" y="463.50"></text></g><g><title>tokio::runtime::park::Inner::unpark (345 samples, 0.32%)</title><rect x="86.3314%" y="437" width="0.3224%" height="15" fill="rgb(218,60,48)"/><text x="86.5814%" y="447.50"></text></g><g><title>tokio::runtime::park::Inner::unpark_condvar (67 samples, 0.06%)</title><rect x="86.5912%" y="421" width="0.0626%" height="15" fill="rgb(221,11,5)"/><text x="86.8412%" y="431.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (27 samples, 0.03%)</title><rect x="86.6285%" y="405" width="0.0252%" height="15" fill="rgb(220,148,13)"/><text x="86.8785%" y="415.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (27 samples, 0.03%)</title><rect x="86.6285%" y="389" width="0.0252%" height="15" fill="rgb(210,16,3)"/><text x="86.8785%" y="399.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (27 samples, 0.03%)</title><rect x="86.6285%" y="373" width="0.0252%" height="15" fill="rgb(236,80,2)"/><text x="86.8785%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (26 samples, 0.02%)</title><rect x="86.6295%" y="357" width="0.0243%" height="15" fill="rgb(239,129,19)"/><text x="86.8795%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (26 samples, 0.02%)</title><rect x="86.6295%" y="341" width="0.0243%" height="15" fill="rgb(220,106,35)"/><text x="86.8795%" y="351.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (5,263 samples, 4.92%)</title><rect x="86.6669%" y="421" width="4.9185%" height="15" fill="rgb(252,139,45)"/><text x="86.9169%" y="431.50">&lt;parki..</text></g><g><title>syscall (5,255 samples, 4.91%)</title><rect x="86.6743%" y="405" width="4.9110%" height="15" fill="rgb(229,8,36)"/><text x="86.9243%" y="415.50">syscall</text></g><g><title>[unknown] (5,177 samples, 4.84%)</title><rect x="86.7472%" y="389" width="4.8381%" height="15" fill="rgb(230,126,33)"/><text x="86.9972%" y="399.50">[unkno..</text></g><g><title>[unknown] (5,050 samples, 4.72%)</title><rect x="86.8659%" y="373" width="4.7194%" height="15" fill="rgb(239,140,21)"/><text x="87.1159%" y="383.50">[unkn..</text></g><g><title>[unknown] (5,005 samples, 4.68%)</title><rect x="86.9080%" y="357" width="4.6774%" height="15" fill="rgb(254,104,9)"/><text x="87.1580%" y="367.50">[unkn..</text></g><g><title>[unknown] (4,960 samples, 4.64%)</title><rect x="86.9500%" y="341" width="4.6353%" height="15" fill="rgb(239,52,14)"/><text x="87.2000%" y="351.50">[unkn..</text></g><g><title>[unknown] (4,909 samples, 4.59%)</title><rect x="86.9977%" y="325" width="4.5877%" height="15" fill="rgb(208,227,44)"/><text x="87.2477%" y="335.50">[unkn..</text></g><g><title>[unknown] (4,237 samples, 3.96%)</title><rect x="87.6257%" y="309" width="3.9597%" height="15" fill="rgb(246,18,19)"/><text x="87.8757%" y="319.50">[unk..</text></g><g><title>[unknown] (3,916 samples, 3.66%)</title><rect x="87.9257%" y="293" width="3.6597%" height="15" fill="rgb(235,228,25)"/><text x="88.1757%" y="303.50">[unk..</text></g><g><title>[unknown] (3,457 samples, 3.23%)</title><rect x="88.3546%" y="277" width="3.2307%" height="15" fill="rgb(240,156,20)"/><text x="88.6046%" y="287.50">[un..</text></g><g><title>[unknown] (2,819 samples, 2.63%)</title><rect x="88.9509%" y="261" width="2.6345%" height="15" fill="rgb(224,8,20)"/><text x="89.2009%" y="271.50">[u..</text></g><g><title>[unknown] (2,269 samples, 2.12%)</title><rect x="89.4649%" y="245" width="2.1205%" height="15" fill="rgb(214,12,52)"/><text x="89.7149%" y="255.50">[..</text></g><g><title>[unknown] (1,253 samples, 1.17%)</title><rect x="90.4144%" y="229" width="1.1710%" height="15" fill="rgb(211,220,47)"/><text x="90.6644%" y="239.50"></text></g><g><title>[unknown] (377 samples, 0.35%)</title><rect x="91.2330%" y="213" width="0.3523%" height="15" fill="rgb(250,173,5)"/><text x="91.4830%" y="223.50"></text></g><g><title>[unknown] (64 samples, 0.06%)</title><rect x="91.5256%" y="197" width="0.0598%" height="15" fill="rgb(250,125,52)"/><text x="91.7756%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (38 samples, 0.04%)</title><rect x="91.6115%" y="421" width="0.0355%" height="15" fill="rgb(209,133,18)"/><text x="91.8615%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (38 samples, 0.04%)</title><rect x="91.6115%" y="405" width="0.0355%" height="15" fill="rgb(216,173,22)"/><text x="91.8615%" y="415.50"></text></g><g><title>&lt;std::time::Instant as core::cmp::PartialOrd&gt;::gt (31 samples, 0.03%)</title><rect x="91.6480%" y="405" width="0.0290%" height="15" fill="rgb(205,3,22)"/><text x="91.8980%" y="415.50"></text></g><g><title>&lt;std::sys::unix::time::inner::Instant as core::cmp::PartialOrd&gt;::partial_cmp (31 samples, 0.03%)</title><rect x="91.6480%" y="389" width="0.0290%" height="15" fill="rgb(248,22,20)"/><text x="91.8980%" y="399.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (31 samples, 0.03%)</title><rect x="91.6480%" y="373" width="0.0290%" height="15" fill="rgb(233,6,29)"/><text x="91.8980%" y="383.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (31 samples, 0.03%)</title><rect x="91.6480%" y="357" width="0.0290%" height="15" fill="rgb(240,22,54)"/><text x="91.8980%" y="367.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::should_timeout (114 samples, 0.11%)</title><rect x="91.6470%" y="421" width="0.1065%" height="15" fill="rgb(231,133,32)"/><text x="91.8970%" y="431.50"></text></g><g><title>std::time::Instant::now (82 samples, 0.08%)</title><rect x="91.6769%" y="405" width="0.0766%" height="15" fill="rgb(248,193,4)"/><text x="91.9269%" y="415.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (82 samples, 0.08%)</title><rect x="91.6769%" y="389" width="0.0766%" height="15" fill="rgb(211,178,46)"/><text x="91.9269%" y="399.50"></text></g><g><title>std::sys::unix::time::inner::now (82 samples, 0.08%)</title><rect x="91.6769%" y="373" width="0.0766%" height="15" fill="rgb(224,5,42)"/><text x="91.9269%" y="383.50"></text></g><g><title>__clock_gettime (80 samples, 0.07%)</title><rect x="91.6788%" y="357" width="0.0748%" height="15" fill="rgb(239,176,25)"/><text x="91.9288%" y="367.50"></text></g><g><title>__vdso_clock_gettime (77 samples, 0.07%)</title><rect x="91.6816%" y="341" width="0.0720%" height="15" fill="rgb(245,187,50)"/><text x="91.9316%" y="351.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (88 samples, 0.08%)</title><rect x="91.7536%" y="421" width="0.0822%" height="15" fill="rgb(248,24,15)"/><text x="92.0036%" y="431.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (69 samples, 0.06%)</title><rect x="91.7713%" y="405" width="0.0645%" height="15" fill="rgb(205,166,13)"/><text x="92.0213%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (67 samples, 0.06%)</title><rect x="91.7732%" y="389" width="0.0626%" height="15" fill="rgb(208,114,23)"/><text x="92.0232%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (67 samples, 0.06%)</title><rect x="91.7732%" y="373" width="0.0626%" height="15" fill="rgb(239,127,18)"/><text x="92.0232%" y="383.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (5,679 samples, 5.31%)</title><rect x="86.6538%" y="453" width="5.3073%" height="15" fill="rgb(219,154,28)"/><text x="86.9038%" y="463.50">parkin..</text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (5,674 samples, 5.30%)</title><rect x="86.6584%" y="437" width="5.3026%" height="15" fill="rgb(225,157,23)"/><text x="86.9084%" y="447.50">parkin..</text></g><g><title>parking_lot_core::parking_lot::unlock_bucket_pair (134 samples, 0.13%)</title><rect x="91.8358%" y="421" width="0.1252%" height="15" fill="rgb(219,8,6)"/><text x="92.0858%" y="431.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::unlock (134 samples, 0.13%)</title><rect x="91.8358%" y="405" width="0.1252%" height="15" fill="rgb(212,47,6)"/><text x="92.0858%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (130 samples, 0.12%)</title><rect x="91.8396%" y="389" width="0.1215%" height="15" fill="rgb(224,190,4)"/><text x="92.0896%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_sub (130 samples, 0.12%)</title><rect x="91.8396%" y="373" width="0.1215%" height="15" fill="rgb(239,183,29)"/><text x="92.0896%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (145 samples, 0.14%)</title><rect x="91.9610%" y="437" width="0.1355%" height="15" fill="rgb(213,57,7)"/><text x="92.2110%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,alloc::vec::Vec&lt;usize&gt;&gt;&gt; (22 samples, 0.02%)</title><rect x="92.0966%" y="437" width="0.0206%" height="15" fill="rgb(216,148,1)"/><text x="92.3466%" y="447.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.02%)</title><rect x="92.0966%" y="421" width="0.0206%" height="15" fill="rgb(236,182,29)"/><text x="92.3466%" y="431.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (22 samples, 0.02%)</title><rect x="92.0966%" y="405" width="0.0206%" height="15" fill="rgb(244,120,48)"/><text x="92.3466%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (20 samples, 0.02%)</title><rect x="92.0984%" y="389" width="0.0187%" height="15" fill="rgb(206,71,34)"/><text x="92.3484%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (20 samples, 0.02%)</title><rect x="92.0984%" y="373" width="0.0187%" height="15" fill="rgb(242,32,6)"/><text x="92.3484%" y="383.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (178 samples, 0.17%)</title><rect x="92.1171%" y="437" width="0.1663%" height="15" fill="rgb(241,35,3)"/><text x="92.3671%" y="447.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (178 samples, 0.17%)</title><rect x="92.1171%" y="421" width="0.1663%" height="15" fill="rgb(222,62,19)"/><text x="92.3671%" y="431.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (178 samples, 0.17%)</title><rect x="92.1171%" y="405" width="0.1663%" height="15" fill="rgb(223,110,41)"/><text x="92.3671%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (177 samples, 0.17%)</title><rect x="92.1181%" y="389" width="0.1654%" height="15" fill="rgb(208,224,4)"/><text x="92.3681%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (177 samples, 0.17%)</title><rect x="92.1181%" y="373" width="0.1654%" height="15" fill="rgb(241,137,19)"/><text x="92.3681%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (432 samples, 0.40%)</title><rect x="92.2919%" y="421" width="0.4037%" height="15" fill="rgb(244,24,17)"/><text x="92.5419%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_add (432 samples, 0.40%)</title><rect x="92.2919%" y="405" width="0.4037%" height="15" fill="rgb(245,178,49)"/><text x="92.5419%" y="415.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::notify_should_wakeup (445 samples, 0.42%)</title><rect x="92.2835%" y="437" width="0.4159%" height="15" fill="rgb(219,160,38)"/><text x="92.5335%" y="447.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule (7,130 samples, 6.66%)</title><rect x="86.0585%" y="597" width="6.6633%" height="15" fill="rgb(228,137,14)"/><text x="86.3085%" y="607.50">tokio::ru..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (7,130 samples, 6.66%)</title><rect x="86.0585%" y="581" width="6.6633%" height="15" fill="rgb(237,134,11)"/><text x="86.3085%" y="591.50">tokio::lo..</text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule::{{closure}} (7,130 samples, 6.66%)</title><rect x="86.0585%" y="565" width="6.6633%" height="15" fill="rgb(211,126,44)"/><text x="86.3085%" y="575.50">tokio::ru..</text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (7,129 samples, 6.66%)</title><rect x="86.0594%" y="549" width="6.6624%" height="15" fill="rgb(226,171,33)"/><text x="86.3094%" y="559.50">tokio::ru..</text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (7,127 samples, 6.66%)</title><rect x="86.0613%" y="533" width="6.6605%" height="15" fill="rgb(253,99,13)"/><text x="86.3113%" y="543.50">tokio::ru..</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (7,126 samples, 6.66%)</title><rect x="86.0622%" y="517" width="6.6596%" height="15" fill="rgb(244,48,7)"/><text x="86.3122%" y="527.50">tokio::ma..</text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule::{{closure}} (7,099 samples, 6.63%)</title><rect x="86.0874%" y="501" width="6.6343%" height="15" fill="rgb(244,217,54)"/><text x="86.3374%" y="511.50">tokio::ru..</text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule_local (7,053 samples, 6.59%)</title><rect x="86.1304%" y="485" width="6.5913%" height="15" fill="rgb(224,15,18)"/><text x="86.3804%" y="495.50">tokio::ru..</text></g><g><title>tokio::runtime::thread_pool::worker::Shared::notify_parked (7,014 samples, 6.55%)</title><rect x="86.1669%" y="469" width="6.5549%" height="15" fill="rgb(244,99,12)"/><text x="86.4169%" y="479.50">tokio::ru..</text></g><g><title>tokio::runtime::thread_pool::idle::Idle::worker_to_notify (814 samples, 0.76%)</title><rect x="91.9610%" y="453" width="0.7607%" height="15" fill="rgb(233,226,8)"/><text x="92.2110%" y="463.50"></text></g><g><title>tokio::runtime::thread_pool::idle::State::unpark_one (24 samples, 0.02%)</title><rect x="92.6993%" y="437" width="0.0224%" height="15" fill="rgb(229,211,3)"/><text x="92.9493%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (24 samples, 0.02%)</title><rect x="92.6993%" y="421" width="0.0224%" height="15" fill="rgb(216,140,21)"/><text x="92.9493%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_add (24 samples, 0.02%)</title><rect x="92.6993%" y="405" width="0.0224%" height="15" fill="rgb(234,122,30)"/><text x="92.9493%" y="415.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (7,798 samples, 7.29%)</title><rect x="85.4875%" y="661" width="7.2876%" height="15" fill="rgb(236,25,46)"/><text x="85.7375%" y="671.50">tokio::run..</text></g><g><title>tokio::runtime::task::harness::transition_to_complete (7,250 samples, 6.78%)</title><rect x="85.9996%" y="645" width="6.7754%" height="15" fill="rgb(217,52,54)"/><text x="86.2496%" y="655.50">tokio::ru..</text></g><g><title>tokio::runtime::task::waker::wake_by_ref (7,187 samples, 6.72%)</title><rect x="86.0585%" y="629" width="6.7166%" height="15" fill="rgb(222,29,26)"/><text x="86.3085%" y="639.50">tokio::ru..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_ref (7,187 samples, 6.72%)</title><rect x="86.0585%" y="613" width="6.7166%" height="15" fill="rgb(216,177,29)"/><text x="86.3085%" y="623.50">tokio::ru..</text></g><g><title>tokio::runtime::task::state::State::transition_to_notified (57 samples, 0.05%)</title><rect x="92.7218%" y="597" width="0.0533%" height="15" fill="rgb(247,136,51)"/><text x="92.9718%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (57 samples, 0.05%)</title><rect x="92.7218%" y="581" width="0.0533%" height="15" fill="rgb(231,47,47)"/><text x="92.9718%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_or (57 samples, 0.05%)</title><rect x="92.7218%" y="565" width="0.0533%" height="15" fill="rgb(211,192,36)"/><text x="92.9718%" y="575.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (76 samples, 0.07%)</title><rect x="92.8087%" y="581" width="0.0710%" height="15" fill="rgb(229,156,32)"/><text x="93.0587%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (75 samples, 0.07%)</title><rect x="92.8096%" y="565" width="0.0701%" height="15" fill="rgb(248,213,20)"/><text x="93.0596%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_add (75 samples, 0.07%)</title><rect x="92.8096%" y="549" width="0.0701%" height="15" fill="rgb(217,64,7)"/><text x="93.0596%" y="559.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (108 samples, 0.10%)</title><rect x="92.7919%" y="613" width="0.1009%" height="15" fill="rgb(232,142,8)"/><text x="93.0419%" y="623.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::bind::{{closure}} (97 samples, 0.09%)</title><rect x="92.8021%" y="597" width="0.0907%" height="15" fill="rgb(224,92,44)"/><text x="93.0521%" y="607.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (14 samples, 0.01%)</title><rect x="92.8797%" y="581" width="0.0131%" height="15" fill="rgb(214,169,17)"/><text x="93.1297%" y="591.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::bind_scheduler (119 samples, 0.11%)</title><rect x="92.7891%" y="629" width="0.1112%" height="15" fill="rgb(210,59,37)"/><text x="93.0391%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (167 samples, 0.16%)</title><rect x="92.9171%" y="597" width="0.1561%" height="15" fill="rgb(214,116,48)"/><text x="93.1671%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (167 samples, 0.16%)</title><rect x="92.9171%" y="581" width="0.1561%" height="15" fill="rgb(244,191,6)"/><text x="93.1671%" y="591.50"></text></g><g><title>tokio::runtime::task::harness::SchedulerView&lt;S&gt;::transition_to_running (316 samples, 0.30%)</title><rect x="92.7863%" y="645" width="0.2953%" height="15" fill="rgb(241,50,52)"/><text x="93.0363%" y="655.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_running (182 samples, 0.17%)</title><rect x="92.9115%" y="629" width="0.1701%" height="15" fill="rgb(236,75,39)"/><text x="93.1615%" y="639.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update (182 samples, 0.17%)</title><rect x="92.9115%" y="613" width="0.1701%" height="15" fill="rgb(236,99,0)"/><text x="93.1615%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::coop::RestoreOnPending&gt; (23 samples, 0.02%)</title><rect x="93.4787%" y="421" width="0.0215%" height="15" fill="rgb(207,202,15)"/><text x="93.7287%" y="431.50"></text></g><g><title>&lt;tokio::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (18 samples, 0.02%)</title><rect x="93.4834%" y="405" width="0.0168%" height="15" fill="rgb(233,207,14)"/><text x="93.7334%" y="415.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (83 samples, 0.08%)</title><rect x="93.5245%" y="357" width="0.0776%" height="15" fill="rgb(226,27,51)"/><text x="93.7745%" y="367.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (83 samples, 0.08%)</title><rect x="93.5245%" y="341" width="0.0776%" height="15" fill="rgb(206,104,42)"/><text x="93.7745%" y="351.50"></text></g><g><title>core::mem::replace (83 samples, 0.08%)</title><rect x="93.5245%" y="325" width="0.0776%" height="15" fill="rgb(212,225,4)"/><text x="93.7745%" y="335.50"></text></g><g><title>core::mem::swap (83 samples, 0.08%)</title><rect x="93.5245%" y="309" width="0.0776%" height="15" fill="rgb(233,96,42)"/><text x="93.7745%" y="319.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (83 samples, 0.08%)</title><rect x="93.5245%" y="293" width="0.0776%" height="15" fill="rgb(229,21,32)"/><text x="93.7745%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (83 samples, 0.08%)</title><rect x="93.5245%" y="277" width="0.0776%" height="15" fill="rgb(226,216,24)"/><text x="93.7745%" y="287.50"></text></g><g><title>tokio::coop::poll_proceed (112 samples, 0.10%)</title><rect x="93.5087%" y="421" width="0.1047%" height="15" fill="rgb(221,163,17)"/><text x="93.7587%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (112 samples, 0.10%)</title><rect x="93.5087%" y="405" width="0.1047%" height="15" fill="rgb(216,216,42)"/><text x="93.7587%" y="415.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (112 samples, 0.10%)</title><rect x="93.5087%" y="389" width="0.1047%" height="15" fill="rgb(240,118,7)"/><text x="93.7587%" y="399.50"></text></g><g><title>tokio::coop::poll_proceed::{{closure}} (101 samples, 0.09%)</title><rect x="93.5189%" y="373" width="0.0944%" height="15" fill="rgb(221,67,37)"/><text x="93.7689%" y="383.50"></text></g><g><title>tokio::coop::Budget::decrement (12 samples, 0.01%)</title><rect x="93.6021%" y="357" width="0.0112%" height="15" fill="rgb(241,32,44)"/><text x="93.8521%" y="367.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (177 samples, 0.17%)</title><rect x="93.4647%" y="437" width="0.1654%" height="15" fill="rgb(235,204,43)"/><text x="93.7147%" y="447.50"></text></g><g><title>[libc-2.31.so] (190 samples, 0.18%)</title><rect x="93.6348%" y="405" width="0.1776%" height="15" fill="rgb(213,116,10)"/><text x="93.8848%" y="415.50"></text></g><g><title>[libc-2.31.so] (40 samples, 0.04%)</title><rect x="93.7750%" y="389" width="0.0374%" height="15" fill="rgb(239,15,48)"/><text x="94.0250%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Core&lt;core::future::from_generator::GenFuture&lt;rho_runtime::interpreter::InterpreterContext&lt;rho_runtime::storage::coordinator::AsyncStore&gt;::spawn_evaluation&lt;model::rho_types::Match&gt;::{{closure}}&gt;,alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (29 samples, 0.03%)</title><rect x="93.8283%" y="341" width="0.0271%" height="15" fill="rgb(207,123,36)"/><text x="94.0783%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Scheduler&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (29 samples, 0.03%)</title><rect x="93.8283%" y="325" width="0.0271%" height="15" fill="rgb(209,103,30)"/><text x="94.0783%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::unsafe_cell::UnsafeCell&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt;&gt; (29 samples, 0.03%)</title><rect x="93.8283%" y="309" width="0.0271%" height="15" fill="rgb(238,100,19)"/><text x="94.0783%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt;&gt; (29 samples, 0.03%)</title><rect x="93.8283%" y="293" width="0.0271%" height="15" fill="rgb(244,30,14)"/><text x="94.0783%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (29 samples, 0.03%)</title><rect x="93.8283%" y="277" width="0.0271%" height="15" fill="rgb(249,174,6)"/><text x="94.0783%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt; (29 samples, 0.03%)</title><rect x="93.8283%" y="261" width="0.0271%" height="15" fill="rgb(235,213,41)"/><text x="94.0783%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.03%)</title><rect x="93.8283%" y="245" width="0.0271%" height="15" fill="rgb(213,118,6)"/><text x="94.0783%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (27 samples, 0.03%)</title><rect x="93.8301%" y="229" width="0.0252%" height="15" fill="rgb(235,44,51)"/><text x="94.0801%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_sub (27 samples, 0.03%)</title><rect x="93.8301%" y="213" width="0.0252%" height="15" fill="rgb(217,9,53)"/><text x="94.0801%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;tokio::runtime::task::core::Cell&lt;core::future::from_generator::GenFuture&lt;rho_runtime::interpreter::InterpreterContext&lt;rho_runtime::storage::coordinator::AsyncStore&gt;::spawn_evaluation&lt;model::rho_types::Match&gt;::{{closure}}&gt;,alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt;&gt; (46 samples, 0.04%)</title><rect x="93.8264%" y="373" width="0.0430%" height="15" fill="rgb(237,172,34)"/><text x="94.0764%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Cell&lt;core::future::from_generator::GenFuture&lt;rho_runtime::interpreter::InterpreterContext&lt;rho_runtime::storage::coordinator::AsyncStore&gt;::spawn_evaluation&lt;model::rho_types::Match&gt;::{{closure}}&gt;,alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (44 samples, 0.04%)</title><rect x="93.8283%" y="357" width="0.0411%" height="15" fill="rgb(206,206,11)"/><text x="94.0783%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Trailer&gt; (15 samples, 0.01%)</title><rect x="93.8554%" y="341" width="0.0140%" height="15" fill="rgb(214,149,29)"/><text x="94.1054%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::unsafe_cell::UnsafeCell&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="93.8554%" y="325" width="0.0140%" height="15" fill="rgb(208,123,3)"/><text x="94.1054%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="93.8554%" y="309" width="0.0140%" height="15" fill="rgb(229,126,4)"/><text x="94.1054%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt; (15 samples, 0.01%)</title><rect x="93.8554%" y="293" width="0.0140%" height="15" fill="rgb(222,92,36)"/><text x="94.1054%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (13 samples, 0.01%)</title><rect x="93.8572%" y="277" width="0.0121%" height="15" fill="rgb(216,39,41)"/><text x="94.1072%" y="287.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="93.8572%" y="261" width="0.0121%" height="15" fill="rgb(253,127,28)"/><text x="94.1072%" y="271.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (13 samples, 0.01%)</title><rect x="93.8572%" y="245" width="0.0121%" height="15" fill="rgb(249,152,51)"/><text x="94.1072%" y="255.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_reference (13 samples, 0.01%)</title><rect x="93.8572%" y="229" width="0.0121%" height="15" fill="rgb(209,123,42)"/><text x="94.1072%" y="239.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (13 samples, 0.01%)</title><rect x="93.8572%" y="213" width="0.0121%" height="15" fill="rgb(241,118,22)"/><text x="94.1072%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (13 samples, 0.01%)</title><rect x="93.8572%" y="197" width="0.0121%" height="15" fill="rgb(208,25,7)"/><text x="94.1072%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_sub (13 samples, 0.01%)</title><rect x="93.8572%" y="181" width="0.0121%" height="15" fill="rgb(243,144,39)"/><text x="94.1072%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Core&lt;core::future::from_generator::GenFuture&lt;rho_runtime::interpreter::InterpreterContext&lt;rho_runtime::storage::coordinator::AsyncStore&gt;::spawn_evaluation&lt;model::rho_types::Par&gt;::{{closure}}&gt;,alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (18 samples, 0.02%)</title><rect x="93.8713%" y="341" width="0.0168%" height="15" fill="rgb(250,50,5)"/><text x="94.1213%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Scheduler&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="93.8731%" y="325" width="0.0150%" height="15" fill="rgb(207,67,11)"/><text x="94.1231%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::unsafe_cell::UnsafeCell&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="93.8731%" y="309" width="0.0150%" height="15" fill="rgb(245,204,40)"/><text x="94.1231%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="93.8731%" y="293" width="0.0150%" height="15" fill="rgb(238,228,24)"/><text x="94.1231%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="93.8731%" y="277" width="0.0150%" height="15" fill="rgb(217,116,22)"/><text x="94.1231%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt; (16 samples, 0.01%)</title><rect x="93.8731%" y="261" width="0.0150%" height="15" fill="rgb(234,98,12)"/><text x="94.1231%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="93.8731%" y="245" width="0.0150%" height="15" fill="rgb(242,170,50)"/><text x="94.1231%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (16 samples, 0.01%)</title><rect x="93.8731%" y="229" width="0.0150%" height="15" fill="rgb(235,7,5)"/><text x="94.1231%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_sub (16 samples, 0.01%)</title><rect x="93.8731%" y="213" width="0.0150%" height="15" fill="rgb(241,114,28)"/><text x="94.1231%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;tokio::runtime::task::core::Cell&lt;core::future::from_generator::GenFuture&lt;rho_runtime::interpreter::InterpreterContext&lt;rho_runtime::storage::coordinator::AsyncStore&gt;::spawn_evaluation&lt;model::rho_types::Par&gt;::{{closure}}&gt;,alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt;&gt; (41 samples, 0.04%)</title><rect x="93.8694%" y="373" width="0.0383%" height="15" fill="rgb(246,112,42)"/><text x="94.1194%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Cell&lt;core::future::from_generator::GenFuture&lt;rho_runtime::interpreter::InterpreterContext&lt;rho_runtime::storage::coordinator::AsyncStore&gt;::spawn_evaluation&lt;model::rho_types::Par&gt;::{{closure}}&gt;,alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (39 samples, 0.04%)</title><rect x="93.8713%" y="357" width="0.0364%" height="15" fill="rgb(248,228,14)"/><text x="94.1213%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Trailer&gt; (21 samples, 0.02%)</title><rect x="93.8881%" y="341" width="0.0196%" height="15" fill="rgb(208,133,18)"/><text x="94.1381%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::unsafe_cell::UnsafeCell&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt;&gt; (21 samples, 0.02%)</title><rect x="93.8881%" y="325" width="0.0196%" height="15" fill="rgb(207,35,49)"/><text x="94.1381%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt;&gt; (21 samples, 0.02%)</title><rect x="93.8881%" y="309" width="0.0196%" height="15" fill="rgb(205,68,36)"/><text x="94.1381%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt; (21 samples, 0.02%)</title><rect x="93.8881%" y="293" width="0.0196%" height="15" fill="rgb(245,62,40)"/><text x="94.1381%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (21 samples, 0.02%)</title><rect x="93.8881%" y="277" width="0.0196%" height="15" fill="rgb(228,27,24)"/><text x="94.1381%" y="287.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (21 samples, 0.02%)</title><rect x="93.8881%" y="261" width="0.0196%" height="15" fill="rgb(253,19,12)"/><text x="94.1381%" y="271.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (21 samples, 0.02%)</title><rect x="93.8881%" y="245" width="0.0196%" height="15" fill="rgb(232,28,20)"/><text x="94.1381%" y="255.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_reference (21 samples, 0.02%)</title><rect x="93.8881%" y="229" width="0.0196%" height="15" fill="rgb(218,35,51)"/><text x="94.1381%" y="239.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (21 samples, 0.02%)</title><rect x="93.8881%" y="213" width="0.0196%" height="15" fill="rgb(212,90,40)"/><text x="94.1381%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (21 samples, 0.02%)</title><rect x="93.8881%" y="197" width="0.0196%" height="15" fill="rgb(220,172,12)"/><text x="94.1381%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_sub (21 samples, 0.02%)</title><rect x="93.8881%" y="181" width="0.0196%" height="15" fill="rgb(226,159,20)"/><text x="94.1381%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Core&lt;core::future::from_generator::GenFuture&lt;rho_runtime::interpreter::InterpreterContext&lt;rho_runtime::storage::coordinator::AsyncStore&gt;::spawn_evaluation&lt;model::rho_types::Send&gt;::{{closure}}&gt;,alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="93.9086%" y="341" width="0.0131%" height="15" fill="rgb(234,205,16)"/><text x="94.1586%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Scheduler&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="93.9105%" y="325" width="0.0112%" height="15" fill="rgb(207,9,39)"/><text x="94.1605%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::unsafe_cell::UnsafeCell&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="93.9105%" y="309" width="0.0112%" height="15" fill="rgb(249,143,15)"/><text x="94.1605%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="93.9105%" y="293" width="0.0112%" height="15" fill="rgb(253,133,29)"/><text x="94.1605%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="93.9105%" y="277" width="0.0112%" height="15" fill="rgb(221,187,0)"/><text x="94.1605%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt; (12 samples, 0.01%)</title><rect x="93.9105%" y="261" width="0.0112%" height="15" fill="rgb(205,204,26)"/><text x="94.1605%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="93.9105%" y="245" width="0.0112%" height="15" fill="rgb(224,68,54)"/><text x="94.1605%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (12 samples, 0.01%)</title><rect x="93.9105%" y="229" width="0.0112%" height="15" fill="rgb(209,67,4)"/><text x="94.1605%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_sub (12 samples, 0.01%)</title><rect x="93.9105%" y="213" width="0.0112%" height="15" fill="rgb(228,229,18)"/><text x="94.1605%" y="223.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::dealloc (115 samples, 0.11%)</title><rect x="93.8255%" y="405" width="0.1075%" height="15" fill="rgb(231,89,13)"/><text x="94.0755%" y="415.50"></text></g><g><title>core::mem::drop (114 samples, 0.11%)</title><rect x="93.8264%" y="389" width="0.1065%" height="15" fill="rgb(210,182,18)"/><text x="94.0764%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;tokio::runtime::task::core::Cell&lt;core::future::from_generator::GenFuture&lt;rho_runtime::interpreter::InterpreterContext&lt;rho_runtime::storage::coordinator::AsyncStore&gt;::spawn_evaluation&lt;model::rho_types::Send&gt;::{{closure}}&gt;,alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt;&gt; (27 samples, 0.03%)</title><rect x="93.9077%" y="373" width="0.0252%" height="15" fill="rgb(240,105,2)"/><text x="94.1577%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Cell&lt;core::future::from_generator::GenFuture&lt;rho_runtime::interpreter::InterpreterContext&lt;rho_runtime::storage::coordinator::AsyncStore&gt;::spawn_evaluation&lt;model::rho_types::Send&gt;::{{closure}}&gt;,alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;&gt; (26 samples, 0.02%)</title><rect x="93.9086%" y="357" width="0.0243%" height="15" fill="rgb(207,170,50)"/><text x="94.1586%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Trailer&gt; (12 samples, 0.01%)</title><rect x="93.9217%" y="341" width="0.0112%" height="15" fill="rgb(232,133,24)"/><text x="94.1717%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::unsafe_cell::UnsafeCell&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="93.9217%" y="325" width="0.0112%" height="15" fill="rgb(235,166,27)"/><text x="94.1717%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="93.9217%" y="309" width="0.0112%" height="15" fill="rgb(209,19,13)"/><text x="94.1717%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt; (12 samples, 0.01%)</title><rect x="93.9217%" y="293" width="0.0112%" height="15" fill="rgb(226,79,39)"/><text x="94.1717%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (12 samples, 0.01%)</title><rect x="93.9217%" y="277" width="0.0112%" height="15" fill="rgb(222,163,10)"/><text x="94.1717%" y="287.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="93.9217%" y="261" width="0.0112%" height="15" fill="rgb(214,44,19)"/><text x="94.1717%" y="271.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (12 samples, 0.01%)</title><rect x="93.9217%" y="245" width="0.0112%" height="15" fill="rgb(210,217,13)"/><text x="94.1717%" y="255.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_reference (12 samples, 0.01%)</title><rect x="93.9217%" y="229" width="0.0112%" height="15" fill="rgb(237,61,54)"/><text x="94.1717%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::join::JoinHandle&lt;core::result::Result&lt;(),model::rho_types::ExecutionError&gt;&gt;&gt; (380 samples, 0.36%)</title><rect x="93.6301%" y="437" width="0.3551%" height="15" fill="rgb(226,184,24)"/><text x="93.8801%" y="447.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::ops::drop::Drop&gt;::drop (380 samples, 0.36%)</title><rect x="93.6301%" y="421" width="0.3551%" height="15" fill="rgb(223,226,4)"/><text x="93.8801%" y="431.50"></text></g><g><title>tokio::runtime::task::state::State::drop_join_handle_fast (51 samples, 0.05%)</title><rect x="93.9376%" y="405" width="0.0477%" height="15" fill="rgb(210,26,41)"/><text x="94.1876%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (51 samples, 0.05%)</title><rect x="93.9376%" y="389" width="0.0477%" height="15" fill="rgb(220,221,6)"/><text x="94.1876%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (51 samples, 0.05%)</title><rect x="93.9376%" y="373" width="0.0477%" height="15" fill="rgb(225,89,49)"/><text x="94.1876%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (47 samples, 0.04%)</title><rect x="94.0198%" y="421" width="0.0439%" height="15" fill="rgb(218,70,45)"/><text x="94.2698%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (47 samples, 0.04%)</title><rect x="94.0198%" y="405" width="0.0439%" height="15" fill="rgb(238,166,21)"/><text x="94.2698%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (35 samples, 0.03%)</title><rect x="94.0638%" y="421" width="0.0327%" height="15" fill="rgb(224,141,44)"/><text x="94.3138%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_or (35 samples, 0.03%)</title><rect x="94.0638%" y="405" width="0.0327%" height="15" fill="rgb(230,12,49)"/><text x="94.3138%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (29 samples, 0.03%)</title><rect x="94.0965%" y="421" width="0.0271%" height="15" fill="rgb(212,174,12)"/><text x="94.3465%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (29 samples, 0.03%)</title><rect x="94.0965%" y="405" width="0.0271%" height="15" fill="rgb(246,67,9)"/><text x="94.3465%" y="415.50"></text></g><g><title>core::sync::atomic::fence (67 samples, 0.06%)</title><rect x="94.1236%" y="421" width="0.0626%" height="15" fill="rgb(239,35,23)"/><text x="94.3736%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (837 samples, 0.78%)</title><rect x="93.4133%" y="469" width="0.7822%" height="15" fill="rgb(211,167,0)"/><text x="93.6633%" y="479.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::evaludate::{{closure}} (833 samples, 0.78%)</title><rect x="93.4171%" y="453" width="0.7785%" height="15" fill="rgb(225,119,45)"/><text x="93.6671%" y="463.50"></text></g><g><title>crossbeam_queue::seg_queue::SegQueue&lt;T&gt;::pop (225 samples, 0.21%)</title><rect x="93.9853%" y="437" width="0.2103%" height="15" fill="rgb(210,162,6)"/><text x="94.2353%" y="447.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (908 samples, 0.85%)</title><rect x="93.3479%" y="533" width="0.8486%" height="15" fill="rgb(208,118,35)"/><text x="93.5979%" y="543.50"></text></g><g><title>rho_runtime::run::{{closure}}::{{closure}} (891 samples, 0.83%)</title><rect x="93.3638%" y="517" width="0.8327%" height="15" fill="rgb(239,4,53)"/><text x="93.6138%" y="527.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (862 samples, 0.81%)</title><rect x="93.3909%" y="501" width="0.8056%" height="15" fill="rgb(213,130,21)"/><text x="93.6409%" y="511.50"></text></g><g><title>rho_runtime::test::{{closure}} (862 samples, 0.81%)</title><rect x="93.3909%" y="485" width="0.8056%" height="15" fill="rgb(235,148,0)"/><text x="93.6409%" y="495.50"></text></g><g><title>[libc-2.31.so] (37 samples, 0.03%)</title><rect x="94.3544%" y="421" width="0.0346%" height="15" fill="rgb(244,224,18)"/><text x="94.6044%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (25 samples, 0.02%)</title><rect x="94.3890%" y="421" width="0.0234%" height="15" fill="rgb(211,214,4)"/><text x="94.6390%" y="431.50"></text></g><g><title>core::ptr::read (21 samples, 0.02%)</title><rect x="94.3927%" y="405" width="0.0196%" height="15" fill="rgb(206,119,25)"/><text x="94.6427%" y="415.50"></text></g><g><title>[libc-2.31.so] (20 samples, 0.02%)</title><rect x="94.3937%" y="389" width="0.0187%" height="15" fill="rgb(243,93,47)"/><text x="94.6437%" y="399.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (74 samples, 0.07%)</title><rect x="94.3460%" y="453" width="0.0692%" height="15" fill="rgb(224,194,6)"/><text x="94.5960%" y="463.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_par::&lt;impl rho_runtime::interpreter::reduce::AsyncEvaluator&lt;S&gt; for model::rho_types::Par&gt;::evaluate::{{closure}} (69 samples, 0.06%)</title><rect x="94.3507%" y="437" width="0.0645%" height="15" fill="rgb(243,229,6)"/><text x="94.6007%" y="447.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (77 samples, 0.07%)</title><rect x="94.3441%" y="469" width="0.0720%" height="15" fill="rgb(207,23,50)"/><text x="94.5941%" y="479.50"></text></g><g><title>[libc-2.31.so] (63 samples, 0.06%)</title><rect x="94.4161%" y="469" width="0.0589%" height="15" fill="rgb(253,192,32)"/><text x="94.6661%" y="479.50"></text></g><g><title>cfree (23 samples, 0.02%)</title><rect x="94.4787%" y="469" width="0.0215%" height="15" fill="rgb(213,21,6)"/><text x="94.7287%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;rho_runtime::interpreter::InterpreterContext&lt;rho_runtime::storage::coordinator::AsyncStore&gt;&gt;&gt; (47 samples, 0.04%)</title><rect x="94.5002%" y="469" width="0.0439%" height="15" fill="rgb(243,151,13)"/><text x="94.7502%" y="479.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (47 samples, 0.04%)</title><rect x="94.5002%" y="453" width="0.0439%" height="15" fill="rgb(233,165,41)"/><text x="94.7502%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (43 samples, 0.04%)</title><rect x="94.5039%" y="437" width="0.0402%" height="15" fill="rgb(246,176,45)"/><text x="94.7539%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_sub (43 samples, 0.04%)</title><rect x="94.5039%" y="421" width="0.0402%" height="15" fill="rgb(217,170,52)"/><text x="94.7539%" y="431.50"></text></g><g><title>[libc-2.31.so] (22 samples, 0.02%)</title><rect x="94.5469%" y="389" width="0.0206%" height="15" fill="rgb(214,203,54)"/><text x="94.7969%" y="399.50"></text></g><g><title>alloc::alloc::box_free (37 samples, 0.03%)</title><rect x="94.5460%" y="437" width="0.0346%" height="15" fill="rgb(248,215,49)"/><text x="94.7960%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (37 samples, 0.03%)</title><rect x="94.5460%" y="421" width="0.0346%" height="15" fill="rgb(208,46,10)"/><text x="94.7960%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (36 samples, 0.03%)</title><rect x="94.5469%" y="405" width="0.0336%" height="15" fill="rgb(254,5,31)"/><text x="94.7969%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),model::rho_types::ExecutionError&gt;+core::marker::Send&gt;&gt;&gt; (41 samples, 0.04%)</title><rect x="94.5441%" y="469" width="0.0383%" height="15" fill="rgb(222,104,33)"/><text x="94.7941%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),model::rho_types::ExecutionError&gt;+core::marker::Send&gt;&gt; (41 samples, 0.04%)</title><rect x="94.5441%" y="453" width="0.0383%" height="15" fill="rgb(248,49,16)"/><text x="94.7941%" y="463.50"></text></g><g><title>[libc-2.31.so] (33 samples, 0.03%)</title><rect x="94.6021%" y="373" width="0.0308%" height="15" fill="rgb(232,198,41)"/><text x="94.8521%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.02%)</title><rect x="94.6553%" y="341" width="0.0168%" height="15" fill="rgb(214,125,3)"/><text x="94.9053%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[model::rho_types::Expr]&gt; (18 samples, 0.02%)</title><rect x="94.6553%" y="325" width="0.0168%" height="15" fill="rgb(229,220,28)"/><text x="94.9053%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Expr&gt; (13 samples, 0.01%)</title><rect x="94.6600%" y="309" width="0.0121%" height="15" fill="rgb(222,64,37)"/><text x="94.9100%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;model::rho_types::expr::ExprInstance&gt;&gt; (13 samples, 0.01%)</title><rect x="94.6600%" y="293" width="0.0121%" height="15" fill="rgb(249,184,13)"/><text x="94.9100%" y="303.50"></text></g><g><title>[libc-2.31.so] (23 samples, 0.02%)</title><rect x="94.6722%" y="277" width="0.0215%" height="15" fill="rgb(252,176,6)"/><text x="94.9222%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (39 samples, 0.04%)</title><rect x="94.6722%" y="309" width="0.0364%" height="15" fill="rgb(228,153,7)"/><text x="94.9222%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (39 samples, 0.04%)</title><rect x="94.6722%" y="293" width="0.0364%" height="15" fill="rgb(242,193,5)"/><text x="94.9222%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Expr&gt;&gt; (58 samples, 0.05%)</title><rect x="94.6553%" y="357" width="0.0542%" height="15" fill="rgb(232,140,9)"/><text x="94.9053%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::Expr&gt;&gt; (40 samples, 0.04%)</title><rect x="94.6722%" y="341" width="0.0374%" height="15" fill="rgb(213,222,16)"/><text x="94.9222%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.04%)</title><rect x="94.6722%" y="325" width="0.0374%" height="15" fill="rgb(222,75,50)"/><text x="94.9222%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::New&gt;&gt; (13 samples, 0.01%)</title><rect x="94.7198%" y="357" width="0.0121%" height="15" fill="rgb(205,180,2)"/><text x="94.9698%" y="367.50"></text></g><g><title>[libc-2.31.so] (35 samples, 0.03%)</title><rect x="94.7479%" y="309" width="0.0327%" height="15" fill="rgb(216,34,7)"/><text x="94.9979%" y="319.50"></text></g><g><title>[libc-2.31.so] (18 samples, 0.02%)</title><rect x="94.7862%" y="245" width="0.0168%" height="15" fill="rgb(253,16,32)"/><text x="95.0362%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Expr&gt;&gt; (20 samples, 0.02%)</title><rect x="94.8133%" y="229" width="0.0187%" height="15" fill="rgb(208,97,28)"/><text x="95.0633%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (64 samples, 0.06%)</title><rect x="94.7852%" y="277" width="0.0598%" height="15" fill="rgb(225,92,11)"/><text x="95.0352%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;[model::rho_types::Par]&gt; (64 samples, 0.06%)</title><rect x="94.7852%" y="261" width="0.0598%" height="15" fill="rgb(243,38,12)"/><text x="95.0352%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Par&gt; (36 samples, 0.03%)</title><rect x="94.8114%" y="245" width="0.0336%" height="15" fill="rgb(208,139,16)"/><text x="95.0614%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Par&gt;&gt; (85 samples, 0.08%)</title><rect x="94.7852%" y="293" width="0.0794%" height="15" fill="rgb(227,24,9)"/><text x="95.0352%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::Par&gt;&gt; (21 samples, 0.02%)</title><rect x="94.8451%" y="277" width="0.0196%" height="15" fill="rgb(206,62,11)"/><text x="95.0951%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.02%)</title><rect x="94.8451%" y="261" width="0.0196%" height="15" fill="rgb(228,134,27)"/><text x="95.0951%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (21 samples, 0.02%)</title><rect x="94.8451%" y="245" width="0.0196%" height="15" fill="rgb(205,55,33)"/><text x="95.0951%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (21 samples, 0.02%)</title><rect x="94.8451%" y="229" width="0.0196%" height="15" fill="rgb(243,75,43)"/><text x="95.0951%" y="239.50"></text></g><g><title>[libc-2.31.so] (27 samples, 0.03%)</title><rect x="94.8778%" y="277" width="0.0252%" height="15" fill="rgb(223,27,42)"/><text x="95.1278%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.03%)</title><rect x="94.9170%" y="245" width="0.0336%" height="15" fill="rgb(232,189,33)"/><text x="95.1670%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;[model::rho_types::GUnforgeable]&gt; (36 samples, 0.03%)</title><rect x="94.9170%" y="229" width="0.0336%" height="15" fill="rgb(210,9,39)"/><text x="95.1670%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::GUnforgeable&gt; (36 samples, 0.03%)</title><rect x="94.9170%" y="213" width="0.0336%" height="15" fill="rgb(242,85,26)"/><text x="95.1670%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;model::rho_types::g_unforgeable::UnfInstance&gt;&gt; (36 samples, 0.03%)</title><rect x="94.9170%" y="197" width="0.0336%" height="15" fill="rgb(248,44,4)"/><text x="95.1670%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::g_unforgeable::UnfInstance&gt; (21 samples, 0.02%)</title><rect x="94.9310%" y="181" width="0.0196%" height="15" fill="rgb(250,96,46)"/><text x="95.1810%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::GPrivate&gt; (21 samples, 0.02%)</title><rect x="94.9310%" y="165" width="0.0196%" height="15" fill="rgb(229,116,26)"/><text x="95.1810%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (21 samples, 0.02%)</title><rect x="94.9310%" y="149" width="0.0196%" height="15" fill="rgb(246,94,34)"/><text x="95.1810%" y="159.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (21 samples, 0.02%)</title><rect x="94.9310%" y="133" width="0.0196%" height="15" fill="rgb(251,73,21)"/><text x="95.1810%" y="143.50"></text></g><g><title>bytes::bytes::shared_drop (17 samples, 0.02%)</title><rect x="94.9348%" y="117" width="0.0159%" height="15" fill="rgb(254,121,25)"/><text x="95.1848%" y="127.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (17 samples, 0.02%)</title><rect x="94.9348%" y="101" width="0.0159%" height="15" fill="rgb(215,161,49)"/><text x="95.1848%" y="111.50"></text></g><g><title>bytes::bytes::shared_drop::{{closure}} (17 samples, 0.02%)</title><rect x="94.9348%" y="85" width="0.0159%" height="15" fill="rgb(221,43,13)"/><text x="95.1848%" y="95.50"></text></g><g><title>bytes::bytes::release_shared (17 samples, 0.02%)</title><rect x="94.9348%" y="69" width="0.0159%" height="15" fill="rgb(249,5,37)"/><text x="95.1848%" y="79.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (16 samples, 0.01%)</title><rect x="94.9357%" y="53" width="0.0150%" height="15" fill="rgb(226,25,44)"/><text x="95.1857%" y="63.50"></text></g><g><title>core::sync::atomic::atomic_sub (16 samples, 0.01%)</title><rect x="94.9357%" y="37" width="0.0150%" height="15" fill="rgb(238,189,16)"/><text x="95.1857%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::GUnforgeable&gt;&gt; (47 samples, 0.04%)</title><rect x="94.9170%" y="261" width="0.0439%" height="15" fill="rgb(251,186,8)"/><text x="95.1670%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::GUnforgeable&gt;&gt; (11 samples, 0.01%)</title><rect x="94.9507%" y="245" width="0.0103%" height="15" fill="rgb(254,34,31)"/><text x="95.2007%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.01%)</title><rect x="94.9507%" y="229" width="0.0103%" height="15" fill="rgb(225,215,27)"/><text x="95.2007%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (246 samples, 0.23%)</title><rect x="94.7376%" y="341" width="0.2299%" height="15" fill="rgb(221,192,48)"/><text x="94.9876%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[model::rho_types::Send]&gt; (245 samples, 0.23%)</title><rect x="94.7385%" y="325" width="0.2290%" height="15" fill="rgb(219,137,20)"/><text x="94.9885%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Send&gt; (196 samples, 0.18%)</title><rect x="94.7843%" y="309" width="0.1832%" height="15" fill="rgb(219,84,11)"/><text x="95.0343%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;model::rho_types::Par&gt;&gt; (106 samples, 0.10%)</title><rect x="94.8684%" y="293" width="0.0991%" height="15" fill="rgb(224,10,23)"/><text x="95.1184%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Par&gt; (67 samples, 0.06%)</title><rect x="94.9049%" y="277" width="0.0626%" height="15" fill="rgb(248,22,39)"/><text x="95.1549%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (15 samples, 0.01%)</title><rect x="94.9684%" y="309" width="0.0140%" height="15" fill="rgb(212,154,20)"/><text x="95.2184%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (15 samples, 0.01%)</title><rect x="94.9684%" y="293" width="0.0140%" height="15" fill="rgb(236,199,50)"/><text x="95.2184%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Send&gt;&gt; (264 samples, 0.25%)</title><rect x="94.7376%" y="357" width="0.2467%" height="15" fill="rgb(211,9,17)"/><text x="94.9876%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::Send&gt;&gt; (18 samples, 0.02%)</title><rect x="94.9675%" y="341" width="0.0168%" height="15" fill="rgb(243,216,36)"/><text x="95.2175%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.02%)</title><rect x="94.9675%" y="325" width="0.0168%" height="15" fill="rgb(250,2,10)"/><text x="95.2175%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (432 samples, 0.40%)</title><rect x="94.5824%" y="437" width="0.4037%" height="15" fill="rgb(226,50,48)"/><text x="94.8324%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[model::rho_types::MatchCase]&gt; (431 samples, 0.40%)</title><rect x="94.5834%" y="421" width="0.4028%" height="15" fill="rgb(243,81,16)"/><text x="94.8334%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::MatchCase&gt; (430 samples, 0.40%)</title><rect x="94.5843%" y="405" width="0.4019%" height="15" fill="rgb(250,14,2)"/><text x="94.8343%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;model::rho_types::Par&gt;&gt; (430 samples, 0.40%)</title><rect x="94.5843%" y="389" width="0.4019%" height="15" fill="rgb(233,135,29)"/><text x="94.8343%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Par&gt; (366 samples, 0.34%)</title><rect x="94.6441%" y="373" width="0.3420%" height="15" fill="rgb(224,64,43)"/><text x="94.8941%" y="383.50"></text></g><g><title>[libc-2.31.so] (11 samples, 0.01%)</title><rect x="94.9880%" y="373" width="0.0103%" height="15" fill="rgb(238,84,13)"/><text x="95.2380%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::MatchCase&gt;&gt; (454 samples, 0.42%)</title><rect x="94.5824%" y="453" width="0.4243%" height="15" fill="rgb(253,48,26)"/><text x="94.8324%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::MatchCase&gt;&gt; (22 samples, 0.02%)</title><rect x="94.9862%" y="437" width="0.0206%" height="15" fill="rgb(205,223,31)"/><text x="95.2362%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.02%)</title><rect x="94.9862%" y="421" width="0.0206%" height="15" fill="rgb(221,41,32)"/><text x="95.2362%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (21 samples, 0.02%)</title><rect x="94.9871%" y="405" width="0.0196%" height="15" fill="rgb(213,158,31)"/><text x="95.2371%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (20 samples, 0.02%)</title><rect x="94.9880%" y="389" width="0.0187%" height="15" fill="rgb(245,126,43)"/><text x="95.2380%" y="399.50"></text></g><g><title>[libc-2.31.so] (16 samples, 0.01%)</title><rect x="95.0114%" y="437" width="0.0150%" height="15" fill="rgb(227,7,22)"/><text x="95.2614%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.02%)</title><rect x="95.0366%" y="405" width="0.0159%" height="15" fill="rgb(252,90,44)"/><text x="95.2866%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;[model::rho_types::Expr]&gt; (17 samples, 0.02%)</title><rect x="95.0366%" y="389" width="0.0159%" height="15" fill="rgb(253,91,0)"/><text x="95.2866%" y="399.50"></text></g><g><title>[libc-2.31.so] (12 samples, 0.01%)</title><rect x="95.0525%" y="341" width="0.0112%" height="15" fill="rgb(252,175,49)"/><text x="95.3025%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (17 samples, 0.02%)</title><rect x="95.0525%" y="373" width="0.0159%" height="15" fill="rgb(246,150,1)"/><text x="95.3025%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 0.02%)</title><rect x="95.0525%" y="357" width="0.0159%" height="15" fill="rgb(241,192,25)"/><text x="95.3025%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Expr&gt;&gt; (35 samples, 0.03%)</title><rect x="95.0366%" y="421" width="0.0327%" height="15" fill="rgb(239,187,11)"/><text x="95.2866%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::Expr&gt;&gt; (18 samples, 0.02%)</title><rect x="95.0525%" y="405" width="0.0168%" height="15" fill="rgb(218,202,51)"/><text x="95.3025%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.02%)</title><rect x="95.0525%" y="389" width="0.0168%" height="15" fill="rgb(225,176,8)"/><text x="95.3025%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Match&gt; (532 samples, 0.50%)</title><rect x="94.5824%" y="469" width="0.4972%" height="15" fill="rgb(219,122,41)"/><text x="94.8324%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;model::rho_types::Par&gt;&gt; (74 samples, 0.07%)</title><rect x="95.0105%" y="453" width="0.0692%" height="15" fill="rgb(248,140,20)"/><text x="95.2605%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Par&gt; (49 samples, 0.05%)</title><rect x="95.0338%" y="437" width="0.0458%" height="15" fill="rgb(245,41,37)"/><text x="95.2838%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (28 samples, 0.03%)</title><rect x="95.0862%" y="405" width="0.0262%" height="15" fill="rgb(235,82,39)"/><text x="95.3362%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (27 samples, 0.03%)</title><rect x="95.0871%" y="389" width="0.0252%" height="15" fill="rgb(230,108,42)"/><text x="95.3371%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Match&gt;&gt; (31 samples, 0.03%)</title><rect x="95.0852%" y="453" width="0.0290%" height="15" fill="rgb(215,150,50)"/><text x="95.3352%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::Match&gt;&gt; (30 samples, 0.03%)</title><rect x="95.0862%" y="437" width="0.0280%" height="15" fill="rgb(233,212,5)"/><text x="95.3362%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.03%)</title><rect x="95.0862%" y="421" width="0.0280%" height="15" fill="rgb(245,80,22)"/><text x="95.3362%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Par&gt; (49 samples, 0.05%)</title><rect x="95.0796%" y="469" width="0.0458%" height="15" fill="rgb(238,129,16)"/><text x="95.3296%" y="479.50"></text></g><g><title>[libc-2.31.so] (15 samples, 0.01%)</title><rect x="95.1273%" y="373" width="0.0140%" height="15" fill="rgb(240,19,0)"/><text x="95.3773%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Par&gt;&gt; (28 samples, 0.03%)</title><rect x="95.1254%" y="453" width="0.0262%" height="15" fill="rgb(232,42,35)"/><text x="95.3754%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::Par&gt;&gt; (26 samples, 0.02%)</title><rect x="95.1273%" y="437" width="0.0243%" height="15" fill="rgb(223,130,24)"/><text x="95.3773%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 0.02%)</title><rect x="95.1273%" y="421" width="0.0243%" height="15" fill="rgb(237,16,22)"/><text x="95.3773%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (26 samples, 0.02%)</title><rect x="95.1273%" y="405" width="0.0243%" height="15" fill="rgb(248,192,20)"/><text x="95.3773%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (26 samples, 0.02%)</title><rect x="95.1273%" y="389" width="0.0243%" height="15" fill="rgb(233,167,2)"/><text x="95.3773%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Send&gt; (31 samples, 0.03%)</title><rect x="95.1254%" y="469" width="0.0290%" height="15" fill="rgb(252,71,44)"/><text x="95.3754%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.02%)</title><rect x="95.1759%" y="373" width="0.0206%" height="15" fill="rgb(238,37,47)"/><text x="95.4259%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;[model::rho_types::Expr]&gt; (22 samples, 0.02%)</title><rect x="95.1759%" y="357" width="0.0206%" height="15" fill="rgb(214,202,54)"/><text x="95.4259%" y="367.50"></text></g><g><title>[libc-2.31.so] (89 samples, 0.08%)</title><rect x="95.1964%" y="309" width="0.0832%" height="15" fill="rgb(254,165,40)"/><text x="95.4464%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (100 samples, 0.09%)</title><rect x="95.1964%" y="341" width="0.0935%" height="15" fill="rgb(246,173,38)"/><text x="95.4464%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (100 samples, 0.09%)</title><rect x="95.1964%" y="325" width="0.0935%" height="15" fill="rgb(215,3,27)"/><text x="95.4464%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;model::rho_types::Expr&gt;&gt; (123 samples, 0.11%)</title><rect x="95.1759%" y="389" width="0.1149%" height="15" fill="rgb(239,169,51)"/><text x="95.4259%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;model::rho_types::Expr&gt;&gt; (101 samples, 0.09%)</title><rect x="95.1964%" y="373" width="0.0944%" height="15" fill="rgb(212,5,25)"/><text x="95.4464%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (101 samples, 0.09%)</title><rect x="95.1964%" y="357" width="0.0944%" height="15" fill="rgb(243,45,17)"/><text x="95.4464%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;rho_runtime::interpreter::reduce::environment::Env&gt; (175 samples, 0.16%)</title><rect x="95.1544%" y="469" width="0.1635%" height="15" fill="rgb(242,97,9)"/><text x="95.4044%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;smallvec::SmallVec&lt;[model::rho_types::Par: 6]&gt;&gt; (175 samples, 0.16%)</title><rect x="95.1544%" y="453" width="0.1635%" height="15" fill="rgb(228,71,31)"/><text x="95.4044%" y="463.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::drop::Drop&gt;::drop (175 samples, 0.16%)</title><rect x="95.1544%" y="437" width="0.1635%" height="15" fill="rgb(252,184,16)"/><text x="95.4044%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[model::rho_types::Par]&gt; (173 samples, 0.16%)</title><rect x="95.1563%" y="421" width="0.1617%" height="15" fill="rgb(236,169,46)"/><text x="95.4063%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;model::rho_types::Par&gt; (167 samples, 0.16%)</title><rect x="95.1619%" y="405" width="0.1561%" height="15" fill="rgb(207,17,47)"/><text x="95.4119%" y="415.50"></text></g><g><title>[libc-2.31.so] (11 samples, 0.01%)</title><rect x="95.3198%" y="437" width="0.0103%" height="15" fill="rgb(206,201,28)"/><text x="95.5698%" y="447.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_match::&lt;impl rho_runtime::interpreter::reduce::AsyncEvaluator&lt;S&gt; for model::rho_types::Match&gt;::evaluate (26 samples, 0.02%)</title><rect x="95.3179%" y="469" width="0.0243%" height="15" fill="rgb(224,184,23)"/><text x="95.5679%" y="479.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (26 samples, 0.02%)</title><rect x="95.3179%" y="453" width="0.0243%" height="15" fill="rgb(208,139,48)"/><text x="95.5679%" y="463.50"></text></g><g><title>alloc::alloc::exchange_malloc (13 samples, 0.01%)</title><rect x="95.3301%" y="437" width="0.0121%" height="15" fill="rgb(208,130,10)"/><text x="95.5801%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13 samples, 0.01%)</title><rect x="95.3301%" y="421" width="0.0121%" height="15" fill="rgb(211,213,45)"/><text x="95.5801%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 0.01%)</title><rect x="95.3301%" y="405" width="0.0121%" height="15" fill="rgb(235,100,30)"/><text x="95.5801%" y="415.50"></text></g><g><title>alloc::alloc::alloc (13 samples, 0.01%)</title><rect x="95.3301%" y="389" width="0.0121%" height="15" fill="rgb(206,144,31)"/><text x="95.5801%" y="399.50"></text></g><g><title>__libc_malloc (22 samples, 0.02%)</title><rect x="95.3432%" y="373" width="0.0206%" height="15" fill="rgb(224,200,26)"/><text x="95.5932%" y="383.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_par::&lt;impl rho_runtime::interpreter::reduce::AsyncEvaluator&lt;S&gt; for model::rho_types::Par&gt;::evaluate (25 samples, 0.02%)</title><rect x="95.3422%" y="469" width="0.0234%" height="15" fill="rgb(247,104,53)"/><text x="95.5922%" y="479.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (25 samples, 0.02%)</title><rect x="95.3422%" y="453" width="0.0234%" height="15" fill="rgb(220,14,17)"/><text x="95.5922%" y="463.50"></text></g><g><title>alloc::alloc::exchange_malloc (24 samples, 0.02%)</title><rect x="95.3432%" y="437" width="0.0224%" height="15" fill="rgb(230,140,40)"/><text x="95.5932%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (24 samples, 0.02%)</title><rect x="95.3432%" y="421" width="0.0224%" height="15" fill="rgb(229,2,41)"/><text x="95.5932%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (24 samples, 0.02%)</title><rect x="95.3432%" y="405" width="0.0224%" height="15" fill="rgb(232,89,16)"/><text x="95.5932%" y="415.50"></text></g><g><title>alloc::alloc::alloc (24 samples, 0.02%)</title><rect x="95.3432%" y="389" width="0.0224%" height="15" fill="rgb(247,59,52)"/><text x="95.5932%" y="399.50"></text></g><g><title>[libc-2.31.so] (27 samples, 0.03%)</title><rect x="95.3693%" y="437" width="0.0252%" height="15" fill="rgb(226,110,21)"/><text x="95.6193%" y="447.50"></text></g><g><title>__libc_malloc (17 samples, 0.02%)</title><rect x="95.3946%" y="373" width="0.0159%" height="15" fill="rgb(224,176,43)"/><text x="95.6446%" y="383.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1,300 samples, 1.21%)</title><rect x="94.1993%" y="533" width="1.2149%" height="15" fill="rgb(221,73,6)"/><text x="94.4493%" y="543.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (1,264 samples, 1.18%)</title><rect x="94.2329%" y="517" width="1.1813%" height="15" fill="rgb(232,78,19)"/><text x="94.4829%" y="527.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,254 samples, 1.17%)</title><rect x="94.2423%" y="501" width="1.1719%" height="15" fill="rgb(233,112,48)"/><text x="94.4923%" y="511.50"></text></g><g><title>rho_runtime::interpreter::InterpreterContext&lt;S&gt;::spawn_evaluation::{{closure}} (1,244 samples, 1.16%)</title><rect x="94.2516%" y="485" width="1.1626%" height="15" fill="rgb(243,131,47)"/><text x="94.5016%" y="495.50"></text></g><g><title>rho_runtime::interpreter::reduce::eval_send::&lt;impl rho_runtime::interpreter::reduce::AsyncEvaluator&lt;S&gt; for model::rho_types::Send&gt;::evaluate (52 samples, 0.05%)</title><rect x="95.3656%" y="469" width="0.0486%" height="15" fill="rgb(226,51,1)"/><text x="95.6156%" y="479.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (52 samples, 0.05%)</title><rect x="95.3656%" y="453" width="0.0486%" height="15" fill="rgb(247,58,7)"/><text x="95.6156%" y="463.50"></text></g><g><title>alloc::alloc::exchange_malloc (21 samples, 0.02%)</title><rect x="95.3946%" y="437" width="0.0196%" height="15" fill="rgb(209,7,32)"/><text x="95.6446%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (21 samples, 0.02%)</title><rect x="95.3946%" y="421" width="0.0196%" height="15" fill="rgb(209,39,41)"/><text x="95.6446%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (21 samples, 0.02%)</title><rect x="95.3946%" y="405" width="0.0196%" height="15" fill="rgb(226,182,46)"/><text x="95.6446%" y="415.50"></text></g><g><title>alloc::alloc::alloc (21 samples, 0.02%)</title><rect x="95.3946%" y="389" width="0.0196%" height="15" fill="rgb(230,219,10)"/><text x="95.6446%" y="399.50"></text></g><g><title>[libc-2.31.so] (262 samples, 0.24%)</title><rect x="95.4151%" y="469" width="0.2449%" height="15" fill="rgb(227,175,30)"/><text x="95.6651%" y="479.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2,550 samples, 2.38%)</title><rect x="93.2909%" y="581" width="2.3831%" height="15" fill="rgb(217,2,50)"/><text x="93.5409%" y="591.50">&lt;s..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (2,550 samples, 2.38%)</title><rect x="93.2909%" y="565" width="2.3831%" height="15" fill="rgb(229,160,0)"/><text x="93.5409%" y="575.50">to..</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (2,543 samples, 2.38%)</title><rect x="93.2974%" y="549" width="2.3765%" height="15" fill="rgb(207,78,37)"/><text x="93.5474%" y="559.50">to..</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::drop_future_or_output (278 samples, 0.26%)</title><rect x="95.4142%" y="533" width="0.2598%" height="15" fill="rgb(225,57,0)"/><text x="95.6642%" y="543.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::set_stage (278 samples, 0.26%)</title><rect x="95.4142%" y="517" width="0.2598%" height="15" fill="rgb(232,154,2)"/><text x="95.6642%" y="527.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (278 samples, 0.26%)</title><rect x="95.4142%" y="501" width="0.2598%" height="15" fill="rgb(241,212,25)"/><text x="95.6642%" y="511.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::set_stage::{{closure}} (278 samples, 0.26%)</title><rect x="95.4142%" y="485" width="0.2598%" height="15" fill="rgb(226,69,20)"/><text x="95.6642%" y="495.50"></text></g><g><title>std::panic::catch_unwind (2,564 samples, 2.40%)</title><rect x="93.2909%" y="629" width="2.3962%" height="15" fill="rgb(247,184,54)"/><text x="93.5409%" y="639.50">st..</text></g><g><title>std::panicking::try (2,564 samples, 2.40%)</title><rect x="93.2909%" y="613" width="2.3962%" height="15" fill="rgb(210,145,0)"/><text x="93.5409%" y="623.50">st..</text></g><g><title>std::panicking::try::do_call (2,564 samples, 2.40%)</title><rect x="93.2909%" y="597" width="2.3962%" height="15" fill="rgb(253,82,12)"/><text x="93.5409%" y="607.50">st..</text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (14 samples, 0.01%)</title><rect x="95.6740%" y="581" width="0.0131%" height="15" fill="rgb(245,42,11)"/><text x="95.9240%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (48 samples, 0.04%)</title><rect x="95.6992%" y="597" width="0.0449%" height="15" fill="rgb(219,147,32)"/><text x="95.9492%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (48 samples, 0.04%)</title><rect x="95.6992%" y="581" width="0.0449%" height="15" fill="rgb(246,12,7)"/><text x="95.9492%" y="591.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (3,187 samples, 2.98%)</title><rect x="92.7750%" y="661" width="2.9784%" height="15" fill="rgb(243,50,9)"/><text x="93.0250%" y="671.50">tok..</text></g><g><title>tokio::runtime::task::harness::poll_future (2,859 samples, 2.67%)</title><rect x="93.0816%" y="645" width="2.6719%" height="15" fill="rgb(219,149,6)"/><text x="93.3316%" y="655.50">to..</text></g><g><title>tokio::runtime::task::state::State::transition_to_idle (65 samples, 0.06%)</title><rect x="95.6927%" y="629" width="0.0607%" height="15" fill="rgb(241,51,42)"/><text x="95.9427%" y="639.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update (65 samples, 0.06%)</title><rect x="95.6927%" y="613" width="0.0607%" height="15" fill="rgb(226,128,27)"/><text x="95.9427%" y="623.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (11,143 samples, 10.41%)</title><rect x="85.3426%" y="677" width="10.4136%" height="15" fill="rgb(244,144,4)"/><text x="85.5926%" y="687.50">tokio::runtime:..</text></g><g><title>tokio::coop::budget (11,466 samples, 10.72%)</title><rect x="85.0520%" y="805" width="10.7155%" height="15" fill="rgb(221,4,13)"/><text x="85.3020%" y="815.50">tokio::coop::bud..</text></g><g><title>tokio::coop::with_budget (11,466 samples, 10.72%)</title><rect x="85.0520%" y="789" width="10.7155%" height="15" fill="rgb(208,170,28)"/><text x="85.3020%" y="799.50">tokio::coop::wit..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (11,462 samples, 10.71%)</title><rect x="85.0557%" y="773" width="10.7117%" height="15" fill="rgb(226,131,13)"/><text x="85.3057%" y="783.50">std::thread::loc..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (11,404 samples, 10.66%)</title><rect x="85.1099%" y="757" width="10.6575%" height="15" fill="rgb(215,72,41)"/><text x="85.3599%" y="767.50">std::thread::loc..</text></g><g><title>tokio::coop::with_budget::{{closure}} (11,386 samples, 10.64%)</title><rect x="85.1267%" y="741" width="10.6407%" height="15" fill="rgb(243,108,20)"/><text x="85.3767%" y="751.50">tokio::coop::wit..</text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (11,377 samples, 10.63%)</title><rect x="85.1351%" y="725" width="10.6323%" height="15" fill="rgb(230,189,17)"/><text x="85.3851%" y="735.50">tokio::runtime::..</text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (11,161 samples, 10.43%)</title><rect x="85.3370%" y="709" width="10.4305%" height="15" fill="rgb(220,50,17)"/><text x="85.5870%" y="719.50">tokio::runtime:..</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (11,161 samples, 10.43%)</title><rect x="85.3370%" y="693" width="10.4305%" height="15" fill="rgb(248,152,48)"/><text x="85.5870%" y="703.50">tokio::runtime:..</text></g><g><title>tokio::runtime::task::raw::poll (12 samples, 0.01%)</title><rect x="95.7562%" y="677" width="0.0112%" height="15" fill="rgb(244,91,11)"/><text x="96.0062%" y="687.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::transition_worker_from_searching (19 samples, 0.02%)</title><rect x="95.7796%" y="773" width="0.0178%" height="15" fill="rgb(220,157,5)"/><text x="96.0296%" y="783.50"></text></g><g><title>tokio::runtime::thread_pool::idle::State::dec_num_searching (19 samples, 0.02%)</title><rect x="95.7796%" y="757" width="0.0178%" height="15" fill="rgb(253,137,8)"/><text x="96.0296%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (19 samples, 0.02%)</title><rect x="95.7796%" y="741" width="0.0178%" height="15" fill="rgb(217,137,51)"/><text x="96.0296%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_sub (19 samples, 0.02%)</title><rect x="95.7796%" y="725" width="0.0178%" height="15" fill="rgb(218,209,53)"/><text x="96.0296%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (69 samples, 0.06%)</title><rect x="95.8160%" y="725" width="0.0645%" height="15" fill="rgb(249,137,25)"/><text x="96.0660%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_swap (69 samples, 0.06%)</title><rect x="95.8160%" y="709" width="0.0645%" height="15" fill="rgb(239,155,26)"/><text x="96.0660%" y="719.50"></text></g><g><title>core::mem::drop (18 samples, 0.02%)</title><rect x="95.8805%" y="709" width="0.0168%" height="15" fill="rgb(227,85,46)"/><text x="96.1305%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,()&gt;&gt; (18 samples, 0.02%)</title><rect x="95.8805%" y="693" width="0.0168%" height="15" fill="rgb(251,107,43)"/><text x="96.1305%" y="703.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.02%)</title><rect x="95.8805%" y="677" width="0.0168%" height="15" fill="rgb(234,170,33)"/><text x="96.1305%" y="687.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (18 samples, 0.02%)</title><rect x="95.8805%" y="661" width="0.0168%" height="15" fill="rgb(206,29,35)"/><text x="96.1305%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (16 samples, 0.01%)</title><rect x="95.8824%" y="645" width="0.0150%" height="15" fill="rgb(227,138,25)"/><text x="96.1324%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (16 samples, 0.01%)</title><rect x="95.8824%" y="629" width="0.0150%" height="15" fill="rgb(249,131,35)"/><text x="96.1324%" y="639.50"></text></g><g><title>&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (123 samples, 0.11%)</title><rect x="95.8011%" y="757" width="0.1149%" height="15" fill="rgb(239,6,40)"/><text x="96.0511%" y="767.50"></text></g><g><title>tokio::runtime::park::Inner::unpark (119 samples, 0.11%)</title><rect x="95.8048%" y="741" width="0.1112%" height="15" fill="rgb(246,136,47)"/><text x="96.0548%" y="751.50"></text></g><g><title>tokio::runtime::park::Inner::unpark_condvar (38 samples, 0.04%)</title><rect x="95.8805%" y="725" width="0.0355%" height="15" fill="rgb(253,58,26)"/><text x="96.1305%" y="735.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (15 samples, 0.01%)</title><rect x="95.9020%" y="709" width="0.0140%" height="15" fill="rgb(237,141,10)"/><text x="96.1520%" y="719.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (15 samples, 0.01%)</title><rect x="95.9020%" y="693" width="0.0140%" height="15" fill="rgb(234,156,12)"/><text x="96.1520%" y="703.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (15 samples, 0.01%)</title><rect x="95.9020%" y="677" width="0.0140%" height="15" fill="rgb(243,224,36)"/><text x="96.1520%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (15 samples, 0.01%)</title><rect x="95.9020%" y="661" width="0.0140%" height="15" fill="rgb(205,229,51)"/><text x="96.1520%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (15 samples, 0.01%)</title><rect x="95.9020%" y="645" width="0.0140%" height="15" fill="rgb(223,189,4)"/><text x="96.1520%" y="655.50"></text></g><g><title>std::time::Instant::now (19 samples, 0.02%)</title><rect x="95.9319%" y="709" width="0.0178%" height="15" fill="rgb(249,167,54)"/><text x="96.1819%" y="719.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (19 samples, 0.02%)</title><rect x="95.9319%" y="693" width="0.0178%" height="15" fill="rgb(218,34,28)"/><text x="96.1819%" y="703.50"></text></g><g><title>std::sys::unix::time::inner::now (19 samples, 0.02%)</title><rect x="95.9319%" y="677" width="0.0178%" height="15" fill="rgb(232,109,42)"/><text x="96.1819%" y="687.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (19 samples, 0.02%)</title><rect x="95.9319%" y="661" width="0.0178%" height="15" fill="rgb(248,214,46)"/><text x="96.1819%" y="671.50"></text></g><g><title>parking_lot_core::parking_lot::park (19 samples, 0.02%)</title><rect x="95.9319%" y="645" width="0.0178%" height="15" fill="rgb(244,216,40)"/><text x="96.1819%" y="655.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (19 samples, 0.02%)</title><rect x="95.9319%" y="629" width="0.0178%" height="15" fill="rgb(231,226,31)"/><text x="96.1819%" y="639.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (19 samples, 0.02%)</title><rect x="95.9319%" y="613" width="0.0178%" height="15" fill="rgb(238,38,43)"/><text x="96.1819%" y="623.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (19 samples, 0.02%)</title><rect x="95.9319%" y="597" width="0.0178%" height="15" fill="rgb(208,88,43)"/><text x="96.1819%" y="607.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (19 samples, 0.02%)</title><rect x="95.9319%" y="581" width="0.0178%" height="15" fill="rgb(205,136,37)"/><text x="96.1819%" y="591.50"></text></g><g><title>syscall (19 samples, 0.02%)</title><rect x="95.9319%" y="565" width="0.0178%" height="15" fill="rgb(237,34,14)"/><text x="96.1819%" y="575.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="95.9319%" y="549" width="0.0178%" height="15" fill="rgb(236,193,44)"/><text x="96.1819%" y="559.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (2,944 samples, 2.75%)</title><rect x="95.9282%" y="725" width="2.7513%" height="15" fill="rgb(231,48,10)"/><text x="96.1782%" y="735.50">&lt;p..</text></g><g><title>syscall (2,921 samples, 2.73%)</title><rect x="95.9497%" y="709" width="2.7298%" height="15" fill="rgb(213,141,34)"/><text x="96.1997%" y="719.50">sy..</text></g><g><title>[unknown] (2,886 samples, 2.70%)</title><rect x="95.9824%" y="693" width="2.6971%" height="15" fill="rgb(249,130,34)"/><text x="96.2324%" y="703.50">[u..</text></g><g><title>[unknown] (2,830 samples, 2.64%)</title><rect x="96.0347%" y="677" width="2.6448%" height="15" fill="rgb(219,42,41)"/><text x="96.2847%" y="687.50">[u..</text></g><g><title>[unknown] (2,811 samples, 2.63%)</title><rect x="96.0525%" y="661" width="2.6270%" height="15" fill="rgb(224,100,54)"/><text x="96.3025%" y="671.50">[u..</text></g><g><title>[unknown] (2,782 samples, 2.60%)</title><rect x="96.0796%" y="645" width="2.5999%" height="15" fill="rgb(229,200,27)"/><text x="96.3296%" y="655.50">[u..</text></g><g><title>[unknown] (2,752 samples, 2.57%)</title><rect x="96.1076%" y="629" width="2.5719%" height="15" fill="rgb(217,118,10)"/><text x="96.3576%" y="639.50">[u..</text></g><g><title>[unknown] (2,356 samples, 2.20%)</title><rect x="96.4777%" y="613" width="2.2018%" height="15" fill="rgb(206,22,3)"/><text x="96.7277%" y="623.50">[..</text></g><g><title>[unknown] (2,174 samples, 2.03%)</title><rect x="96.6478%" y="597" width="2.0317%" height="15" fill="rgb(232,163,46)"/><text x="96.8978%" y="607.50">[..</text></g><g><title>[unknown] (1,880 samples, 1.76%)</title><rect x="96.9225%" y="581" width="1.7569%" height="15" fill="rgb(206,95,13)"/><text x="97.1725%" y="591.50"></text></g><g><title>[unknown] (1,472 samples, 1.38%)</title><rect x="97.3038%" y="565" width="1.3756%" height="15" fill="rgb(253,154,18)"/><text x="97.5538%" y="575.50"></text></g><g><title>[unknown] (1,130 samples, 1.06%)</title><rect x="97.6235%" y="549" width="1.0560%" height="15" fill="rgb(219,32,23)"/><text x="97.8735%" y="559.50"></text></g><g><title>[unknown] (655 samples, 0.61%)</title><rect x="98.0674%" y="533" width="0.6121%" height="15" fill="rgb(230,191,45)"/><text x="98.3174%" y="543.50"></text></g><g><title>[unknown] (201 samples, 0.19%)</title><rect x="98.4916%" y="517" width="0.1878%" height="15" fill="rgb(229,64,36)"/><text x="98.7416%" y="527.50"></text></g><g><title>[unknown] (54 samples, 0.05%)</title><rect x="98.6290%" y="501" width="0.0505%" height="15" fill="rgb(205,129,25)"/><text x="98.8790%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (35 samples, 0.03%)</title><rect x="98.6870%" y="725" width="0.0327%" height="15" fill="rgb(254,112,7)"/><text x="98.9370%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_load (35 samples, 0.03%)</title><rect x="98.6870%" y="709" width="0.0327%" height="15" fill="rgb(226,53,48)"/><text x="98.9370%" y="719.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::should_timeout (49 samples, 0.05%)</title><rect x="98.7197%" y="725" width="0.0458%" height="15" fill="rgb(214,153,38)"/><text x="98.9697%" y="735.50"></text></g><g><title>std::time::Instant::now (44 samples, 0.04%)</title><rect x="98.7243%" y="709" width="0.0411%" height="15" fill="rgb(243,101,7)"/><text x="98.9743%" y="719.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (44 samples, 0.04%)</title><rect x="98.7243%" y="693" width="0.0411%" height="15" fill="rgb(240,140,22)"/><text x="98.9743%" y="703.50"></text></g><g><title>std::sys::unix::time::inner::now (44 samples, 0.04%)</title><rect x="98.7243%" y="677" width="0.0411%" height="15" fill="rgb(235,114,2)"/><text x="98.9743%" y="687.50"></text></g><g><title>__clock_gettime (44 samples, 0.04%)</title><rect x="98.7243%" y="661" width="0.0411%" height="15" fill="rgb(242,59,12)"/><text x="98.9743%" y="671.50"></text></g><g><title>__vdso_clock_gettime (39 samples, 0.04%)</title><rect x="98.7290%" y="645" width="0.0364%" height="15" fill="rgb(252,134,9)"/><text x="98.9790%" y="655.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (65 samples, 0.06%)</title><rect x="98.7655%" y="725" width="0.0607%" height="15" fill="rgb(236,4,44)"/><text x="99.0155%" y="735.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (57 samples, 0.05%)</title><rect x="98.7729%" y="709" width="0.0533%" height="15" fill="rgb(254,172,41)"/><text x="99.0229%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (55 samples, 0.05%)</title><rect x="98.7748%" y="693" width="0.0514%" height="15" fill="rgb(244,63,20)"/><text x="99.0248%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (55 samples, 0.05%)</title><rect x="98.7748%" y="677" width="0.0514%" height="15" fill="rgb(250,73,31)"/><text x="99.0248%" y="687.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (3,176 samples, 2.97%)</title><rect x="95.9160%" y="757" width="2.9681%" height="15" fill="rgb(241,38,36)"/><text x="96.1660%" y="767.50">par..</text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (3,174 samples, 2.97%)</title><rect x="95.9179%" y="741" width="2.9662%" height="15" fill="rgb(245,211,2)"/><text x="96.1679%" y="751.50">par..</text></g><g><title>parking_lot_core::parking_lot::unlock_bucket_pair (62 samples, 0.06%)</title><rect x="98.8262%" y="725" width="0.0579%" height="15" fill="rgb(206,120,28)"/><text x="99.0762%" y="735.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::unlock (62 samples, 0.06%)</title><rect x="98.8262%" y="709" width="0.0579%" height="15" fill="rgb(211,59,34)"/><text x="99.0762%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (61 samples, 0.06%)</title><rect x="98.8271%" y="693" width="0.0570%" height="15" fill="rgb(233,168,5)"/><text x="99.0771%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_sub (61 samples, 0.06%)</title><rect x="98.8271%" y="677" width="0.0570%" height="15" fill="rgb(234,33,13)"/><text x="99.0771%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,alloc::vec::Vec&lt;usize&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="98.8879%" y="741" width="0.0150%" height="15" fill="rgb(231,150,26)"/><text x="99.1379%" y="751.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="98.8879%" y="725" width="0.0150%" height="15" fill="rgb(217,191,4)"/><text x="99.1379%" y="735.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (16 samples, 0.01%)</title><rect x="98.8879%" y="709" width="0.0150%" height="15" fill="rgb(246,198,38)"/><text x="99.1379%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (15 samples, 0.01%)</title><rect x="98.8888%" y="693" width="0.0140%" height="15" fill="rgb(245,64,37)"/><text x="99.1388%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (15 samples, 0.01%)</title><rect x="98.8888%" y="677" width="0.0140%" height="15" fill="rgb(250,30,36)"/><text x="99.1388%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (67 samples, 0.06%)</title><rect x="98.9141%" y="725" width="0.0626%" height="15" fill="rgb(217,86,53)"/><text x="99.1641%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_add (67 samples, 0.06%)</title><rect x="98.9141%" y="709" width="0.0626%" height="15" fill="rgb(228,157,16)"/><text x="99.1641%" y="719.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::notify_should_wakeup (70 samples, 0.07%)</title><rect x="98.9122%" y="741" width="0.0654%" height="15" fill="rgb(217,59,31)"/><text x="99.1622%" y="751.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (14,938 samples, 13.96%)</title><rect x="85.0305%" y="821" width="13.9602%" height="15" fill="rgb(237,138,41)"/><text x="85.2805%" y="831.50">tokio::runtime::threa..</text></g><g><title>tokio::runtime::thread_pool::worker::Core::transition_from_searching (3,449 samples, 3.22%)</title><rect x="95.7674%" y="805" width="3.2232%" height="15" fill="rgb(227,91,49)"/><text x="96.0174%" y="815.50">tok..</text></g><g><title>tokio::runtime::thread_pool::worker::Shared::transition_worker_from_searching (3,436 samples, 3.21%)</title><rect x="95.7796%" y="789" width="3.2111%" height="15" fill="rgb(247,21,44)"/><text x="96.0296%" y="799.50">tok..</text></g><g><title>tokio::runtime::thread_pool::worker::Shared::notify_parked (3,417 samples, 3.19%)</title><rect x="95.7974%" y="773" width="3.1933%" height="15" fill="rgb(219,210,51)"/><text x="96.0474%" y="783.50">tok..</text></g><g><title>tokio::runtime::thread_pool::idle::Idle::worker_to_notify (114 samples, 0.11%)</title><rect x="98.8842%" y="757" width="0.1065%" height="15" fill="rgb(209,140,6)"/><text x="99.1342%" y="767.50"></text></g><g><title>tokio::runtime::thread_pool::idle::State::unpark_one (14 samples, 0.01%)</title><rect x="98.9776%" y="741" width="0.0131%" height="15" fill="rgb(221,188,24)"/><text x="99.2276%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (14 samples, 0.01%)</title><rect x="98.9776%" y="725" width="0.0131%" height="15" fill="rgb(232,154,20)"/><text x="99.2276%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_add (14 samples, 0.01%)</title><rect x="98.9776%" y="709" width="0.0131%" height="15" fill="rgb(244,137,50)"/><text x="99.2276%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::queue::Pointers&gt;&gt; (61 samples, 0.06%)</title><rect x="99.1327%" y="757" width="0.0570%" height="15" fill="rgb(225,185,43)"/><text x="99.3827%" y="767.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (61 samples, 0.06%)</title><rect x="99.1327%" y="741" width="0.0570%" height="15" fill="rgb(213,205,38)"/><text x="99.3827%" y="751.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (61 samples, 0.06%)</title><rect x="99.1327%" y="725" width="0.0570%" height="15" fill="rgb(236,73,12)"/><text x="99.3827%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (61 samples, 0.06%)</title><rect x="99.1327%" y="709" width="0.0570%" height="15" fill="rgb(235,219,13)"/><text x="99.3827%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (61 samples, 0.06%)</title><rect x="99.1327%" y="693" width="0.0570%" height="15" fill="rgb(218,59,36)"/><text x="99.3827%" y="703.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (20 samples, 0.02%)</title><rect x="99.1897%" y="757" width="0.0187%" height="15" fill="rgb(205,110,39)"/><text x="99.4397%" y="767.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (20 samples, 0.02%)</title><rect x="99.1897%" y="741" width="0.0187%" height="15" fill="rgb(218,206,42)"/><text x="99.4397%" y="751.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (20 samples, 0.02%)</title><rect x="99.1897%" y="725" width="0.0187%" height="15" fill="rgb(248,125,24)"/><text x="99.4397%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (18 samples, 0.02%)</title><rect x="99.1916%" y="709" width="0.0168%" height="15" fill="rgb(242,28,27)"/><text x="99.4416%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (18 samples, 0.02%)</title><rect x="99.1916%" y="693" width="0.0168%" height="15" fill="rgb(216,228,15)"/><text x="99.4416%" y="703.50"></text></g><g><title>tokio::runtime::queue::Inject&lt;T&gt;::is_empty (50 samples, 0.05%)</title><rect x="99.2084%" y="757" width="0.0467%" height="15" fill="rgb(235,116,46)"/><text x="99.4584%" y="767.50"></text></g><g><title>tokio::runtime::queue::Inject&lt;T&gt;::len (50 samples, 0.05%)</title><rect x="99.2084%" y="741" width="0.0467%" height="15" fill="rgb(224,18,32)"/><text x="99.4584%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (50 samples, 0.05%)</title><rect x="99.2084%" y="725" width="0.0467%" height="15" fill="rgb(252,5,12)"/><text x="99.4584%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_load (50 samples, 0.05%)</title><rect x="99.2084%" y="709" width="0.0467%" height="15" fill="rgb(251,36,5)"/><text x="99.4584%" y="719.50"></text></g><g><title>tokio::runtime::queue::Inject&lt;T&gt;::pop (138 samples, 0.13%)</title><rect x="99.1281%" y="773" width="0.1290%" height="15" fill="rgb(217,53,14)"/><text x="99.3781%" y="783.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (149 samples, 0.14%)</title><rect x="99.1206%" y="805" width="0.1392%" height="15" fill="rgb(215,86,45)"/><text x="99.3706%" y="815.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::next_task::{{closure}} (142 samples, 0.13%)</title><rect x="99.1271%" y="789" width="0.1327%" height="15" fill="rgb(242,169,11)"/><text x="99.3771%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (55 samples, 0.05%)</title><rect x="99.2813%" y="741" width="0.0514%" height="15" fill="rgb(211,213,45)"/><text x="99.5313%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (55 samples, 0.05%)</title><rect x="99.2813%" y="725" width="0.0514%" height="15" fill="rgb(205,88,11)"/><text x="99.5313%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (29 samples, 0.03%)</title><rect x="99.3327%" y="741" width="0.0271%" height="15" fill="rgb(252,69,26)"/><text x="99.5827%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_load (29 samples, 0.03%)</title><rect x="99.3327%" y="725" width="0.0271%" height="15" fill="rgb(246,123,37)"/><text x="99.5827%" y="735.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::next_task (404 samples, 0.38%)</title><rect x="98.9907%" y="821" width="0.3776%" height="15" fill="rgb(212,205,5)"/><text x="99.2407%" y="831.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::next_local_task (115 samples, 0.11%)</title><rect x="99.2608%" y="805" width="0.1075%" height="15" fill="rgb(253,148,0)"/><text x="99.5108%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (115 samples, 0.11%)</title><rect x="99.2608%" y="789" width="0.1075%" height="15" fill="rgb(239,22,4)"/><text x="99.5108%" y="799.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::next_local_task::{{closure}} (110 samples, 0.10%)</title><rect x="99.2654%" y="773" width="0.1028%" height="15" fill="rgb(226,26,53)"/><text x="99.5154%" y="783.50"></text></g><g><title>tokio::runtime::queue::Local&lt;T&gt;::pop (110 samples, 0.10%)</title><rect x="99.2654%" y="757" width="0.1028%" height="15" fill="rgb(225,229,45)"/><text x="99.5154%" y="767.50"></text></g><g><title>tokio::runtime::queue::Inject&lt;T&gt;::pop (11 samples, 0.01%)</title><rect x="99.5187%" y="805" width="0.0103%" height="15" fill="rgb(220,60,37)"/><text x="99.7687%" y="815.50"></text></g><g><title>core::num::&lt;impl u16&gt;::wrapping_sub (22 samples, 0.02%)</title><rect x="99.5524%" y="789" width="0.0206%" height="15" fill="rgb(217,180,35)"/><text x="99.8024%" y="799.50"></text></g><g><title>tokio::loom::std::atomic_u16::AtomicU16::unsync_load (23 samples, 0.02%)</title><rect x="99.5729%" y="789" width="0.0215%" height="15" fill="rgb(229,7,53)"/><text x="99.8229%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (115 samples, 0.11%)</title><rect x="99.6804%" y="773" width="0.1075%" height="15" fill="rgb(254,137,3)"/><text x="99.9304%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_load (115 samples, 0.11%)</title><rect x="99.6804%" y="757" width="0.1075%" height="15" fill="rgb(215,140,41)"/><text x="99.9304%" y="767.50"></text></g><g><title>tokio::runtime::queue::Steal&lt;T&gt;::steal_into (307 samples, 0.29%)</title><rect x="99.5290%" y="805" width="0.2869%" height="15" fill="rgb(250,80,15)"/><text x="99.7790%" y="815.50"></text></g><g><title>tokio::runtime::queue::Steal&lt;T&gt;::steal_into2 (237 samples, 0.22%)</title><rect x="99.5944%" y="789" width="0.2215%" height="15" fill="rgb(252,191,6)"/><text x="99.8444%" y="799.50"></text></g><g><title>tokio::runtime::queue::unpack (29 samples, 0.03%)</title><rect x="99.7888%" y="773" width="0.0271%" height="15" fill="rgb(246,217,18)"/><text x="100.0388%" y="783.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::transition_to_searching (93 samples, 0.09%)</title><rect x="99.8159%" y="805" width="0.0869%" height="15" fill="rgb(223,93,7)"/><text x="100.0659%" y="815.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::transition_worker_to_searching (91 samples, 0.09%)</title><rect x="99.8178%" y="789" width="0.0850%" height="15" fill="rgb(225,55,52)"/><text x="100.0678%" y="799.50"></text></g><g><title>tokio::runtime::thread_pool::idle::State::inc_num_searching (88 samples, 0.08%)</title><rect x="99.8206%" y="773" width="0.0822%" height="15" fill="rgb(240,31,24)"/><text x="100.0706%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (88 samples, 0.08%)</title><rect x="99.8206%" y="757" width="0.0822%" height="15" fill="rgb(205,56,52)"/><text x="100.0706%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_add (88 samples, 0.08%)</title><rect x="99.8206%" y="741" width="0.0822%" height="15" fill="rgb(246,146,12)"/><text x="100.0706%" y="751.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::steal_work (581 samples, 0.54%)</title><rect x="99.3682%" y="821" width="0.5430%" height="15" fill="rgb(239,84,36)"/><text x="99.6182%" y="831.50"></text></g><g><title>std::panic::catch_unwind (35,268 samples, 32.96%)</title><rect x="66.9582%" y="1253" width="32.9595%" height="15" fill="rgb(207,41,40)"/><text x="67.2082%" y="1263.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (35,268 samples, 32.96%)</title><rect x="66.9582%" y="1237" width="32.9595%" height="15" fill="rgb(241,179,25)"/><text x="67.2082%" y="1247.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (35,268 samples, 32.96%)</title><rect x="66.9582%" y="1221" width="32.9595%" height="15" fill="rgb(210,0,34)"/><text x="67.2082%" y="1231.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (35,268 samples, 32.96%)</title><rect x="66.9582%" y="1205" width="32.9595%" height="15" fill="rgb(225,217,29)"/><text x="67.2082%" y="1215.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::functi..</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (35,268 samples, 32.96%)</title><rect x="66.9582%" y="1189" width="32.9595%" height="15" fill="rgb(216,191,38)"/><text x="67.2082%" y="1199.50">std::thread::Builder::spawn_unchecked::{{closure}}::{..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (35,268 samples, 32.96%)</title><rect x="66.9582%" y="1173" width="32.9595%" height="15" fill="rgb(232,140,52)"/><text x="67.2082%" y="1183.50">std::sys_common::backtrace::__rust_begin_short_backtr..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (35,268 samples, 32.96%)</title><rect x="66.9582%" y="1157" width="32.9595%" height="15" fill="rgb(223,158,51)"/><text x="67.2082%" y="1167.50">tokio::runtime::blocking::pool::Spawner::spawn_thread..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (35,268 samples, 32.96%)</title><rect x="66.9582%" y="1141" width="32.9595%" height="15" fill="rgb(235,29,51)"/><text x="67.2082%" y="1151.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (35,252 samples, 32.94%)</title><rect x="66.9732%" y="1125" width="32.9446%" height="15" fill="rgb(215,181,18)"/><text x="67.2232%" y="1135.50">tokio::runtime::task::Notified&lt;S&gt;::run</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (35,252 samples, 32.94%)</title><rect x="66.9732%" y="1109" width="32.9446%" height="15" fill="rgb(227,125,34)"/><text x="67.2232%" y="1119.50">tokio::runtime::task::raw::RawTask::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (35,252 samples, 32.94%)</title><rect x="66.9732%" y="1093" width="32.9446%" height="15" fill="rgb(230,197,49)"/><text x="67.2232%" y="1103.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (35,252 samples, 32.94%)</title><rect x="66.9732%" y="1077" width="32.9446%" height="15" fill="rgb(239,141,16)"/><text x="67.2232%" y="1087.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inn..</text></g><g><title>tokio::runtime::task::harness::poll_future (35,252 samples, 32.94%)</title><rect x="66.9732%" y="1061" width="32.9446%" height="15" fill="rgb(225,105,43)"/><text x="67.2232%" y="1071.50">tokio::runtime::task::harness::poll_future</text></g><g><title>std::panic::catch_unwind (35,252 samples, 32.94%)</title><rect x="66.9732%" y="1045" width="32.9446%" height="15" fill="rgb(214,131,14)"/><text x="67.2232%" y="1055.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (35,252 samples, 32.94%)</title><rect x="66.9732%" y="1029" width="32.9446%" height="15" fill="rgb(229,177,11)"/><text x="67.2232%" y="1039.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (35,252 samples, 32.94%)</title><rect x="66.9732%" y="1013" width="32.9446%" height="15" fill="rgb(231,180,14)"/><text x="67.2232%" y="1023.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (35,252 samples, 32.94%)</title><rect x="66.9732%" y="997" width="32.9446%" height="15" fill="rgb(232,88,2)"/><text x="67.2232%" y="1007.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::functi..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (35,252 samples, 32.94%)</title><rect x="66.9732%" y="981" width="32.9446%" height="15" fill="rgb(205,220,8)"/><text x="67.2232%" y="991.50">tokio::runtime::task::harness::poll_future::{{closure..</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (35,252 samples, 32.94%)</title><rect x="66.9732%" y="965" width="32.9446%" height="15" fill="rgb(225,23,53)"/><text x="67.2232%" y="975.50">tokio::runtime::task::core::CoreStage&lt;T&gt;::poll</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (35,252 samples, 32.94%)</title><rect x="66.9732%" y="949" width="32.9446%" height="15" fill="rgb(213,62,29)"/><text x="67.2232%" y="959.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (35,252 samples, 32.94%)</title><rect x="66.9732%" y="933" width="32.9446%" height="15" fill="rgb(227,75,7)"/><text x="67.2232%" y="943.50">tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{clo..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (35,252 samples, 32.94%)</title><rect x="66.9732%" y="917" width="32.9446%" height="15" fill="rgb(207,105,14)"/><text x="67.2232%" y="927.50">&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as c..</text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (35,252 samples, 32.94%)</title><rect x="66.9732%" y="901" width="32.9446%" height="15" fill="rgb(245,62,29)"/><text x="67.2232%" y="911.50">tokio::runtime::thread_pool::worker::Launch::launch::..</text></g><g><title>tokio::runtime::thread_pool::worker::run (35,252 samples, 32.94%)</title><rect x="66.9732%" y="885" width="32.9446%" height="15" fill="rgb(236,202,4)"/><text x="67.2232%" y="895.50">tokio::runtime::thread_pool::worker::run</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (35,252 samples, 32.94%)</title><rect x="66.9732%" y="869" width="32.9446%" height="15" fill="rgb(250,67,1)"/><text x="67.2232%" y="879.50">tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (35,252 samples, 32.94%)</title><rect x="66.9732%" y="853" width="32.9446%" height="15" fill="rgb(253,115,44)"/><text x="67.2232%" y="863.50">tokio::runtime::thread_pool::worker::run::{{closure}}</text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (35,252 samples, 32.94%)</title><rect x="66.9732%" y="837" width="32.9446%" height="15" fill="rgb(251,139,18)"/><text x="67.2232%" y="847.50">tokio::runtime::thread_pool::worker::Context::run</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (35,272 samples, 32.96%)</title><rect x="66.9573%" y="1317" width="32.9633%" height="15" fill="rgb(218,22,32)"/><text x="67.2073%" y="1327.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnc..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (35,272 samples, 32.96%)</title><rect x="66.9573%" y="1301" width="32.9633%" height="15" fill="rgb(243,53,5)"/><text x="67.2073%" y="1311.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnc..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (35,272 samples, 32.96%)</title><rect x="66.9573%" y="1285" width="32.9633%" height="15" fill="rgb(227,56,16)"/><text x="67.2073%" y="1295.50">core::ops::function::FnOnce::call_once{{vtable-shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (35,272 samples, 32.96%)</title><rect x="66.9573%" y="1269" width="32.9633%" height="15" fill="rgb(245,53,0)"/><text x="67.2073%" y="1279.50">std::thread::Builder::spawn_unchecked::{{closure}}</text></g><g><title>clone (35,280 samples, 32.97%)</title><rect x="66.9508%" y="1365" width="32.9707%" height="15" fill="rgb(216,170,35)"/><text x="67.2008%" y="1375.50">clone</text></g><g><title>start_thread (35,280 samples, 32.97%)</title><rect x="66.9508%" y="1349" width="32.9707%" height="15" fill="rgb(211,200,8)"/><text x="67.2008%" y="1359.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (35,273 samples, 32.96%)</title><rect x="66.9573%" y="1333" width="32.9642%" height="15" fill="rgb(228,204,44)"/><text x="67.2073%" y="1343.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send (14 samples, 0.01%)</title><rect x="99.9850%" y="1365" width="0.0131%" height="15" fill="rgb(214,121,17)"/><text x="100.2350%" y="1375.50"></text></g><g><title>all (107,004 samples, 100%)</title><rect x="0.0000%" y="1397" width="100.0000%" height="15" fill="rgb(233,64,38)"/><text x="0.2500%" y="1407.50"></text></g><g><title>tokio-runtime-w (70,658 samples, 66.03%)</title><rect x="33.9670%" y="1381" width="66.0330%" height="15" fill="rgb(253,54,19)"/><text x="34.2170%" y="1391.50">tokio-runtime-w</text></g></svg></svg>